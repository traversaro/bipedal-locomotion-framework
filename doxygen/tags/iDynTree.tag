<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>AccelerometerSensor.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/sensors/src/</path>
    <filename>AccelerometerSensor_8cpp</filename>
    <includes id="LinearMotionVector3_8h" name="LinearMotionVector3.h" local="yes" imported="no">iDynTree/Core/LinearMotionVector3.h</includes>
    <includes id="AccelerometerSensor_8h" name="AccelerometerSensor.h" local="yes" imported="no">iDynTree/Sensors/AccelerometerSensor.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="yes" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="SpatialAcc_8h" name="SpatialAcc.h" local="yes" imported="no">iDynTree/Core/SpatialAcc.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="yes" imported="no">iDynTree/Core/Twist.h</includes>
    <class kind="struct">iDynTree::AccelerometerSensor::AccelerometerPrivateAttributes</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>AccelerometerSensor.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/sensors/include/iDynTree/Sensors/</path>
    <filename>AccelerometerSensor_8h</filename>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <class kind="class">iDynTree::AccelerometerSensor</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>AlglibInterface.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>AlglibInterface_8cpp</filename>
    <includes id="AlglibInterface_8h" name="AlglibInterface.h" local="no" imported="no">iDynTree/Optimizers/AlglibInterface.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <class kind="struct">iDynTree::optimization::ConstraintInfo</class>
    <class kind="struct">iDynTree::optimization::SharedData</class>
    <class kind="class">iDynTree::optimization::AlglibInterface::AlglibInterfaceImplementation</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimization</namespace>
    <member kind="function">
      <type>void</type>
      <name>ALGLIB_NLP</name>
      <anchorfile>namespaceiDynTree_1_1optimization.html</anchorfile>
      <anchor>af75a0e413077094a9d78079760c3fa80</anchor>
      <arglist>(const alglib::real_1d_array &amp;x, alglib::real_1d_array &amp;fi, alglib::real_2d_array &amp;jac, void *ptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AlglibInterface.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/Optimizers/</path>
    <filename>AlglibInterface_8h</filename>
    <includes id="Optimizer_8h" name="Optimizer.h" local="no" imported="no">iDynTree/Optimizer.h</includes>
    <class kind="class">iDynTree::optimization::AlglibInterface</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimization</namespace>
  </compound>
  <compound kind="file">
    <name>AlglibInterfaceNotImplemented.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>AlglibInterfaceNotImplemented_8cpp</filename>
    <includes id="AlglibInterface_8h" name="AlglibInterface.h" local="no" imported="no">iDynTree/Optimizers/AlglibInterface.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
  </compound>
  <compound kind="file">
    <name>AllSensorsTypes.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/sensors/include/iDynTree/Sensors/</path>
    <filename>AllSensorsTypes_8h</filename>
    <includes id="SixAxisForceTorqueSensor_8h" name="SixAxisForceTorqueSensor.h" local="no" imported="no">iDynTree/Sensors/SixAxisForceTorqueSensor.h</includes>
    <includes id="AccelerometerSensor_8h" name="AccelerometerSensor.h" local="no" imported="no">iDynTree/Sensors/AccelerometerSensor.h</includes>
    <includes id="GyroscopeSensor_8h" name="GyroscopeSensor.h" local="no" imported="no">iDynTree/Sensors/GyroscopeSensor.h</includes>
    <includes id="ThreeAxisAngularAccelerometerSensor_8h" name="ThreeAxisAngularAccelerometerSensor.h" local="no" imported="no">iDynTree/Sensors/ThreeAxisAngularAccelerometerSensor.h</includes>
    <includes id="ThreeAxisForceTorqueContactSensor_8h" name="ThreeAxisForceTorqueContactSensor.h" local="no" imported="no">iDynTree/Sensors/ThreeAxisForceTorqueContactSensor.h</includes>
  </compound>
  <compound kind="file">
    <name>AngularForceVector3.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>AngularForceVector3_8cpp</filename>
    <includes id="AngularForceVector3_8h" name="AngularForceVector3.h" local="no" imported="no">iDynTree/Core/AngularForceVector3.h</includes>
    <includes id="LinearForceVector3_8h" name="LinearForceVector3.h" local="no" imported="no">iDynTree/Core/LinearForceVector3.h</includes>
    <includes id="Position_8h" name="Position.h" local="no" imported="no">iDynTree/Core/Position.h</includes>
    <includes id="PrivatePreProcessorUtils_8h" name="PrivatePreProcessorUtils.h" local="no" imported="no">iDynTree/Core/PrivatePreProcessorUtils.h</includes>
    <includes id="PrivateSemanticsMacros_8h" name="PrivateSemanticsMacros.h" local="no" imported="no">iDynTree/Core/PrivateSemanticsMacros.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 1 &gt;</type>
      <name>Vector3d</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4cdc8b6ec19f8a7bbe8b98baafc97ff5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AngularForceVector3.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>AngularForceVector3_8h</filename>
    <includes id="ForceVector3_8h" name="ForceVector3.h" local="no" imported="no">iDynTree/Core/ForceVector3.h</includes>
    <includes id="PrivateMotionForceVertorAssociations_8h" name="PrivateMotionForceVertorAssociations.h" local="no" imported="no">iDynTree/Core/PrivateMotionForceVertorAssociations.h</includes>
    <class kind="class">iDynTree::AngularForceVector3Semantics</class>
    <class kind="class">iDynTree::AngularForceVector3</class>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>AngularForceVector3</type>
      <name>AngMomentum</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a55b4eeede0026f5a9ff630bf0e185f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularForceVector3</type>
      <name>Torque</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6201e5c8d3cc72533773d11302674f5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AngularMotionVector3.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>AngularMotionVector3_8cpp</filename>
    <includes id="AngularMotionVector3_8h" name="AngularMotionVector3.h" local="no" imported="no">iDynTree/Core/AngularMotionVector3.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>AngularMotionVector3.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>AngularMotionVector3_8h</filename>
    <includes id="MotionVector3_8h" name="MotionVector3.h" local="no" imported="no">iDynTree/Core/MotionVector3.h</includes>
    <includes id="PrivateMotionForceVertorAssociations_8h" name="PrivateMotionForceVertorAssociations.h" local="no" imported="no">iDynTree/Core/PrivateMotionForceVertorAssociations.h</includes>
    <class kind="class">iDynTree::AngularMotionVector3Semantics</class>
    <class kind="class">iDynTree::AngularMotionVector3</class>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>AngularMotionVector3</type>
      <name>AngVelocity</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a303a7b672a9817d74c5a6279fbfe5e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularMotionVector3</type>
      <name>AngAcceleration</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>adb7dac766ffa576a0213970d650eda15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ArticulatedBodyInertia.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>ArticulatedBodyInertia_8cpp</filename>
    <includes id="ArticulatedBodyInertia_8h" name="ArticulatedBodyInertia.h" local="no" imported="no">iDynTree/Core/ArticulatedBodyInertia.h</includes>
    <includes id="SpatialInertia_8h" name="SpatialInertia.h" local="no" imported="no">iDynTree/Core/SpatialInertia.h</includes>
    <includes id="SpatialAcc_8h" name="SpatialAcc.h" local="no" imported="no">iDynTree/Core/SpatialAcc.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="no" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 3, Eigen::RowMajor &gt;</type>
      <name>Matrix3dRowMajor</name>
      <anchorfile>ArticulatedBodyInertia_8cpp.html</anchorfile>
      <anchor>ad4c7dfb28280dff3aa927eb28a2a3fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 6, 6, Eigen::RowMajor &gt;</type>
      <name>Matrix6dRowMajor</name>
      <anchorfile>ArticulatedBodyInertia_8cpp.html</anchorfile>
      <anchor>a660dcea359b4826e875daddeabfc6efc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; typename Derived::Scalar, 3, 3 &gt;</type>
      <name>mySkewABI</name>
      <anchorfile>ArticulatedBodyInertia_8cpp.html</anchorfile>
      <anchor>a4e8f72515ce7b71a3916902c170d19d1</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;vec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ArticulatedBodyInertia.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>ArticulatedBodyInertia_8h</filename>
    <includes id="MatrixFixSize_8h" name="MatrixFixSize.h" local="no" imported="no">iDynTree/Core/MatrixFixSize.h</includes>
    <class kind="class">iDynTree::ArticulatedBodyInertia</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>AttitudeEstimator.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/src/</path>
    <filename>AttitudeEstimator_8cpp</filename>
    <includes id="AttitudeEstimator_8h" name="AttitudeEstimator.h" local="no" imported="no">iDynTree/Estimation/AttitudeEstimator.h</includes>
  </compound>
  <compound kind="file">
    <name>AttitudeEstimator.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/include/iDynTree/Estimation/</path>
    <filename>AttitudeEstimator_8h</filename>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="Rotation_8h" name="Rotation.h" local="no" imported="no">iDynTree/Core/Rotation.h</includes>
    <class kind="struct">iDynTree::AttitudeEstimatorState</class>
    <class kind="class">iDynTree::IAttitudeEstimator</class>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>iDynTree::Vector3</type>
      <name>LinearAccelerometerMeasurements</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>adcfa60b3d3580f517fd47c8864534b36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iDynTree::Vector3</type>
      <name>GyroscopeMeasurements</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a94dcb1f9c90a22269981469e229ed6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iDynTree::Vector3</type>
      <name>MagnetometerMeasurements</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad170eb4fd0bd13bfb0bdbdb6460d28bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iDynTree::Vector4</type>
      <name>UnitQuaternion</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8953e202971beb38867767ab9f002c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iDynTree::Vector3</type>
      <name>RPY</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a48e2955e462d28103d57a10634d0654d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AttitudeEstimatorUtils.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/src/</path>
    <filename>AttitudeEstimatorUtils_8cpp</filename>
    <includes id="AttitudeEstimatorUtils_8h" name="AttitudeEstimatorUtils.h" local="no" imported="no">iDynTree/Estimation/AttitudeEstimatorUtils.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>checkValidMeasurement</name>
      <anchorfile>AttitudeEstimatorUtils_8cpp.html</anchorfile>
      <anchor>a0230cf20ab367604a0aafb70a21d6733</anchor>
      <arglist>(const iDynTree::Vector3 &amp;in, const std::string &amp;measurement_type, bool check_also_zero_vector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUnitVector</name>
      <anchorfile>AttitudeEstimatorUtils_8cpp.html</anchorfile>
      <anchor>a5178baddf6f11f110fb923bc97d82d2d</anchor>
      <arglist>(const iDynTree::Vector3 &amp;in, iDynTree::Vector3 &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVectorNaN</name>
      <anchorfile>AttitudeEstimatorUtils_8cpp.html</anchorfile>
      <anchor>a699bd96c30f376d8a7faae5851cae0a7</anchor>
      <arglist>(const iDynTree::Vector3 &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZeroVector</name>
      <anchorfile>AttitudeEstimatorUtils_8cpp.html</anchorfile>
      <anchor>a369c58aadb5e813e34fc5f4c36c017d2</anchor>
      <arglist>(const iDynTree::Vector3 &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Vector3</type>
      <name>crossVector</name>
      <anchorfile>AttitudeEstimatorUtils_8cpp.html</anchorfile>
      <anchor>a60120ce6e1d4c5d9d436539c43d248e6</anchor>
      <arglist>(const iDynTree::Vector3 &amp;a, const iDynTree::Vector3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Matrix3x3</type>
      <name>mapR3Toso3</name>
      <anchorfile>AttitudeEstimatorUtils_8cpp.html</anchorfile>
      <anchor>a810ee43797b075ff113b46c0b83796d5</anchor>
      <arglist>(const iDynTree::Vector3 &amp;omega)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkSkewSymmetricity</name>
      <anchorfile>AttitudeEstimatorUtils_8cpp.html</anchorfile>
      <anchor>ae22926f6b4098d795734502bfa284aff</anchor>
      <arglist>(const iDynTree::Matrix3x3 &amp;S)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Vector3</type>
      <name>mapso3ToR3</name>
      <anchorfile>AttitudeEstimatorUtils_8cpp.html</anchorfile>
      <anchor>a21e08ef1e6279fa81e33468facdbc24a</anchor>
      <arglist>(const iDynTree::Matrix3x3 &amp;S)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>innerProduct</name>
      <anchorfile>AttitudeEstimatorUtils_8cpp.html</anchorfile>
      <anchor>af41407a33c41a87b444c0fc9787931f6</anchor>
      <arglist>(const iDynTree::Vector3 a, const iDynTree::Vector3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>realPartOfQuaternion</name>
      <anchorfile>AttitudeEstimatorUtils_8cpp.html</anchorfile>
      <anchor>a90daeae8e2532a8ae7050e5ebb8f61b0</anchor>
      <arglist>(const iDynTree::UnitQuaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Vector3</type>
      <name>imaginaryPartOfQuaternion</name>
      <anchorfile>AttitudeEstimatorUtils_8cpp.html</anchorfile>
      <anchor>aac516e29ad4cc16ee76d893e1c30e5f3</anchor>
      <arglist>(const iDynTree::UnitQuaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::UnitQuaternion</type>
      <name>composeQuaternion</name>
      <anchorfile>AttitudeEstimatorUtils_8cpp.html</anchorfile>
      <anchor>a30f089bca8ac777bfe5ba8a8c9cb307f</anchor>
      <arglist>(const iDynTree::UnitQuaternion &amp;q1, const iDynTree::UnitQuaternion &amp;q2)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Matrix4x4</type>
      <name>mapofYQuaternionToXYQuaternion</name>
      <anchorfile>AttitudeEstimatorUtils_8cpp.html</anchorfile>
      <anchor>ad255b29a213a4fd592cc477d5dbcc69f</anchor>
      <arglist>(const iDynTree::UnitQuaternion &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::UnitQuaternion</type>
      <name>composeQuaternion2</name>
      <anchorfile>AttitudeEstimatorUtils_8cpp.html</anchorfile>
      <anchor>ac3a55749e53def532d0d57cd65fed0e9</anchor>
      <arglist>(const iDynTree::UnitQuaternion &amp;q1, const iDynTree::UnitQuaternion &amp;q2)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::UnitQuaternion</type>
      <name>pureQuaternion</name>
      <anchorfile>AttitudeEstimatorUtils_8cpp.html</anchorfile>
      <anchor>a93d8da10e25cbcc68155424bed93b590</anchor>
      <arglist>(const iDynTree::Vector3 &amp;bodyFixedFrameVelocityInInertialFrame)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkDoublesApproximatelyEqual</name>
      <anchorfile>AttitudeEstimatorUtils_8cpp.html</anchorfile>
      <anchor>a86e2d13f70d68a49c7dd41ea50082fed</anchor>
      <arglist>(double val1, double val2, double tol)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AttitudeEstimatorUtils.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/include/iDynTree/Estimation/</path>
    <filename>AttitudeEstimatorUtils_8h</filename>
    <includes id="AttitudeEstimator_8h" name="AttitudeEstimator.h" local="no" imported="no">iDynTree/Estimation/AttitudeEstimator.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>_USE_MATH_DEFINES</name>
      <anchorfile>AttitudeEstimatorUtils_8h.html</anchorfile>
      <anchor>a525335710b53cb064ca56b936120431e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkValidMeasurement</name>
      <anchorfile>AttitudeEstimatorUtils_8h.html</anchorfile>
      <anchor>a0230cf20ab367604a0aafb70a21d6733</anchor>
      <arglist>(const iDynTree::Vector3 &amp;in, const std::string &amp;measurement_type, bool check_also_zero_vector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUnitVector</name>
      <anchorfile>AttitudeEstimatorUtils_8h.html</anchorfile>
      <anchor>a5178baddf6f11f110fb923bc97d82d2d</anchor>
      <arglist>(const iDynTree::Vector3 &amp;in, iDynTree::Vector3 &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVectorNaN</name>
      <anchorfile>AttitudeEstimatorUtils_8h.html</anchorfile>
      <anchor>a699bd96c30f376d8a7faae5851cae0a7</anchor>
      <arglist>(const iDynTree::Vector3 &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZeroVector</name>
      <anchorfile>AttitudeEstimatorUtils_8h.html</anchorfile>
      <anchor>a369c58aadb5e813e34fc5f4c36c017d2</anchor>
      <arglist>(const iDynTree::Vector3 &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Vector3</type>
      <name>crossVector</name>
      <anchorfile>AttitudeEstimatorUtils_8h.html</anchorfile>
      <anchor>a60120ce6e1d4c5d9d436539c43d248e6</anchor>
      <arglist>(const iDynTree::Vector3 &amp;a, const iDynTree::Vector3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkSkewSymmetricity</name>
      <anchorfile>AttitudeEstimatorUtils_8h.html</anchorfile>
      <anchor>ae22926f6b4098d795734502bfa284aff</anchor>
      <arglist>(const iDynTree::Matrix3x3 &amp;S)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AttitudeMahonyFilter.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/src/</path>
    <filename>AttitudeMahonyFilter_8cpp</filename>
    <includes id="AttitudeMahonyFilter_8h" name="AttitudeMahonyFilter.h" local="no" imported="no">iDynTree/Estimation/AttitudeMahonyFilter.h</includes>
    <includes id="AttitudeEstimatorUtils_8h" name="AttitudeEstimatorUtils.h" local="no" imported="no">iDynTree/Estimation/AttitudeEstimatorUtils.h</includes>
    <member kind="function">
      <type>iDynTree::Matrix3x3</type>
      <name>getMatrixFromVectorVectorMultiplication</name>
      <anchorfile>AttitudeMahonyFilter_8cpp.html</anchorfile>
      <anchor>a2c967ab7c2766bfab14b5efbd1a67d36</anchor>
      <arglist>(iDynTree::Vector3 a, iDynTree::Vector3 b)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Matrix3x3</type>
      <name>getAngVelSkewSymmetricMatrixFromMeasurements</name>
      <anchorfile>AttitudeMahonyFilter_8cpp.html</anchorfile>
      <anchor>aa57b8fba8954fb2d1b456b8177519101</anchor>
      <arglist>(iDynTree::Vector3 meas, const iDynTree::Direction &amp;vectorDir, double confidenceMeas, const iDynTree::Rotation &amp;R)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AttitudeMahonyFilter.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/include/iDynTree/Estimation/</path>
    <filename>AttitudeMahonyFilter_8h</filename>
    <includes id="AttitudeEstimator_8h" name="AttitudeEstimator.h" local="no" imported="no">iDynTree/Estimation/AttitudeEstimator.h</includes>
    <includes id="Direction_8h" name="Direction.h" local="no" imported="no">iDynTree/Core/Direction.h</includes>
    <class kind="struct">iDynTree::AttitudeMahonyFilterParameters</class>
    <class kind="class">iDynTree::AttitudeMahonyFilter</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>AttitudeQuaternionEKF.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/src/</path>
    <filename>AttitudeQuaternionEKF_8cpp</filename>
    <includes id="AttitudeQuaternionEKF_8h" name="AttitudeQuaternionEKF.h" local="no" imported="no">iDynTree/Estimation/AttitudeQuaternionEKF.h</includes>
    <includes id="AttitudeEstimatorUtils_8h" name="AttitudeEstimatorUtils.h" local="no" imported="no">iDynTree/Estimation/AttitudeEstimatorUtils.h</includes>
  </compound>
  <compound kind="file">
    <name>AttitudeQuaternionEKF.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/include/iDynTree/Estimation/</path>
    <filename>AttitudeQuaternionEKF_8h</filename>
    <includes id="AttitudeEstimator_8h" name="AttitudeEstimator.h" local="no" imported="no">iDynTree/Estimation/AttitudeEstimator.h</includes>
    <includes id="ExtendedKalmanFilter_8h" name="ExtendedKalmanFilter.h" local="no" imported="no">iDynTree/Estimation/ExtendedKalmanFilter.h</includes>
    <includes id="Direction_8h" name="Direction.h" local="no" imported="no">iDynTree/Core/Direction.h</includes>
    <class kind="struct">iDynTree::AttitudeQuaternionEKFParameters</class>
    <class kind="class">iDynTree::AttitudeQuaternionEKF</class>
    <namespace>iDynTree</namespace>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>output_dimensions_with_magnetometer</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0dd93cfe8edb7763d1f57d6454c1c25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>output_dimensions_without_magnetometer</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8772fb8ad891bd276db791f2e815de11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>input_dimensions</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae4a3a4ece8b00835bf57f387795ba015</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Axis.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>Axis_8cpp</filename>
    <includes id="Axis_8h" name="Axis.h" local="no" imported="no">iDynTree/Core/Axis.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="TransformDerivative_8h" name="TransformDerivative.h" local="no" imported="no">iDynTree/Core/TransformDerivative.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="no" imported="no">iDynTree/Core/Twist.h</includes>
    <includes id="SpatialAcc_8h" name="SpatialAcc.h" local="no" imported="no">iDynTree/Core/SpatialAcc.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Axis.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>Axis_8h</filename>
    <includes id="Direction_8h" name="Direction.h" local="no" imported="no">iDynTree/Core/Direction.h</includes>
    <includes id="Position_8h" name="Position.h" local="no" imported="no">iDynTree/Core/Position.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <class kind="class">iDynTree::Axis</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>baseDynamicsRegressor.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/src/</path>
    <filename>baseDynamicsRegressor_8cpp</filename>
    <includes id="dirl__utils_8hpp" name="dirl_utils.hpp" local="yes" imported="no">kdl_codyco/regressors/dirl_utils.hpp</includes>
    <includes id="baseDynamicsRegressor_8hpp" name="baseDynamicsRegressor.hpp" local="yes" imported="no">baseDynamicsRegressor.hpp</includes>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
  </compound>
  <compound kind="file">
    <name>baseDynamicsRegressor.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/include/kdl_codyco/regressors/</path>
    <filename>baseDynamicsRegressor_8hpp</filename>
    <includes id="dynamicRegressorInterface_8hpp" name="dynamicRegressorInterface.hpp" local="yes" imported="no">dynamicRegressorInterface.hpp</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <class kind="class">KDL::CoDyCo::Regressors::baseDynamicsRegressor</class>
    <namespace>iDynTree</namespace>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
  </compound>
  <compound kind="file">
    <name>BerdyHelper.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/src/</path>
    <filename>BerdyHelper_8cpp</filename>
    <includes id="BerdyHelper_8h" name="BerdyHelper.h" local="no" imported="no">iDynTree/Estimation/BerdyHelper.h</includes>
    <includes id="ClassicalAcc_8h" name="ClassicalAcc.h" local="no" imported="no">iDynTree/Core/ClassicalAcc.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="SparseMatrix_8h" name="SparseMatrix.h" local="no" imported="no">iDynTree/Core/SparseMatrix.h</includes>
    <includes id="ForwardKinematics_8h" name="ForwardKinematics.h" local="no" imported="no">iDynTree/Model/ForwardKinematics.h</includes>
    <includes id="Dynamics_8h" name="Dynamics.h" local="no" imported="no">iDynTree/Model/Dynamics.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <includes id="AllSensorsTypes_8h" name="AllSensorsTypes.h" local="no" imported="no">iDynTree/Sensors/AllSensorsTypes.h</includes>
    <includes id="ExternalWrenchesEstimation_8h" name="ExternalWrenchesEstimation.h" local="no" imported="no">iDynTree/Estimation/ExternalWrenchesEstimation.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>isJointBerdyDynamicVariable</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1d21c6d1ea587b6ed88d52bdf43fcf8b</anchor>
      <arglist>(const BerdyDynamicVariablesTypes dynamicVariableType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinkBerdyDynamicVariable</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a39f8730ab92b19678c82e418b8c0f2a3</anchor>
      <arglist>(const BerdyDynamicVariablesTypes dynamicVariableType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDOFBerdyDynamicVariable</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a517a9e2101a59831cf912d8559b4900c</anchor>
      <arglist>(const BerdyDynamicVariablesTypes dynamicVariableType)</arglist>
    </member>
    <member kind="function">
      <type>TraversalIndex</type>
      <name>getTraversalIndexFromJointIndex</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a351538e7a6c90a31c48b7a74b9452f39</anchor>
      <arglist>(const Model &amp;m_model, const Traversal &amp;m_traversal, const JointIndex idx)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BerdyHelper.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/include/iDynTree/Estimation/</path>
    <filename>BerdyHelper_8h</filename>
    <includes id="Direction_8h" name="Direction.h" local="no" imported="no">iDynTree/Core/Direction.h</includes>
    <includes id="Position_8h" name="Position.h" local="no" imported="no">iDynTree/Core/Position.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="Triplets_8h" name="Triplets.h" local="no" imported="no">iDynTree/Core/Triplets.h</includes>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="FreeFloatingState_8h" name="FreeFloatingState.h" local="no" imported="no">iDynTree/Model/FreeFloatingState.h</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <includes id="LinkTraversalsCache_8h" name="LinkTraversalsCache.h" local="no" imported="no">iDynTree/Model/LinkTraversalsCache.h</includes>
    <class kind="struct">iDynTree::BerdyOptions</class>
    <class kind="struct">iDynTree::BerdySensor</class>
    <class kind="struct">iDynTree::BerdyDynamicVariable</class>
    <class kind="class">iDynTree::BerdyHelper</class>
    <namespace>iDynTree</namespace>
    <member kind="enumeration">
      <type></type>
      <name>BerdyVariants</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ga62aff3167b9df327b4b1db6affadd21f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ORIGINAL_BERDY_FIXED_BASE</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga62aff3167b9df327b4b1db6affadd21faf59c4a22cd72d6e001dbba40910e9c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BERDY_FLOATING_BASE</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga62aff3167b9df327b4b1db6affadd21fa1ca580068ec7f491800abeadf68185e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BerdyDynamicVariablesTypes</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ga83d8f828969dabc7dc82904d8de15312</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_BODY_PROPER_ACCELERATION</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312a48b4b26b9b1780cc55a5cbc89c6f0d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NET_INT_AND_EXT_WRENCHES_ON_LINK_WITHOUT_GRAV</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312a4d8110167e729b4fd3a17147bcd1252e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOINT_WRENCH</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312adaecc7fb3d43b48487ae03dfec685fb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOF_TORQUE</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312a80199996cf9e8b7d5171d762533f6c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NET_EXT_WRENCH</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312aa13efb04f5c05ca865f2aee0fd03fe68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOF_ACCELERATION</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312a9a69ec4d25d83b00175dc3adb8edce00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_BODY_PROPER_CLASSICAL_ACCELERATION</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312ac2cfd7190c466bb19a532054700478dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BerdySensorTypes</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gab629c8d25391838124595ba8961654e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIX_AXIS_FORCE_TORQUE_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4aeb713f0bede28acb44bffd71c4c8b7c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCELEROMETER_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4a7735d104e1d0a81cd5cf6b4d4c6e280c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GYROSCOPE_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4a0057121dd88c26066f6ea316f78f7e97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREE_AXIS_ANGULAR_ACCELEROMETER_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4a959f2e93bc56ff32d8dc98a75bdaa0a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREE_AXIS_FORCE_TORQUE_CONTACT_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4a5bcadad8e7702de8f0dbcdbd5108d893</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOF_ACCELERATION_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4a3b05b1fa0daf40ead3bb45631fc1b425</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOF_TORQUE_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4afe52ea6ba4b27e76e1fd986700941151</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NET_EXT_WRENCH_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4aa295b9c16be05c81c215270381d2b648</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOINT_WRENCH_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4a207d61f7e8d81f6729f6dd080ba8a06c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinkBerdyDynamicVariable</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a39f8730ab92b19678c82e418b8c0f2a3</anchor>
      <arglist>(const BerdyDynamicVariablesTypes dynamicVariableType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isJointBerdyDynamicVariable</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1d21c6d1ea587b6ed88d52bdf43fcf8b</anchor>
      <arglist>(const BerdyDynamicVariablesTypes dynamicVariableType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDOFBerdyDynamicVariable</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a517a9e2101a59831cf912d8559b4900c</anchor>
      <arglist>(const BerdyDynamicVariablesTypes dynamicVariableType)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BerdySparseMAPSolver.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/src/</path>
    <filename>BerdySparseMAPSolver_8cpp</filename>
    <includes id="BerdySparseMAPSolver_8h" name="BerdySparseMAPSolver.h" local="yes" imported="no">iDynTree/Estimation/BerdySparseMAPSolver.h</includes>
    <includes id="BerdyHelper_8h" name="BerdyHelper.h" local="yes" imported="no">iDynTree/Estimation/BerdyHelper.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="SparseMatrix_8h" name="SparseMatrix.h" local="no" imported="no">iDynTree/Core/SparseMatrix.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="EigenSparseHelpers_8h" name="EigenSparseHelpers.h" local="no" imported="no">iDynTree/Core/EigenSparseHelpers.h</includes>
    <class kind="class">iDynTree::BerdySparseMAPSolver::BerdySparseMAPSolverPimpl</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>BerdySparseMAPSolver.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/include/iDynTree/Estimation/</path>
    <filename>BerdySparseMAPSolver_8h</filename>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <class kind="class">iDynTree::SparseMatrix</class>
    <class kind="class">iDynTree::BerdySparseMAPSolver</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>BipedFootContactClassifier.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/src/</path>
    <filename>BipedFootContactClassifier_8cpp</filename>
    <includes id="BipedFootContactClassifier_8h" name="BipedFootContactClassifier.h" local="yes" imported="no">iDynTree/Estimation/BipedFootContactClassifier.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>BipedFootContactClassifier.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/include/iDynTree/Estimation/</path>
    <filename>BipedFootContactClassifier_8h</filename>
    <includes id="ContactStateMachine_8h" name="ContactStateMachine.h" local="yes" imported="no">ContactStateMachine.h</includes>
    <class kind="class">iDynTree::BipedFootContactClassifier</class>
    <namespace>iDynTree</namespace>
    <member kind="enumeration">
      <type></type>
      <name>SwitchingPattern</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a87e9224ed19ef268687c0d2522048946</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALTERNATE_CONTACT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a87e9224ed19ef268687c0d2522048946a524b0c6a15e4d5b55f396a39e42ab305</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LATEST_ACTIVE_CONTACT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a87e9224ed19ef268687c0d2522048946ad1645067b3ead8a700e7551ff0af01d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEFAULT_CONTACT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a87e9224ed19ef268687c0d2522048946aa6e9a49639f39ee24e3fbafc4cee78f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoundingBoxHelpers.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/inverse-kinematics/src/</path>
    <filename>BoundingBoxHelpers_8cpp</filename>
    <includes id="BoundingBoxHelpers_8h" name="BoundingBoxHelpers.h" local="no" imported="no">iDynTree/BoundingBoxHelpers.h</includes>
    <includes id="Axis_8h" name="Axis.h" local="no" imported="no">iDynTree/Core/Axis.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>BoundingBoxHelpers.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/inverse-kinematics/include/iDynTree/</path>
    <filename>BoundingBoxHelpers_8h</filename>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="Position_8h" name="Position.h" local="no" imported="no">iDynTree/Core/Position.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="ConvexHullHelpers_8h" name="ConvexHullHelpers.h" local="no" imported="no">iDynTree/ConvexHullHelpers.h</includes>
    <class kind="class">iDynTree::BoundingBoxProjectionConstraint</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Camera.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/visualization/src/</path>
    <filename>Camera_8cpp</filename>
    <includes id="Camera_8h" name="Camera.h" local="yes" imported="no">Camera.h</includes>
    <includes id="IrrlichtUtils_8h" name="IrrlichtUtils.h" local="yes" imported="no">IrrlichtUtils.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Camera.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/visualization/src/</path>
    <filename>Camera_8h</filename>
    <includes id="Visualizer_8h" name="Visualizer.h" local="no" imported="no">iDynTree/Visualizer.h</includes>
    <class kind="class">iDynTree::Camera</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Centroidal.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>Centroidal_8h</filename>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ChartsManager.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/plotter/src/</path>
    <filename>ChartsManager_8cpp</filename>
    <includes id="ChartsManager_8h" name="ChartsManager.h" local="yes" imported="no">ChartsManager.h</includes>
    <includes id="ChartsManagerWindow_8h" name="ChartsManagerWindow.h" local="yes" imported="no">ChartsManagerWindow.h</includes>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>postToThread</name>
      <anchorfile>ChartsManager_8cpp.html</anchorfile>
      <anchor>a36df7cb640115fe7b5502b5af645d446</anchor>
      <arglist>(F &amp;&amp;fun, QObject *obj=qApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChartsManager.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/plotter/include/</path>
    <filename>ChartsManager_8h</filename>
    <includes id="ChartsManagerWindow_8h" name="ChartsManagerWindow.h" local="yes" imported="no">ChartsManagerWindow.h</includes>
    <class kind="class">ChartsManager</class>
    <class kind="struct">ChartsManager::ChartInfo::Axis</class>
    <namespace>QtCharts</namespace>
  </compound>
  <compound kind="file">
    <name>ChartsManagerWindow.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/plotter/src/</path>
    <filename>ChartsManagerWindow_8cpp</filename>
    <includes id="ChartsManagerWindow_8h" name="ChartsManagerWindow.h" local="yes" imported="no">ChartsManagerWindow.h</includes>
  </compound>
  <compound kind="file">
    <name>ChartsManagerWindow.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/plotter/include/</path>
    <filename>ChartsManagerWindow_8h</filename>
    <class kind="class">ChartsManagerWindow</class>
  </compound>
  <compound kind="file">
    <name>ClassicalAcc.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>ClassicalAcc_8cpp</filename>
    <includes id="ClassicalAcc_8h" name="ClassicalAcc.h" local="no" imported="no">iDynTree/Core/ClassicalAcc.h</includes>
    <includes id="SpatialAcc_8h" name="SpatialAcc.h" local="no" imported="no">iDynTree/Core/SpatialAcc.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="no" imported="no">iDynTree/Core/Twist.h</includes>
    <includes id="RotationRaw_8h" name="RotationRaw.h" local="no" imported="no">iDynTree/Core/RotationRaw.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
      <name>Vector6d</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5f2f2cff65cf954aae839aef997c6ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 3, Eigen::RowMajor &gt;</type>
      <name>Matrix3dRowMajor</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5f99075824e5d08334f3e660a41eb94b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClassicalAcc.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>ClassicalAcc_8h</filename>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <class kind="class">iDynTree::ClassicalAcc</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>cmdline.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/</path>
    <filename>cmdline_8h</filename>
    <class kind="class">cmdline::detail::lexical_cast_t</class>
    <class kind="class">cmdline::detail::lexical_cast_t&lt; Target, Source, true &gt;</class>
    <class kind="class">cmdline::detail::lexical_cast_t&lt; std::string, Source, false &gt;</class>
    <class kind="class">cmdline::detail::lexical_cast_t&lt; Target, std::string, false &gt;</class>
    <class kind="struct">cmdline::detail::is_same</class>
    <class kind="struct">cmdline::detail::is_same&lt; T, T &gt;</class>
    <class kind="class">cmdline::cmdline_error</class>
    <class kind="struct">cmdline::default_reader</class>
    <class kind="struct">cmdline::range_reader</class>
    <class kind="struct">cmdline::oneof_reader</class>
    <class kind="class">cmdline::parser</class>
    <namespace>cmdline</namespace>
    <namespace>cmdline::detail</namespace>
    <member kind="function">
      <type>Target</type>
      <name>lexical_cast</name>
      <anchorfile>namespacecmdline_1_1detail.html</anchorfile>
      <anchor>a5cd4d0bedba599ae78fc3b477d5b89fa</anchor>
      <arglist>(const Source &amp;arg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>demangle</name>
      <anchorfile>namespacecmdline_1_1detail.html</anchorfile>
      <anchor>a531047ed8f52b62caae26ab166520987</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>readable_typename</name>
      <anchorfile>namespacecmdline_1_1detail.html</anchorfile>
      <anchor>a9e3c4f02792dba7836cb5d933bf8665f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>default_value</name>
      <anchorfile>namespacecmdline_1_1detail.html</anchorfile>
      <anchor>a0d8a8c2598d920091d2c1055516f8005</anchor>
      <arglist>(T def)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>readable_typename&lt; std::string &gt;</name>
      <anchorfile>namespacecmdline_1_1detail.html</anchorfile>
      <anchor>aeaaa18e134cb1066b14d447a43c6386e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>range_reader&lt; T &gt;</type>
      <name>range</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>a254a4d230f6a0cd541273072ea2569c9</anchor>
      <arglist>(const T &amp;low, const T &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>aec34ff037ea9002323a2b656e1c49f93</anchor>
      <arglist>(T a1)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>a197fdd07b0735c1c7382bfa4d3e1e884</anchor>
      <arglist>(T a1, T a2)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>a5eb83c76445bb52917cd502939988f17</anchor>
      <arglist>(T a1, T a2, T a3)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>ada9e08ffe87130e9e0bc97c8ae9e37ed</anchor>
      <arglist>(T a1, T a2, T a3, T a4)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>ae68ed509566250984be762f4130b1598</anchor>
      <arglist>(T a1, T a2, T a3, T a4, T a5)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>a15c6fb15804ac5f2680345f25752737a</anchor>
      <arglist>(T a1, T a2, T a3, T a4, T a5, T a6)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>aab50ad7f54137d22779d9e857ccd5450</anchor>
      <arglist>(T a1, T a2, T a3, T a4, T a5, T a6, T a7)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>aeb59e9eaeea066b534633e5402180f4e</anchor>
      <arglist>(T a1, T a2, T a3, T a4, T a5, T a6, T a7, T a8)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>ad4667b21857606deef99cb73dc190130</anchor>
      <arglist>(T a1, T a2, T a3, T a4, T a5, T a6, T a7, T a8, T a9)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>a65cb207a728dad2d786fd4bd97232c11</anchor>
      <arglist>(T a1, T a2, T a3, T a4, T a5, T a6, T a7, T a8, T a9, T a10)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>config.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf-kdl/include/iDynTree/ModelIO/impl/</path>
    <filename>config_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>KDLCodycoOrocosKDLMinVersion</name>
      <anchorfile>config_8h.html</anchorfile>
      <anchor>a67a969897b66fcab5576dc0fa6697147</anchor>
      <arglist>(Major, Minor, Patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GetTreeElementChildren</name>
      <anchorfile>config_8h.html</anchorfile>
      <anchor>a241a44dc00df371b6342f3232d1867cb</anchor>
      <arglist>(tree_element)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GetTreeElementParent</name>
      <anchorfile>config_8h.html</anchorfile>
      <anchor>abf0914fd1c8a61fe228cbaef5376884d</anchor>
      <arglist>(tree_element)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GetTreeElementQNr</name>
      <anchorfile>config_8h.html</anchorfile>
      <anchor>aa8b8b99a82c86dccffa9bc7b5e620699</anchor>
      <arglist>(tree_element)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GetTreeElementSegment</name>
      <anchorfile>config_8h.html</anchorfile>
      <anchor>a3850788311af4457b6ccbe8303919e70</anchor>
      <arglist>(tree_element)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Constraint.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>Constraint_8cpp</filename>
    <includes id="Constraint_8h" name="Constraint.h" local="no" imported="no">iDynTree/Constraint.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>Constraint.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>Constraint_8h</filename>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="SparsityStructure_8h" name="SparsityStructure.h" local="no" imported="no">iDynTree/SparsityStructure.h</includes>
    <class kind="class">iDynTree::optimalcontrol::Constraint</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>ConstraintsGroup.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>ConstraintsGroup_8cpp</filename>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="ConstraintsGroup_8h" name="ConstraintsGroup.h" local="no" imported="no">iDynTree/ConstraintsGroup.h</includes>
    <includes id="Constraint_8h" name="Constraint.h" local="no" imported="no">iDynTree/Constraint.h</includes>
    <includes id="LinearConstraint_8h" name="LinearConstraint.h" local="no" imported="no">iDynTree/LinearConstraint.h</includes>
    <includes id="TimeRange_8h" name="TimeRange.h" local="no" imported="no">iDynTree/TimeRange.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <class kind="struct">iDynTree::optimalcontrol::TimedConstraint</class>
    <class kind="class">iDynTree::optimalcontrol::ConstraintsGroup::ConstraintsGroupPimpl</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TimedConstraint &gt;</type>
      <name>TimedConstraint_ptr</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a8ad8b503a7552e8ac21a784d73faccf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; std::string, TimedConstraint_ptr &gt;</type>
      <name>GroupOfConstraintsMap</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>ad4d2fc41098be5d797eceddefcaf124e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstraintsGroup.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>ConstraintsGroup_8h</filename>
    <includes id="SparsityStructure_8h" name="SparsityStructure.h" local="no" imported="no">iDynTree/SparsityStructure.h</includes>
    <class kind="class">iDynTree::optimalcontrol::ConstraintsGroup</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>ContactStateMachine.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/src/</path>
    <filename>ContactStateMachine_8cpp</filename>
    <includes id="ContactStateMachine_8h" name="ContactStateMachine.h" local="yes" imported="no">iDynTree/Estimation/ContactStateMachine.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ContactStateMachine.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/include/iDynTree/Estimation/</path>
    <filename>ContactStateMachine_8h</filename>
    <includes id="SchmittTrigger_8h" name="SchmittTrigger.h" local="yes" imported="no">SchmittTrigger.h</includes>
    <class kind="struct">iDynTree::SchmittParams</class>
    <class kind="class">iDynTree::ContactStateMachine</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ContactWrench.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>ContactWrench_8cpp</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="ContactWrench_8h" name="ContactWrench.h" local="no" imported="no">iDynTree/Model/ContactWrench.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ContactWrench.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>ContactWrench_8h</filename>
    <includes id="Position_8h" name="Position.h" local="no" imported="no">iDynTree/Core/Position.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="no" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <class kind="class">iDynTree::ContactWrench</class>
    <class kind="class">iDynTree::LinkContactWrenches</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ControlledDynamicalSystem.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>ControlledDynamicalSystem_8cpp</filename>
    <includes id="ControlledDynamicalSystem_8h" name="ControlledDynamicalSystem.h" local="no" imported="no">iDynTree/ControlledDynamicalSystem.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <class kind="class">iDynTree::optimalcontrol::DerivedDynamicalSystem</class>
    <class kind="class">iDynTree::optimalcontrol::ControlledDynamicalSystem::ControlledDynamicalSystemImplementation</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>ControlledDynamicalSystem.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>ControlledDynamicalSystem_8h</filename>
    <includes id="DynamicalSystem_8h" name="DynamicalSystem.h" local="no" imported="no">iDynTree/DynamicalSystem.h</includes>
    <includes id="Controller_8h" name="Controller.h" local="no" imported="no">iDynTree/Controller.h</includes>
    <class kind="class">iDynTree::optimalcontrol::ControlledDynamicalSystem</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>Controller.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>Controller_8cpp</filename>
    <includes id="Controller_8h" name="Controller.h" local="no" imported="no">iDynTree/Controller.h</includes>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>Controller.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>Controller_8h</filename>
    <class kind="class">iDynTree::optimalcontrol::Controller</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>ConvexHullHelpers.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/inverse-kinematics/src/</path>
    <filename>ConvexHullHelpers_8cpp</filename>
    <includes id="ConvexHullHelpers_8h" name="ConvexHullHelpers.h" local="no" imported="no">iDynTree/ConvexHullHelpers.h</includes>
    <includes id="Axis_8h" name="Axis.h" local="no" imported="no">iDynTree/Core/Axis.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>double</type>
      <name>monotono_chain_cross</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af2aa4f20483e8150a8772d9bdc153030</anchor>
      <arglist>(Vector2 o, Vector2 a, Vector2 b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceBetweentTwoPoints</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a7ee743a546cf1ee6df1c63cebf0bd7f4</anchor>
      <arglist>(const Vector2 &amp;firstPoint, const Vector2 &amp;secondPoint)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceBetweenPointAndSegment</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a55ece32cfe2d578c4693392912af8f73</anchor>
      <arglist>(const Vector2 &amp;point, const Vector2 &amp;segmentFirstPoint, const Vector2 &amp;segmentLastPoint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConvexHullHelpers.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/inverse-kinematics/include/iDynTree/</path>
    <filename>ConvexHullHelpers_8h</filename>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="Position_8h" name="Position.h" local="no" imported="no">iDynTree/Core/Position.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <class kind="class">iDynTree::Polygon</class>
    <class kind="class">iDynTree::Polygon2D</class>
    <class kind="class">iDynTree::ConvexHullProjectionConstraint</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Cost.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>Cost_8cpp</filename>
    <includes id="Cost_8h" name="Cost.h" local="no" imported="no">iDynTree/Cost.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>Cost.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>Cost_8h</filename>
    <includes id="SparsityStructure_8h" name="SparsityStructure.h" local="no" imported="no">iDynTree/SparsityStructure.h</includes>
    <class kind="class">iDynTree::optimalcontrol::Cost</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>CubicSpline.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>CubicSpline_8cpp</filename>
    <includes id="CubicSpline_8h" name="CubicSpline.h" local="no" imported="no">iDynTree/Core/CubicSpline.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
  </compound>
  <compound kind="file">
    <name>CubicSpline.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>CubicSpline_8h</filename>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <class kind="class">iDynTree::CubicSpline</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>DenavitHartenberg.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>DenavitHartenberg_8cpp</filename>
    <includes id="DenavitHartenberg_8h" name="DenavitHartenberg.h" local="no" imported="no">iDynTree/Model/DenavitHartenberg.h</includes>
    <includes id="ForwardKinematics_8h" name="ForwardKinematics.h" local="no" imported="no">iDynTree/Model/ForwardKinematics.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="RevoluteJoint_8h" name="RevoluteJoint.h" local="no" imported="no">iDynTree/Model/RevoluteJoint.h</includes>
    <includes id="FixedJoint_8h" name="FixedJoint.h" local="no" imported="no">iDynTree/Model/FixedJoint.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <includes id="FreeFloatingState_8h" name="FreeFloatingState.h" local="no" imported="no">iDynTree/Model/FreeFloatingState.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>Transform</type>
      <name>TransformFromDHCraig1989</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9f5fda0dc8377f9fad3f8b60d73f1c7c</anchor>
      <arglist>(double a, double alpha, double d, double theta)</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>TransformFromDH</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a259b4c68b0f4b9ae9ce389ed14f4c712</anchor>
      <arglist>(double a, double alpha, double d, double theta)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>closestPoints</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a394d5505cadab9f4539d6034de36b3fd</anchor>
      <arglist>(const iDynTree::Axis line_A, const iDynTree::Axis line_B, iDynTree::Position &amp;closest_point_line_A, iDynTree::Position &amp;closest_point_line_B, double tol=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkIfAxesAreIncident</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1537d5c0dda304324b7b9cbc75b86fbf</anchor>
      <arglist>(const iDynTree::Axis line_A, const iDynTree::Axis line_B, double tol=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkIfAxesAreCoincident</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a43a72452d31694ba5319c9cd0c2a8033</anchor>
      <arglist>(const iDynTree::Axis line_A, const iDynTree::Axis link_B, double tol=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>calculateDH</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a88c658896ee976ec73559a22abce20b0</anchor>
      <arglist>(const iDynTree::Axis zAxis_i_minus_1, const iDynTree::Axis xAxis_i_minus_1, const iDynTree::Position origin_i_minus_1, const iDynTree::Axis zAxis_i, const iDynTree::Direction xAxis_n_direction_hint, iDynTree::Position &amp;origin_i, iDynTree::Axis &amp;xAxis_i, iDynTree::Axis &amp;yAxis_i, DHLink &amp;dhParams, double tol=1e-6, int verbose=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>transformFromAxes</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1471079a174780b9d8d9bb77b0a552eb</anchor>
      <arglist>(const Axis xAxis, const Axis yAxis, const Axis zAxis, Transform &amp;refFrame_H_frame, double tol=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ExtractDHChainFromModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ada11245ee6d17f4d64ccf59eeead8f07</anchor>
      <arglist>(const iDynTree::Model &amp;model, const std::string baseFrame, const std::string eeFrame, DHChain &amp;outputChain, double tolerance=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>intToString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>adffeb935ed6aad8d6f30705238117df8</anchor>
      <arglist>(const int inInt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CreateModelFromDHChain</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac94534b93496e2703a218b38774c64a1</anchor>
      <arglist>(const DHChain &amp;inputChain, Model &amp;outputModel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DenavitHartenberg.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>DenavitHartenberg_8h</filename>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <class kind="struct">iDynTree::DHLink</class>
    <class kind="class">iDynTree::DHChain</class>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>Transform</type>
      <name>TransformFromDHCraig1989</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9f5fda0dc8377f9fad3f8b60d73f1c7c</anchor>
      <arglist>(double a, double alpha, double d, double theta)</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>TransformFromDH</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a259b4c68b0f4b9ae9ce389ed14f4c712</anchor>
      <arglist>(double a, double alpha, double d, double theta)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ExtractDHChainFromModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ada11245ee6d17f4d64ccf59eeead8f07</anchor>
      <arglist>(const iDynTree::Model &amp;model, const std::string baseFrame, const std::string eeFrame, DHChain &amp;outputChain, double tolerance=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CreateModelFromDHChain</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac94534b93496e2703a218b38774c64a1</anchor>
      <arglist>(const DHChain &amp;inputChain, Model &amp;outputModel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Direction.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>Direction_8cpp</filename>
    <includes id="Direction_8h" name="Direction.h" local="no" imported="no">iDynTree/Core/Direction.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Direction.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>Direction_8h</filename>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <class kind="class">iDynTree::Direction</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>dirl_utils.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/src/</path>
    <filename>dirl__utils_8cpp</filename>
    <includes id="dirl__utils_8hpp" name="dirl_utils.hpp" local="yes" imported="no">dirl_utils.hpp</includes>
    <includes id="SixAxisForceTorqueSensor_8h" name="SixAxisForceTorqueSensor.h" local="yes" imported="no">iDynTree/Sensors/SixAxisForceTorqueSensor.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="yes" imported="no">iDynTree/Core/Transform.h</includes>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
    <member kind="function">
      <type>double</type>
      <name>sparsity_index</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>ac5559b301f89592f71ffc24bedfea12f</anchor>
      <arglist>(const Eigen::MatrixXd &amp;mat, const double tol)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>zeroToZero</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a56093bf6cb44e093ec289bb683482911</anchor>
      <arglist>(const Eigen::MatrixXd &amp;input_mat, double tol=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getKernelSpaceBasis</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a8110e01d88825090bb58517829fdf7d1</anchor>
      <arglist>(const Eigen::MatrixXd &amp;input_matrix, Eigen::MatrixXd &amp;row_space_basis_matrix, double tol=-1.0, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSubSpaceIntersection</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a0c4608ec4c5377fe3fbd35c8363e5921</anchor>
      <arglist>(const Eigen::MatrixXd &amp;first_subspace, const Eigen::MatrixXd &amp;second_subspace, Eigen::MatrixXd &amp;result, double tol=-1.0, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRowSpaceBasis</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>afc23610f489e81920f501c930c1c5737</anchor>
      <arglist>(const Eigen::MatrixXd &amp;input_matrix, Eigen::MatrixXd &amp;row_space_basis_matrix, double tol=-1.0, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRowSpaceBasis</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>aef31cdd8640ecaf581109a013c644d5f</anchor>
      <arglist>(const Eigen::MatrixXd &amp;input_matrix, Eigen::MatrixXd &amp;row_space_basis_matrix, double tol, bool verbose, Eigen::VectorXd &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstFTSensorOnLink</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a852e0edff40ee7a30e8f66c81cf449f5</anchor>
      <arglist>(const iDynTree::SensorsList &amp;sensors_tree, const int link_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfFTSensorsOnLink</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a2ef391d530dc2c49cb6f8d1d5577ab41</anchor>
      <arglist>(const iDynTree::SensorsList &amp;sensors_tree, const int link_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFTIndexFromJunctionIndex</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a987e7d204a0e5d6875f447d703a91734</anchor>
      <arglist>(const iDynTree::SensorsList &amp;sensors_tree, const int junction_id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>simulateMeasurement_sixAxisFTSensor</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>af3cb661f0281207cb49f61dec5fc5d2a</anchor>
      <arglist>(KDL::CoDyCo::Traversal &amp;dynamic_traversal, std::vector&lt; KDL::Wrench &gt; f, iDynTree::SixAxisForceTorqueSensor *sixAxisForceTorqueSensor, iDynTree::Wrench &amp;simulated_measurement)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Regressors::DynamicsRegressorParameterType</type>
      <name>getLinkParameterType</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>aee389d634cc832beab5dde418a6baa48</anchor>
      <arglist>(unsigned int nr)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Regressors::DynamicsRegressorParameterType</type>
      <name>getFTParameterType</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a73f0073060b7c59aca80a2c8854e6052</anchor>
      <arglist>(unsigned int nr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInertialParameterLocalIndex</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a42fb53ee1768cb438b56eab2920f0f6a</anchor>
      <arglist>(const iDynTree::Regressors::DynamicsRegressorParameterType &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Regressors::DynamicsRegressorParametersList</type>
      <name>getLegacyUsedParameters</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a656844bbbdd8e257d52aaac061fb3568</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;linkIndices2regrCols, const int nrOfFTSensors=-1, const bool withFToffsetParameters=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertLocalRegressorToGlobalRegressor</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a136ad137a963221e253cfada6a0c8808</anchor>
      <arglist>(const Eigen::MatrixXd &amp;localRegressor, Eigen::MatrixXd &amp;globalRegressor, std::vector&lt; int &gt; localColIndicesToGlobalColIndices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertLocalParametersToGlobalParameters</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a08d976a322ee30371110c6097fd7727c</anchor>
      <arglist>(const Eigen::VectorXd &amp;localRegressor, Eigen::VectorXd &amp;globalRegressor, std::vector&lt; int &gt; localColIndicesToGlobalColIndices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildParametersMapping</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>abf7a8e3c298324caa12665755a45c0c8</anchor>
      <arglist>(const iDynTree::Regressors::DynamicsRegressorParametersList &amp;localSerialiaziation, const iDynTree::Regressors::DynamicsRegressorParametersList &amp;globalSerialiaziation, std::vector&lt; int &gt; &amp;localParametersIndexToOutputParametersIndex)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dirl_utils.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/include/kdl_codyco/regressors/</path>
    <filename>dirl__utils_8hpp</filename>
    <includes id="Sensors_8h" name="Sensors.h" local="yes" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <includes id="SixAxisForceTorqueSensor_8h" name="SixAxisForceTorqueSensor.h" local="yes" imported="no">iDynTree/Sensors/SixAxisForceTorqueSensor.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="yes" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="DynamicsRegressorParameters_8h" name="DynamicsRegressorParameters.h" local="yes" imported="no">iDynTree/Regressors/DynamicsRegressorParameters.h</includes>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
    <member kind="function">
      <type>double</type>
      <name>sparsity_index</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>ac5559b301f89592f71ffc24bedfea12f</anchor>
      <arglist>(const Eigen::MatrixXd &amp;mat, const double tol)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>zeroToZero</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a56093bf6cb44e093ec289bb683482911</anchor>
      <arglist>(const Eigen::MatrixXd &amp;input_mat, double tol=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRowSpaceBasis</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>afc23610f489e81920f501c930c1c5737</anchor>
      <arglist>(const Eigen::MatrixXd &amp;input_matrix, Eigen::MatrixXd &amp;row_space_basis_matrix, double tol=-1.0, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRowSpaceBasis</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>aef31cdd8640ecaf581109a013c644d5f</anchor>
      <arglist>(const Eigen::MatrixXd &amp;input_matrix, Eigen::MatrixXd &amp;row_space_basis_matrix, double tol, bool verbose, Eigen::VectorXd &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSubSpaceIntersection</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a0c4608ec4c5377fe3fbd35c8363e5921</anchor>
      <arglist>(const Eigen::MatrixXd &amp;first_subspace, const Eigen::MatrixXd &amp;second_subspace, Eigen::MatrixXd &amp;result, double tol=-1.0, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getKernelSpaceBasis</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a8110e01d88825090bb58517829fdf7d1</anchor>
      <arglist>(const Eigen::MatrixXd &amp;input_matrix, Eigen::MatrixXd &amp;row_space_basis_matrix, double tol=-1.0, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstFTSensorOnLink</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a852e0edff40ee7a30e8f66c81cf449f5</anchor>
      <arglist>(const iDynTree::SensorsList &amp;sensors_tree, const int link_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfFTSensorsOnLink</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a2ef391d530dc2c49cb6f8d1d5577ab41</anchor>
      <arglist>(const iDynTree::SensorsList &amp;sensors_tree, const int link_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFTIndexFromJunctionIndex</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a987e7d204a0e5d6875f447d703a91734</anchor>
      <arglist>(const iDynTree::SensorsList &amp;sensors_tree, const int junction_id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>simulateMeasurement_sixAxisFTSensor</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>af3cb661f0281207cb49f61dec5fc5d2a</anchor>
      <arglist>(KDL::CoDyCo::Traversal &amp;dynamic_traversal, std::vector&lt; KDL::Wrench &gt; f, iDynTree::SixAxisForceTorqueSensor *sixAxisForceTorqueSensor, iDynTree::Wrench &amp;simulated_measurement)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Regressors::DynamicsRegressorParameterType</type>
      <name>getLinkParameterType</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>aee389d634cc832beab5dde418a6baa48</anchor>
      <arglist>(unsigned int nr)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Regressors::DynamicsRegressorParameterType</type>
      <name>getFTParameterType</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a73f0073060b7c59aca80a2c8854e6052</anchor>
      <arglist>(unsigned int nr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInertialParameterLocalIndex</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a42fb53ee1768cb438b56eab2920f0f6a</anchor>
      <arglist>(const iDynTree::Regressors::DynamicsRegressorParameterType &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Regressors::DynamicsRegressorParametersList</type>
      <name>getLegacyUsedParameters</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a656844bbbdd8e257d52aaac061fb3568</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;linkIndices2regrCols, const int nrOfFTSensors=-1, const bool withFToffsetParameters=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertLocalRegressorToGlobalRegressor</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a136ad137a963221e253cfada6a0c8808</anchor>
      <arglist>(const Eigen::MatrixXd &amp;localRegressor, Eigen::MatrixXd &amp;globalRegressor, std::vector&lt; int &gt; localColIndicesToGlobalColIndices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertLocalParametersToGlobalParameters</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a08d976a322ee30371110c6097fd7727c</anchor>
      <arglist>(const Eigen::VectorXd &amp;localRegressor, Eigen::VectorXd &amp;globalRegressor, std::vector&lt; int &gt; localColIndicesToGlobalColIndices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildParametersMapping</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>abf7a8e3c298324caa12665755a45c0c8</anchor>
      <arglist>(const iDynTree::Regressors::DynamicsRegressorParametersList &amp;localSerialiaziation, const iDynTree::Regressors::DynamicsRegressorParametersList &amp;globalSerialiaziation, std::vector&lt; int &gt; &amp;localParametersIndexToOutputParametersIndex)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DummyDynamicsRegressorGenerator.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/src/dummy/</path>
    <filename>DummyDynamicsRegressorGenerator_8cpp</filename>
    <includes id="DynamicsRegressorGenerator_8h" name="DynamicsRegressorGenerator.h" local="yes" imported="no">iDynTree/Regressors/DynamicsRegressorGenerator.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="no" imported="no">iDynTree/Core/Twist.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Rotation_8h" name="Rotation.h" local="no" imported="no">iDynTree/Core/Rotation.h</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <class kind="struct">iDynTree::Regressors::DynamicsRegressorGenerator::DynamicsRegressorGeneratorPrivateAttributes</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::Regressors</namespace>
    <member kind="function">
      <type>void</type>
      <name>printDynamicsRegressorGeneratorDeprecation</name>
      <anchorfile>namespaceiDynTree_1_1Regressors.html</anchorfile>
      <anchor>a2312e842c475b0406db644f4e1a3c1f5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DummyImplementations.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/visualization/src/</path>
    <filename>DummyImplementations_8h</filename>
    <includes id="Visualizer_8h" name="Visualizer.h" local="no" imported="no">iDynTree/Visualizer.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <class kind="class">iDynTree::DummyCamera</class>
    <class kind="class">iDynTree::DummyLight</class>
    <class kind="class">iDynTree::DummyEnvironment</class>
    <class kind="class">iDynTree::DummyJetsVisualization</class>
    <class kind="class">iDynTree::DummyVectorsVisualization</class>
    <class kind="class">iDynTree::DummyModelVisualization</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>DynamicalSystem.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>DynamicalSystem_8cpp</filename>
    <includes id="DynamicalSystem_8h" name="DynamicalSystem.h" local="no" imported="no">iDynTree/DynamicalSystem.h</includes>
    <includes id="Controller_8h" name="Controller.h" local="no" imported="no">iDynTree/Controller.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>DynamicalSystem.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>DynamicalSystem_8h</filename>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="SparsityStructure_8h" name="SparsityStructure.h" local="no" imported="no">iDynTree/SparsityStructure.h</includes>
    <class kind="class">iDynTree::optimalcontrol::DynamicalSystem</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>DynamicDatasetFile.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/src/</path>
    <filename>DynamicDatasetFile_8cpp</filename>
    <includes id="DynamicDatasetFile_8hpp" name="DynamicDatasetFile.hpp" local="yes" imported="no">DynamicDatasetFile.hpp</includes>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
    <member kind="function">
      <type>double</type>
      <name>get_next_double</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>ab7998661057dbb40e26e0bf756a7c330</anchor>
      <arglist>(std::stringstream &amp;ss, std::string &amp;data_buffer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicDatasetFile.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/include/kdl_codyco/regressors/</path>
    <filename>DynamicDatasetFile_8hpp</filename>
    <includes id="DynamicDatasetInterfaces_8hpp" name="DynamicDatasetInterfaces.hpp" local="yes" imported="no">DynamicDatasetInterfaces.hpp</includes>
    <includes id="DynamicSample_8hpp" name="DynamicSample.hpp" local="yes" imported="no">DynamicSample.hpp</includes>
    <class kind="class">KDL::CoDyCo::Regressors::DynamicDatasetFile</class>
    <class kind="class">KDL::CoDyCo::Regressors::DynamicDatasetFileCollection</class>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
  </compound>
  <compound kind="file">
    <name>DynamicDatasetFileCollection.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/src/</path>
    <filename>DynamicDatasetFileCollection_8cpp</filename>
    <includes id="DynamicDatasetFile_8hpp" name="DynamicDatasetFile.hpp" local="yes" imported="no">DynamicDatasetFile.hpp</includes>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
  </compound>
  <compound kind="file">
    <name>DynamicDatasetInterfaces.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/include/kdl_codyco/regressors/</path>
    <filename>DynamicDatasetInterfaces_8hpp</filename>
    <includes id="DynamicSample_8hpp" name="DynamicSample.hpp" local="yes" imported="no">DynamicSample.hpp</includes>
    <class kind="class">KDL::CoDyCo::Regressors::IBatchDynamicDataset</class>
    <class kind="class">KDL::CoDyCo::Regressors::IOnlineDynamicDataset</class>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
  </compound>
  <compound kind="file">
    <name>dynamicRegressorGenerator.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/src/</path>
    <filename>dynamicRegressorGenerator_8cpp</filename>
    <includes id="dynamicRegressorGenerator_8hpp" name="dynamicRegressorGenerator.hpp" local="yes" imported="no">dynamicRegressorGenerator.hpp</includes>
    <includes id="dirl__utils_8hpp" name="dirl_utils.hpp" local="yes" imported="no">dirl_utils.hpp</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="yes" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="yes" imported="no">iDynTree/Core/Wrench.h</includes>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
    <member kind="define">
      <type>#define</type>
      <name>M_PI</name>
      <anchorfile>dynamicRegressorGenerator_8cpp.html</anchorfile>
      <anchor>ae71449b1cc6e6250b91f539153a7a0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>random_double</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a60e080d65a6bd281fd2f93822f9a7a30</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dynamicRegressorGenerator.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/include/kdl_codyco/regressors/</path>
    <filename>dynamicRegressorGenerator_8hpp</filename>
    <includes id="Sensors_8h" name="Sensors.h" local="yes" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="yes" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="dynamicRegressorInterface_8hpp" name="dynamicRegressorInterface.hpp" local="yes" imported="no">dynamicRegressorInterface.hpp</includes>
    <includes id="subtreeBaseDynamicsRegressor_8hpp" name="subtreeBaseDynamicsRegressor.hpp" local="yes" imported="no">subtreeBaseDynamicsRegressor.hpp</includes>
    <includes id="torqueRegressor_8hpp" name="torqueRegressor.hpp" local="yes" imported="no">torqueRegressor.hpp</includes>
    <includes id="baseDynamicsRegressor_8hpp" name="baseDynamicsRegressor.hpp" local="yes" imported="no">baseDynamicsRegressor.hpp</includes>
    <includes id="DynamicSample_8hpp" name="DynamicSample.hpp" local="yes" imported="no">DynamicSample.hpp</includes>
    <class kind="class">KDL::CoDyCo::Regressors::DynamicRegressorGenerator</class>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
  </compound>
  <compound kind="file">
    <name>dynamicRegressorInterface.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/include/kdl_codyco/regressors/</path>
    <filename>dynamicRegressorInterface_8hpp</filename>
    <includes id="DynamicsRegressorParameters_8h" name="DynamicsRegressorParameters.h" local="no" imported="no">iDynTree/Regressors/DynamicsRegressorParameters.h</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <class kind="class">KDL::CoDyCo::Regressors::DynamicRegressorInterface</class>
    <namespace>iDynTree</namespace>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
  </compound>
  <compound kind="file">
    <name>Dynamics.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>Dynamics_8cpp</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="FreeFloatingState_8h" name="FreeFloatingState.h" local="no" imported="no">iDynTree/Model/FreeFloatingState.h</includes>
    <includes id="FreeFloatingMatrices_8h" name="FreeFloatingMatrices.h" local="no" imported="no">iDynTree/Model/FreeFloatingMatrices.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <includes id="JointState_8h" name="JointState.h" local="no" imported="no">iDynTree/Model/JointState.h</includes>
    <includes id="ArticulatedBodyInertia_8h" name="ArticulatedBodyInertia.h" local="no" imported="no">iDynTree/Core/ArticulatedBodyInertia.h</includes>
    <includes id="SpatialInertia_8h" name="SpatialInertia.h" local="no" imported="no">iDynTree/Core/SpatialInertia.h</includes>
    <includes id="SpatialMomentum_8h" name="SpatialMomentum.h" local="no" imported="no">iDynTree/Core/SpatialMomentum.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="Dynamics_8h" name="Dynamics.h" local="no" imported="no">iDynTree/Model/Dynamics.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>ComputeLinearAndAngularMomentum</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga1f433a6725585332945762ed4e6b5fe5</anchor>
      <arglist>(const Model &amp;model, const LinkPositions &amp;linkPositions, const LinkVelArray &amp;linkVels, SpatialMomentum &amp;totalMomentum)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeLinearAndAngularMomentumDerivativeBias</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae214683bf9d037ee89a0c070ed9ed78d</anchor>
      <arglist>(const Model &amp;model, const LinkPositions &amp;linkPositions, const LinkVelArray &amp;linkVel, const LinkAccArray &amp;linkBiasAcc, Wrench &amp;totalMomentumBias)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RNEADynamicPhase</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga18613d41830aef7430e7a8a09fef98e1</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::Traversal &amp;traversal, const iDynTree::JointPosDoubleArray &amp;jointPos, const iDynTree::LinkVelArray &amp;linksVel, const iDynTree::LinkAccArray &amp;linksProperAcc, const iDynTree::LinkNetExternalWrenches &amp;linkExtForces, iDynTree::LinkInternalWrenches &amp;linkIntWrenches, iDynTree::FreeFloatingGeneralizedTorques &amp;baseForceAndJointTorques)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CompositeRigidBodyAlgorithm</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afa4f3546edbb4ab3e50a486e316a2470</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const JointPosDoubleArray &amp;jointPos, LinkCompositeRigidBodyInertias &amp;linkCRBs, FreeFloatingMassMatrix &amp;massMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ArticulatedBodyAlgorithm</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga5879141982887fc0d049cc3645f10dd5</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const LinkNetExternalWrenches &amp;linkExtWrenches, const JointDOFsDoubleArray &amp;jointTorques, ArticulatedBodyAlgorithmInternalBuffers &amp;buffers, FreeFloatingAcc &amp;robotAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InverseDynamicsInertialParametersRegressor</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga0c75db73b7682b9c524b0727b516b12b</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::Traversal &amp;traversal, const iDynTree::LinkPositions &amp;referenceFrame_H_link, const iDynTree::LinkVelArray &amp;linksVel, const iDynTree::LinkAccArray &amp;linksAcc, iDynTree::MatrixDynSize &amp;baseForceAndJointTorquesRegressor)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dynamics.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>Dynamics_8h</filename>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <includes id="JointState_8h" name="JointState.h" local="no" imported="no">iDynTree/Model/JointState.h</includes>
    <class kind="struct">iDynTree::ArticulatedBodyAlgorithmInternalBuffers</class>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>ComputeLinearAndAngularMomentum</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga1f433a6725585332945762ed4e6b5fe5</anchor>
      <arglist>(const Model &amp;model, const LinkPositions &amp;linkPositions, const LinkVelArray &amp;linkVels, SpatialMomentum &amp;totalMomentum)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeLinearAndAngularMomentumDerivativeBias</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae214683bf9d037ee89a0c070ed9ed78d</anchor>
      <arglist>(const Model &amp;model, const LinkPositions &amp;linkPositions, const LinkVelArray &amp;linkVel, const LinkAccArray &amp;linkBiasAcc, Wrench &amp;totalMomentumBias)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RNEADynamicPhase</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga18613d41830aef7430e7a8a09fef98e1</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::Traversal &amp;traversal, const iDynTree::JointPosDoubleArray &amp;jointPos, const iDynTree::LinkVelArray &amp;linksVel, const iDynTree::LinkAccArray &amp;linksProperAcc, const iDynTree::LinkNetExternalWrenches &amp;linkExtForces, iDynTree::LinkInternalWrenches &amp;linkIntWrenches, iDynTree::FreeFloatingGeneralizedTorques &amp;baseForceAndJointTorques)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CompositeRigidBodyAlgorithm</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afa4f3546edbb4ab3e50a486e316a2470</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const JointPosDoubleArray &amp;jointPos, LinkCompositeRigidBodyInertias &amp;linkCRBs, FreeFloatingMassMatrix &amp;massMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ArticulatedBodyAlgorithm</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga5879141982887fc0d049cc3645f10dd5</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const LinkNetExternalWrenches &amp;linkExtWrenches, const JointDOFsDoubleArray &amp;jointTorques, ArticulatedBodyAlgorithmInternalBuffers &amp;buffers, FreeFloatingAcc &amp;robotAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InverseDynamicsInertialParametersRegressor</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga0c75db73b7682b9c524b0727b516b12b</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::Traversal &amp;traversal, const iDynTree::LinkPositions &amp;referenceFrame_H_link, const iDynTree::LinkVelArray &amp;linksVel, const iDynTree::LinkAccArray &amp;linksAcc, iDynTree::MatrixDynSize &amp;baseForceAndJointTorquesRegressor)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicSample.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/src/</path>
    <filename>DynamicSample_8cpp</filename>
    <includes id="DynamicSample_8hpp" name="DynamicSample.hpp" local="yes" imported="no">DynamicSample.hpp</includes>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
  </compound>
  <compound kind="file">
    <name>DynamicSample.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/include/kdl_codyco/regressors/</path>
    <filename>DynamicSample_8hpp</filename>
    <class kind="class">KDL::CoDyCo::Regressors::DynamicStateSample</class>
    <class kind="class">KDL::CoDyCo::Regressors::DynamicSensorSample</class>
    <class kind="class">KDL::CoDyCo::Regressors::DynamicSample</class>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
  </compound>
  <compound kind="file">
    <name>DynamicsLinearization.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>DynamicsLinearization_8cpp</filename>
    <includes id="DynamicsLinearization_8h" name="DynamicsLinearization.h" local="no" imported="no">iDynTree/Model/DynamicsLinearization.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="FreeFloatingState_8h" name="FreeFloatingState.h" local="no" imported="no">iDynTree/Model/FreeFloatingState.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="TransformDerivative_8h" name="TransformDerivative.h" local="no" imported="no">iDynTree/Core/TransformDerivative.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>void</type>
      <name>ForwardDynamicsLinearizationWrtJointPos</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a7d26bb5b1d7535dcf56687ba32571725</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const LinkNetExternalWrenches &amp;linkExtWrenches, const JointDOFsDoubleArray &amp;jointTorques, const size_t dofDeriv, ForwardDynamicsLinearizationInternalBuffers &amp;bufs, FreeFloatingAcc &amp;robotAcc, FreeFloatingStateLinearization &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ForwardDynamicsLinearizationWrtBaseTwist</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab452f5437b511bcad7e17ba68746b504</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const LinkNetExternalWrenches &amp;linkExtWrenches, const JointDOFsDoubleArray &amp;jointTorques, ForwardDynamicsLinearizationInternalBuffers &amp;bufs, FreeFloatingAcc &amp;robotAcc, FreeFloatingStateLinearization &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ForwardDynamicsLinearizationWrtJointVel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa44413390b1d542078163fcf9f7c4085</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const LinkNetExternalWrenches &amp;linkExtWrenches, const JointDOFsDoubleArray &amp;jointTorques, const size_t dofDeriv, ForwardDynamicsLinearizationInternalBuffers &amp;bufs, FreeFloatingAcc &amp;robotAcc, FreeFloatingStateLinearization &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardDynamicsLinearization</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0c9b6d083f99f1b6ffd1a6c3a7ae5e07</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const LinkNetExternalWrenches &amp;linkExtWrenches, const JointDOFsDoubleArray &amp;jointTorques, ForwardDynamicsLinearizationInternalBuffers &amp;bufs, FreeFloatingAcc &amp;robotAcc, FreeFloatingStateLinearization &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicsLinearization.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>DynamicsLinearization_8h</filename>
    <includes id="MatrixFixSize_8h" name="MatrixFixSize.h" local="no" imported="no">iDynTree/Core/MatrixFixSize.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="Dynamics_8h" name="Dynamics.h" local="no" imported="no">iDynTree/Model/Dynamics.h</includes>
    <includes id="DynamicsLinearizationHelpers_8h" name="DynamicsLinearizationHelpers.h" local="no" imported="no">iDynTree/Model/DynamicsLinearizationHelpers.h</includes>
    <class kind="struct">iDynTree::ForwardDynamicsLinearizationInternalBuffers</class>
    <class kind="class">iDynTree::FreeFloatingStateLinearization</class>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>ForwardDynamicsLinearization</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0c9b6d083f99f1b6ffd1a6c3a7ae5e07</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const LinkNetExternalWrenches &amp;linkExtWrenches, const JointDOFsDoubleArray &amp;jointTorques, ForwardDynamicsLinearizationInternalBuffers &amp;bufs, FreeFloatingAcc &amp;robotAcc, FreeFloatingStateLinearization &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicsLinearizationHelpers.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>DynamicsLinearizationHelpers_8cpp</filename>
    <includes id="DynamicsLinearizationHelpers_8h" name="DynamicsLinearizationHelpers.h" local="no" imported="no">iDynTree/Model/DynamicsLinearizationHelpers.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>SpatialMotionWrtMotionDerivative</type>
      <name>operator*</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8f92a6a26be06461e7364405c553bd66</anchor>
      <arglist>(const Transform &amp;a_X_b, const SpatialMotionWrtMotionDerivative &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceWrtMotionDerivative</type>
      <name>operator*</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aedfbcb0d62ea5bb9bf6fc476f3cc717a</anchor>
      <arglist>(const Transform &amp;a_X_b, const SpatialForceWrtMotionDerivative &amp;op2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicsLinearizationHelpers.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>DynamicsLinearizationHelpers_8h</filename>
    <includes id="MatrixFixSize_8h" name="MatrixFixSize.h" local="no" imported="no">iDynTree/Core/MatrixFixSize.h</includes>
    <includes id="Dynamics_8h" name="Dynamics.h" local="no" imported="no">iDynTree/Model/Dynamics.h</includes>
    <class kind="class">iDynTree::SpatialMotionWrtMotionDerivative</class>
    <class kind="class">iDynTree::SpatialForceWrtMotionDerivative</class>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>SpatialMotionWrtMotionDerivative</type>
      <name>operator*</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8f92a6a26be06461e7364405c553bd66</anchor>
      <arglist>(const Transform &amp;a_X_b, const SpatialMotionWrtMotionDerivative &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceWrtMotionDerivative</type>
      <name>operator*</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aedfbcb0d62ea5bb9bf6fc476f3cc717a</anchor>
      <arglist>(const Transform &amp;a_X_b, const SpatialForceWrtMotionDerivative &amp;op2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicsRegressorGenerator.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/src/</path>
    <filename>DynamicsRegressorGenerator_8cpp</filename>
    <includes id="DynamicsRegressorGenerator_8h" name="DynamicsRegressorGenerator.h" local="yes" imported="no">iDynTree/Regressors/DynamicsRegressorGenerator.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="no" imported="no">iDynTree/Core/Twist.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Rotation_8h" name="Rotation.h" local="no" imported="no">iDynTree/Core/Rotation.h</includes>
    <includes id="dynamicRegressorGenerator_8hpp" name="dynamicRegressorGenerator.hpp" local="yes" imported="no">kdl_codyco/regressors/dynamicRegressorGenerator.hpp</includes>
    <includes id="urdf__import_8hpp" name="urdf_import.hpp" local="no" imported="no">iDynTree/ModelIO/impl/urdf_import.hpp</includes>
    <includes id="urdf__sensor__import_8hpp" name="urdf_sensor_import.hpp" local="no" imported="no">iDynTree/ModelIO/impl/urdf_sensor_import.hpp</includes>
    <class kind="struct">iDynTree::Regressors::DynamicsRegressorGenerator::DynamicsRegressorGeneratorPrivateAttributes</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::Regressors</namespace>
  </compound>
  <compound kind="file">
    <name>DynamicsRegressorGenerator.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/include/iDynTree/Regressors/</path>
    <filename>DynamicsRegressorGenerator_8h</filename>
    <class kind="class">iDynTree::Regressors::DynamicsRegressorGenerator</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::Regressors</namespace>
  </compound>
  <compound kind="file">
    <name>DynamicsRegressorParameters.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/src/</path>
    <filename>DynamicsRegressorParameters_8cpp</filename>
    <includes id="DynamicsRegressorParameters_8h" name="DynamicsRegressorParameters.h" local="yes" imported="no">iDynTree/Regressors/DynamicsRegressorParameters.h</includes>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::Regressors</namespace>
    <member kind="typedef">
      <type>std::vector&lt; DynamicsRegressorParameter &gt;</type>
      <name>ParamSet</name>
      <anchorfile>namespaceiDynTree_1_1Regressors.html</anchorfile>
      <anchor>a01b692967e1d0549bb00d3af35d5a9e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>DynamicsRegressorParameterCategory</type>
      <name>getCategory</name>
      <anchorfile>namespaceiDynTree_1_1Regressors.html</anchorfile>
      <anchor>a61d5c54b0419ec31b28bffd6911284e8</anchor>
      <arglist>(const DynamicsRegressorParameterType paramType)</arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>dummyElemName</name>
      <anchorfile>namespaceiDynTree_1_1Regressors.html</anchorfile>
      <anchor>a8102c82323250edad5f52dd4329c4919</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicsRegressorParameters.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/include/iDynTree/Regressors/</path>
    <filename>DynamicsRegressorParameters_8h</filename>
    <class kind="struct">iDynTree::Regressors::DynamicsRegressorParameter</class>
    <class kind="class">iDynTree::Regressors::DynamicsRegressorParametersList</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::Regressors</namespace>
    <member kind="enumeration">
      <type></type>
      <name>DynamicsRegressorParameterCategory</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gac32c11c76eeeddfd740defae8ada57fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_PARAM</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>ggac32c11c76eeeddfd740defae8ada57faa0ca940b1018b06855ee8b7ee1ed01110</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_PARAM</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>ggac32c11c76eeeddfd740defae8ada57faa70c7dbf0023919c95474096be8108b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DynamicsRegressorParameterType</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>ga4379a1e522cdc1710418f34a7d2039d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MASS</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ae6c122d58ec19a0b747715e2f08b0da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a124320cf8dad79bf17f84460bb373b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aca9006f7841c98a14b8992dccb483beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a6544ee2b0dddeefed6129e4bb7f7843c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XX</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a2865635c397d93612a3a02c6286a4acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XY</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aee70055d6803b05734b1058aaa5e0518</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ac1248c4e713d654a29c517ef13ab6688</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_YY</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a767ecd31c273e295808300e7d2b58ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_YZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aa36c2206ddeaaf120cb1504cbd96994d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_ZZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a1c014d1c2c57f867987e2ef39941eb71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aac053abb911956001a8fec85b6cd48d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ab85ae2452087f98ec0ce6e94e7be325e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6abb6606690b6ed35eb637df92b35c0fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aed5a3fad28fb01c4f8d5d4775ded9bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a6f6d9de1c3a8319bcb725c735977ebd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a2b65a0fcf4fc98f86522c6926921c903</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MASS</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ae6c122d58ec19a0b747715e2f08b0da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a124320cf8dad79bf17f84460bb373b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aca9006f7841c98a14b8992dccb483beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a6544ee2b0dddeefed6129e4bb7f7843c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XX</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a2865635c397d93612a3a02c6286a4acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XY</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aee70055d6803b05734b1058aaa5e0518</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ac1248c4e713d654a29c517ef13ab6688</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_YY</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a767ecd31c273e295808300e7d2b58ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_YZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aa36c2206ddeaaf120cb1504cbd96994d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_ZZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a1c014d1c2c57f867987e2ef39941eb71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aac053abb911956001a8fec85b6cd48d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ab85ae2452087f98ec0ce6e94e7be325e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6abb6606690b6ed35eb637df92b35c0fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aed5a3fad28fb01c4f8d5d4775ded9bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a6f6d9de1c3a8319bcb725c735977ebd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a2b65a0fcf4fc98f86522c6926921c903</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicsUtils.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>DynamicsUtils_8h</filename>
    <includes id="SpatialMotionVector_8h" name="SpatialMotionVector.h" local="no" imported="no">iDynTree/Core/SpatialMotionVector.h</includes>
    <includes id="SpatialForceVector_8h" name="SpatialForceVector.h" local="no" imported="no">iDynTree/Core/SpatialForceVector.h</includes>
    <includes id="SpatialInertia_8h" name="SpatialInertia.h" local="no" imported="no">iDynTree/Core/SpatialInertia.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type></type>
      <name>biasWrenchVelocityDerivative</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aed28749437ab0ff261382d34506ffad4</anchor>
      <arglist>(SpatialInertia M, SpatialMotionVector V)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EigenHelpers.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>EigenHelpers_8h</filename>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="MatrixFixSize_8h" name="MatrixFixSize.h" local="no" imported="no">iDynTree/Core/MatrixFixSize.h</includes>
    <includes id="SpatialMotionVector_8h" name="SpatialMotionVector.h" local="no" imported="no">iDynTree/Core/SpatialMotionVector.h</includes>
    <includes id="SpatialForceVector_8h" name="SpatialForceVector.h" local="no" imported="no">iDynTree/Core/SpatialForceVector.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>Eigen::Map&lt; Eigen::VectorXd &gt;</type>
      <name>iDynTreeEigenVector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>acad81b92d9885b5eec826b3066af8960</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; const Eigen::VectorXd &gt;</type>
      <name>iDynTreeEigenConstVector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a60faf8b72189d4496f7b7920d5ea3b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>iDynTreeEigenMatrix</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8dd9b043a4e3ceaa1b9a173e826020aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>iDynTreeEigenConstMatrix</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2d3ea8f566b9d5684e3b008a1f8c8d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; iDynTreeEigenMatrix &gt;</type>
      <name>iDynTreeEigenMatrixMap</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a26eec6588ddf3f8a8546b9f7899590eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; iDynTreeEigenConstMatrix &gt;</type>
      <name>iDynTreeEigenConstMatrixMap</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2b2522205c120424f4e8740b30bad6aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::VectorXd &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5481a54f7c787fd4cf55a0f5fd21bbb0</anchor>
      <arglist>(VectorDynSize &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0d2e67fee79a1191ed16ab1d522b0078</anchor>
      <arglist>(MatrixDynSize &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::VectorXd &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3f48b18c53414248343c3adaf5db988c</anchor>
      <arglist>(const VectorDynSize &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::VectorXd &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3d1f28b899ee110b8af0c92c9945455c</anchor>
      <arglist>(Span&lt; const double &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af9123b8fa68b1799fd197ab4a1acc618</anchor>
      <arglist>(const MatrixDynSize &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; double, VecSize, 1 &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4dc3574842fc660108111d96dac71b23</anchor>
      <arglist>(VectorFixSize&lt; VecSize &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::Matrix&lt; double, VecSize, 1 &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a17939782b66cf87bba581ac4d6db6270</anchor>
      <arglist>(const VectorFixSize&lt; VecSize &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; double, nRows, nCols, Eigen::RowMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac34e051a03bd114394e71919b795171e</anchor>
      <arglist>(MatrixFixSize&lt; nRows, nCols &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; double, nRows, 1 &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab60f7d72717e939931bf139b222b2832</anchor>
      <arglist>(MatrixFixSize&lt; nRows, 1 &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; double, 1, nCols &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3153f5d1e97e538fae73b906b511c518</anchor>
      <arglist>(MatrixFixSize&lt; 1, nCols &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::Matrix&lt; double, nRows, nCols, Eigen::RowMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9639a283e2caa3460084f5e3ac48aa49</anchor>
      <arglist>(const MatrixFixSize&lt; nRows, nCols &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; double, 6, 1 &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af643aa15e4ab96c1e19f5364893d4b0b</anchor>
      <arglist>(const SpatialMotionVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; double, 6, 1 &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4bb2e73fb98abd04aed4da600567b24b</anchor>
      <arglist>(const SpatialForceVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>acf2d7088e9fd094e6aa9c79bd4364b69</anchor>
      <arglist>(SpatialMotionVector &amp;vec, const Eigen::Matrix&lt; double, 6, 1 &gt; &amp;eigVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1943bf2f7027929dd5a9203b35d60b82</anchor>
      <arglist>(SpatialForceVector &amp;vec, const Eigen::Matrix&lt; double, 6, 1 &gt; &amp;eigVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad32fda4b9fa803472c83dea084ec14d8</anchor>
      <arglist>(Transform &amp;trans, const Eigen::Matrix4d &amp;eigMat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; typename Derived::Scalar, 3, 3, Eigen::RowMajor &gt;</type>
      <name>skew</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae5b49ed3e6ce87e8262be598d41b01bb</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; typename Derived::Scalar, 3, 1 &gt;</type>
      <name>unskew</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8e4347585aaeb967bfb2916b135b9357</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab923f233e9624344a28e361ddc2c4c10</anchor>
      <arglist>(iDynTreeMatrixType &amp;mat, const IndexRange rowRange, const IndexRange colRange, const MatrixFixSize&lt; nRows, nCols &gt; &amp;subMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a46433c21ed1226e759f6d2471731ff20</anchor>
      <arglist>(iDynTreeMatrixType &amp;mat, const IndexRange rowRange, const IndexRange colRange, const EigMatType &amp;subMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a15eb97c903bd5a5a44d7b36997a383f4</anchor>
      <arglist>(iDynTreeMatrixType &amp;mat, const IndexRange rowRange, const IndexRange colRange, const double subMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrixToIdentity</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>acab405374af27aa1405539284ac1c79a</anchor>
      <arglist>(iDynTreeMatrixType &amp;mat, const IndexRange rowRange, const IndexRange colRange)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrixToMinusIdentity</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a05bb9e8c80231289997f79ffc0b2e97c</anchor>
      <arglist>(iDynTreeMatrixType &amp;mat, const IndexRange rowRange, const IndexRange colRange)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubVector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6dd6e3fecb51492464bb6648090d9785</anchor>
      <arglist>(VectorDynSize &amp;vec, const IndexRange range, const VectorFixSize&lt; size &gt; &amp;subVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubVector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac065bee2dbb9521e07df4d769992ccd6</anchor>
      <arglist>(VectorDynSize &amp;vec, const IndexRange range, double subVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubVector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a60fc528e9cb5bb8f0a41ad51ae464ac5</anchor>
      <arglist>(VectorDynSize &amp;vec, const IndexRange range, const SpatialMotionVector &amp;twist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubVector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6c26a20e65041a0023677f35f84563f4</anchor>
      <arglist>(VectorDynSize &amp;vec, const IndexRange range, const SpatialForceVector &amp;wrench)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubVector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3707e4cd79954877014299710fee2607</anchor>
      <arglist>(VectorDynSize &amp;vec, const IndexRange range, const T &amp;subVec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EigenMathHelpers.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>EigenMathHelpers_8h</filename>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>void</type>
      <name>pseudoInverse_helper2</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a903238e532f385a1cd3db7b731fa884c</anchor>
      <arglist>(const MapType &amp;A, Eigen::JacobiSVD&lt; Eigen::MatrixXd &gt; &amp;svdDecomposition, MapType &amp;Apinv, double tolerance, unsigned int computationOptions=Eigen::ComputeThinU|Eigen::ComputeThinV)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pseudoInverse_helper1</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aacb98344c6221dbf5e5d7678e3e75136</anchor>
      <arglist>(const MapType &amp;A, Eigen::JacobiSVD&lt; Eigen::MatrixXd &gt; &amp;svdDecomposition, MapType &amp;Apinv, double tolerance, unsigned int computationOptions=Eigen::ComputeThinU|Eigen::ComputeThinV)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pseudoInverse</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0b20a0208cab1ac6cdbd661612ca4c1b</anchor>
      <arglist>(const MapType A, MapType Apinv, double tolerance, unsigned int computationOptions=Eigen::ComputeThinU|Eigen::ComputeThinV)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EigenSparseHelpers.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>EigenSparseHelpers_8h</filename>
    <includes id="SparseMatrix_8h" name="SparseMatrix.h" local="no" imported="no">iDynTree/Core/SparseMatrix.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::SparseMatrix&lt; double, Eigen::RowMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ade809da6861adf8889108908fd931ee5</anchor>
      <arglist>(iDynTree::SparseMatrix&lt; iDynTree::RowMajor &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::SparseMatrix&lt; double, Eigen::RowMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3c0db1fc07367309957972bd66454c7e</anchor>
      <arglist>(const iDynTree::SparseMatrix&lt; iDynTree::RowMajor &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::SparseMatrix&lt; double, Eigen::ColMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a90ae57e2a42e7bad1cedda56db4ee3d4</anchor>
      <arglist>(iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::SparseMatrix&lt; double, Eigen::ColMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae48cfcc0f75e51f21ae1ac34de84efc1</anchor>
      <arglist>(const iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;mat)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Environment.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/visualization/src/</path>
    <filename>Environment_8cpp</filename>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">Environment.h</includes>
    <includes id="IrrlichtUtils_8h" name="IrrlichtUtils.h" local="yes" imported="no">IrrlichtUtils.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Environment.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/visualization/src/</path>
    <filename>Environment_8h</filename>
    <includes id="Visualizer_8h" name="Visualizer.h" local="no" imported="no">iDynTree/Visualizer.h</includes>
    <includes id="Light_8h" name="Light.h" local="yes" imported="no">Light.h</includes>
    <includes id="DummyImplementations_8h" name="DummyImplementations.h" local="yes" imported="no">DummyImplementations.h</includes>
    <class kind="class">iDynTree::Environment</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>essentialParameters.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/src/</path>
    <filename>essentialParameters_8cpp</filename>
    <includes id="essentialParameters_8hpp" name="essentialParameters.hpp" local="yes" imported="no">essentialParameters.hpp</includes>
    <includes id="dirl__utils_8hpp" name="dirl_utils.hpp" local="yes" imported="no">dirl_utils.hpp</includes>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
    <member kind="function">
      <type>int</type>
      <name>calculateEssentialParametersSubspace</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>ad6902d3c87f8d80073f5f9f3f8ea6416</anchor>
      <arglist>(DynamicRegressorGenerator &amp;regressor, const IBatchDynamicDataset &amp;dataset, Eigen::MatrixXd &amp;essential_parameter_basis, const double tol=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calculateEssentialParametersSubspace</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>ae845dc5937089f25832134b5d4baee1e</anchor>
      <arglist>(DynamicRegressorGenerator &amp;regressor, const IBatchDynamicDataset &amp;dataset, Eigen::MatrixXd &amp;essential_parameter_basis, Eigen::VectorXd &amp;sigma, const double tol=1e-6)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>essentialParameters.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/include/kdl_codyco/regressors/</path>
    <filename>essentialParameters_8hpp</filename>
    <includes id="dynamicRegressorGenerator_8hpp" name="dynamicRegressorGenerator.hpp" local="yes" imported="no">dynamicRegressorGenerator.hpp</includes>
    <includes id="DynamicDatasetInterfaces_8hpp" name="DynamicDatasetInterfaces.hpp" local="yes" imported="no">DynamicDatasetInterfaces.hpp</includes>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
    <member kind="function">
      <type>int</type>
      <name>calculateEssentialParametersSubspace</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>ad6902d3c87f8d80073f5f9f3f8ea6416</anchor>
      <arglist>(DynamicRegressorGenerator &amp;regressor, const IBatchDynamicDataset &amp;dataset, Eigen::MatrixXd &amp;essential_parameter_basis, const double tol=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calculateEssentialParametersSubspace</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>ae845dc5937089f25832134b5d4baee1e</anchor>
      <arglist>(DynamicRegressorGenerator &amp;regressor, const IBatchDynamicDataset &amp;dataset, Eigen::MatrixXd &amp;essential_parameter_basis, Eigen::VectorXd &amp;sigma, const double tol=1e-6)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExtendedKalmanFilter.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/src/</path>
    <filename>ExtendedKalmanFilter_8cpp</filename>
    <includes id="ExtendedKalmanFilter_8h" name="ExtendedKalmanFilter.h" local="no" imported="no">iDynTree/Estimation/ExtendedKalmanFilter.h</includes>
  </compound>
  <compound kind="file">
    <name>ExtendedKalmanFilter.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/include/iDynTree/Estimation/</path>
    <filename>ExtendedKalmanFilter_8h</filename>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <class kind="class">iDynTree::DiscreteExtendedKalmanFilterHelper</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ExternalWrenchesEstimation.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/src/</path>
    <filename>ExternalWrenchesEstimation_8cpp</filename>
    <includes id="ExternalWrenchesEstimation_8h" name="ExternalWrenchesEstimation.h" local="no" imported="no">iDynTree/Estimation/ExternalWrenchesEstimation.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="EigenMathHelpers_8h" name="EigenMathHelpers.h" local="no" imported="no">iDynTree/Core/EigenMathHelpers.h</includes>
    <includes id="SpatialMomentum_8h" name="SpatialMomentum.h" local="no" imported="no">iDynTree/Core/SpatialMomentum.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="SubModel_8h" name="SubModel.h" local="no" imported="no">iDynTree/Model/SubModel.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <includes id="JointState_8h" name="JointState.h" local="no" imported="no">iDynTree/Model/JointState.h</includes>
    <includes id="ContactWrench_8h" name="ContactWrench.h" local="no" imported="no">iDynTree/Model/ContactWrench.h</includes>
    <includes id="LinkTraversalsCache_8h" name="LinkTraversalsCache.h" local="no" imported="no">iDynTree/Model/LinkTraversalsCache.h</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <includes id="SixAxisForceTorqueSensor_8h" name="SixAxisForceTorqueSensor.h" local="no" imported="no">iDynTree/Sensors/SixAxisForceTorqueSensor.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>Wrench</type>
      <name>getMeasuredWrench</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae6d4434f0935a6f85b135ac73e771752</anchor>
      <arglist>(const SensorsList &amp;sensor_list, const SensorsMeasurements &amp;sensor_measures, const LinkIndex link_id)</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>computeKnownTermsOfEstimationEquationWithoutInternalFT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a64f476e0c71ad2392bbc2207d342806b</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;modelTraversal, const JointPosDoubleArray &amp;jointPos, const LinkVelArray &amp;linkVel, const LinkAccArray &amp;linkProperAcc, estimateExternalWrenchesBuffers &amp;bufs)</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>computeKnownTermsOfEstimationEquationWithInternalFT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a64d36c9f59b5635f6e444e8210d8842a</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;subModelTraversal, const SensorsList &amp;sensors, const JointPosDoubleArray &amp;jointPos, const LinkVelArray &amp;linkVel, const LinkAccArray &amp;linkProperAcc, const SensorsMeasurements &amp;ftSensorsMeasurements, estimateExternalWrenchesBuffers &amp;bufs)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>countUnknowns</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a208b8a11d479b53928ea9f3c4be32c6f</anchor>
      <arglist>(const Traversal &amp;traversal, const LinkUnknownWrenchContacts &amp;unknownWrenches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeMatrixOfEstimationEquationAndExtWrenchKnownTerms</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4cfb65d4fc12a46b1ebf2b10f67610b9</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const LinkUnknownWrenchContacts &amp;unknownWrenches, const JointPosDoubleArray &amp;jointPos, const size_t subModelIndex, estimateExternalWrenchesBuffers &amp;bufs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeResultsOfEstimation</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a26b63a06d4d2a0ec184ceabb8ce0b0dc</anchor>
      <arglist>(const Traversal &amp;traversal, const LinkUnknownWrenchContacts &amp;unknownWrenches, const size_t subModelIndex, const estimateExternalWrenchesBuffers &amp;bufs, LinkContactWrenches &amp;outputContactWrenches)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>estimateExternalWrenchesWithoutInternalFT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad96bdadc6f50434261b8fdab971904e6</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const LinkUnknownWrenchContacts &amp;unknownWrenches, const JointPosDoubleArray &amp;jointPos, const LinkVelArray &amp;linkVel, const LinkAccArray &amp;linkProperAcc, estimateExternalWrenchesBuffers &amp;bufs, LinkContactWrenches &amp;outputContactWrenches)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>estimateExternalWrenches</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4c628669d7801fee070c5ac32312b45d</anchor>
      <arglist>(const Model &amp;model, const SubModelDecomposition &amp;subModels, const SensorsList &amp;sensors, const LinkUnknownWrenchContacts &amp;unknownWrenches, const JointPosDoubleArray &amp;jointPos, const LinkVelArray &amp;linkVel, const LinkAccArray &amp;linkProperAcc, const SensorsMeasurements &amp;ftSensorsMeasurements, estimateExternalWrenchesBuffers &amp;bufs, LinkContactWrenches &amp;outputContactWrenches)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dynamicsEstimationForwardVelAccKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4552fdf67855209419f189466fbb8e69</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const Vector3 &amp;base_classicalProperAcc, const Vector3 &amp;base_angularVel, const Vector3 &amp;base_angularAcc, const JointPosDoubleArray &amp;jointPos, const JointDOFsDoubleArray &amp;jointVel, const JointDOFsDoubleArray &amp;jointAcc, LinkVelArray &amp;linkVel, LinkAccArray &amp;linkProperAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeLinkNetWrenchesWithoutGravity</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2cf3011d218d8a98440bdcafdd1d54e6</anchor>
      <arglist>(const Model &amp;model, const LinkVelArray &amp;linkVel, const LinkAccArray &amp;linkProperAcc, LinkNetTotalWrenchesWithoutGravity &amp;linkNetWrenchesWithoutGravity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dynamicsEstimationForwardVelKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9c5c034c8fc89c4d0d19f17d2134a7a4</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const Vector3 &amp;base_angularVel, const JointPosDoubleArray &amp;jointPos, const JointDOFsDoubleArray &amp;jointVel, LinkVelArray &amp;linkVel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>estimateLinkContactWrenchesFromLinkNetExternalWrenches</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab6c0784c22088705cc07732b5b29dd4b</anchor>
      <arglist>(const Model &amp;model, const LinkUnknownWrenchContacts &amp;unknownWrenches, const LinkNetExternalWrenches &amp;netExtWrenches, LinkContactWrenches &amp;outputContactWrenches)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExternalWrenchesEstimation.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/include/iDynTree/Estimation/</path>
    <filename>ExternalWrenchesEstimation_8h</filename>
    <includes id="Direction_8h" name="Direction.h" local="no" imported="no">iDynTree/Core/Direction.h</includes>
    <includes id="Position_8h" name="Position.h" local="no" imported="no">iDynTree/Core/Position.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <class kind="struct">iDynTree::UnknownWrenchContact</class>
    <class kind="class">iDynTree::LinkUnknownWrenchContacts</class>
    <class kind="struct">iDynTree::estimateExternalWrenchesBuffers</class>
    <namespace>iDynTree</namespace>
    <member kind="enumeration">
      <type></type>
      <name>UnknownWrenchContactType</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3af0bfcd7989e409b610847e3b397b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FULL_WRENCH</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3af0bfcd7989e409b610847e3b397b26a6abd6bcbc638153015ff2229a4cc6c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PURE_FORCE</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3af0bfcd7989e409b610847e3b397b26aeb51903155017085b84cc6aac2e2bba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PURE_FORCE_WITH_KNOWN_DIRECTION</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3af0bfcd7989e409b610847e3b397b26a7e0e568e396d7cd82bf2fa23ca525a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_UNKNOWNS</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3af0bfcd7989e409b610847e3b397b26a40b36711643e2573ff0f03773c0555e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>estimateExternalWrenchesWithoutInternalFT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad96bdadc6f50434261b8fdab971904e6</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const LinkUnknownWrenchContacts &amp;unknownWrenches, const JointPosDoubleArray &amp;jointPos, const LinkVelArray &amp;linkVel, const LinkAccArray &amp;linkProperAcc, estimateExternalWrenchesBuffers &amp;bufs, LinkContactWrenches &amp;outputContactWrenches)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>estimateExternalWrenches</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4c628669d7801fee070c5ac32312b45d</anchor>
      <arglist>(const Model &amp;model, const SubModelDecomposition &amp;subModels, const SensorsList &amp;sensors, const LinkUnknownWrenchContacts &amp;unknownWrenches, const JointPosDoubleArray &amp;jointPos, const LinkVelArray &amp;linkVel, const LinkAccArray &amp;linkProperAcc, const SensorsMeasurements &amp;ftSensorsMeasurements, estimateExternalWrenchesBuffers &amp;bufs, LinkContactWrenches &amp;outputContactWrenches)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dynamicsEstimationForwardVelAccKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4552fdf67855209419f189466fbb8e69</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const Vector3 &amp;base_classicalProperAcc, const Vector3 &amp;base_angularVel, const Vector3 &amp;base_angularAcc, const JointPosDoubleArray &amp;jointPos, const JointDOFsDoubleArray &amp;jointVel, const JointDOFsDoubleArray &amp;jointAcc, LinkVelArray &amp;linkVel, LinkAccArray &amp;linkProperAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dynamicsEstimationForwardVelKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9c5c034c8fc89c4d0d19f17d2134a7a4</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const Vector3 &amp;base_angularVel, const JointPosDoubleArray &amp;jointPos, const JointDOFsDoubleArray &amp;jointVel, LinkVelArray &amp;linkVel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeLinkNetWrenchesWithoutGravity</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2cf3011d218d8a98440bdcafdd1d54e6</anchor>
      <arglist>(const Model &amp;model, const LinkVelArray &amp;linkVel, const LinkAccArray &amp;linkProperAcc, LinkNetTotalWrenchesWithoutGravity &amp;linkNetWrenchesWithoutGravity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>estimateLinkContactWrenchesFromLinkNetExternalWrenches</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab6c0784c22088705cc07732b5b29dd4b</anchor>
      <arglist>(const Model &amp;model, const LinkUnknownWrenchContacts &amp;unknownWrenches, const LinkNetExternalWrenches &amp;netExtWrenches, LinkContactWrenches &amp;outputContactWrenches)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExtWrenchesAndJointTorquesEstimator.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/src/</path>
    <filename>ExtWrenchesAndJointTorquesEstimator_8cpp</filename>
    <includes id="ExtWrenchesAndJointTorquesEstimator_8h" name="ExtWrenchesAndJointTorquesEstimator.h" local="no" imported="no">iDynTree/Estimation/ExtWrenchesAndJointTorquesEstimator.h</includes>
    <includes id="ExternalWrenchesEstimation_8h" name="ExternalWrenchesEstimation.h" local="no" imported="no">iDynTree/Estimation/ExternalWrenchesEstimation.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="EigenMathHelpers_8h" name="EigenMathHelpers.h" local="no" imported="no">iDynTree/Core/EigenMathHelpers.h</includes>
    <includes id="SpatialMomentum_8h" name="SpatialMomentum.h" local="no" imported="no">iDynTree/Core/SpatialMomentum.h</includes>
    <includes id="ClassicalAcc_8h" name="ClassicalAcc.h" local="no" imported="no">iDynTree/Core/ClassicalAcc.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="SubModel_8h" name="SubModel.h" local="no" imported="no">iDynTree/Model/SubModel.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <includes id="JointState_8h" name="JointState.h" local="no" imported="no">iDynTree/Model/JointState.h</includes>
    <includes id="ContactWrench_8h" name="ContactWrench.h" local="no" imported="no">iDynTree/Model/ContactWrench.h</includes>
    <includes id="Dynamics_8h" name="Dynamics.h" local="no" imported="no">iDynTree/Model/Dynamics.h</includes>
    <includes id="ModelTransformers_8h" name="ModelTransformers.h" local="no" imported="no">iDynTree/Model/ModelTransformers.h</includes>
    <includes id="ModelSensorsTransformers_8h" name="ModelSensorsTransformers.h" local="no" imported="no">iDynTree/Sensors/ModelSensorsTransformers.h</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <includes id="SixAxisForceTorqueSensor_8h" name="SixAxisForceTorqueSensor.h" local="no" imported="no">iDynTree/Sensors/SixAxisForceTorqueSensor.h</includes>
    <includes id="PredictSensorsMeasurements_8h" name="PredictSensorsMeasurements.h" local="no" imported="no">iDynTree/Sensors/PredictSensorsMeasurements.h</includes>
    <includes id="ModelLoader_8h" name="ModelLoader.h" local="no" imported="no">iDynTree/ModelIO/ModelLoader.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>void</type>
      <name>getFTJointNames</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a10e8ce019bcc651b1f8f7d20ff89e006</anchor>
      <arglist>(const SensorsList &amp;_sensors, std::vector&lt; std::string &gt; &amp;ftJointNames)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExtWrenchesAndJointTorquesEstimator.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/include/iDynTree/Estimation/</path>
    <filename>ExtWrenchesAndJointTorquesEstimator_8h</filename>
    <includes id="ExternalWrenchesEstimation_8h" name="ExternalWrenchesEstimation.h" local="no" imported="no">iDynTree/Estimation/ExternalWrenchesEstimation.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="SubModel_8h" name="SubModel.h" local="no" imported="no">iDynTree/Model/SubModel.h</includes>
    <includes id="ContactWrench_8h" name="ContactWrench.h" local="no" imported="no">iDynTree/Model/ContactWrench.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="JointState_8h" name="JointState.h" local="no" imported="no">iDynTree/Model/JointState.h</includes>
    <includes id="FreeFloatingState_8h" name="FreeFloatingState.h" local="no" imported="no">iDynTree/Model/FreeFloatingState.h</includes>
    <includes id="LinkTraversalsCache_8h" name="LinkTraversalsCache.h" local="no" imported="no">iDynTree/Model/LinkTraversalsCache.h</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <class kind="class">iDynTree::ExtWrenchesAndJointTorquesEstimator</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>FixedJoint.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>FixedJoint_8cpp</filename>
    <includes id="SpatialMotionVector_8h" name="SpatialMotionVector.h" local="no" imported="no">iDynTree/Core/SpatialMotionVector.h</includes>
    <includes id="TransformDerivative_8h" name="TransformDerivative.h" local="no" imported="no">iDynTree/Core/TransformDerivative.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="FixedJoint_8h" name="FixedJoint.h" local="no" imported="no">iDynTree/Model/FixedJoint.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>FixedJoint.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>FixedJoint_8h</filename>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <includes id="IJoint_8h" name="IJoint.h" local="no" imported="no">iDynTree/Model/IJoint.h</includes>
    <class kind="class">iDynTree::FixedJoint</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>FixedStepIntegrator.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>FixedStepIntegrator_8cpp</filename>
    <includes id="FixedStepIntegrator_8h" name="FixedStepIntegrator.h" local="no" imported="no">iDynTree/Integrators/FixedStepIntegrator.h</includes>
    <includes id="DynamicalSystem_8h" name="DynamicalSystem.h" local="no" imported="no">iDynTree/DynamicalSystem.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
    <namespace>iDynTree::optimalcontrol::integrators</namespace>
  </compound>
  <compound kind="file">
    <name>FixedStepIntegrator.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/Integrators/</path>
    <filename>FixedStepIntegrator_8h</filename>
    <includes id="Integrator_8h" name="Integrator.h" local="no" imported="no">iDynTree/Integrator.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <class kind="class">iDynTree::optimalcontrol::integrators::FixedStepIntegrator</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
    <namespace>iDynTree::optimalcontrol::integrators</namespace>
  </compound>
  <compound kind="file">
    <name>FloorGridSceneNode.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/visualization/src/</path>
    <filename>FloorGridSceneNode_8cpp</filename>
    <includes id="FloorGridSceneNode_8h" name="FloorGridSceneNode.h" local="yes" imported="no">FloorGridSceneNode.h</includes>
    <includes id="IrrlichtUtils_8h" name="IrrlichtUtils.h" local="yes" imported="no">IrrlichtUtils.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>FloorGridSceneNode.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/visualization/src/</path>
    <filename>FloorGridSceneNode_8h</filename>
    <includes id="Visualizer_8h" name="Visualizer.h" local="no" imported="no">iDynTree/Visualizer.h</includes>
    <class kind="class">iDynTree::CFloorGridSceneNode</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ForceTorqueSensorElement.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/</path>
    <filename>ForceTorqueSensorElement_8cpp</filename>
    <includes id="ForceTorqueSensorElement_8h" name="ForceTorqueSensorElement.h" local="yes" imported="no">ForceTorqueSensorElement.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="SixAxisForceTorqueSensor_8h" name="SixAxisForceTorqueSensor.h" local="no" imported="no">iDynTree/Sensors/SixAxisForceTorqueSensor.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ForceTorqueSensorElement.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/private/</path>
    <filename>ForceTorqueSensorElement_8h</filename>
    <includes id="XMLElement_8h" name="XMLElement.h" local="no" imported="no">iDynTree/XMLElement.h</includes>
    <includes id="SensorElement_8h" name="SensorElement.h" local="yes" imported="no">SensorElement.h</includes>
    <class kind="class">iDynTree::ForceTorqueSensorElement</class>
    <class kind="class">iDynTree::ForceTorqueSensorHelper</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ForceVector3.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>ForceVector3_8cpp</filename>
    <includes id="ForceVector3_8h" name="ForceVector3.h" local="no" imported="no">iDynTree/Core/ForceVector3.h</includes>
    <includes id="LinearForceVector3_8h" name="LinearForceVector3.h" local="no" imported="no">iDynTree/Core/LinearForceVector3.h</includes>
    <includes id="AngularForceVector3_8h" name="AngularForceVector3.h" local="no" imported="no">iDynTree/Core/AngularForceVector3.h</includes>
    <includes id="PrivatePreProcessorUtils_8h" name="PrivatePreProcessorUtils.h" local="no" imported="no">iDynTree/Core/PrivatePreProcessorUtils.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORCEVECTOR3SEMANTICS_INSTANCE_HDR</name>
      <anchorfile>ForceVector3_8cpp.html</anchorfile>
      <anchor>aa09ac01e91f72e47a0fe7d9168a24a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORCEVECTOR3_INSTANCE_HDR</name>
      <anchorfile>ForceVector3_8cpp.html</anchorfile>
      <anchor>a0cd94e70bdfdf4fa4013bcea5d76ff52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ForceVector3.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>ForceVector3_8h</filename>
    <includes id="GeomVector3_8h" name="GeomVector3.h" local="no" imported="no">iDynTree/Core/GeomVector3.h</includes>
    <includes id="PrivateMotionForceVertorAssociations_8h" name="PrivateMotionForceVertorAssociations.h" local="no" imported="no">iDynTree/Core/PrivateMotionForceVertorAssociations.h</includes>
    <class kind="class">iDynTree::ForceVector3Semantics</class>
    <class kind="class">iDynTree::ForceVector3</class>
    <namespace>iDynTree</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORCEVECTOR3SEMANTICS_TEMPLATE_HDR</name>
      <anchorfile>ForceVector3_8h.html</anchorfile>
      <anchor>a658ae5575bbfbfc31c742e4ec0c9e7a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORCEVECTOR3_TEMPLATE_HDR</name>
      <anchorfile>ForceVector3_8h.html</anchorfile>
      <anchor>ad6bc2ea0596c36e83de098e5b2c354e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ForwardEuler.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>ForwardEuler_8cpp</filename>
    <includes id="ForwardEuler_8h" name="ForwardEuler.h" local="no" imported="no">iDynTree/Integrators/ForwardEuler.h</includes>
    <includes id="DynamicalSystem_8h" name="DynamicalSystem.h" local="no" imported="no">iDynTree/DynamicalSystem.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
    <namespace>iDynTree::optimalcontrol::integrators</namespace>
  </compound>
  <compound kind="file">
    <name>ForwardEuler.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/Integrators/</path>
    <filename>ForwardEuler_8h</filename>
    <includes id="FixedStepIntegrator_8h" name="FixedStepIntegrator.h" local="no" imported="no">iDynTree/Integrators/FixedStepIntegrator.h</includes>
    <class kind="class">iDynTree::optimalcontrol::integrators::ForwardEuler</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
    <namespace>iDynTree::optimalcontrol::integrators</namespace>
  </compound>
  <compound kind="file">
    <name>ForwardKinematics.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>ForwardKinematics_8cpp</filename>
    <includes id="ForwardKinematics_8h" name="ForwardKinematics.h" local="no" imported="no">iDynTree/Model/ForwardKinematics.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="FreeFloatingState_8h" name="FreeFloatingState.h" local="no" imported="no">iDynTree/Model/FreeFloatingState.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>ForwardPositionKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a7d9ed3aeb57a5730beb59828bdf2301c</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;jointPos, LinkPositions &amp;linkPos)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardPositionKinematics</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga41ad76666d447a42318ab5778b3ad18e</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const Transform &amp;worldHbase, const VectorDynSize &amp;jointPositions, LinkPositions &amp;linkPositions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardPosVelAccKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af853268cad240fb96e9190b6c07d7dfb</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::Traversal &amp;traversal, const iDynTree::FreeFloatingPos &amp;robotPos, const iDynTree::FreeFloatingVel &amp;robotVel, const iDynTree::FreeFloatingAcc &amp;robotAcc, iDynTree::LinkPositions &amp;linkPos, iDynTree::LinkVelArray &amp;linkVel, iDynTree::LinkAccArray &amp;linkAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardVelAccKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a11cc6474718df311245c95f5452f7608</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::Traversal &amp;traversal, const iDynTree::FreeFloatingPos &amp;robotPos, const iDynTree::FreeFloatingVel &amp;robotVel, const iDynTree::FreeFloatingAcc &amp;robotAcc, iDynTree::LinkVelArray &amp;linkVel, iDynTree::LinkAccArray &amp;linkAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardPosVelKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a82da15110d52ad717aa6c145f1c8a681</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::Traversal &amp;traversal, const iDynTree::FreeFloatingPos &amp;robotPos, const iDynTree::FreeFloatingVel &amp;robotVel, iDynTree::LinkPositions &amp;linkPos, iDynTree::LinkVelArray &amp;linkVel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardAccKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2848acd42a384966c3f2bbd760e29baa</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const FreeFloatingAcc &amp;robotAcc, const LinkVelArray &amp;linkVel, LinkAccArray &amp;linkAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardBiasAccKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a16f1071f088ed89178092de7b820558d</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const SpatialAcc &amp;baseBiasAcc, const LinkVelArray &amp;linkVel, LinkAccArray &amp;linkBiasAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardBiasAccKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2249785bd035cf4d2f35851d9eb50d26</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const LinkVelArray &amp;linkVel, LinkAccArray &amp;linkBiasAcc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ForwardKinematics.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>ForwardKinematics_8h</filename>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>ForwardPositionKinematics</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga41ad76666d447a42318ab5778b3ad18e</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const Transform &amp;worldHbase, const VectorDynSize &amp;jointPositions, LinkPositions &amp;linkPositions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardPositionKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a7d9ed3aeb57a5730beb59828bdf2301c</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;jointPos, LinkPositions &amp;linkPos)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardVelAccKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a11cc6474718df311245c95f5452f7608</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::Traversal &amp;traversal, const iDynTree::FreeFloatingPos &amp;robotPos, const iDynTree::FreeFloatingVel &amp;robotVel, const iDynTree::FreeFloatingAcc &amp;robotAcc, iDynTree::LinkVelArray &amp;linkVel, iDynTree::LinkAccArray &amp;linkAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardPosVelAccKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af853268cad240fb96e9190b6c07d7dfb</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::Traversal &amp;traversal, const iDynTree::FreeFloatingPos &amp;robotPos, const iDynTree::FreeFloatingVel &amp;robotVel, const iDynTree::FreeFloatingAcc &amp;robotAcc, iDynTree::LinkPositions &amp;linkPos, iDynTree::LinkVelArray &amp;linkVel, iDynTree::LinkAccArray &amp;linkAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardPosVelKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a82da15110d52ad717aa6c145f1c8a681</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::Traversal &amp;traversal, const iDynTree::FreeFloatingPos &amp;robotPos, const iDynTree::FreeFloatingVel &amp;robotVel, iDynTree::LinkPositions &amp;linkPos, iDynTree::LinkVelArray &amp;linkVel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardAccKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2848acd42a384966c3f2bbd760e29baa</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const FreeFloatingAcc &amp;robotAcc, const LinkVelArray &amp;linkVel, LinkAccArray &amp;linkAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardBiasAccKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a16f1071f088ed89178092de7b820558d</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const SpatialAcc &amp;baseBiasAcc, const LinkVelArray &amp;linkVel, LinkAccArray &amp;linkBiasAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardBiasAccKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2249785bd035cf4d2f35851d9eb50d26</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const LinkVelArray &amp;linkVel, LinkAccArray &amp;linkBiasAcc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FreeFloatingMatrices.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>FreeFloatingMatrices_8cpp</filename>
    <includes id="FreeFloatingMatrices_8h" name="FreeFloatingMatrices.h" local="no" imported="no">iDynTree/Model/FreeFloatingMatrices.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>FreeFloatingMatrices.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>FreeFloatingMatrices_8h</filename>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <class kind="class">iDynTree::FrameFreeFloatingJacobian</class>
    <class kind="class">iDynTree::MomentumFreeFloatingJacobian</class>
    <class kind="class">iDynTree::FreeFloatingMassMatrix</class>
    <namespace>iDynTree</namespace>
    <member kind="enumeration">
      <type></type>
      <name>FrameVelocityRepresentation</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0089c6dac34bc6a4f623d9e9e565375a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INERTIAL_FIXED_REPRESENTATION</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0089c6dac34bc6a4f623d9e9e565375aaf9e6abb240a3f5f6f3eb386c21277eeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BODY_FIXED_REPRESENTATION</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0089c6dac34bc6a4f623d9e9e565375aad3aa0f715d4709ae83c826d14ffb1dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIXED_REPRESENTATION</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0089c6dac34bc6a4f623d9e9e565375aacfd8cfdeac3248d26f145bd0998f93b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FreeFloatingState.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>FreeFloatingState_8cpp</filename>
    <includes id="FreeFloatingState_8h" name="FreeFloatingState.h" local="no" imported="no">iDynTree/Model/FreeFloatingState.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>FreeFloatingState.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>FreeFloatingState_8h</filename>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="no" imported="no">iDynTree/Core/Twist.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <includes id="JointState_8h" name="JointState.h" local="no" imported="no">iDynTree/Model/JointState.h</includes>
    <class kind="class">iDynTree::FreeFloatingPos</class>
    <class kind="class">iDynTree::FreeFloatingGeneralizedTorques</class>
    <class kind="class">iDynTree::FreeFloatingVel</class>
    <class kind="class">iDynTree::FreeFloatingAcc</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>GeometryElement.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/</path>
    <filename>GeometryElement_8cpp</filename>
    <includes id="GeometryElement_8h" name="GeometryElement.h" local="yes" imported="no">GeometryElement.h</includes>
    <includes id="URDFParsingUtils_8h" name="URDFParsingUtils.h" local="yes" imported="no">URDFParsingUtils.h</includes>
    <includes id="XMLAttribute_8h" name="XMLAttribute.h" local="no" imported="no">iDynTree/XMLAttribute.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="SolidShapes_8h" name="SolidShapes.h" local="no" imported="no">iDynTree/Model/SolidShapes.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>GeometryElement.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/private/</path>
    <filename>GeometryElement_8h</filename>
    <includes id="XMLElement_8h" name="XMLElement.h" local="no" imported="no">iDynTree/XMLElement.h</includes>
    <class kind="class">iDynTree::GeometryElement</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>GeomVector3.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>GeomVector3_8cpp</filename>
    <includes id="GeomVector3_8h" name="GeomVector3.h" local="no" imported="no">iDynTree/Core/GeomVector3.h</includes>
    <includes id="LinearMotionVector3_8h" name="LinearMotionVector3.h" local="no" imported="no">iDynTree/Core/LinearMotionVector3.h</includes>
    <includes id="AngularMotionVector3_8h" name="AngularMotionVector3.h" local="no" imported="no">iDynTree/Core/AngularMotionVector3.h</includes>
    <includes id="LinearForceVector3_8h" name="LinearForceVector3.h" local="no" imported="no">iDynTree/Core/LinearForceVector3.h</includes>
    <includes id="AngularForceVector3_8h" name="AngularForceVector3.h" local="no" imported="no">iDynTree/Core/AngularForceVector3.h</includes>
    <includes id="PrivatePreProcessorUtils_8h" name="PrivatePreProcessorUtils.h" local="no" imported="no">iDynTree/Core/PrivatePreProcessorUtils.h</includes>
    <includes id="PrivateSemanticsMacros_8h" name="PrivateSemanticsMacros.h" local="no" imported="no">iDynTree/Core/PrivateSemanticsMacros.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GEOMVECTOR3SEMANTICS_INSTANCE_HDR</name>
      <anchorfile>GeomVector3_8cpp.html</anchorfile>
      <anchor>abb088d7537bf4abd3c5a3e43dd6c060e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GEOMVECTOR3_INSTANCE_HDR</name>
      <anchorfile>GeomVector3_8cpp.html</anchorfile>
      <anchor>a041fe13252ec509ee7336152cfa7113c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GeomVector3.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>GeomVector3_8h</filename>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="Rotation_8h" name="Rotation.h" local="no" imported="no">iDynTree/Core/Rotation.h</includes>
    <includes id="PrivateMotionForceVertorAssociations_8h" name="PrivateMotionForceVertorAssociations.h" local="no" imported="no">iDynTree/Core/PrivateMotionForceVertorAssociations.h</includes>
    <class kind="class">iDynTree::GeomVector3Semantics</class>
    <class kind="class">iDynTree::GeomVector3</class>
    <class kind="class">iDynTree::GeomVector3::SpatialVector</class>
    <namespace>iDynTree</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GEOMVECTOR3SEMANTICS_TEMPLATE_HDR</name>
      <anchorfile>GeomVector3_8h.html</anchorfile>
      <anchor>aa69c5aece87f61ae14926f70c86c21c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GEOMVECTOR3_TEMPLATE_HDR</name>
      <anchorfile>GeomVector3_8h.html</anchorfile>
      <anchor>acac4f3e912666fe202ea004c75a7a9ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GravityCompensationHelpers.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/src/</path>
    <filename>GravityCompensationHelpers_8cpp</filename>
    <includes id="GravityCompensationHelpers_8h" name="GravityCompensationHelpers.h" local="yes" imported="no">iDynTree/Estimation/GravityCompensationHelpers.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>GravityCompensationHelpers.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/include/iDynTree/Estimation/</path>
    <filename>GravityCompensationHelpers_8h</filename>
    <includes id="FreeFloatingState_8h" name="FreeFloatingState.h" local="no" imported="no">iDynTree/Model/FreeFloatingState.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="Dynamics_8h" name="Dynamics.h" local="no" imported="no">iDynTree/Model/Dynamics.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="ClassicalAcc_8h" name="ClassicalAcc.h" local="no" imported="no">iDynTree/Core/ClassicalAcc.h</includes>
    <includes id="ExternalWrenchesEstimation_8h" name="ExternalWrenchesEstimation.h" local="no" imported="no">iDynTree/Estimation/ExternalWrenchesEstimation.h</includes>
    <class kind="class">iDynTree::GravityCompensationHelper</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>GyroscopeSensor.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/sensors/src/</path>
    <filename>GyroscopeSensor_8cpp</filename>
    <includes id="AngularMotionVector3_8h" name="AngularMotionVector3.h" local="yes" imported="no">iDynTree/Core/AngularMotionVector3.h</includes>
    <includes id="GyroscopeSensor_8h" name="GyroscopeSensor.h" local="yes" imported="no">iDynTree/Sensors/GyroscopeSensor.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="yes" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="yes" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="yes" imported="no">iDynTree/Core/Twist.h</includes>
    <class kind="struct">iDynTree::GyroscopeSensor::GyroscopePrivateAttributes</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>GyroscopeSensor.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/sensors/include/iDynTree/Sensors/</path>
    <filename>GyroscopeSensor_8h</filename>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <class kind="class">iDynTree::GyroscopeSensor</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>idyntree-model-info.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/</path>
    <filename>idyntree-model-info_8cpp</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="ModelLoader_8h" name="ModelLoader.h" local="no" imported="no">iDynTree/ModelIO/ModelLoader.h</includes>
    <includes id="KinDynComputations_8h" name="KinDynComputations.h" local="no" imported="no">iDynTree/KinDynComputations.h</includes>
    <includes id="cmdline_8h" name="cmdline.h" local="yes" imported="no">cmdline.h</includes>
    <member kind="function">
      <type>void</type>
      <name>addOptions</name>
      <anchorfile>idyntree-model-info_8cpp.html</anchorfile>
      <anchor>a9e22c8da7e8863028b4aaeec21a017fb</anchor>
      <arglist>(cmdline::parser &amp;cmd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handlePrintOption</name>
      <anchorfile>idyntree-model-info_8cpp.html</anchorfile>
      <anchor>abf2aede6c786c7583f0db49a499a1223</anchor>
      <arglist>(iDynTree::KinDynComputations &amp;comp, cmdline::parser &amp;cmd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleTotalMassOptions</name>
      <anchorfile>idyntree-model-info_8cpp.html</anchorfile>
      <anchor>ad364956e15473abe18f76b4d7398ad50</anchor>
      <arglist>(iDynTree::KinDynComputations &amp;comp, cmdline::parser &amp;cmd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleFramePoseOptions</name>
      <anchorfile>idyntree-model-info_8cpp.html</anchorfile>
      <anchor>af430503cf13a675d700d0ece1bcb90e2</anchor>
      <arglist>(iDynTree::KinDynComputations &amp;comp, cmdline::parser &amp;cmd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleLinkCOMOptions</name>
      <anchorfile>idyntree-model-info_8cpp.html</anchorfile>
      <anchor>afd4d887dec05a5f4b0b388ff6d5a9869</anchor>
      <arglist>(iDynTree::KinDynComputations &amp;comp, cmdline::parser &amp;cmd)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>idyntree-model-info_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>idyntree-model-view.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/</path>
    <filename>idyntree-model-view_8cpp</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="ModelLoader_8h" name="ModelLoader.h" local="no" imported="no">iDynTree/ModelIO/ModelLoader.h</includes>
    <includes id="Visualizer_8h" name="Visualizer.h" local="no" imported="no">iDynTree/Visualizer.h</includes>
    <includes id="cmdline_8h" name="cmdline.h" local="yes" imported="no">cmdline.h</includes>
    <member kind="function">
      <type>void</type>
      <name>addOptions</name>
      <anchorfile>idyntree-model-view_8cpp.html</anchorfile>
      <anchor>a9e22c8da7e8863028b4aaeec21a017fb</anchor>
      <arglist>(cmdline::parser &amp;cmd)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>idyntree-model-view_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IJoint.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>IJoint_8h</filename>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <class kind="class">iDynTree::IJoint</class>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>IJoint *</type>
      <name>IJointPtr</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ade0c4658492d5288102a323d704a2a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const IJoint *</type>
      <name>IJointConstPtr</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac8fef24361e5d31b7bb1c5e468ea9513</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iKin_export.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/iKin-kdl/src/</path>
    <filename>iKin__export_8cpp</filename>
    <includes id="iKin__export_8hpp" name="iKin_export.hpp" local="no" imported="no">iDynTree/ModelIO/iKin_export.hpp</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>YarptoKDL</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aff231fca4608ef35b1488c3e067d8672</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, KDL::Vector &amp;kdlVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>YarptoKDL</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab07b226214e4da32fd20322ee857be3f</anchor>
      <arglist>(const yarp::sig::Matrix &amp;idynMatrix, KDL::Rotation &amp;kdlRotation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>YarptoKDL</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8c3b039cd742c35b7d6a2bdda268bd56</anchor>
      <arglist>(const yarp::sig::Matrix &amp;idynMatrix, KDL::Frame &amp;kdlFrame)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>KDLtoYarp</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1381f7eb2e291d9d806c57cda37cf509</anchor>
      <arglist>(const KDL::Vector &amp;kdlVector, yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>yarp::sig::Vector</type>
      <name>KDLtoYarp</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8d5d542f3c3accf95d9ceaa4d6f36f96</anchor>
      <arglist>(const KDL::Vector &amp;kdlVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>KDLtoYarp</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a401dd57b75735a0807287eff7785bb05</anchor>
      <arglist>(const KDL::Rotation &amp;kdlRotation, yarp::sig::Matrix &amp;yarpMatrix3_3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>KDLtoYarp_position</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afac7fadb95c46837dba5f45818e6c046</anchor>
      <arglist>(const KDL::Frame &amp;kdlFrame, yarp::sig::Matrix &amp;yarpMatrix4_4)</arglist>
    </member>
    <member kind="function">
      <type>yarp::sig::Matrix</type>
      <name>KDLtoYarp_position</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4647e682da232004313ccdf8d026aba8</anchor>
      <arglist>(const KDL::Frame &amp;kdlFrame)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>closestPoints</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8f589431d782b952cad5bee527a906c1</anchor>
      <arglist>(const KDL::Vector direction_line_A, const KDL::Vector origin_line_A, const KDL::Vector direction_line_B, const KDL::Vector origin_line_B, KDL::Vector &amp;closest_point_line_A, KDL::Vector &amp;closest_point_line_B, double tol=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>calculateDH</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a354ef3252cf5ad3643326f068ec24bbd</anchor>
      <arglist>(const KDL::Vector direction_axis_z_n_minus_1, const KDL::Vector direction_axis_x_n_minus_1, const KDL::Vector origin_n_minus_1, const KDL::Vector direction_axis_z_n, const KDL::Vector origin_axis_z_n, const KDL::Vector direction_axis_x_n_hint, KDL::Vector &amp;dh_origin_n, KDL::Vector &amp;dh_direction_axis_x_n, KDL::Vector &amp;dh_direction_axis_y_n, double &amp;a_i, double &amp;d_i, double &amp;alpha_i, double &amp;theta_i, double tol=1e-6, int verbose=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iKinLimbFromKDLChain</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>gab8ca4dff754c4c5d72e235f5e7396b86</anchor>
      <arglist>(const KDL::Chain &amp;tree, iCub::iKin::iKinLimb &amp;iKin_limb, const KDL::JntArray &amp;min, const KDL::JntArray &amp;max, int verbose=0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iKin_export.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/iKin-kdl/include/iDynTree/ModelIO/</path>
    <filename>iKin__export_8hpp</filename>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>iKinLimbFromKDLChain</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>gab8ca4dff754c4c5d72e235f5e7396b86</anchor>
      <arglist>(const KDL::Chain &amp;tree, iCub::iKin::iKinLimb &amp;iKin_limb, const KDL::JntArray &amp;min, const KDL::JntArray &amp;max, int verbose=0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iKinConversions.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/icub/src/</path>
    <filename>iKinConversions_8cpp</filename>
    <includes id="iKinConversions_8h" name="iKinConversions.h" local="no" imported="no">iDynTree/iKinConversions.h</includes>
    <includes id="DenavitHartenberg_8h" name="DenavitHartenberg.h" local="no" imported="no">iDynTree/Model/DenavitHartenberg.h</includes>
    <includes id="YARPConversions_8h" name="YARPConversions.h" local="no" imported="no">iDynTree/yarp/YARPConversions.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>DHLink</type>
      <name>iKinLink2DHLink</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a907871ccc9e6e56fb19fa0af4c0854c8</anchor>
      <arglist>(const iCub::iKin::iKinLink &amp;ikinlink)</arglist>
    </member>
    <member kind="function">
      <type>iCub::iKin::iKinLink</type>
      <name>DHLink2iKinLink</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae6d845189d4491128320b2c78c6082ec</anchor>
      <arglist>(const DHLink &amp;dhLink)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DHChainFromiKinChain</name>
      <anchorfile>group__iDynTreeICUB.html</anchorfile>
      <anchor>ga93e84fbc1880a920199aae0cbabd76ea</anchor>
      <arglist>(iCub::iKin::iKinChain &amp;ikinChain, DHChain &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>modelFromiKinChain</name>
      <anchorfile>group__iDynTreeICUB.html</anchorfile>
      <anchor>gadb9ad80c8043481f2bb8f013542db690</anchor>
      <arglist>(iCub::iKin::iKinChain &amp;ikinChain, Model &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iKinLimbFromDHChain</name>
      <anchorfile>group__iDynTreeICUB.html</anchorfile>
      <anchor>gaaedc638580c296a9a355975268ea25bb</anchor>
      <arglist>(const DHChain &amp;dhChain, iCub::iKin::iKinLimb &amp;ikinLimb)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iKinLimbFromModel</name>
      <anchorfile>group__iDynTreeICUB.html</anchorfile>
      <anchor>ga681d23161951646fcb60dc7681e59482</anchor>
      <arglist>(const Model &amp;model, const std::string &amp;baseFrame, const std::string &amp;distalFrame, iCub::iKin::iKinLimb &amp;ikinLimb)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iKinConversions.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/icub/include/iDynTree/</path>
    <filename>iKinConversions_8h</filename>
    <class kind="class">iDynTree::iKinLimbImported</class>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>DHChainFromiKinChain</name>
      <anchorfile>group__iDynTreeICUB.html</anchorfile>
      <anchor>ga93e84fbc1880a920199aae0cbabd76ea</anchor>
      <arglist>(iCub::iKin::iKinChain &amp;ikinChain, DHChain &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>modelFromiKinChain</name>
      <anchorfile>group__iDynTreeICUB.html</anchorfile>
      <anchor>gadb9ad80c8043481f2bb8f013542db690</anchor>
      <arglist>(iCub::iKin::iKinChain &amp;ikinChain, Model &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iKinLimbFromModel</name>
      <anchorfile>group__iDynTreeICUB.html</anchorfile>
      <anchor>ga681d23161951646fcb60dc7681e59482</anchor>
      <arglist>(const Model &amp;model, const std::string &amp;baseFrame, const std::string &amp;distalFrame, iCub::iKin::iKinLimb &amp;ikinLimb)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iKinLimbFromDHChain</name>
      <anchorfile>group__iDynTreeICUB.html</anchorfile>
      <anchor>gaaedc638580c296a9a355975268ea25bb</anchor>
      <arglist>(const DHChain &amp;dhChain, iCub::iKin::iKinLimb &amp;ikinLimb)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ImplicitTrapezoidal.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>ImplicitTrapezoidal_8cpp</filename>
    <includes id="ImplicitTrapezoidal_8h" name="ImplicitTrapezoidal.h" local="no" imported="no">iDynTree/Integrators/ImplicitTrapezoidal.h</includes>
    <includes id="DynamicalSystem_8h" name="DynamicalSystem.h" local="no" imported="no">iDynTree/DynamicalSystem.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
    <namespace>iDynTree::optimalcontrol::integrators</namespace>
  </compound>
  <compound kind="file">
    <name>ImplicitTrapezoidal.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/Integrators/</path>
    <filename>ImplicitTrapezoidal_8h</filename>
    <includes id="FixedStepIntegrator_8h" name="FixedStepIntegrator.h" local="no" imported="no">iDynTree/Integrators/FixedStepIntegrator.h</includes>
    <class kind="class">iDynTree::optimalcontrol::integrators::ImplicitTrapezoidal</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
    <namespace>iDynTree::optimalcontrol::integrators</namespace>
  </compound>
  <compound kind="file">
    <name>Indeces.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>Indeces_8h</filename>
    <includes id="Indices_8h" name="Indices.h" local="yes" imported="no">iDynTree/Model/Indices.h</includes>
  </compound>
  <compound kind="file">
    <name>Indices.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>Indices_8cpp</filename>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Indices.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>Indices_8h</filename>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>int</type>
      <name>LinkIndex</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac5d5803a07b810d7c0e3f64e9b087fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>JointIndex</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ada930c82e902e12abc47cc94f86fd115</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>DOFIndex</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af9e21583c2dc963f83e1c76dd0bcabc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>FrameIndex</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af2403782f0637caaa6f6083a125d2b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>TraversalIndex</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>acf7f263843b424ec6a8f741dabb5707d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkIndex</type>
      <name>LINK_INVALID_INDEX</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a480d1fbdaa5caf7d649749a615d141ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>LINK_INVALID_NAME</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a351b1388cdb1dcd3c9228c01c094498a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>JOINT_INVALID_INDEX</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aaddeca7778ad9917a17604f6e472c550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>JOINT_INVALID_NAME</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4d17bbcf1aae11c931c246308f39d9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>DOF_INVALID_INDEX</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6aaa8d1ee888776e9e3ca3e8144dbfb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>DOF_INVALID_NAME</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a084170431132bf37dfb70d449634695a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FRAME_INVALID_INDEX</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a82c0279ac04b031c66dda7bf1fa94114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>FRAME_INVALID_NAME</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac8bbe5d2dc785f47b7c03010cde0b462</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TraversalIndex</type>
      <name>TRAVERSAL_INVALID_INDEX</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a25b5d0039100c2a296a16972d6abcdcc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InertialElement.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/</path>
    <filename>InertialElement_8cpp</filename>
    <includes id="InertialElement_8h" name="InertialElement.h" local="yes" imported="no">InertialElement.h</includes>
    <includes id="OriginElement_8h" name="OriginElement.h" local="yes" imported="no">OriginElement.h</includes>
    <includes id="XMLAttribute_8h" name="XMLAttribute.h" local="no" imported="no">iDynTree/XMLAttribute.h</includes>
    <includes id="URDFParsingUtils_8h" name="URDFParsingUtils.h" local="yes" imported="no">URDFParsingUtils.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>InertialElement.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/private/</path>
    <filename>InertialElement_8h</filename>
    <includes id="XMLElement_8h" name="XMLElement.h" local="no" imported="no">iDynTree/XMLElement.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <class kind="class">iDynTree::InertialElement</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>InertialParametersSolidShapesHelpers.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/solid-shapes/src/</path>
    <filename>InertialParametersSolidShapesHelpers_8cpp</filename>
    <includes id="InertialParametersSolidShapesHelpers_8h" name="InertialParametersSolidShapesHelpers.h" local="no" imported="no">iDynTree/InertialParametersSolidShapesHelpers.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="SpatialInertia_8h" name="SpatialInertia.h" local="no" imported="no">iDynTree/Core/SpatialInertia.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="SolidShapes_8h" name="SolidShapes.h" local="no" imported="no">iDynTree/Model/SolidShapes.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>SpatialInertia</type>
      <name>boxGet6DInertiaInLinkFrameFromDensity</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae1721e736c017a040878679afdd8558f</anchor>
      <arglist>(const Box &amp;box, double density)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>boxGetVolume</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4166c081425b5445cf4974edb52ad68c</anchor>
      <arglist>(const Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>estimateInertialParametersFromLinkBoundingBoxesAndTotalMass</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4ed7d9dcd80664b1b86236a0f1086cda</anchor>
      <arglist>(const double totalMass, iDynTree::Model &amp;model, VectorDynSize &amp;estimatedInertialParams)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InertialParametersSolidShapesHelpers.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/solid-shapes/include/iDynTree/</path>
    <filename>InertialParametersSolidShapesHelpers_8h</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>estimateInertialParametersFromLinkBoundingBoxesAndTotalMass</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4ed7d9dcd80664b1b86236a0f1086cda</anchor>
      <arglist>(const double totalMass, iDynTree::Model &amp;model, VectorDynSize &amp;estimatedInertialParams)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InertiaNonLinearParametrization.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>InertiaNonLinearParametrization_8cpp</filename>
    <includes id="InertiaNonLinearParametrization_8h" name="InertiaNonLinearParametrization.h" local="no" imported="no">iDynTree/Core/InertiaNonLinearParametrization.h</includes>
    <includes id="SpatialInertia_8h" name="SpatialInertia.h" local="no" imported="no">iDynTree/Core/SpatialInertia.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, 9, 1 &gt;</type>
      <name>vecColMajor</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9be0e5a5790a4c71933f1e6fe98ebeee</anchor>
      <arglist>(const Eigen::Matrix&lt; double, 3, 3, Eigen::RowMajor &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, 3, 3, Eigen::RowMajor &gt;</type>
      <name>unvecColMajor</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a80e63a3a82598111816dac5a8e9ee6f1</anchor>
      <arglist>(const Eigen::Matrix&lt; double, 9, 1 &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
      <name>vech</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae12fdc30551dea2f01ea734523403f39</anchor>
      <arglist>(const Eigen::Matrix&lt; double, 3, 3, Eigen::RowMajor &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
      <name>diag</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a138e8931d2ca9e7bb521c916630cd47a</anchor>
      <arglist>(const Eigen::Matrix&lt; double, 3, 1 &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
      <name>Delta</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a723eb390c144e163605ec084b1d9248b</anchor>
      <arglist>(const unsigned int r, const unsigned int c)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, 3, 1 &gt;</type>
      <name>delta</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a51f76e76db44e1e0021334ff1372010f</anchor>
      <arglist>(const unsigned int r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InertiaNonLinearParametrization.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>InertiaNonLinearParametrization_8h</filename>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="Rotation_8h" name="Rotation.h" local="no" imported="no">iDynTree/Core/Rotation.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <class kind="class">iDynTree::RigidBodyInertiaNonLinearParametrization</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Integrator.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>Integrator_8cpp</filename>
    <includes id="Integrator_8h" name="Integrator.h" local="no" imported="no">iDynTree/Integrator.h</includes>
    <includes id="DynamicalSystem_8h" name="DynamicalSystem.h" local="no" imported="no">iDynTree/DynamicalSystem.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
    <namespace>iDynTree::optimalcontrol::integrators</namespace>
  </compound>
  <compound kind="file">
    <name>Integrator.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>Integrator_8h</filename>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="SparsityStructure_8h" name="SparsityStructure.h" local="no" imported="no">iDynTree/SparsityStructure.h</includes>
    <class kind="class">iDynTree::optimalcontrol::integrators::SolutionElement</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::IntegratorInfoData</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::IntegratorInfo</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::CollocationHessianIndex</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::Integrator</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
    <namespace>iDynTree::optimalcontrol::integrators</namespace>
    <member kind="typedef">
      <type>std::map&lt; CollocationHessianIndex, MatrixDynSize &gt;</type>
      <name>CollocationHessianMap</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol_1_1integrators.html</anchorfile>
      <anchor>aa5c8ad68150707a78233d30d14b183b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; CollocationHessianIndex, SparsityStructure &gt;</type>
      <name>CollocationHessianSparsityMap</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol_1_1integrators.html</anchorfile>
      <anchor>a7a03df16db0b979f0c465865aaf2c5c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InverseKinematics.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/inverse-kinematics/src/</path>
    <filename>InverseKinematics_8cpp</filename>
    <includes id="InverseKinematics_8h" name="InverseKinematics.h" local="no" imported="no">iDynTree/InverseKinematics.h</includes>
    <includes id="InverseKinematicsData_8h" name="InverseKinematicsData.h" local="yes" imported="no">InverseKinematicsData.h</includes>
    <includes id="TransformConstraint_8h" name="TransformConstraint.h" local="yes" imported="no">TransformConstraint.h</includes>
    <includes id="Axis_8h" name="Axis.h" local="no" imported="no">iDynTree/Core/Axis.h</includes>
    <includes id="Direction_8h" name="Direction.h" local="no" imported="no">iDynTree/Core/Direction.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="ModelLoader_8h" name="ModelLoader.h" local="no" imported="no">iDynTree/ModelIO/ModelLoader.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="define">
      <type>#define</type>
      <name>IK_PIMPL</name>
      <anchorfile>InverseKinematics_8cpp.html</anchorfile>
      <anchor>a7b02b7d0109ff7af9892157b4d58d81c</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InverseKinematics.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/inverse-kinematics/include/iDynTree/</path>
    <filename>InverseKinematics_8h</filename>
    <includes id="ConvexHullHelpers_8h" name="ConvexHullHelpers.h" local="no" imported="no">iDynTree/ConvexHullHelpers.h</includes>
    <includes id="Direction_8h" name="Direction.h" local="no" imported="no">iDynTree/Core/Direction.h</includes>
    <class kind="class">iDynTree::InverseKinematics</class>
    <namespace>iDynTree</namespace>
    <member kind="enumeration">
      <type></type>
      <name>InverseKinematicsRotationParametrization</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a04da5add9479687cf4c7eb873e717c6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InverseKinematicsRotationParametrizationQuaternion</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a04da5add9479687cf4c7eb873e717c6ca6bbd58481084418979b449c46aff99a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InverseKinematicsRotationParametrizationRollPitchYaw</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a04da5add9479687cf4c7eb873e717c6caad8ec2efa81330efbf416e7550113ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>InverseKinematicsTreatTargetAsConstraint</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5cb905194c9ee61c0a23b32d603b2df2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InverseKinematicsTreatTargetAsConstraintNone</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5cb905194c9ee61c0a23b32d603b2df2aa3f7c6e0138052de9bc8a0d3dcd9d712</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InverseKinematicsTreatTargetAsConstraintPositionOnly</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5cb905194c9ee61c0a23b32d603b2df2a786b8aeaff64c77f025cec462c47206b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InverseKinematicsTreatTargetAsConstraintRotationOnly</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5cb905194c9ee61c0a23b32d603b2df2aad1cbbc20ef9d02ff21364a90f781681</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InverseKinematicsTreatTargetAsConstraintFull</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5cb905194c9ee61c0a23b32d603b2df2a90e54d63819ec0bff0f8eec68beff50b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sizeOfRotationParametrization</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a399f5a8eff425f1036038ee927fb81cb</anchor>
      <arglist>(enum InverseKinematicsRotationParametrization rotationParametrization)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InverseKinematicsData.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/inverse-kinematics/src/</path>
    <filename>InverseKinematicsData_8cpp</filename>
    <includes id="InverseKinematicsData_8h" name="InverseKinematicsData.h" local="yes" imported="no">InverseKinematicsData.h</includes>
    <includes id="InverseKinematicsNLP_8h" name="InverseKinematicsNLP.h" local="yes" imported="no">InverseKinematicsNLP.h</includes>
    <includes id="TransformConstraint_8h" name="TransformConstraint.h" local="yes" imported="no">TransformConstraint.h</includes>
    <includes id="Axis_8h" name="Axis.h" local="no" imported="no">iDynTree/Core/Axis.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="no" imported="no">iDynTree/Core/Twist.h</includes>
    <includes id="ClassicalAcc_8h" name="ClassicalAcc.h" local="no" imported="no">iDynTree/Core/ClassicalAcc.h</includes>
    <includes id="SpatialAcc_8h" name="SpatialAcc.h" local="no" imported="no">iDynTree/Core/SpatialAcc.h</includes>
    <includes id="ModelLoader_8h" name="ModelLoader.h" local="no" imported="no">iDynTree/ModelIO/ModelLoader.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>internal</namespace>
    <namespace>internal::kinematics</namespace>
  </compound>
  <compound kind="file">
    <name>InverseKinematicsData.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/inverse-kinematics/include/private/</path>
    <filename>InverseKinematicsData_8h</filename>
    <includes id="InverseKinematicsNLP_8h" name="InverseKinematicsNLP.h" local="yes" imported="no">InverseKinematicsNLP.h</includes>
    <includes id="ConvexHullHelpers_8h" name="ConvexHullHelpers.h" local="no" imported="no">iDynTree/ConvexHullHelpers.h</includes>
    <includes id="InverseKinematics_8h" name="InverseKinematics.h" local="no" imported="no">iDynTree/InverseKinematics.h</includes>
    <includes id="KinDynComputations_8h" name="KinDynComputations.h" local="no" imported="no">iDynTree/KinDynComputations.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="no" imported="no">iDynTree/Core/Twist.h</includes>
    <class kind="class">internal::kinematics::InverseKinematicsData</class>
    <namespace>internal</namespace>
    <namespace>internal::kinematics</namespace>
    <member kind="typedef">
      <type>std::map&lt; int, internal::kinematics::TransformConstraint &gt;</type>
      <name>TransformMap</name>
      <anchorfile>namespaceinternal_1_1kinematics.html</anchorfile>
      <anchor>a644811f328012fcdfb6b45ab0492ef18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InverseKinematicsNLP.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/inverse-kinematics/src/</path>
    <filename>InverseKinematicsNLP_8cpp</filename>
    <includes id="InverseKinematicsNLP_8h" name="InverseKinematicsNLP.h" local="yes" imported="no">InverseKinematicsNLP.h</includes>
    <includes id="InverseKinematicsData_8h" name="InverseKinematicsData.h" local="yes" imported="no">InverseKinematicsData.h</includes>
    <includes id="TransformConstraint_8h" name="TransformConstraint.h" local="yes" imported="no">TransformConstraint.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <class kind="struct">internal::kinematics::is_matrixfixsize</class>
    <class kind="struct">internal::kinematics::is_matrixfixsize&lt; iDynTree::MatrixFixSize&lt; row, col &gt; &gt;</class>
    <namespace>internal</namespace>
    <namespace>internal::kinematics</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_USE_MATH_DEFINES</name>
      <anchorfile>InverseKinematicsNLP_8cpp.html</anchorfile>
      <anchor>a525335710b53cb064ca56b936120431e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InverseKinematicsNLP.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/inverse-kinematics/include/private/</path>
    <filename>InverseKinematicsNLP_8h</filename>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="no" imported="no">iDynTree/Core/Twist.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <class kind="class">internal::kinematics::SparsityHelper</class>
    <class kind="class">internal::kinematics::InverseKinematicsNLP</class>
    <namespace>internal</namespace>
    <namespace>internal::kinematics</namespace>
    <member kind="define">
      <type>#define</type>
      <name>UNUSED_VARIABLE</name>
      <anchorfile>InverseKinematicsNLP_8h.html</anchorfile>
      <anchor>a4048bf3892868ded8a28f8cbdd339c09</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IpoptInterface.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>IpoptInterface_8cpp</filename>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="IpoptInterface_8h" name="IpoptInterface.h" local="no" imported="no">iDynTree/Optimizers/IpoptInterface.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <class kind="class">iDynTree::optimization::NLPImplementation</class>
    <class kind="class">iDynTree::optimization::IpoptInterface::IpoptInterfaceImplementation</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimization</namespace>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_CSTDDEF</name>
      <anchorfile>IpoptInterface_8cpp.html</anchorfile>
      <anchor>af858cc42aa54f0d70f119d478538357a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IpoptInterface.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/Optimizers/</path>
    <filename>IpoptInterface_8h</filename>
    <includes id="Optimizer_8h" name="Optimizer.h" local="no" imported="no">iDynTree/Optimizer.h</includes>
    <class kind="class">iDynTree::optimization::IpoptInterface</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimization</namespace>
  </compound>
  <compound kind="file">
    <name>IpoptInterfaceNotImplemented.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>IpoptInterfaceNotImplemented_8cpp</filename>
    <includes id="IpoptInterface_8h" name="IpoptInterface.h" local="no" imported="no">iDynTree/Optimizers/IpoptInterface.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
  </compound>
  <compound kind="file">
    <name>IrrlichtUtils.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/visualization/src/</path>
    <filename>IrrlichtUtils_8h</filename>
    <includes id="SolidShapes_8h" name="SolidShapes.h" local="no" imported="no">iDynTree/Model/SolidShapes.h</includes>
    <includes id="Visualizer_8h" name="Visualizer.h" local="no" imported="no">iDynTree/Visualizer.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="FloorGridSceneNode_8h" name="FloorGridSceneNode.h" local="yes" imported="no">FloorGridSceneNode.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>irr::video::SColorf</type>
      <name>idyntree2irrlicht</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac8129c15673f95b55d4402d11525130e</anchor>
      <arglist>(iDynTree::ColorViz color)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::ColorViz</type>
      <name>irrlicht2idyntree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a59fd2dec92ea659b06c35cc0774e3e27</anchor>
      <arglist>(irr::video::SColorf color)</arglist>
    </member>
    <member kind="function">
      <type>irr::core::vector3df</type>
      <name>idyntree2irr_rpy</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a618c592e51197a8e43af8fb204e05be4</anchor>
      <arglist>(const iDynTree::Vector3 &amp;vecId)</arglist>
    </member>
    <member kind="function">
      <type>irr::core::vector3df</type>
      <name>idyntree2irr_pos</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a701793f35b102249138fd871ac97a1dd</anchor>
      <arglist>(const iDynTree::Vector3 &amp;vecId)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Position</type>
      <name>irr2idyntree_pos</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a248faa2d7da144ef0f5d12070f87a636</anchor>
      <arglist>(const irr::core::vector3df &amp;vecIrr)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Vector3</type>
      <name>irr2idyntree_rpy</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a38fec3a530fff72845acd46d89255ccc</anchor>
      <arglist>(const irr::core::vector3df &amp;vecIrr)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Rotation</type>
      <name>irr2idyntree_rot</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0107858ed0b53d9e3f6c4298f1590b52</anchor>
      <arglist>(const irr::core::vector3df &amp;rotIrr)</arglist>
    </member>
    <member kind="function">
      <type>const irr::core::vector3df</type>
      <name>idyntree2irr_rot</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a489f51d87e38580783c8db40b522c1a3</anchor>
      <arglist>(const iDynTree::Rotation &amp;rot)</arglist>
    </member>
    <member kind="function">
      <type>irr::video::SMaterial</type>
      <name>idyntree2irr</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a74e7d98bc8b8aab27a63a0dfc637f50d</anchor>
      <arglist>(const iDynTree::Vector4 &amp;rgbaMaterialId)</arglist>
    </member>
    <member kind="function">
      <type>irr::video::SMaterial</type>
      <name>idyntree2irr</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a646a555c094aa892b19861ee3b967685</anchor>
      <arglist>(const iDynTree::ColorViz &amp;rgbaMaterial)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Transform</type>
      <name>irr2idyntree_trans</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a88e1a9336a45448f8407a5b9193e3b12</anchor>
      <arglist>(const irr::core::matrix4 &amp;transIrr)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Rotation</type>
      <name>RotationWithPrescribedZColumn</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8f07b5aa9b946682973ce91c0dff9c4c</anchor>
      <arglist>(const iDynTree::Direction zAxis)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getFileExt</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a7676f271a9b7c442709bcbf204ede699</anchor>
      <arglist>(const std::string filename)</arglist>
    </member>
    <member kind="function">
      <type>irr::scene::ISceneNode *</type>
      <name>addGeometryToSceneManager</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a28b9c6390d04a7fa594c36e0a1e71a22</anchor>
      <arglist>(const iDynTree::SolidShape *geom, irr::scene::ISceneNode *linkNode, irr::scene::ISceneManager *smgr)</arglist>
    </member>
    <member kind="function">
      <type>irr::scene::ISceneNode *</type>
      <name>addFrameAxes</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa1df9eb0ffad26d2ca32e91429e53610</anchor>
      <arglist>(irr::scene::ISceneManager *smgr, irr::scene::ISceneNode *parentNode=0, irr::f32 arrowLenght=1.0)</arglist>
    </member>
    <member kind="function">
      <type>irr::scene::ISceneNode *</type>
      <name>addFloorGridNode</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a352bdecf919e2b54c75b262ccdc5773e</anchor>
      <arglist>(irr::scene::ISceneManager *smgr, irr::scene::ISceneNode *parentNode=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorldHNode</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0671daf3474b049ff0f3ba1c9aa21866</anchor>
      <arglist>(irr::scene::ISceneNode *node, const iDynTree::Transform &amp;trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVizEnviroment</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6c85009c61c4213711b0892502aedb68</anchor>
      <arglist>(irr::scene::ISceneManager *smgr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVizLights</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2673c2cc83efc112c0e182ea8b2038f3</anchor>
      <arglist>(irr::scene::ISceneManager *smgr)</arglist>
    </member>
    <member kind="function">
      <type>irr::scene::ICameraSceneNode *</type>
      <name>addVizCamera</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5df1e1a5f2c8d865e0b8db230c440cf7</anchor>
      <arglist>(irr::scene::ISceneManager *smgr)</arglist>
    </member>
    <member kind="function">
      <type>irr::scene::IMesh *</type>
      <name>createFrustumMesh</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa404e05b5167037b56fdfa6e7b5b31de</anchor>
      <arglist>(irr::f32 topRadius, irr::f32 bottomRadius, irr::f32 height, irr::u32 tesselation=8)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Jacobians.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>Jacobians_8cpp</filename>
    <includes id="Jacobians_8h" name="Jacobians.h" local="no" imported="no">iDynTree/Model/Jacobians.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>FreeFloatingJacobianUsingLinkPos</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga7a189f499fb9bfe4126326a34ce6fc59</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const JointPosDoubleArray &amp;jointPositions, const LinkPositions &amp;linkPositions, const LinkIndex linkIndex, const Transform &amp;jacobFrame_X_world, const Transform &amp;baseFrame_X_jacobBaseFrame, MatrixDynSize &amp;jacobian)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Jacobians.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>Jacobians_8h</filename>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>FreeFloatingJacobianUsingLinkPos</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga7a189f499fb9bfe4126326a34ce6fc59</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const JointPosDoubleArray &amp;jointPositions, const LinkPositions &amp;linkPositions, const LinkIndex linkIndex, const Transform &amp;jacobFrame_X_world, const Transform &amp;baseFrame_X_jacobBaseFrame, MatrixDynSize &amp;jacobian)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JetsVisualization.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/visualization/src/</path>
    <filename>JetsVisualization_8cpp</filename>
    <includes id="JetsVisualization_8h" name="JetsVisualization.h" local="yes" imported="no">JetsVisualization.h</includes>
    <includes id="ModelVisualization_8h" name="ModelVisualization.h" local="yes" imported="no">ModelVisualization.h</includes>
    <includes id="IrrlichtUtils_8h" name="IrrlichtUtils.h" local="yes" imported="no">IrrlichtUtils.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>JetsVisualization.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/visualization/src/</path>
    <filename>JetsVisualization_8h</filename>
    <includes id="Visualizer_8h" name="Visualizer.h" local="no" imported="no">iDynTree/Visualizer.h</includes>
    <class kind="class">iDynTree::JetsVisualization</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>JointElement.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/</path>
    <filename>JointElement_8cpp</filename>
    <includes id="JointElement_8h" name="JointElement.h" local="yes" imported="no">JointElement.h</includes>
    <includes id="OriginElement_8h" name="OriginElement.h" local="yes" imported="no">OriginElement.h</includes>
    <includes id="URDFParsingUtils_8h" name="URDFParsingUtils.h" local="yes" imported="no">URDFParsingUtils.h</includes>
    <includes id="XMLAttribute_8h" name="XMLAttribute.h" local="no" imported="no">iDynTree/XMLAttribute.h</includes>
    <includes id="IJoint_8h" name="IJoint.h" local="no" imported="no">iDynTree/Model/IJoint.h</includes>
    <includes id="FixedJoint_8h" name="FixedJoint.h" local="no" imported="no">iDynTree/Model/FixedJoint.h</includes>
    <includes id="PrismaticJoint_8h" name="PrismaticJoint.h" local="no" imported="no">iDynTree/Model/PrismaticJoint.h</includes>
    <includes id="RevoluteJoint_8h" name="RevoluteJoint.h" local="no" imported="no">iDynTree/Model/RevoluteJoint.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>JointElement.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/private/</path>
    <filename>JointElement_8h</filename>
    <includes id="XMLElement_8h" name="XMLElement.h" local="no" imported="no">iDynTree/XMLElement.h</includes>
    <includes id="Axis_8h" name="Axis.h" local="no" imported="no">iDynTree/Core/Axis.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <class kind="class">iDynTree::JointElement</class>
    <class kind="struct">iDynTree::JointElement::JointInfo</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>JointState.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>JointState_8cpp</filename>
    <includes id="JointState_8h" name="JointState.h" local="no" imported="no">iDynTree/Model/JointState.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="SpatialMotionVector_8h" name="SpatialMotionVector.h" local="no" imported="no">iDynTree/Core/SpatialMotionVector.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>JointState.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>JointState_8h</filename>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="SpatialForceVector_8h" name="SpatialForceVector.h" local="no" imported="no">iDynTree/Core/SpatialForceVector.h</includes>
    <class kind="class">iDynTree::JointPosDoubleArray</class>
    <class kind="class">iDynTree::JointDOFsDoubleArray</class>
    <class kind="class">iDynTree::DOFSpatialForceArray</class>
    <class kind="class">iDynTree::DOFSpatialMotionArray</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>KalmanFilter.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/src/</path>
    <filename>KalmanFilter_8cpp</filename>
    <includes id="KalmanFilter_8h" name="KalmanFilter.h" local="no" imported="no">iDynTree/Estimation/KalmanFilter.h</includes>
  </compound>
  <compound kind="file">
    <name>KalmanFilter.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/include/iDynTree/Estimation/</path>
    <filename>KalmanFilter_8h</filename>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <class kind="class">iDynTree::DiscreteKalmanFilterHelper</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>KinDynComputations.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/high-level/src/</path>
    <filename>KinDynComputations_8cpp</filename>
    <includes id="KinDynComputations_8h" name="KinDynComputations.h" local="no" imported="no">iDynTree/KinDynComputations.h</includes>
    <includes id="ClassicalAcc_8h" name="ClassicalAcc.h" local="no" imported="no">iDynTree/Core/ClassicalAcc.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="no" imported="no">iDynTree/Core/Twist.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Rotation_8h" name="Rotation.h" local="no" imported="no">iDynTree/Core/Rotation.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="SpatialAcc_8h" name="SpatialAcc.h" local="no" imported="no">iDynTree/Core/SpatialAcc.h</includes>
    <includes id="SpatialInertia_8h" name="SpatialInertia.h" local="no" imported="no">iDynTree/Core/SpatialInertia.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="no" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="FreeFloatingState_8h" name="FreeFloatingState.h" local="no" imported="no">iDynTree/Model/FreeFloatingState.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <includes id="LinkTraversalsCache_8h" name="LinkTraversalsCache.h" local="no" imported="no">iDynTree/Model/LinkTraversalsCache.h</includes>
    <includes id="ForwardKinematics_8h" name="ForwardKinematics.h" local="no" imported="no">iDynTree/Model/ForwardKinematics.h</includes>
    <includes id="Dynamics_8h" name="Dynamics.h" local="no" imported="no">iDynTree/Model/Dynamics.h</includes>
    <includes id="Jacobians_8h" name="Jacobians.h" local="no" imported="no">iDynTree/Model/Jacobians.h</includes>
    <includes id="ModelLoader_8h" name="ModelLoader.h" local="no" imported="no">iDynTree/ModelIO/ModelLoader.h</includes>
    <class kind="struct">iDynTree::KinDynComputations::KinDynComputationsPrivateAttributes</class>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>Vector6</type>
      <name>convertBodyFixedAccelerationToMixedAcceleration</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aebe6fe1aedddb870f6d2bddc4014ac47</anchor>
      <arglist>(const SpatialAcc &amp;bodyFixedAcc, const Twist &amp;bodyFixedVel, const Rotation &amp;inertial_R_body)</arglist>
    </member>
    <member kind="function">
      <type>SpatialAcc</type>
      <name>convertMixedAccelerationToBodyFixedAcceleration</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>abd88511194aa3a095ef1317fe2801ae0</anchor>
      <arglist>(const Vector6 &amp;mixedAcc, const Twist &amp;bodyFixedVel, const Rotation &amp;inertial_R_body)</arglist>
    </member>
    <member kind="function">
      <type>SpatialAcc</type>
      <name>convertInertialAccelerationToBodyFixedAcceleration</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a870878b8976e76aa5b53aea679d4bfe3</anchor>
      <arglist>(const Vector6 &amp;inertialAcc, const Transform &amp;inertial_H_body)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>WORLD_INDEX</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa5e5cf2af24da4d09eea789c28946aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>DEFAULT_DYNAMICS_COMPUTATION_FRAME_INDEX</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa7d5301e5200aa6f370be0ebb7ca9b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>DEFAULT_DYNAMICS_COMPUTATION_FRAME_NAME</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afac0e1524e046cda0a6c9294cc5ad564</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KinDynComputations.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/high-level/include/iDynTree/</path>
    <filename>KinDynComputations_8h</filename>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <includes id="FreeFloatingMatrices_8h" name="FreeFloatingMatrices.h" local="no" imported="no">iDynTree/Model/FreeFloatingMatrices.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <class kind="class">iDynTree::KinDynComputations</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>L2NormCost.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>L2NormCost_8cpp</filename>
    <includes id="L2NormCost_8h" name="L2NormCost.h" local="no" imported="no">iDynTree/L2NormCost.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="Span_8h" name="Span.h" local="no" imported="no">iDynTree/Core/Span.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <class kind="class">iDynTree::optimalcontrol::Selector</class>
    <class kind="class">iDynTree::optimalcontrol::IndexSelector</class>
    <class kind="class">iDynTree::optimalcontrol::MatrixSelector</class>
    <class kind="class">iDynTree::optimalcontrol::CostAttributes</class>
    <class kind="class">iDynTree::optimalcontrol::L2NormCost::L2NormCostImplementation</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>L2NormCost.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>L2NormCost_8h</filename>
    <includes id="Cost_8h" name="Cost.h" local="no" imported="no">iDynTree/Cost.h</includes>
    <includes id="TimeVaryingObject_8h" name="TimeVaryingObject.h" local="no" imported="no">iDynTree/TimeVaryingObject.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <class kind="class">iDynTree::optimalcontrol::L2NormCost</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>Light.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/visualization/src/</path>
    <filename>Light_8cpp</filename>
    <includes id="Light_8h" name="Light.h" local="yes" imported="no">Light.h</includes>
    <includes id="IrrlichtUtils_8h" name="IrrlichtUtils.h" local="yes" imported="no">IrrlichtUtils.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>irr::video::E_LIGHT_TYPE</type>
      <name>idyntree2irrlicht</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>abc6c4beb8b57842b52f7f92c5e01cdc7</anchor>
      <arglist>(iDynTree::LightType type)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::LightType</type>
      <name>irrlicht2idyntree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3408a1d8758c66b1bf634ce0cf62d6f3</anchor>
      <arglist>(irr::video::E_LIGHT_TYPE type)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Light.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/visualization/src/</path>
    <filename>Light_8h</filename>
    <includes id="Visualizer_8h" name="Visualizer.h" local="no" imported="no">iDynTree/Visualizer.h</includes>
    <class kind="class">iDynTree::Light</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>LinearConstraint.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>LinearConstraint_8cpp</filename>
    <includes id="LinearConstraint_8h" name="LinearConstraint.h" local="no" imported="no">iDynTree/LinearConstraint.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <class kind="class">iDynTree::optimalcontrol::LinearConstraint::LinearConstraintImplementation</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>LinearConstraint.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>LinearConstraint_8h</filename>
    <includes id="Constraint_8h" name="Constraint.h" local="no" imported="no">iDynTree/Constraint.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="TimeVaryingObject_8h" name="TimeVaryingObject.h" local="no" imported="no">iDynTree/TimeVaryingObject.h</includes>
    <includes id="SparsityStructure_8h" name="SparsityStructure.h" local="no" imported="no">iDynTree/SparsityStructure.h</includes>
    <class kind="class">iDynTree::optimalcontrol::LinearConstraint</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>LinearCost.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>LinearCost_8cpp</filename>
    <includes id="LinearCost_8h" name="LinearCost.h" local="no" imported="no">iDynTree/LinearCost.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>LinearCost.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>LinearCost_8h</filename>
    <includes id="QuadraticLikeCost_8h" name="QuadraticLikeCost.h" local="no" imported="no">iDynTree/QuadraticLikeCost.h</includes>
    <includes id="TimeVaryingObject_8h" name="TimeVaryingObject.h" local="no" imported="no">iDynTree/TimeVaryingObject.h</includes>
    <class kind="class">iDynTree::optimalcontrol::LinearCost</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>LinearForceVector3.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>LinearForceVector3_8cpp</filename>
    <includes id="LinearForceVector3_8h" name="LinearForceVector3.h" local="no" imported="no">iDynTree/Core/LinearForceVector3.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>LinearForceVector3.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>LinearForceVector3_8h</filename>
    <includes id="ForceVector3_8h" name="ForceVector3.h" local="no" imported="no">iDynTree/Core/ForceVector3.h</includes>
    <includes id="PrivateMotionForceVertorAssociations_8h" name="PrivateMotionForceVertorAssociations.h" local="no" imported="no">iDynTree/Core/PrivateMotionForceVertorAssociations.h</includes>
    <class kind="class">iDynTree::LinearForceVector3Semantics</class>
    <class kind="class">iDynTree::LinearForceVector3</class>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>LinearForceVector3</type>
      <name>LinMomentum</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac0ebd34fab318a785581c07d73cdffc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearForceVector3</type>
      <name>Force</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4c842c5e7d2f44d3352ffd8b59203d77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinearMotionVector3.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>LinearMotionVector3_8cpp</filename>
    <includes id="LinearMotionVector3_8h" name="LinearMotionVector3.h" local="no" imported="no">iDynTree/Core/LinearMotionVector3.h</includes>
    <includes id="AngularMotionVector3_8h" name="AngularMotionVector3.h" local="no" imported="no">iDynTree/Core/AngularMotionVector3.h</includes>
    <includes id="Position_8h" name="Position.h" local="no" imported="no">iDynTree/Core/Position.h</includes>
    <includes id="PrivatePreProcessorUtils_8h" name="PrivatePreProcessorUtils.h" local="no" imported="no">iDynTree/Core/PrivatePreProcessorUtils.h</includes>
    <includes id="PrivateSemanticsMacros_8h" name="PrivateSemanticsMacros.h" local="no" imported="no">iDynTree/Core/PrivateSemanticsMacros.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>LinearMotionVector3.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>LinearMotionVector3_8h</filename>
    <includes id="MotionVector3_8h" name="MotionVector3.h" local="no" imported="no">iDynTree/Core/MotionVector3.h</includes>
    <includes id="PrivateMotionForceVertorAssociations_8h" name="PrivateMotionForceVertorAssociations.h" local="no" imported="no">iDynTree/Core/PrivateMotionForceVertorAssociations.h</includes>
    <class kind="class">iDynTree::LinearMotionVector3Semantics</class>
    <class kind="class">iDynTree::LinearMotionVector3</class>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>LinearMotionVector3</type>
      <name>LinVelocity</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a408c1ac9b6f50b7425becd9b7b20f351</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearMotionVector3</type>
      <name>LinAcceleration</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae032ae81e0b23b33446033eefb13e629</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinearMPC.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>LinearMPC_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>LinearMPC.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>LinearMPC_8h</filename>
    <class kind="class">iDynTree::optimalcontrol::LinearMPC</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>LinearSystem.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>LinearSystem_8cpp</filename>
    <includes id="LinearSystem_8h" name="LinearSystem.h" local="no" imported="no">iDynTree/LinearSystem.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <class kind="class">iDynTree::optimalcontrol::LinearSystem::LinearSystemPimpl</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>LinearSystem.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>LinearSystem_8h</filename>
    <includes id="DynamicalSystem_8h" name="DynamicalSystem.h" local="no" imported="no">iDynTree/DynamicalSystem.h</includes>
    <includes id="TimeVaryingObject_8h" name="TimeVaryingObject.h" local="no" imported="no">iDynTree/TimeVaryingObject.h</includes>
    <includes id="SparsityStructure_8h" name="SparsityStructure.h" local="no" imported="no">iDynTree/SparsityStructure.h</includes>
    <class kind="class">iDynTree::optimalcontrol::LinearSystem</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>Link.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>Link_8cpp</filename>
    <includes id="Link_8h" name="Link.h" local="no" imported="no">iDynTree/Model/Link.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Link.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>Link_8h</filename>
    <includes id="SpatialInertia_8h" name="SpatialInertia.h" local="no" imported="no">iDynTree/Core/SpatialInertia.h</includes>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <class kind="class">iDynTree::Link</class>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>Link *</type>
      <name>LinkPtr</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a39bc17f697110e44c09c2e6e1aa7fa57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Link *</type>
      <name>LinkConstPtr</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a34779dc4741f85944c0e2f736dc7def2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinkElement.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/</path>
    <filename>LinkElement_8cpp</filename>
    <includes id="LinkElement_8h" name="LinkElement.h" local="yes" imported="no">LinkElement.h</includes>
    <includes id="InertialElement_8h" name="InertialElement.h" local="yes" imported="no">InertialElement.h</includes>
    <includes id="VisualElement_8h" name="VisualElement.h" local="yes" imported="no">VisualElement.h</includes>
    <includes id="XMLAttribute_8h" name="XMLAttribute.h" local="no" imported="no">iDynTree/XMLAttribute.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>LinkElement.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/private/</path>
    <filename>LinkElement_8h</filename>
    <includes id="XMLElement_8h" name="XMLElement.h" local="no" imported="no">iDynTree/XMLElement.h</includes>
    <includes id="VisualElement_8h" name="VisualElement.h" local="yes" imported="no">VisualElement.h</includes>
    <includes id="Link_8h" name="Link.h" local="no" imported="no">iDynTree/Model/Link.h</includes>
    <class kind="class">iDynTree::LinkElement</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>LinkState.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>LinkState_8cpp</filename>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="ArticulatedBodyInertia_8h" name="ArticulatedBodyInertia.h" local="no" imported="no">iDynTree/Core/ArticulatedBodyInertia.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>LinkState.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>LinkState_8h</filename>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="no" imported="no">iDynTree/Core/Twist.h</includes>
    <includes id="SpatialAcc_8h" name="SpatialAcc.h" local="no" imported="no">iDynTree/Core/SpatialAcc.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="no" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="ArticulatedBodyInertia_8h" name="ArticulatedBodyInertia.h" local="no" imported="no">iDynTree/Core/ArticulatedBodyInertia.h</includes>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <class kind="class">iDynTree::LinkPositions</class>
    <class kind="class">iDynTree::LinkWrenches</class>
    <class kind="class">iDynTree::LinkInertias</class>
    <class kind="class">iDynTree::LinkArticulatedBodyInertias</class>
    <class kind="class">iDynTree::LinkVelArray</class>
    <class kind="class">iDynTree::LinkAccArray</class>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>LinkWrenches</type>
      <name>LinkNetExternalWrenches</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac93f1a5870ffbdb40436a8ab17b4df5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinkWrenches</type>
      <name>LinkInternalWrenches</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab0304c1c94e9d9f0bbd646fceaad6e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinkWrenches</type>
      <name>LinkNetTotalWrenchesWithoutGravity</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8467b5079b622cd683df2fcdfd16b07c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinkInertias</type>
      <name>LinkCompositeRigidBodyInertias</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4eebfd4c3b5feb2154a1de101578fb4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinkAccArray</type>
      <name>LinkProperAccArray</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a104b2ec0864d4c37b58b808b43630171</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinkTraversalsCache.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>LinkTraversalsCache_8cpp</filename>
    <includes id="LinkTraversalsCache_8h" name="LinkTraversalsCache.h" local="yes" imported="no">iDynTree/Model/LinkTraversalsCache.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="yes" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="Model_8h" name="Model.h" local="yes" imported="no">iDynTree/Model/Model.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>LinkTraversalsCache.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>LinkTraversalsCache_8h</filename>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <class kind="class">iDynTree::LinkTraversalsCache</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>idyntree-sole-gui/src/main.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/idyntree-sole-gui/src/</path>
    <filename>idyntree-sole-gui_2src_2main_8cpp</filename>
    <includes id="config_8h" name="config.h" local="yes" imported="no">config.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>idyntree-sole-gui_2src_2main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>plotter/src/main.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/plotter/src/</path>
    <filename>plotter_2src_2main_8cpp</filename>
    <includes id="ChartsManager_8h" name="ChartsManager.h" local="yes" imported="no">ChartsManager.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>plotter_2src_2main_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>yarprobotstatepublisher/src/main.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/yarprobotstatepublisher/src/</path>
    <filename>yarprobotstatepublisher_2src_2main_8cpp</filename>
    <includes id="robotstatepublisher_8h" name="robotstatepublisher.h" local="yes" imported="no">robotstatepublisher.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>yarprobotstatepublisher_2src_2main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.dox</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/doc/</path>
    <filename>main_8dox</filename>
  </compound>
  <compound kind="file">
    <name>MaterialElement.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/</path>
    <filename>MaterialElement_8cpp</filename>
    <includes id="MaterialElement_8h" name="MaterialElement.h" local="yes" imported="no">MaterialElement.h</includes>
    <includes id="URDFParsingUtils_8h" name="URDFParsingUtils.h" local="yes" imported="no">URDFParsingUtils.h</includes>
    <includes id="XMLAttribute_8h" name="XMLAttribute.h" local="no" imported="no">iDynTree/XMLAttribute.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>MaterialElement.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/private/</path>
    <filename>MaterialElement_8h</filename>
    <includes id="XMLElement_8h" name="XMLElement.h" local="no" imported="no">iDynTree/XMLElement.h</includes>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <class kind="class">iDynTree::MaterialElement</class>
    <class kind="struct">iDynTree::MaterialElement::MaterialInfo</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>MatrixDynSize.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>MatrixDynSize_8cpp</filename>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>MatrixDynSize.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>MatrixDynSize_8h</filename>
    <class kind="class">iDynTree::MatrixDynSize</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>MatrixFixSize.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>MatrixFixSize_8h</filename>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <class kind="class">iDynTree::MatrixFixSize</class>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>MatrixFixSize&lt; 1, 6 &gt;</type>
      <name>Matrix1x6</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3f95b4a0200fda604f7717bcb0781b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixFixSize&lt; 2, 3 &gt;</type>
      <name>Matrix2x3</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2502487a002cb2aec7b06190dfd1e787</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixFixSize&lt; 3, 3 &gt;</type>
      <name>Matrix3x3</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1ab8ab0012e12e66db217bb4845881cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixFixSize&lt; 4, 4 &gt;</type>
      <name>Matrix4x4</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a739bd7039fa167036447689c29104cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixFixSize&lt; 6, 1 &gt;</type>
      <name>Matrix6x1</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa8530f3c198c90d18ec29e68f4d5e5fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixFixSize&lt; 6, 6 &gt;</type>
      <name>Matrix6x6</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad298b89bf01794a5de35a255dd269d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixFixSize&lt; 6, 10 &gt;</type>
      <name>Matrix6x10</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6d63b01d7d6de76185f849d32b9fbd29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixFixSize&lt; 10, 16 &gt;</type>
      <name>Matrix10x16</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad7bb9ef7fdaadb16f95a6e42cf32d622</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Model.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>Model_8cpp</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <class kind="struct">iDynTree::stackEl</class>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>void</type>
      <name>addBaseLinkToTraversal</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a747794659e2d58ea16f98d870f895b50</anchor>
      <arglist>(const Model &amp;model, Traversal &amp;traversal, LinkIndex linkToAdd, std::deque&lt; stackEl &gt; &amp;linkToVisit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLinkToTraversal</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a7be79634e9015b3508e14a5d77863dab</anchor>
      <arglist>(const Model &amp;model, Traversal &amp;traversal, LinkIndex linkToAdd, JointIndex parentJointToAdd, LinkIndex parentLinkToAdd, std::deque&lt; stackEl &gt; &amp;linkToVisit)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Model.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>Model_8h</filename>
    <includes id="IJoint_8h" name="IJoint.h" local="no" imported="no">iDynTree/Model/IJoint.h</includes>
    <includes id="Link_8h" name="Link.h" local="no" imported="no">iDynTree/Model/Link.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <includes id="SolidShapes_8h" name="SolidShapes.h" local="no" imported="no">iDynTree/Model/SolidShapes.h</includes>
    <class kind="struct">iDynTree::Neighbor</class>
    <class kind="class">iDynTree::Model</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ModelCalibrationHelper.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/</path>
    <filename>ModelCalibrationHelper_8cpp</filename>
    <includes id="ModelCalibrationHelper_8h" name="ModelCalibrationHelper.h" local="no" imported="no">iDynTree/ModelIO/ModelCalibrationHelper.h</includes>
    <includes id="ModelLoader_8h" name="ModelLoader.h" local="no" imported="no">iDynTree/ModelIO/ModelLoader.h</includes>
    <includes id="ModelExporter_8h" name="ModelExporter.h" local="no" imported="no">iDynTree/ModelIO/ModelExporter.h</includes>
    <class kind="class">iDynTree::ModelCalibrationHelper::ModelCalibrationHelperPimpl</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ModelCalibrationHelper.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/iDynTree/ModelIO/</path>
    <filename>ModelCalibrationHelper_8h</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <includes id="ModelExporter_8h" name="ModelExporter.h" local="no" imported="no">iDynTree/ModelIO/ModelExporter.h</includes>
    <class kind="class">iDynTree::ModelCalibrationHelper</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ModelExporter.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/</path>
    <filename>ModelExporter_8cpp</filename>
    <includes id="ModelExporter_8h" name="ModelExporter.h" local="yes" imported="no">iDynTree/ModelIO/ModelExporter.h</includes>
    <includes id="URDFModelExport_8h" name="URDFModelExport.h" local="yes" imported="no">URDFModelExport.h</includes>
    <class kind="class">iDynTree::ModelExporter::Pimpl</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ModelExporter.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/iDynTree/ModelIO/</path>
    <filename>ModelExporter_8h</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <class kind="class">iDynTree::ModelExporterOptions</class>
    <class kind="class">iDynTree::ModelExporter</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ModelInterfaceDestructors.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>ModelInterfaceDestructors_8cpp</filename>
    <includes id="IJoint_8h" name="IJoint.h" local="no" imported="no">iDynTree/Model/IJoint.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ModelLoader.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/</path>
    <filename>ModelLoader_8cpp</filename>
    <includes id="ModelLoader_8h" name="ModelLoader.h" local="yes" imported="no">iDynTree/ModelIO/ModelLoader.h</includes>
    <includes id="URDFDocument_8h" name="URDFDocument.h" local="yes" imported="no">URDFDocument.h</includes>
    <includes id="XMLParser_8h" name="XMLParser.h" local="no" imported="no">iDynTree/XMLParser.h</includes>
    <includes id="ModelSensorsTransformers_8h" name="ModelSensorsTransformers.h" local="no" imported="no">iDynTree/Sensors/ModelSensorsTransformers.h</includes>
    <class kind="class">iDynTree::ModelLoader::ModelLoaderPimpl</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ModelLoader.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/iDynTree/ModelIO/</path>
    <filename>ModelLoader_8h</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <class kind="struct">iDynTree::ModelParserOptions</class>
    <class kind="class">iDynTree::ModelLoader</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ModelSensorsTransformers.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/sensors/src/</path>
    <filename>ModelSensorsTransformers_8cpp</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="ModelTransformers_8h" name="ModelTransformers.h" local="no" imported="no">iDynTree/Model/ModelTransformers.h</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <includes id="ModelSensorsTransformers_8h" name="ModelSensorsTransformers.h" local="no" imported="no">iDynTree/Sensors/ModelSensorsTransformers.h</includes>
    <includes id="SixAxisForceTorqueSensor_8h" name="SixAxisForceTorqueSensor.h" local="no" imported="no">iDynTree/Sensors/SixAxisForceTorqueSensor.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>createReducedModelAndSensors</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af8355a73b30d3b5797fddae1f80ac778</anchor>
      <arglist>(const Model &amp;fullModel, const SensorsList &amp;fullSensors, const std::vector&lt; std::string &gt; &amp;jointsInReducedModel, Model &amp;reducedModel, SensorsList &amp;reducedSensors)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ModelSensorsTransformers.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/sensors/include/iDynTree/Sensors/</path>
    <filename>ModelSensorsTransformers_8h</filename>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>createReducedModelAndSensors</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af8355a73b30d3b5797fddae1f80ac778</anchor>
      <arglist>(const Model &amp;fullModel, const SensorsList &amp;fullSensors, const std::vector&lt; std::string &gt; &amp;jointsInReducedModel, Model &amp;reducedModel, SensorsList &amp;reducedSensors)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ModelTestUtils.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>ModelTestUtils_8h</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="FixedJoint_8h" name="FixedJoint.h" local="no" imported="no">iDynTree/Model/FixedJoint.h</includes>
    <includes id="RevoluteJoint_8h" name="RevoluteJoint.h" local="no" imported="no">iDynTree/Model/RevoluteJoint.h</includes>
    <includes id="FreeFloatingState_8h" name="FreeFloatingState.h" local="no" imported="no">iDynTree/Model/FreeFloatingState.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <includes id="TestUtils_8h" name="TestUtils.h" local="no" imported="no">iDynTree/Core/TestUtils.h</includes>
    <includes id="IJoint_8h" name="IJoint.h" local="yes" imported="no">IJoint.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>Link</type>
      <name>getRandomLink</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae3c9d8004d8849d347af71dfbbc998f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRandomLinkToModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af2050e6090e689f7dba9bcd2905c7104</anchor>
      <arglist>(Model &amp;model, std::string parentLink, std::string newLinkName, bool noFixed=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRandomAdditionalFrameToModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>abbc9efd0eed3caf7826a0f67056972f8</anchor>
      <arglist>(Model &amp;model, std::string parentLink, std::string newFrameName)</arglist>
    </member>
    <member kind="function">
      <type>LinkIndex</type>
      <name>getRandomLinkIndexOfModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6480b737c82af8b72b95857960254bad</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getRandomLinkOfModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a75223c9a86126d90e70857cc48ff302e</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>int2string</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2f8e6bff5b6a359c5bb88792dde90ac3</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>Model</type>
      <name>getRandomModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab524c8553e271868a40123e2e7d9ae7d</anchor>
      <arglist>(unsigned int nrOfJoints, size_t nrOfAdditionalFrames=10)</arglist>
    </member>
    <member kind="function">
      <type>Model</type>
      <name>getRandomChain</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a89ca09ae32e8673219c9beda06b11272</anchor>
      <arglist>(unsigned int nrOfJoints, size_t nrOfAdditionalFrames=10, bool noFixed=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRandomJointPositions</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aff4391c79fb7cd4b59feed20b012d1d5</anchor>
      <arglist>(VectorDynSize &amp;vec, const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRandomInverseDynamicsInputs</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a72bed46cd07c0617f3f59ffbbb0823a0</anchor>
      <arglist>(FreeFloatingPos &amp;pos, FreeFloatingVel &amp;vel, FreeFloatingAcc &amp;acc, LinkNetExternalWrenches &amp;extWrenches)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ModelTransformers.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>ModelTransformers_8cpp</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="SubModel_8h" name="SubModel.h" local="no" imported="no">iDynTree/Model/SubModel.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="FreeFloatingState_8h" name="FreeFloatingState.h" local="no" imported="no">iDynTree/Model/FreeFloatingState.h</includes>
    <includes id="FixedJoint_8h" name="FixedJoint.h" local="no" imported="no">iDynTree/Model/FixedJoint.h</includes>
    <includes id="RevoluteJoint_8h" name="RevoluteJoint.h" local="no" imported="no">iDynTree/Model/RevoluteJoint.h</includes>
    <includes id="PrismaticJoint_8h" name="PrismaticJoint.h" local="no" imported="no">iDynTree/Model/PrismaticJoint.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>isFakeLink</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa64841c3795872a5f074c188b160eaaf</anchor>
      <arglist>(const Model &amp;modelWithFakeLinks, const LinkIndex linkToCheck)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeFakeLinks</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aab77480c8f9d5add110768cf75226508</anchor>
      <arglist>(const Model &amp;modelWithFakeLinks, Model &amp;modelWithoutFakeLinks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCompositeRigidBodyInertiaSubModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae0dda9d596d583ad0062ac36615df535</anchor>
      <arglist>(const Model &amp;fullModel, const Traversal &amp;subModelTraversal, const FreeFloatingPos &amp;jointPos, LinkInertias &amp;linkSubModelCRBs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildLinkToAdditionalFramesList</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8a53b116eeea4ffaef94cf86f116c4fa</anchor>
      <arglist>(const Model &amp;fullModel, std::vector&lt; std::vector&lt; FrameIndex &gt; &gt; &amp;link2additionalFramesAdjacencyList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reducedModelAddAdditionalFrames</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac8cca06ef6121c5726b0aa15a929e9e1</anchor>
      <arglist>(const Model &amp;fullModel, Model &amp;reducedModel, const std::string linkInReducedModel, const Traversal &amp;linkSubModel, const FreeFloatingPos &amp;pos, LinkPositions &amp;subModelBase_X_link)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reducedModelAddSolidShapes</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a342821cc9b7ca323a7d448684f63e815</anchor>
      <arglist>(const Model &amp;fullModel, Model &amp;reducedModel, const std::string linkInReducedModel, const Traversal &amp;linkSubModel, const FreeFloatingPos &amp;pos, LinkPositions &amp;subModelBase_X_link)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createReducedModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0dfcb86d2d13eb1969493ee84da2f5c0</anchor>
      <arglist>(const Model &amp;fullModel, const std::vector&lt; std::string &gt; &amp;jointsInReducedModel, Model &amp;reducedModel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createModelWithNormalizedJointNumbering</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa6a9c44d5b80ede19b30f721f88d3679</anchor>
      <arglist>(const Model &amp;model, const std::string &amp;baseForNormalizedJointNumbering, Model &amp;reducedModel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ModelTransformers.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>ModelTransformers_8h</filename>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>removeFakeLinks</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aab77480c8f9d5add110768cf75226508</anchor>
      <arglist>(const Model &amp;modelWithFakeLinks, Model &amp;modelWithoutFakeLinks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createReducedModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0dfcb86d2d13eb1969493ee84da2f5c0</anchor>
      <arglist>(const Model &amp;fullModel, const std::vector&lt; std::string &gt; &amp;jointsInReducedModel, Model &amp;reducedModel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createModelWithNormalizedJointNumbering</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa6a9c44d5b80ede19b30f721f88d3679</anchor>
      <arglist>(const Model &amp;model, const std::string &amp;baseForNormalizedJointNumbering, Model &amp;reducedModel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ModelVisualization.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/visualization/src/</path>
    <filename>ModelVisualization_8cpp</filename>
    <includes id="ModelVisualization_8h" name="ModelVisualization.h" local="yes" imported="no">ModelVisualization.h</includes>
    <includes id="JetsVisualization_8h" name="JetsVisualization.h" local="yes" imported="no">JetsVisualization.h</includes>
    <includes id="IrrlichtUtils_8h" name="IrrlichtUtils.h" local="yes" imported="no">IrrlichtUtils.h</includes>
    <includes id="ForwardKinematics_8h" name="ForwardKinematics.h" local="no" imported="no">iDynTree/Model/ForwardKinematics.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <class kind="struct">iDynTree::ModelVisualization::ModelVisualizationPimpl</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ModelVisualization.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/visualization/src/</path>
    <filename>ModelVisualization_8h</filename>
    <includes id="Visualizer_8h" name="Visualizer.h" local="no" imported="no">iDynTree/Visualizer.h</includes>
    <class kind="class">iDynTree::ModelVisualization</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>MotionVector3.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>MotionVector3_8cpp</filename>
    <includes id="MotionVector3_8h" name="MotionVector3.h" local="no" imported="no">iDynTree/Core/MotionVector3.h</includes>
    <includes id="LinearMotionVector3_8h" name="LinearMotionVector3.h" local="no" imported="no">iDynTree/Core/LinearMotionVector3.h</includes>
    <includes id="AngularMotionVector3_8h" name="AngularMotionVector3.h" local="no" imported="no">iDynTree/Core/AngularMotionVector3.h</includes>
    <includes id="LinearForceVector3_8h" name="LinearForceVector3.h" local="no" imported="no">iDynTree/Core/LinearForceVector3.h</includes>
    <includes id="AngularForceVector3_8h" name="AngularForceVector3.h" local="no" imported="no">iDynTree/Core/AngularForceVector3.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MOTIONVECTOR3_INSTANCE_HDR</name>
      <anchorfile>MotionVector3_8cpp.html</anchorfile>
      <anchor>a7d27aa01671fb74c001f5ee12025db99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MotionVector3.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>MotionVector3_8h</filename>
    <includes id="GeomVector3_8h" name="GeomVector3.h" local="no" imported="no">iDynTree/Core/GeomVector3.h</includes>
    <includes id="PrivateMotionForceVertorAssociations_8h" name="PrivateMotionForceVertorAssociations.h" local="no" imported="no">iDynTree/Core/PrivateMotionForceVertorAssociations.h</includes>
    <class kind="class">iDynTree::MotionVector3</class>
    <namespace>iDynTree</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MOTIONVECTOR3_TEMPLATE_HDR</name>
      <anchorfile>MotionVector3_8h.html</anchorfile>
      <anchor>abf2458f877e6a280694481d5583acd4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MovableJointImpl.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>MovableJointImpl_8h</filename>
    <includes id="IJoint_8h" name="IJoint.h" local="no" imported="no">iDynTree/Model/IJoint.h</includes>
    <class kind="class">iDynTree::MovableJointImpl</class>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>MovableJointImpl&lt; 1, 1 &gt;</type>
      <name>MovableJointImpl1</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac4ab72af9658e6e1503c06a97786db7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MovableJointImpl&lt; 2, 2 &gt;</type>
      <name>MovableJointImpl2</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a24b411fa2a181857fd60881b7a1fa644</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MovableJointImpl&lt; 3, 3 &gt;</type>
      <name>MovableJointImpl3</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae4671e7929209092bc1d6a72f460872a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MovableJointImpl&lt; 4, 4 &gt;</type>
      <name>MovableJointImpl4</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a66158274373829ef7c8694995a9d6929</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MovableJointImpl&lt; 5, 5 &gt;</type>
      <name>MovableJointImpl5</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5b8dfe13ce097fa3e505f492b7906c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MovableJointImpl&lt; 6, 6 &gt;</type>
      <name>MovableJointImpl6</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af1c9c077a2177994db5ee45257af1d48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MPC.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>MPC_8cpp</filename>
    <includes id="MPC_8h" name="MPC.h" local="no" imported="no">iDynTree/MPC.h</includes>
  </compound>
  <compound kind="file">
    <name>MPC.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>MPC_8h</filename>
    <class kind="class">iDynTree::optimalcontrol::MPC</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>MultiBodySystem.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>MultiBodySystem_8cpp</filename>
    <includes id="MultiBodySystem_8h" name="MultiBodySystem.h" local="no" imported="no">iDynTree/MultiBodySystem.h</includes>
  </compound>
  <compound kind="file">
    <name>MultiBodySystem.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>MultiBodySystem_8h</filename>
    <includes id="DynamicalSystem_8h" name="DynamicalSystem.h" local="no" imported="no">iDynTree/DynamicalSystem.h</includes>
    <class kind="class">iDynTree::optimalcontrol::MultiBodySystem</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>MultipleShootingSolver.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>MultipleShootingSolver_8cpp</filename>
    <includes id="MultipleShootingSolver_8h" name="MultipleShootingSolver.h" local="no" imported="no">iDynTree/OCSolvers/MultipleShootingSolver.h</includes>
    <includes id="SparsityStructure_8h" name="SparsityStructure.h" local="no" imported="no">iDynTree/SparsityStructure.h</includes>
    <includes id="OptimalControlProblem_8h" name="OptimalControlProblem.h" local="no" imported="no">iDynTree/OptimalControlProblem.h</includes>
    <includes id="DynamicalSystem_8h" name="DynamicalSystem.h" local="no" imported="no">iDynTree/DynamicalSystem.h</includes>
    <includes id="Integrator_8h" name="Integrator.h" local="no" imported="no">iDynTree/Integrator.h</includes>
    <includes id="TimeRange_8h" name="TimeRange.h" local="no" imported="no">iDynTree/TimeRange.h</includes>
    <includes id="OptimizationProblem_8h" name="OptimizationProblem.h" local="no" imported="no">iDynTree/OptimizationProblem.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <class kind="class">iDynTree::optimalcontrol::MeshPointOrigin</class>
    <class kind="struct">iDynTree::optimalcontrol::MeshPoint</class>
    <class kind="class">iDynTree::optimalcontrol::HessianBlocksMap</class>
    <class kind="class">iDynTree::optimalcontrol::MultipleShootingSolver::MultipleShootingTranscription</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
    <member kind="enumeration">
      <type></type>
      <name>MeshPointType</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a65d86b0558993b768c8644089001aa6a</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceiDynTree_1_1optimalcontrol.html" anchor="a65d86b0558993b768c8644089001aa6aaa1595abbb4c3a326636dd178757cd6c1">Control</enumvalue>
      <enumvalue file="namespaceiDynTree_1_1optimalcontrol.html" anchor="a65d86b0558993b768c8644089001aa6aa46a2a41cc6e552044816a2d04634545d">State</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>MultipleShootingSolver.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/OCSolvers/</path>
    <filename>MultipleShootingSolver_8h</filename>
    <includes id="OptimalControlSolver_8h" name="OptimalControlSolver.h" local="no" imported="no">iDynTree/OptimalControlSolver.h</includes>
    <includes id="TimeVaryingObject_8h" name="TimeVaryingObject.h" local="no" imported="no">iDynTree/TimeVaryingObject.h</includes>
    <includes id="Optimizer_8h" name="Optimizer.h" local="no" imported="no">iDynTree/Optimizer.h</includes>
    <class kind="class">iDynTree::optimalcontrol::MultipleShootingSolver</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
    <namespace>iDynTree::optimalcontrol::integrators</namespace>
  </compound>
  <compound kind="file">
    <name>NumericalDifferentiation.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/include/kdl_codyco/regressors/</path>
    <filename>NumericalDifferentiation_8hpp</filename>
    <includes id="DynamicDatasetInterfaces_8hpp" name="DynamicDatasetInterfaces.hpp" local="yes" imported="no">DynamicDatasetInterfaces.hpp</includes>
  </compound>
  <compound kind="file">
    <name>ObserverThread.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/idyntree-sole-gui/plugin/</path>
    <filename>ObserverThread_8cpp</filename>
    <includes id="ObserverThread_8h" name="ObserverThread.h" local="yes" imported="no">include/ObserverThread.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="Direction_8h" name="Direction.h" local="no" imported="no">iDynTree/Core/Direction.h</includes>
    <includes id="ConvexHullHelpers_8h" name="ConvexHullHelpers.h" local="no" imported="no">iDynTree/ConvexHullHelpers.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="ModelLoader_8h" name="ModelLoader.h" local="no" imported="no">iDynTree/ModelIO/ModelLoader.h</includes>
    <member kind="function">
      <type>void</type>
      <name>addVectorOfStringToProperty</name>
      <anchorfile>ObserverThread_8cpp.html</anchorfile>
      <anchor>a62991d1525d2028103e91700cc4879c0</anchor>
      <arglist>(yarp::os::Property &amp;prop, std::string key, std::vector&lt; std::string &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBottleToProperty</name>
      <anchorfile>ObserverThread_8cpp.html</anchorfile>
      <anchor>acc0990fa5ac242ff43f49080cd22b132</anchor>
      <arglist>(yarp::os::Property &amp;prop, std::string key, yarp::os::Bottle *list)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getVectorOfStringFromProperty</name>
      <anchorfile>ObserverThread_8cpp.html</anchorfile>
      <anchor>aad59c172f5e58cfb1ca70822c91ae1b0</anchor>
      <arglist>(yarp::os::Property &amp;prop, std::string key, std::vector&lt; std::string &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>QPointF</type>
      <name>toQt2D</name>
      <anchorfile>ObserverThread_8cpp.html</anchorfile>
      <anchor>a3b91f699b8afdc17f6c8315ea2983d16</anchor>
      <arglist>(iDynTree::Position &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>QPolygonF</type>
      <name>toQt2D</name>
      <anchorfile>ObserverThread_8cpp.html</anchorfile>
      <anchor>a429078136fa6a7fbd34098be0d94f597</anchor>
      <arglist>(iDynTree::Polygon &amp;poly)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObserverThread.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/idyntree-sole-gui/plugin/include/</path>
    <filename>ObserverThread_8h</filename>
    <includes id="Direction_8h" name="Direction.h" local="no" imported="no">iDynTree/Core/Direction.h</includes>
    <includes id="ConvexHullHelpers_8h" name="ConvexHullHelpers.h" local="no" imported="no">iDynTree/ConvexHullHelpers.h</includes>
    <includes id="KinDynComputations_8h" name="KinDynComputations.h" local="no" imported="no">iDynTree/KinDynComputations.h</includes>
    <class kind="class">ObserverThread</class>
  </compound>
  <compound kind="file">
    <name>OptimalControl.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>OptimalControl_8h</filename>
    <includes id="DynamicalSystem_8h" name="DynamicalSystem.h" local="no" imported="no">iDynTree/DynamicalSystem.h</includes>
    <includes id="LinearSystem_8h" name="LinearSystem.h" local="no" imported="no">iDynTree/LinearSystem.h</includes>
    <includes id="Constraint_8h" name="Constraint.h" local="no" imported="no">iDynTree/Constraint.h</includes>
    <includes id="ConstraintsGroup_8h" name="ConstraintsGroup.h" local="no" imported="no">iDynTree/ConstraintsGroup.h</includes>
    <includes id="Cost_8h" name="Cost.h" local="no" imported="no">iDynTree/Cost.h</includes>
    <includes id="OptimalControlProblem_8h" name="OptimalControlProblem.h" local="no" imported="no">iDynTree/OptimalControlProblem.h</includes>
    <includes id="TimeRange_8h" name="TimeRange.h" local="no" imported="no">iDynTree/TimeRange.h</includes>
  </compound>
  <compound kind="file">
    <name>OptimalControlProblem.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>OptimalControlProblem_8cpp</filename>
    <includes id="OptimalControlProblem_8h" name="OptimalControlProblem.h" local="no" imported="no">iDynTree/OptimalControlProblem.h</includes>
    <includes id="DynamicalSystem_8h" name="DynamicalSystem.h" local="no" imported="no">iDynTree/DynamicalSystem.h</includes>
    <includes id="LinearSystem_8h" name="LinearSystem.h" local="no" imported="no">iDynTree/LinearSystem.h</includes>
    <includes id="ConstraintsGroup_8h" name="ConstraintsGroup.h" local="no" imported="no">iDynTree/ConstraintsGroup.h</includes>
    <includes id="Constraint_8h" name="Constraint.h" local="no" imported="no">iDynTree/Constraint.h</includes>
    <includes id="LinearConstraint_8h" name="LinearConstraint.h" local="no" imported="no">iDynTree/LinearConstraint.h</includes>
    <includes id="Cost_8h" name="Cost.h" local="no" imported="no">iDynTree/Cost.h</includes>
    <includes id="QuadraticLikeCost_8h" name="QuadraticLikeCost.h" local="no" imported="no">iDynTree/QuadraticLikeCost.h</includes>
    <includes id="QuadraticCost_8h" name="QuadraticCost.h" local="no" imported="no">iDynTree/QuadraticCost.h</includes>
    <includes id="L2NormCost_8h" name="L2NormCost.h" local="no" imported="no">iDynTree/L2NormCost.h</includes>
    <includes id="LinearCost_8h" name="LinearCost.h" local="no" imported="no">iDynTree/LinearCost.h</includes>
    <includes id="TimeRange_8h" name="TimeRange.h" local="no" imported="no">iDynTree/TimeRange.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <class kind="struct">iDynTree::optimalcontrol::BufferedGroup</class>
    <class kind="struct">iDynTree::optimalcontrol::TimedCost</class>
    <class kind="class">iDynTree::optimalcontrol::OptimalControlProblem::OptimalControlProblemPimpl</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BufferedGroup &gt;</type>
      <name>BufferedGroup_ptr</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a742359e4347fb6b7808b0855ace2ac52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, BufferedGroup_ptr &gt;</type>
      <name>ConstraintsGroupsMap</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a3f0f6cc65b51721f06f153ebd5b35b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, TimedCost &gt;</type>
      <name>CostsMap</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a927f68149950d8f86810fe2b6472d955</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OptimalControlProblem.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>OptimalControlProblem_8h</filename>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="SparsityStructure_8h" name="SparsityStructure.h" local="no" imported="no">iDynTree/SparsityStructure.h</includes>
    <includes id="TimeVaryingObject_8h" name="TimeVaryingObject.h" local="no" imported="no">iDynTree/TimeVaryingObject.h</includes>
    <class kind="class">iDynTree::optimalcontrol::OptimalControlProblem</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>OptimalControlSolver.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>OptimalControlSolver_8cpp</filename>
    <includes id="OptimalControlSolver_8h" name="OptimalControlSolver.h" local="no" imported="no">iDynTree/OptimalControlSolver.h</includes>
    <includes id="OptimalControlProblem_8h" name="OptimalControlProblem.h" local="no" imported="no">iDynTree/OptimalControlProblem.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>OptimalControlSolver.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>OptimalControlSolver_8h</filename>
    <class kind="class">iDynTree::optimalcontrol::OptimalControlSolver</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>OptimizationProblem.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>OptimizationProblem_8cpp</filename>
    <includes id="OptimizationProblem_8h" name="OptimizationProblem.h" local="no" imported="no">iDynTree/OptimizationProblem.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimization</namespace>
  </compound>
  <compound kind="file">
    <name>OptimizationProblem.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>OptimizationProblem_8h</filename>
    <class kind="class">iDynTree::optimization::OptimizationProblemInfoData</class>
    <class kind="class">iDynTree::optimization::OptimizationProblemInfo</class>
    <class kind="class">iDynTree::optimization::OptimizationProblem</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimization</namespace>
  </compound>
  <compound kind="file">
    <name>Optimizer.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>Optimizer_8cpp</filename>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="Optimizer_8h" name="Optimizer.h" local="no" imported="no">iDynTree/Optimizer.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimization</namespace>
  </compound>
  <compound kind="file">
    <name>Optimizer.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>Optimizer_8h</filename>
    <includes id="OptimizationProblem_8h" name="OptimizationProblem.h" local="no" imported="no">iDynTree/OptimizationProblem.h</includes>
    <class kind="class">iDynTree::optimization::Optimizer</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimization</namespace>
  </compound>
  <compound kind="file">
    <name>OriginElement.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/</path>
    <filename>OriginElement_8cpp</filename>
    <includes id="OriginElement_8h" name="OriginElement.h" local="yes" imported="no">OriginElement.h</includes>
    <includes id="URDFParsingUtils_8h" name="URDFParsingUtils.h" local="yes" imported="no">URDFParsingUtils.h</includes>
    <includes id="XMLAttribute_8h" name="XMLAttribute.h" local="no" imported="no">iDynTree/XMLAttribute.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>OriginElement.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/private/</path>
    <filename>OriginElement_8h</filename>
    <includes id="XMLElement_8h" name="XMLElement.h" local="no" imported="no">iDynTree/XMLElement.h</includes>
    <class kind="class">iDynTree::OriginElement</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>OsqpInterface.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>OsqpInterface_8cpp</filename>
    <includes id="OsqpInterface_8h" name="OsqpInterface.h" local="no" imported="no">iDynTree/Optimizers/OsqpInterface.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <class kind="class">iDynTree::optimization::Triplet</class>
    <class kind="class">iDynTree::optimization::TripletIterator</class>
    <class kind="class">iDynTree::optimization::DenseIterator</class>
    <class kind="class">iDynTree::optimization::OsqpInterface::OsqpInterfaceImplementation</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimization</namespace>
  </compound>
  <compound kind="file">
    <name>OsqpInterface.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/Optimizers/</path>
    <filename>OsqpInterface_8h</filename>
    <includes id="Optimizer_8h" name="Optimizer.h" local="no" imported="no">iDynTree/Optimizer.h</includes>
    <class kind="struct">iDynTree::optimization::OsqpSettings</class>
    <class kind="class">iDynTree::optimization::OsqpInterface</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimization</namespace>
  </compound>
  <compound kind="file">
    <name>OsqpInterfaceNotImplemented.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>OsqpInterfaceNotImplemented_8cpp</filename>
    <includes id="OsqpInterface_8h" name="OsqpInterface.h" local="no" imported="no">iDynTree/Optimizers/OsqpInterface.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
  </compound>
  <compound kind="file">
    <name>par2urdf.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/</path>
    <filename>par2urdf_8cpp</filename>
    <includes id="symoro__par__model_8hpp" name="symoro_par_model.hpp" local="no" imported="no">iDynTree/ModelIO/symoro_par_model.hpp</includes>
    <includes id="symoro__par__import_8hpp" name="symoro_par_import.hpp" local="no" imported="no">iDynTree/ModelIO/symoro_par_import.hpp</includes>
    <includes id="urdf__export_8hpp" name="urdf_export.hpp" local="no" imported="no">iDynTree/ModelIO/impl/urdf_export.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>par2urdf_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Position.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>Position_8cpp</filename>
    <includes id="Position_8h" name="Position.h" local="no" imported="no">iDynTree/Core/Position.h</includes>
    <includes id="Rotation_8h" name="Rotation.h" local="no" imported="no">iDynTree/Core/Rotation.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="no" imported="no">iDynTree/Core/Twist.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="no" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="SpatialAcc_8h" name="SpatialAcc.h" local="no" imported="no">iDynTree/Core/SpatialAcc.h</includes>
    <includes id="SpatialMomentum_8h" name="SpatialMomentum.h" local="no" imported="no">iDynTree/Core/SpatialMomentum.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="PrivateSemanticsMacros_8h" name="PrivateSemanticsMacros.h" local="no" imported="no">iDynTree/Core/PrivateSemanticsMacros.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function" static="yes">
      <type>static SpatialMotionForceVectorT</type>
      <name>changePointOfMotionT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a30b68a9a86dc461769d42c0576bed71d</anchor>
      <arglist>(const Position &amp;pos, const SpatialMotionForceVectorT &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpatialMotionForceVectorT</type>
      <name>changePointOfForceT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a008bdab3122130839ce8a5aefe1f1d08</anchor>
      <arglist>(const Position &amp;pos, const SpatialMotionForceVectorT &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Position.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>Position_8h</filename>
    <includes id="PositionRaw_8h" name="PositionRaw.h" local="no" imported="no">iDynTree/Core/PositionRaw.h</includes>
    <includes id="PositionSemantics_8h" name="PositionSemantics.h" local="no" imported="no">iDynTree/Core/PositionSemantics.h</includes>
    <includes id="Rotation_8h" name="Rotation.h" local="no" imported="no">iDynTree/Core/Rotation.h</includes>
    <class kind="class">iDynTree::Position</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>PositionRaw.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>PositionRaw_8cpp</filename>
    <includes id="PositionRaw_8h" name="PositionRaw.h" local="no" imported="no">iDynTree/Core/PositionRaw.h</includes>
    <includes id="RotationRaw_8h" name="RotationRaw.h" local="no" imported="no">iDynTree/Core/RotationRaw.h</includes>
    <includes id="SpatialMotionVector_8h" name="SpatialMotionVector.h" local="no" imported="no">iDynTree/Core/SpatialMotionVector.h</includes>
    <includes id="SpatialForceVector_8h" name="SpatialForceVector.h" local="no" imported="no">iDynTree/Core/SpatialForceVector.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 3, Eigen::RowMajor &gt;</type>
      <name>Matrix3dRowMajor</name>
      <anchorfile>PositionRaw_8cpp.html</anchorfile>
      <anchor>ad4c7dfb28280dff3aa927eb28a2a3fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
      <name>Vector6d</name>
      <anchorfile>PositionRaw_8cpp.html</anchorfile>
      <anchor>a7c5527454ec83cebcb6617efc681ea3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PositionRaw.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>PositionRaw_8h</filename>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <class kind="class">iDynTree::PositionRaw</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>PositionSemantics.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>PositionSemantics_8cpp</filename>
    <includes id="PositionSemantics_8h" name="PositionSemantics.h" local="no" imported="no">iDynTree/Core/PositionSemantics.h</includes>
    <includes id="RotationSemantics_8h" name="RotationSemantics.h" local="no" imported="no">iDynTree/Core/RotationSemantics.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="PrivateSemanticsMacros_8h" name="PrivateSemanticsMacros.h" local="no" imported="no">iDynTree/Core/PrivateSemanticsMacros.h</includes>
    <includes id="PrivatePreProcessorUtils_8h" name="PrivatePreProcessorUtils.h" local="no" imported="no">iDynTree/Core/PrivatePreProcessorUtils.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>PositionSemantics.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>PositionSemantics_8h</filename>
    <class kind="class">iDynTree::PositionSemantics</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>PredictSensorsMeasurements.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/sensors/src/</path>
    <filename>PredictSensorsMeasurements_8cpp</filename>
    <includes id="PredictSensorsMeasurements_8h" name="PredictSensorsMeasurements.h" local="no" imported="no">iDynTree/Sensors/PredictSensorsMeasurements.h</includes>
    <includes id="SpatialMotionVector_8h" name="SpatialMotionVector.h" local="no" imported="no">iDynTree/Core/SpatialMotionVector.h</includes>
    <includes id="AccelerometerSensor_8h" name="AccelerometerSensor.h" local="no" imported="no">iDynTree/Sensors/AccelerometerSensor.h</includes>
    <includes id="GyroscopeSensor_8h" name="GyroscopeSensor.h" local="no" imported="no">iDynTree/Sensors/GyroscopeSensor.h</includes>
    <includes id="ThreeAxisAngularAccelerometerSensor_8h" name="ThreeAxisAngularAccelerometerSensor.h" local="no" imported="no">iDynTree/Sensors/ThreeAxisAngularAccelerometerSensor.h</includes>
    <includes id="SixAxisForceTorqueSensor_8h" name="SixAxisForceTorqueSensor.h" local="no" imported="no">iDynTree/Sensors/SixAxisForceTorqueSensor.h</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="ForwardKinematics_8h" name="ForwardKinematics.h" local="no" imported="no">iDynTree/Model/ForwardKinematics.h</includes>
    <includes id="FreeFloatingState_8h" name="FreeFloatingState.h" local="no" imported="no">iDynTree/Model/FreeFloatingState.h</includes>
    <includes id="Dynamics_8h" name="Dynamics.h" local="no" imported="no">iDynTree/Model/Dynamics.h</includes>
    <includes id="SpatialAcc_8h" name="SpatialAcc.h" local="no" imported="no">iDynTree/Core/SpatialAcc.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>predictSensorsMeasurements</name>
      <anchorfile>group__iDynTreeSensors.html</anchorfile>
      <anchor>gacf87de6a0acc7c79369e4ea587ef19bc</anchor>
      <arglist>(const Model &amp;model, const SensorsList &amp;sensorList, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const FreeFloatingAcc &amp;robotAcc, const LinAcceleration &amp;gravity, const LinkNetExternalWrenches &amp;externalWrenches, FreeFloatingAcc &amp;buf_properRobotAcc, LinkPositions &amp;buf_linkPos, LinkVelArray &amp;buf_linkVel, LinkAccArray &amp;buf_linkProperAcc, LinkInternalWrenches &amp;buf_internalWrenches, FreeFloatingGeneralizedTorques &amp;buf_outputTorques, SensorsMeasurements &amp;predictedMeasurement)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predictSensorsMeasurementsFromRawBuffers</name>
      <anchorfile>group__iDynTreeSensors.html</anchorfile>
      <anchor>gaa68c8cac6b85223f729cd8855627d35e</anchor>
      <arglist>(const Model &amp;model, const SensorsList &amp;sensorList, const Traversal &amp;traversal, const LinkVelArray &amp;buf_linkVel, const LinkAccArray &amp;buf_linkProperAcc, const LinkInternalWrenches &amp;buf_internalWrenches, SensorsMeasurements &amp;predictedMeasurement)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PredictSensorsMeasurements.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/sensors/include/iDynTree/Sensors/</path>
    <filename>PredictSensorsMeasurements_8h</filename>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>predictSensorsMeasurements</name>
      <anchorfile>group__iDynTreeSensors.html</anchorfile>
      <anchor>gacf87de6a0acc7c79369e4ea587ef19bc</anchor>
      <arglist>(const Model &amp;model, const SensorsList &amp;sensorList, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const FreeFloatingAcc &amp;robotAcc, const LinAcceleration &amp;gravity, const LinkNetExternalWrenches &amp;externalWrenches, FreeFloatingAcc &amp;buf_properRobotAcc, LinkPositions &amp;buf_linkPos, LinkVelArray &amp;buf_linkVel, LinkAccArray &amp;buf_linkProperAcc, LinkInternalWrenches &amp;buf_internalWrenches, FreeFloatingGeneralizedTorques &amp;buf_outputTorques, SensorsMeasurements &amp;predictedMeasurement)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predictSensorsMeasurementsFromRawBuffers</name>
      <anchorfile>group__iDynTreeSensors.html</anchorfile>
      <anchor>gaa68c8cac6b85223f729cd8855627d35e</anchor>
      <arglist>(const Model &amp;model, const SensorsList &amp;sensorList, const Traversal &amp;traversal, const LinkVelArray &amp;buf_linkVel, const LinkAccArray &amp;buf_linkProperAcc, const LinkInternalWrenches &amp;buf_internalWrenches, SensorsMeasurements &amp;predictedMeasurement)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PrismaticJoint.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>PrismaticJoint_8cpp</filename>
    <includes id="PrismaticJoint_8h" name="PrismaticJoint.h" local="no" imported="no">iDynTree/Model/PrismaticJoint.h</includes>
    <includes id="Axis_8h" name="Axis.h" local="no" imported="no">iDynTree/Core/Axis.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="TransformDerivative_8h" name="TransformDerivative.h" local="no" imported="no">iDynTree/Core/TransformDerivative.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="no" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="no" imported="no">iDynTree/Core/Twist.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>PrismaticJoint.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>PrismaticJoint_8h</filename>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="SpatialMotionVector_8h" name="SpatialMotionVector.h" local="no" imported="no">iDynTree/Core/SpatialMotionVector.h</includes>
    <includes id="Axis_8h" name="Axis.h" local="no" imported="no">iDynTree/Core/Axis.h</includes>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <includes id="MovableJointImpl_8h" name="MovableJointImpl.h" local="no" imported="no">iDynTree/Model/MovableJointImpl.h</includes>
    <class kind="class">iDynTree::PrismaticJoint</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>PrivateMotionForceVertorAssociations.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>PrivateMotionForceVertorAssociations_8h</filename>
    <class kind="class">iDynTree::MotionForce_traits</class>
    <class kind="class">iDynTree::MotionForce_traits&lt; AngularForceVector3 &gt;</class>
    <class kind="class">iDynTree::MotionForce_traits&lt; AngularMotionVector3 &gt;</class>
    <class kind="class">iDynTree::MotionForce_traits&lt; LinearForceVector3 &gt;</class>
    <class kind="class">iDynTree::MotionForce_traits&lt; LinearMotionVector3 &gt;</class>
    <class kind="struct">iDynTree::MotionDerivativeOf</class>
    <class kind="struct">iDynTree::MotionDerivativeOf&lt; AngularMotionVector3, MotionForce2deriveT &gt;</class>
    <class kind="struct">iDynTree::MotionDerivativeOf&lt; LinearMotionVector3, MotionForce2deriveT &gt;</class>
    <class kind="struct">iDynTree::ConvertSem2motionForceTraits</class>
    <class kind="struct">iDynTree::ConvertSem2motionForceTraits&lt; AngularForceVector3Semantics &gt;</class>
    <class kind="struct">iDynTree::ConvertSem2motionForceTraits&lt; AngularMotionVector3Semantics &gt;</class>
    <class kind="struct">iDynTree::ConvertSem2motionForceTraits&lt; LinearForceVector3Semantics &gt;</class>
    <class kind="struct">iDynTree::ConvertSem2motionForceTraits&lt; LinearMotionVector3Semantics &gt;</class>
    <class kind="struct">iDynTree::DualMotionForceSemanticsT</class>
    <class kind="class">iDynTree::SpatialMotionForceVectorT_traits</class>
    <class kind="class">iDynTree::SpatialMotionForceVectorT_traits&lt; SpatialMotionVector &gt;</class>
    <class kind="class">iDynTree::SpatialMotionForceVectorT_traits&lt; SpatialForceVector &gt;</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>PrivatePreProcessorUtils.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>PrivatePreProcessorUtils_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>IDYNTREE_PRETTY_FUNCTION</name>
      <anchorfile>PrivatePreProcessorUtils_8h.html</anchorfile>
      <anchor>a24dc8a6fa402bd3a9b9ee3f40017c1fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PrivateSemanticsMacros.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>PrivateSemanticsMacros_8h</filename>
    <includes id="PrivatePreProcessorUtils_8h" name="PrivatePreProcessorUtils.h" local="no" imported="no">iDynTree/Core/PrivatePreProcessorUtils.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>iDynTreeAssert</name>
      <anchorfile>PrivateSemanticsMacros_8h.html</anchorfile>
      <anchor>a3ea2bb688f01bfe88c8ddc1233c89fa0</anchor>
      <arglist>(semCheckBoolOut)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>iDynTreeSemanticsOp</name>
      <anchorfile>PrivateSemanticsMacros_8h.html</anchorfile>
      <anchor>a446d810129146ee43b552a77e85f59fb</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IDYNTREE_DONT_USE_SEMANTICS</name>
      <anchorfile>PrivateSemanticsMacros_8h.html</anchorfile>
      <anchor>aab46372a9b09af6c2606f71b1589705f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PrivateUtils.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>PrivateUtils_8cpp</filename>
    <includes id="PrivateUtils_8h" name="PrivateUtils.h" local="no" imported="no">iDynTree/Core/PrivateUtils.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>squareCrossProductMatrix</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5cb90836a26ae5bb773be45bad7dad54</anchor>
      <arglist>(const Eigen::Vector3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>skew</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8dac2640419d7eaba00586c252ab99e5</anchor>
      <arglist>(const Eigen::Vector3d &amp;vec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PrivateUtils.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>PrivateUtils_8h</filename>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>squareCrossProductMatrix</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5cb90836a26ae5bb773be45bad7dad54</anchor>
      <arglist>(const Eigen::Vector3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>skew</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8dac2640419d7eaba00586c252ab99e5</anchor>
      <arglist>(const Eigen::Vector3d &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>efficient6dCopy</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab4c72168cc4cc9909da74c433345e8d0</anchor>
      <arglist>(vector6d *pthis, const vector6d &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>vector6d</type>
      <name>efficient6dSum</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9f173fe7a9b0aabdbfa0169513dd0afa</anchor>
      <arglist>(const vector6d &amp;op1, const vector6d &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>vector6d</type>
      <name>efficient6ddifference</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad44d09b939590fde0dca95ebd7f899c5</anchor>
      <arglist>(const vector6d &amp;op1, const vector6d &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>resultType</type>
      <name>efficientTwistCrossTwist</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ada26d16396f1cd9f82b2e7c921fe202e</anchor>
      <arglist>(const twistType &amp;op1, const motionVectorType &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>resultType</type>
      <name>efficientTwistCrossMomentum</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2941457a02de10e9de1dea4106588921</anchor>
      <arglist>(const twistType &amp;op1, const momentumVectorType &amp;op2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>qticubskinguiplugin.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/idyntree-sole-gui/plugin/</path>
    <filename>qticubskinguiplugin_8cpp</filename>
    <includes id="qticubskinguiplugin_8h" name="qticubskinguiplugin.h" local="yes" imported="no">qticubskinguiplugin.h</includes>
    <member kind="function" static="yes">
      <type>static yarp::os::Semaphore</type>
      <name>gMutex</name>
      <anchorfile>qticubskinguiplugin_8cpp.html</anchorfile>
      <anchor>a27a720237f35ec2bcb5c9d4d93d06653</anchor>
      <arglist>(1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>qticubskinguiplugin.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/idyntree-sole-gui/plugin/</path>
    <filename>qticubskinguiplugin_8h</filename>
    <includes id="ObserverThread_8h" name="ObserverThread.h" local="yes" imported="no">include/ObserverThread.h</includes>
    <class kind="class">QtiDynTreeSoleGuiPlugin</class>
  </compound>
  <compound kind="file">
    <name>qticubskinguiplugin_plugin.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/idyntree-sole-gui/plugin/</path>
    <filename>qticubskinguiplugin__plugin_8cpp</filename>
    <includes id="qticubskinguiplugin__plugin_8h" name="qticubskinguiplugin_plugin.h" local="yes" imported="no">qticubskinguiplugin_plugin.h</includes>
    <includes id="qticubskinguiplugin_8h" name="qticubskinguiplugin.h" local="yes" imported="no">qticubskinguiplugin.h</includes>
  </compound>
  <compound kind="file">
    <name>qticubskinguiplugin_plugin.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/idyntree-sole-gui/plugin/</path>
    <filename>qticubskinguiplugin__plugin_8h</filename>
    <class kind="class">QtiDynTreeSoleGuiPluginPlugin</class>
  </compound>
  <compound kind="file">
    <name>QuadraticCost.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>QuadraticCost_8cpp</filename>
    <includes id="QuadraticCost_8h" name="QuadraticCost.h" local="no" imported="no">iDynTree/QuadraticCost.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>QuadraticCost.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>QuadraticCost_8h</filename>
    <includes id="QuadraticLikeCost_8h" name="QuadraticLikeCost.h" local="no" imported="no">iDynTree/QuadraticLikeCost.h</includes>
    <includes id="TimeVaryingObject_8h" name="TimeVaryingObject.h" local="no" imported="no">iDynTree/TimeVaryingObject.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <class kind="class">iDynTree::optimalcontrol::QuadraticCost</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>QuadraticLikeCost.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>QuadraticLikeCost_8cpp</filename>
    <includes id="QuadraticLikeCost_8h" name="QuadraticLikeCost.h" local="no" imported="no">iDynTree/QuadraticLikeCost.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>QuadraticLikeCost.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>QuadraticLikeCost_8h</filename>
    <includes id="Cost_8h" name="Cost.h" local="no" imported="no">iDynTree/Cost.h</includes>
    <includes id="TimeVaryingObject_8h" name="TimeVaryingObject.h" local="no" imported="no">iDynTree/TimeVaryingObject.h</includes>
    <class kind="class">iDynTree::optimalcontrol::QuadraticLikeCost</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>releases.dox</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/doc/</path>
    <filename>releases_8dox</filename>
  </compound>
  <compound kind="file">
    <name>RevoluteJoint.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>RevoluteJoint_8cpp</filename>
    <includes id="RevoluteJoint_8h" name="RevoluteJoint.h" local="no" imported="no">iDynTree/Model/RevoluteJoint.h</includes>
    <includes id="Axis_8h" name="Axis.h" local="no" imported="no">iDynTree/Core/Axis.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="TransformDerivative_8h" name="TransformDerivative.h" local="no" imported="no">iDynTree/Core/TransformDerivative.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="no" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="no" imported="no">iDynTree/Core/Twist.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>RevoluteJoint.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>RevoluteJoint_8h</filename>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="SpatialMotionVector_8h" name="SpatialMotionVector.h" local="no" imported="no">iDynTree/Core/SpatialMotionVector.h</includes>
    <includes id="Axis_8h" name="Axis.h" local="no" imported="no">iDynTree/Core/Axis.h</includes>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <includes id="MovableJointImpl_8h" name="MovableJointImpl.h" local="no" imported="no">iDynTree/Model/MovableJointImpl.h</includes>
    <class kind="class">iDynTree::RevoluteJoint</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>RK4.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>RK4_8cpp</filename>
    <includes id="RK4_8h" name="RK4.h" local="no" imported="no">iDynTree/Integrators/RK4.h</includes>
    <includes id="DynamicalSystem_8h" name="DynamicalSystem.h" local="no" imported="no">iDynTree/DynamicalSystem.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
    <namespace>iDynTree::optimalcontrol::integrators</namespace>
  </compound>
  <compound kind="file">
    <name>RK4.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/Integrators/</path>
    <filename>RK4_8h</filename>
    <includes id="FixedStepIntegrator_8h" name="FixedStepIntegrator.h" local="no" imported="no">iDynTree/Integrators/FixedStepIntegrator.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <class kind="class">iDynTree::optimalcontrol::integrators::RK4</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
    <namespace>iDynTree::optimalcontrol::integrators</namespace>
  </compound>
  <compound kind="file">
    <name>RobotElement.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/</path>
    <filename>RobotElement_8cpp</filename>
    <includes id="RobotElement_8h" name="RobotElement.h" local="yes" imported="no">RobotElement.h</includes>
    <includes id="LinkElement_8h" name="LinkElement.h" local="yes" imported="no">LinkElement.h</includes>
    <includes id="JointElement_8h" name="JointElement.h" local="yes" imported="no">JointElement.h</includes>
    <includes id="SensorElement_8h" name="SensorElement.h" local="yes" imported="no">SensorElement.h</includes>
    <includes id="MaterialElement_8h" name="MaterialElement.h" local="yes" imported="no">MaterialElement.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>RobotElement.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/private/</path>
    <filename>RobotElement_8h</filename>
    <includes id="XMLElement_8h" name="XMLElement.h" local="no" imported="no">iDynTree/XMLElement.h</includes>
    <includes id="JointElement_8h" name="JointElement.h" local="yes" imported="no">JointElement.h</includes>
    <includes id="MaterialElement_8h" name="MaterialElement.h" local="yes" imported="no">MaterialElement.h</includes>
    <includes id="VisualElement_8h" name="VisualElement.h" local="yes" imported="no">VisualElement.h</includes>
    <class kind="class">iDynTree::RobotElement</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>robotstatepublisher.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/yarprobotstatepublisher/src/</path>
    <filename>robotstatepublisher_8cpp</filename>
    <includes id="ModelLoader_8h" name="ModelLoader.h" local="no" imported="no">iDynTree/ModelIO/ModelLoader.h</includes>
    <includes id="KinDynComputations_8h" name="KinDynComputations.h" local="no" imported="no">iDynTree/KinDynComputations.h</includes>
    <includes id="YARPConversions_8h" name="YARPConversions.h" local="no" imported="no">iDynTree/yarp/YARPConversions.h</includes>
    <includes id="robotstatepublisher_8h" name="robotstatepublisher.h" local="yes" imported="no">robotstatepublisher.h</includes>
  </compound>
  <compound kind="file">
    <name>robotstatepublisher.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/yarprobotstatepublisher/include/</path>
    <filename>robotstatepublisher_8h</filename>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="KinDynComputations_8h" name="KinDynComputations.h" local="no" imported="no">iDynTree/KinDynComputations.h</includes>
    <class kind="class">JointStateSubscriber</class>
    <class kind="class">YARPRobotStatePublisherModule</class>
  </compound>
  <compound kind="file">
    <name>Rotation.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>Rotation_8cpp</filename>
    <includes id="AngularMotionVector3_8h" name="AngularMotionVector3.h" local="no" imported="no">iDynTree/Core/AngularMotionVector3.h</includes>
    <includes id="ClassicalAcc_8h" name="ClassicalAcc.h" local="no" imported="no">iDynTree/Core/ClassicalAcc.h</includes>
    <includes id="Rotation_8h" name="Rotation.h" local="no" imported="no">iDynTree/Core/Rotation.h</includes>
    <includes id="Axis_8h" name="Axis.h" local="no" imported="no">iDynTree/Core/Axis.h</includes>
    <includes id="Direction_8h" name="Direction.h" local="no" imported="no">iDynTree/Core/Direction.h</includes>
    <includes id="Position_8h" name="Position.h" local="no" imported="no">iDynTree/Core/Position.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="no" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="RotationalInertiaRaw_8h" name="RotationalInertiaRaw.h" local="no" imported="no">iDynTree/Core/RotationalInertiaRaw.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="no" imported="no">iDynTree/Core/Twist.h</includes>
    <includes id="SpatialAcc_8h" name="SpatialAcc.h" local="no" imported="no">iDynTree/Core/SpatialAcc.h</includes>
    <includes id="SpatialMomentum_8h" name="SpatialMomentum.h" local="no" imported="no">iDynTree/Core/SpatialMomentum.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="PrivateSemanticsMacros_8h" name="PrivateSemanticsMacros.h" local="no" imported="no">iDynTree/Core/PrivateSemanticsMacros.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function" static="yes">
      <type>static SpatialMotionForceVectorT</type>
      <name>changeCoordFrameOfT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1e097df140e6cd7959d57648bb70a1e2</anchor>
      <arglist>(const Rotation &amp;rot, const SpatialMotionForceVectorT &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Rotation.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>Rotation_8h</filename>
    <includes id="RotationRaw_8h" name="RotationRaw.h" local="no" imported="no">iDynTree/Core/RotationRaw.h</includes>
    <includes id="RotationSemantics_8h" name="RotationSemantics.h" local="no" imported="no">iDynTree/Core/RotationSemantics.h</includes>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <class kind="class">iDynTree::Rotation</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>RotationalInertiaRaw.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>RotationalInertiaRaw_8cpp</filename>
    <includes id="RotationalInertiaRaw_8h" name="RotationalInertiaRaw.h" local="no" imported="no">iDynTree/Core/RotationalInertiaRaw.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>RotationalInertiaRaw.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>RotationalInertiaRaw_8h</filename>
    <includes id="MatrixFixSize_8h" name="MatrixFixSize.h" local="no" imported="no">iDynTree/Core/MatrixFixSize.h</includes>
    <class kind="class">iDynTree::RotationalInertiaRaw</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>RotationRaw.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>RotationRaw_8cpp</filename>
    <includes id="ClassicalAcc_8h" name="ClassicalAcc.h" local="no" imported="no">iDynTree/Core/ClassicalAcc.h</includes>
    <includes id="RotationRaw_8h" name="RotationRaw.h" local="no" imported="no">iDynTree/Core/RotationRaw.h</includes>
    <includes id="PositionRaw_8h" name="PositionRaw.h" local="no" imported="no">iDynTree/Core/PositionRaw.h</includes>
    <includes id="RotationalInertiaRaw_8h" name="RotationalInertiaRaw.h" local="no" imported="no">iDynTree/Core/RotationalInertiaRaw.h</includes>
    <includes id="SpatialMotionVector_8h" name="SpatialMotionVector.h" local="no" imported="no">iDynTree/Core/SpatialMotionVector.h</includes>
    <includes id="SpatialForceVector_8h" name="SpatialForceVector.h" local="no" imported="no">iDynTree/Core/SpatialForceVector.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 3, Eigen::RowMajor &gt;</type>
      <name>Matrix3dRowMajor</name>
      <anchorfile>RotationRaw_8cpp.html</anchorfile>
      <anchor>ad4c7dfb28280dff3aa927eb28a2a3fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
      <name>Vector6d</name>
      <anchorfile>RotationRaw_8cpp.html</anchorfile>
      <anchor>a7c5527454ec83cebcb6617efc681ea3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RotationRaw.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>RotationRaw_8h</filename>
    <includes id="MatrixFixSize_8h" name="MatrixFixSize.h" local="no" imported="no">iDynTree/Core/MatrixFixSize.h</includes>
    <class kind="class">iDynTree::RotationRaw</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>RotationSemantics.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>RotationSemantics_8cpp</filename>
    <includes id="RotationSemantics_8h" name="RotationSemantics.h" local="no" imported="no">iDynTree/Core/RotationSemantics.h</includes>
    <includes id="PositionSemantics_8h" name="PositionSemantics.h" local="no" imported="no">iDynTree/Core/PositionSemantics.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="PrivatePreProcessorUtils_8h" name="PrivatePreProcessorUtils.h" local="no" imported="no">iDynTree/Core/PrivatePreProcessorUtils.h</includes>
    <includes id="PrivateSemanticsMacros_8h" name="PrivateSemanticsMacros.h" local="no" imported="no">iDynTree/Core/PrivateSemanticsMacros.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>RotationSemantics.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>RotationSemantics_8h</filename>
    <class kind="class">iDynTree::RotationSemantics</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SchmittTrigger.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/src/</path>
    <filename>SchmittTrigger_8cpp</filename>
    <includes id="SchmittTrigger_8h" name="SchmittTrigger.h" local="yes" imported="no">iDynTree/Estimation/SchmittTrigger.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SchmittTrigger.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/include/iDynTree/Estimation/</path>
    <filename>SchmittTrigger_8h</filename>
    <class kind="class">iDynTree::SchmittTrigger</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SensorElement.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/</path>
    <filename>SensorElement_8cpp</filename>
    <includes id="SensorElement_8h" name="SensorElement.h" local="yes" imported="no">SensorElement.h</includes>
    <includes id="OriginElement_8h" name="OriginElement.h" local="yes" imported="no">OriginElement.h</includes>
    <includes id="ForceTorqueSensorElement_8h" name="ForceTorqueSensorElement.h" local="yes" imported="no">ForceTorqueSensorElement.h</includes>
    <includes id="XMLAttribute_8h" name="XMLAttribute.h" local="no" imported="no">iDynTree/XMLAttribute.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <includes id="AccelerometerSensor_8h" name="AccelerometerSensor.h" local="no" imported="no">iDynTree/Sensors/AccelerometerSensor.h</includes>
    <includes id="GyroscopeSensor_8h" name="GyroscopeSensor.h" local="no" imported="no">iDynTree/Sensors/GyroscopeSensor.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SensorElement.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/private/</path>
    <filename>SensorElement_8h</filename>
    <includes id="XMLElement_8h" name="XMLElement.h" local="no" imported="no">iDynTree/XMLElement.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <class kind="class">iDynTree::SensorElement</class>
    <class kind="struct">iDynTree::SensorElement::SensorInfo</class>
    <class kind="class">iDynTree::SensorHelper</class>
    <class kind="class">iDynTree::AccelerometerSensorHelper</class>
    <class kind="class">iDynTree::GyroscopeSensorHelper</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Sensors.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/sensors/src/</path>
    <filename>Sensors_8cpp</filename>
    <includes id="Wrench_8h" name="Wrench.h" local="no" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="AngularMotionVector3_8h" name="AngularMotionVector3.h" local="no" imported="no">iDynTree/Core/AngularMotionVector3.h</includes>
    <includes id="LinearMotionVector3_8h" name="LinearMotionVector3.h" local="no" imported="no">iDynTree/Core/LinearMotionVector3.h</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <includes id="SixAxisForceTorqueSensor_8h" name="SixAxisForceTorqueSensor.h" local="no" imported="no">iDynTree/Sensors/SixAxisForceTorqueSensor.h</includes>
    <includes id="AccelerometerSensor_8h" name="AccelerometerSensor.h" local="no" imported="no">iDynTree/Sensors/AccelerometerSensor.h</includes>
    <includes id="GyroscopeSensor_8h" name="GyroscopeSensor.h" local="no" imported="no">iDynTree/Sensors/GyroscopeSensor.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <class kind="struct">iDynTree::SensorsList::SensorsListPimpl</class>
    <class kind="struct">iDynTree::SensorsMeasurements::SensorsMeasurementsPrivateAttributes</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Sensors.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/sensors/include/iDynTree/Sensors/</path>
    <filename>Sensors_8h</filename>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <class kind="class">iDynTree::Sensor</class>
    <class kind="class">iDynTree::JointSensor</class>
    <class kind="class">iDynTree::LinkSensor</class>
    <class kind="class">iDynTree::SensorsList</class>
    <class kind="class">iDynTree::SensorsList::TypedIterator</class>
    <class kind="class">iDynTree::SensorsList::ConstTypedIterator</class>
    <class kind="class">iDynTree::SensorsList::Iterator</class>
    <class kind="class">iDynTree::SensorsList::ConstIterator</class>
    <class kind="class">iDynTree::SensorsMeasurements</class>
    <namespace>iDynTree</namespace>
    <member kind="enumeration">
      <type></type>
      <name>SensorType</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad291b88efdf5262d744d33f642daf8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIX_AXIS_FORCE_TORQUE</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad291b88efdf5262d744d33f642daf8b9a7006069f3fbbdb2dfdd42a73646eb0c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCELEROMETER</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad291b88efdf5262d744d33f642daf8b9acaffc97afec9d7a74f00e940a440e27c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GYROSCOPE</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad291b88efdf5262d744d33f642daf8b9af18877b600b6d3bb9828709115fc0f7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREE_AXIS_ANGULAR_ACCELEROMETER</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad291b88efdf5262d744d33f642daf8b9a442e40fb46ceb1796cb5d6b7d7e7e167</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREE_AXIS_FORCE_TORQUE_CONTACT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad291b88efdf5262d744d33f642daf8b9a92de2e46732f84e720c99cd5a3588190</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinkSensor</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a784ae0ef50c758f0cf07ab414f432963</anchor>
      <arglist>(const SensorType type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isJointSensor</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6edabe0d73bb9102d0ad456124c0f195</anchor>
      <arglist>(const SensorType type)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSensorTypeSize</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a932bf21b3d77f8c2260c5d562812840d</anchor>
      <arglist>(const SensorType type)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>NR_OF_SENSOR_TYPES</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a27f6da1749325b5fabe94ceb7278f0df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleLeggedOdometry.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/src/</path>
    <filename>SimpleLeggedOdometry_8cpp</filename>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="SimpleLeggedOdometry_8h" name="SimpleLeggedOdometry.h" local="no" imported="no">iDynTree/Estimation/SimpleLeggedOdometry.h</includes>
    <includes id="ForwardKinematics_8h" name="ForwardKinematics.h" local="no" imported="no">iDynTree/Model/ForwardKinematics.h</includes>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <includes id="ModelTransformers_8h" name="ModelTransformers.h" local="no" imported="no">iDynTree/Model/ModelTransformers.h</includes>
    <includes id="ModelLoader_8h" name="ModelLoader.h" local="no" imported="no">iDynTree/ModelIO/ModelLoader.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleLeggedOdometry.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/estimation/include/iDynTree/Estimation/</path>
    <filename>SimpleLeggedOdometry_8h</filename>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="JointState_8h" name="JointState.h" local="no" imported="no">iDynTree/Model/JointState.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <class kind="class">iDynTree::SimpleLeggedOdometry</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SixAxisForceTorqueSensor.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/sensors/src/</path>
    <filename>SixAxisForceTorqueSensor_8cpp</filename>
    <includes id="Wrench_8h" name="Wrench.h" local="yes" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="SixAxisForceTorqueSensor_8h" name="SixAxisForceTorqueSensor.h" local="yes" imported="no">iDynTree/Sensors/SixAxisForceTorqueSensor.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="yes" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="Link_8h" name="Link.h" local="no" imported="no">iDynTree/Model/Link.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <class kind="struct">iDynTree::SixAxisForceTorqueSensor::SixAxisForceTorqueSensorPrivateAttributes</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SixAxisForceTorqueSensor.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/sensors/include/iDynTree/Sensors/</path>
    <filename>SixAxisForceTorqueSensor_8h</filename>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <class kind="class">iDynTree::SixAxisForceTorqueSensor</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SixAxisFTSensor.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/sensors/include/iDynTree/Sensors/</path>
    <filename>SixAxisFTSensor_8h</filename>
    <includes id="SixAxisForceTorqueSensor_8h" name="SixAxisForceTorqueSensor.h" local="yes" imported="no">iDynTree/Sensors/SixAxisForceTorqueSensor.h</includes>
  </compound>
  <compound kind="file">
    <name>skinDynLibConversions.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/icub/src/</path>
    <filename>skinDynLibConversions_8cpp</filename>
    <includes id="skinDynLibConversions_8h" name="skinDynLibConversions.h" local="no" imported="no">iDynTree/skinDynLibConversions.h</includes>
    <includes id="Position_8h" name="Position.h" local="no" imported="no">iDynTree/Core/Position.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="no" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="ContactWrench_8h" name="ContactWrench.h" local="no" imported="no">iDynTree/Model/ContactWrench.h</includes>
    <includes id="YARPConversions_8h" name="YARPConversions.h" local="no" imported="no">iDynTree/yarp/YARPConversions.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>fromSkinDynLibToiDynTreeHelper</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>abd0cb602d0a91817a13e042d47004d79</anchor>
      <arglist>(const Model &amp;model, const contactsList &amp;dynList, LinkUnknownWrenchContacts &amp;unknowns, const skinDynLibConversionsHelper &amp;conversionHelper)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iCub/skinDynLibConversions.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/icub/include/iDynTree/iCub/</path>
    <filename>iCub_2skinDynLibConversions_8h</filename>
    <includes id="skinDynLibConversions_8h" name="skinDynLibConversions.h" local="no" imported="no">iDynTree/skinDynLibConversions.h</includes>
  </compound>
  <compound kind="file">
    <name>skinDynLibConversions.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/icub/include/iDynTree/</path>
    <filename>skinDynLibConversions_8h</filename>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <includes id="ExternalWrenchesEstimation_8h" name="ExternalWrenchesEstimation.h" local="no" imported="no">iDynTree/Estimation/ExternalWrenchesEstimation.h</includes>
    <class kind="class">iDynTree::skinDynLibLinkID</class>
    <class kind="class">iDynTree::iDynTreeLinkAndFrame</class>
    <class kind="class">iDynTree::skinDynLibConversionsHelper</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SolidShapes.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>SolidShapes_8cpp</filename>
    <includes id="SolidShapes_8h" name="SolidShapes.h" local="no" imported="no">iDynTree/Model/SolidShapes.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SolidShapes.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>SolidShapes_8h</filename>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <class kind="class">iDynTree::SolidShape</class>
    <class kind="class">iDynTree::Sphere</class>
    <class kind="class">iDynTree::Box</class>
    <class kind="class">iDynTree::Cylinder</class>
    <class kind="class">iDynTree::ExternalMesh</class>
    <class kind="class">iDynTree::ModelSolidShapes</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Span.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>Span_8h</filename>
    <class kind="class">iDynTree::Span</class>
    <class kind="struct">iDynTree::details::is_span_oracle</class>
    <class kind="struct">iDynTree::details::is_span_oracle&lt; iDynTree::Span&lt; ElementType, Extent &gt; &gt;</class>
    <class kind="struct">iDynTree::details::is_span</class>
    <class kind="struct">iDynTree::details::is_std_array_oracle</class>
    <class kind="struct">iDynTree::details::is_std_array_oracle&lt; std::array&lt; ElementType, Extent &gt; &gt;</class>
    <class kind="struct">iDynTree::details::is_std_array</class>
    <class kind="struct">iDynTree::details::is_allowed_extent_conversion</class>
    <class kind="struct">iDynTree::details::is_allowed_element_type_conversion</class>
    <class kind="class">iDynTree::details::span_iterator</class>
    <class kind="class">iDynTree::details::extent_type</class>
    <class kind="class">iDynTree::details::extent_type&lt; dynamic_extent &gt;</class>
    <class kind="struct">iDynTree::details::calculate_subspan_type</class>
    <class kind="class">iDynTree::Span</class>
    <class kind="struct">iDynTree::details::calculate_byte_size</class>
    <class kind="struct">iDynTree::details::calculate_byte_size&lt; ElementType, dynamic_extent &gt;</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::details</namespace>
    <member kind="define">
      <type>#define</type>
      <name>IDYNTREE_USE_STATIC_CONSTEXPR_WORKAROUND</name>
      <anchorfile>Span_8h.html</anchorfile>
      <anchor>a243167d9388652a87880135833c55737</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IDYNTREE_CONSTEXPR</name>
      <anchorfile>Span_8h.html</anchorfile>
      <anchor>a347aa032e680c7848af88b7a3b840829</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR span_iterator&lt; Span, IsConst &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceiDynTree_1_1details.html</anchorfile>
      <anchor>adf168de4de79fc034114dd1bb64d9cca</anchor>
      <arglist>(typename span_iterator&lt; Span, IsConst &gt;::difference_type n, span_iterator&lt; Span, IsConst &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR span_iterator&lt; Span, IsConst &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceiDynTree_1_1details.html</anchorfile>
      <anchor>a55d28afb3a3294ddb652f947185eba19</anchor>
      <arglist>(typename span_iterator&lt; Span, IsConst &gt;::difference_type n, span_iterator&lt; Span, IsConst &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>affda5f6a0111301c3e8c09f46ae84887</anchor>
      <arglist>(Span&lt; ElementType, FirstExtent &gt; l, Span&lt; ElementType, SecondExtent &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>abc78e202932a5b364ccc6952143736a5</anchor>
      <arglist>(Span&lt; ElementType, Extent &gt; l, Span&lt; ElementType, Extent &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a42627470960988b6f18ca9a7037dac03</anchor>
      <arglist>(Span&lt; ElementType, Extent &gt; l, Span&lt; ElementType, Extent &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae774056f8c53958ea2448c4921080471</anchor>
      <arglist>(Span&lt; ElementType, Extent &gt; l, Span&lt; ElementType, Extent &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac28edf035d889d4c6218848e5007d4ca</anchor>
      <arglist>(Span&lt; ElementType, Extent &gt; l, Span&lt; ElementType, Extent &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a249acd1b49049d01403046ea4fa61513</anchor>
      <arglist>(Span&lt; ElementType, Extent &gt; l, Span&lt; ElementType, Extent &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; ElementType &gt;</type>
      <name>make_span</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afea09daa42453877437d4a0bfb11ce3c</anchor>
      <arglist>(ElementType *ptr, typename Span&lt; ElementType &gt;::index_type count)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; ElementType &gt;</type>
      <name>make_span</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a32b250386639651e4c79f31d35094ca9</anchor>
      <arglist>(ElementType *firstElem, ElementType *lastElem)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; ElementType, N &gt;</type>
      <name>make_span</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aef2273818c22b800f0296005f678539f</anchor>
      <arglist>(ElementType(&amp;arr)[N]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; typename Container::value_type &gt;</type>
      <name>make_span</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae39036a1440abb3b9e4897272394317a</anchor>
      <arglist>(Container &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; const typename Container::value_type &gt;</type>
      <name>make_span</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afcf9113bb2001515d5b94f80f5ccf743</anchor>
      <arglist>(const Container &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; typename Ptr::element_type &gt;</type>
      <name>make_span</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a7f2bdb0504977bcc9abcd0790dbd3a10</anchor>
      <arglist>(Ptr &amp;cont, std::ptrdiff_t count)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; typename Ptr::element_type &gt;</type>
      <name>make_span</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5b481ea15046d8bbb7cad35accbd5b32</anchor>
      <arglist>(Ptr &amp;cont)</arglist>
    </member>
    <member kind="variable">
      <type>IDYNTREE_CONSTEXPR const std::ptrdiff_t</type>
      <name>dynamic_extent</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a10c045523612bc8183a496020fecf982</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SparseMatrix.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>SparseMatrix_8cpp</filename>
    <includes id="SparseMatrix_8h" name="SparseMatrix.h" local="yes" imported="no">SparseMatrix.h</includes>
    <includes id="Triplets_8h" name="Triplets.h" local="yes" imported="no">Triplets.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="define">
      <type>#define</type>
      <name>UNUSED</name>
      <anchorfile>SparseMatrix_8cpp.html</anchorfile>
      <anchor>a86d500a34c624c2cae56bc25a31b12f3</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SparseMatrix.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>SparseMatrix_8h</filename>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="Triplets_8h" name="Triplets.h" local="no" imported="no">iDynTree/Core/Triplets.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <class kind="class">iDynTree::SparseMatrix</class>
    <class kind="class">iDynTree::SparseMatrix</class>
    <class kind="class">iDynTree::SparseMatrix::Iterator</class>
    <class kind="class">iDynTree::SparseMatrix::Iterator::TripletRef</class>
    <class kind="class">iDynTree::SparseMatrix::ConstIterator</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>sparseNumericalBaseParameters.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/src/</path>
    <filename>sparseNumericalBaseParameters_8cpp</filename>
    <includes id="sparseNumericalBaseParameters_8hpp" name="sparseNumericalBaseParameters.hpp" local="yes" imported="no">sparseNumericalBaseParameters.hpp</includes>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
  </compound>
  <compound kind="file">
    <name>sparseNumericalBaseParameters.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/include/kdl_codyco/regressors/</path>
    <filename>sparseNumericalBaseParameters_8hpp</filename>
    <includes id="dynamicRegressorGenerator_8hpp" name="dynamicRegressorGenerator.hpp" local="yes" imported="no">dynamicRegressorGenerator.hpp</includes>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
  </compound>
  <compound kind="file">
    <name>SparsityStructure.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>SparsityStructure_8cpp</filename>
    <includes id="SparsityStructure_8h" name="SparsityStructure.h" local="no" imported="no">iDynTree/SparsityStructure.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
  </compound>
  <compound kind="file">
    <name>SparsityStructure.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>SparsityStructure_8h</filename>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <class kind="struct">iDynTree::optimalcontrol::NonZero</class>
    <class kind="class">iDynTree::optimalcontrol::SparsityStructure</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>SpatialAcc.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>SpatialAcc_8cpp</filename>
    <includes id="SpatialAcc_8h" name="SpatialAcc.h" local="no" imported="no">iDynTree/Core/SpatialAcc.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SpatialAcc.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>SpatialAcc_8h</filename>
    <includes id="SpatialMotionVector_8h" name="SpatialMotionVector.h" local="no" imported="no">iDynTree/Core/SpatialMotionVector.h</includes>
    <class kind="class">iDynTree::SpatialAcc</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SpatialForceVector.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>SpatialForceVector_8cpp</filename>
    <includes id="SpatialForceVector_8h" name="SpatialForceVector.h" local="no" imported="no">iDynTree/Core/SpatialForceVector.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SpatialForceVector.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>SpatialForceVector_8h</filename>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="LinearForceVector3_8h" name="LinearForceVector3.h" local="no" imported="no">iDynTree/Core/LinearForceVector3.h</includes>
    <includes id="AngularForceVector3_8h" name="AngularForceVector3.h" local="no" imported="no">iDynTree/Core/AngularForceVector3.h</includes>
    <includes id="SpatialVector_8h" name="SpatialVector.h" local="no" imported="no">iDynTree/Core/SpatialVector.h</includes>
    <includes id="PrivateMotionForceVertorAssociations_8h" name="PrivateMotionForceVertorAssociations.h" local="no" imported="no">iDynTree/Core/PrivateMotionForceVertorAssociations.h</includes>
    <class kind="class">iDynTree::SpatialForceVector</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SpatialInertia.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>SpatialInertia_8cpp</filename>
    <includes id="Position_8h" name="Position.h" local="no" imported="no">iDynTree/Core/Position.h</includes>
    <includes id="SpatialInertia_8h" name="SpatialInertia.h" local="no" imported="no">iDynTree/Core/SpatialInertia.h</includes>
    <includes id="SpatialMomentum_8h" name="SpatialMomentum.h" local="no" imported="no">iDynTree/Core/SpatialMomentum.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="no" imported="no">iDynTree/Core/Twist.h</includes>
    <includes id="SpatialAcc_8h" name="SpatialAcc.h" local="no" imported="no">iDynTree/Core/SpatialAcc.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="no" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>Eigen::Matrix&lt; typename Derived::Scalar, 3, 3 &gt;</type>
      <name>mySkewIn</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5b9b5d8dad89f8515a62550a72999e44</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, 3, 6 &gt;</type>
      <name>rotationalMomentumRegressor</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a366337ebb0a8b7e0d1c753c2b4998e66</anchor>
      <arglist>(const Vector3 &amp;w)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SpatialInertia.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>SpatialInertia_8h</filename>
    <includes id="SpatialInertiaRaw_8h" name="SpatialInertiaRaw.h" local="no" imported="no">iDynTree/Core/SpatialInertiaRaw.h</includes>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="no" imported="no">iDynTree/Core/Twist.h</includes>
    <includes id="SpatialMomentum_8h" name="SpatialMomentum.h" local="no" imported="no">iDynTree/Core/SpatialMomentum.h</includes>
    <includes id="SpatialAcc_8h" name="SpatialAcc.h" local="no" imported="no">iDynTree/Core/SpatialAcc.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="no" imported="no">iDynTree/Core/Wrench.h</includes>
    <class kind="class">iDynTree::SpatialInertia</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SpatialInertiaRaw.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>SpatialInertiaRaw_8cpp</filename>
    <includes id="SpatialInertiaRaw_8h" name="SpatialInertiaRaw.h" local="no" imported="no">iDynTree/Core/SpatialInertiaRaw.h</includes>
    <includes id="SpatialForceVector_8h" name="SpatialForceVector.h" local="no" imported="no">iDynTree/Core/SpatialForceVector.h</includes>
    <includes id="SpatialMotionVector_8h" name="SpatialMotionVector.h" local="no" imported="no">iDynTree/Core/SpatialMotionVector.h</includes>
    <includes id="PositionRaw_8h" name="PositionRaw.h" local="no" imported="no">iDynTree/Core/PositionRaw.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="PrivateUtils_8h" name="PrivateUtils.h" local="no" imported="no">iDynTree/Core/PrivateUtils.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SpatialInertiaRaw.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>SpatialInertiaRaw_8h</filename>
    <includes id="RotationalInertiaRaw_8h" name="RotationalInertiaRaw.h" local="no" imported="no">iDynTree/Core/RotationalInertiaRaw.h</includes>
    <class kind="class">iDynTree::SpatialInertiaRaw</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SpatialMomentum.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>SpatialMomentum_8cpp</filename>
    <includes id="SpatialMomentum_8h" name="SpatialMomentum.h" local="no" imported="no">iDynTree/Core/SpatialMomentum.h</includes>
    <includes id="PrivateUtils_8h" name="PrivateUtils.h" local="no" imported="no">iDynTree/Core/PrivateUtils.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SpatialMomentum.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>SpatialMomentum_8h</filename>
    <includes id="SpatialForceVector_8h" name="SpatialForceVector.h" local="no" imported="no">iDynTree/Core/SpatialForceVector.h</includes>
    <class kind="class">iDynTree::SpatialMomentum</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SpatialMotionVector.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>SpatialMotionVector_8cpp</filename>
    <includes id="SpatialMotionVector_8h" name="SpatialMotionVector.h" local="no" imported="no">iDynTree/Core/SpatialMotionVector.h</includes>
    <includes id="SpatialForceVector_8h" name="SpatialForceVector.h" local="no" imported="no">iDynTree/Core/SpatialForceVector.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="PrivateUtils_8h" name="PrivateUtils.h" local="no" imported="no">iDynTree/Core/PrivateUtils.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SpatialMotionVector.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>SpatialMotionVector_8h</filename>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="LinearMotionVector3_8h" name="LinearMotionVector3.h" local="no" imported="no">iDynTree/Core/LinearMotionVector3.h</includes>
    <includes id="AngularMotionVector3_8h" name="AngularMotionVector3.h" local="no" imported="no">iDynTree/Core/AngularMotionVector3.h</includes>
    <includes id="SpatialVector_8h" name="SpatialVector.h" local="no" imported="no">iDynTree/Core/SpatialVector.h</includes>
    <includes id="PrivateMotionForceVertorAssociations_8h" name="PrivateMotionForceVertorAssociations.h" local="no" imported="no">iDynTree/Core/PrivateMotionForceVertorAssociations.h</includes>
    <class kind="class">iDynTree::Dummy</class>
    <class kind="class">iDynTree::SpatialMotionVector</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SpatialVector.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>SpatialVector_8h</filename>
    <includes id="Position_8h" name="Position.h" local="yes" imported="no">Position.h</includes>
    <includes id="Rotation_8h" name="Rotation.h" local="yes" imported="no">Rotation.h</includes>
    <includes id="PrivateMotionForceVertorAssociations_8h" name="PrivateMotionForceVertorAssociations.h" local="no" imported="no">iDynTree/Core/PrivateMotionForceVertorAssociations.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="yes" imported="no">Utils.h</includes>
    <includes id="PrivatePreProcessorUtils_8h" name="PrivatePreProcessorUtils.h" local="no" imported="no">iDynTree/Core/PrivatePreProcessorUtils.h</includes>
    <includes id="PrivateSemanticsMacros_8h" name="PrivateSemanticsMacros.h" local="no" imported="no">iDynTree/Core/PrivateSemanticsMacros.h</includes>
    <class kind="class">iDynTree::SpatialVectorSemantics</class>
    <class kind="struct">iDynTree::DualSpace</class>
    <class kind="struct">iDynTree::DualSpace&lt; SpatialMotionVector &gt;</class>
    <class kind="struct">iDynTree::DualSpace&lt; SpatialForceVector &gt;</class>
    <class kind="class">iDynTree::SpatialVector</class>
    <namespace>iDynTree</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SPATIALVECTORSEMANTICS_TEMPLATE_HDR</name>
      <anchorfile>SpatialVector_8h.html</anchorfile>
      <anchor>acc5422f41236ec5ad3c32bc15e085a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SPATIALVECTORSEMANTICS_INSTANCE_HDR</name>
      <anchorfile>SpatialVector_8h.html</anchorfile>
      <anchor>a51b91159bbea630a2d65ed302590aef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SPATIALVECTOR_TEMPLATE_HDR</name>
      <anchorfile>group__iDynTreeCore.html</anchorfile>
      <anchor>ga92610f375c318c6d08be7c5fb29c7222</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SPATIALVECTOR_INSTANCE_HDR</name>
      <anchorfile>SpatialVector_8h.html</anchorfile>
      <anchor>a13ae9b40bef45da6de6dc13e80735b9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubModel.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>SubModel_8cpp</filename>
    <includes id="SubModel_8h" name="SubModel.h" local="no" imported="no">iDynTree/Model/SubModel.h</includes>
    <includes id="IJoint_8h" name="IJoint.h" local="no" imported="no">iDynTree/Model/IJoint.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <includes id="JointState_8h" name="JointState.h" local="no" imported="no">iDynTree/Model/JointState.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>void</type>
      <name>computeTransformToTraversalBase</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2f7475185a0d9ae6c7dcd2048d4a23fb</anchor>
      <arglist>(const Model &amp;fullModel, const Traversal &amp;traversal, const JointPosDoubleArray &amp;jointPos, LinkPositions &amp;traversalBase_H_link)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeTransformToSubModelBase</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3f3b031bdaab68634b5cc61f5e1e14b4</anchor>
      <arglist>(const Model &amp;fullModel, const SubModelDecomposition &amp;subModelDecomposition, const JointPosDoubleArray &amp;jointPos, LinkPositions &amp;subModelBase_H_link)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubModel.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>SubModel_8h</filename>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <class kind="class">iDynTree::SubModelDecomposition</class>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>void</type>
      <name>computeTransformToTraversalBase</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2f7475185a0d9ae6c7dcd2048d4a23fb</anchor>
      <arglist>(const Model &amp;fullModel, const Traversal &amp;traversal, const JointPosDoubleArray &amp;jointPos, LinkPositions &amp;traversalBase_H_link)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeTransformToSubModelBase</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3f3b031bdaab68634b5cc61f5e1e14b4</anchor>
      <arglist>(const Model &amp;fullModel, const SubModelDecomposition &amp;subModelDecomposition, const JointPosDoubleArray &amp;jointPos, LinkPositions &amp;subModelBase_H_link)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>subtreeBaseDynamicsRegressor.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/src/</path>
    <filename>subtreeBaseDynamicsRegressor_8cpp</filename>
    <includes id="subtreeBaseDynamicsRegressor_8hpp" name="subtreeBaseDynamicsRegressor.hpp" local="yes" imported="no">subtreeBaseDynamicsRegressor.hpp</includes>
    <includes id="SixAxisForceTorqueSensor_8h" name="SixAxisForceTorqueSensor.h" local="yes" imported="no">iDynTree/Sensors/SixAxisForceTorqueSensor.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="yes" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="dirl__utils_8hpp" name="dirl_utils.hpp" local="yes" imported="no">dirl_utils.hpp</includes>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
  </compound>
  <compound kind="file">
    <name>subtreeBaseDynamicsRegressor.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/include/kdl_codyco/regressors/</path>
    <filename>subtreeBaseDynamicsRegressor_8hpp</filename>
    <includes id="dynamicRegressorInterface_8hpp" name="dynamicRegressorInterface.hpp" local="yes" imported="no">dynamicRegressorInterface.hpp</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <class kind="class">KDL::CoDyCo::Regressors::subtreeBaseDynamicsRegressor</class>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
  </compound>
  <compound kind="file">
    <name>symoro_par_import.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/symoro/src/</path>
    <filename>symoro__par__import_8cpp</filename>
    <includes id="symoro__par__import_8hpp" name="symoro_par_import.hpp" local="no" imported="no">iDynTree/ModelIO/symoro_par_import.hpp</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>Frame</type>
      <name>DH_Khalil1986_Tree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab264a4aa3e052ec0e998180b69c85965</anchor>
      <arglist>(double d, double alpha, double r, double theta, double gamma, double b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromSymoroParString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>adc877992b48856f01ae41ef88f515c9d</anchor>
      <arglist>(const string &amp;parfile_name, Tree &amp;tree, const bool consider_first_link_inertia)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromSymoroParFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8f512cf338817bc72172f2820350df52</anchor>
      <arglist>(const string &amp;parfile_name, Tree &amp;tree, const bool consider_first_link_inertia)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parModelFromFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8700e7653e87bc7ae7d57196bc4c7c5d</anchor>
      <arglist>(const string &amp;parfile_name, symoro_par_model &amp;tree)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae952da664bfd3e3abf0ba072553010bb</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;substr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>begins_with</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4d25bc580533037f2df5541b573f2498</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;keyword)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>explode</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6fb3d5093d915891f72e78642210166b</anchor>
      <arglist>(const string &amp;str, const char &amp;ch)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>str2double</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad34419ca02c19781b7937ce389b86773</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>int2string</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2f8e6bff5b6a359c5bb88792dde90ac3</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extract_vector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a18f6094e5cbb52bc93aa4ff10f7ee9e3</anchor>
      <arglist>(const std::string &amp;vector_string, std::string vector_name, std::vector&lt; T &gt; &amp;vec, const std::vector&lt; string &gt; variables=std::vector&lt; string &gt;(0), const std::vector&lt; T &gt; var_values=std::vector&lt; T &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parModelFromString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1f21c18a1e1e24a21a3945fd534af3d5</anchor>
      <arglist>(const string &amp;_parfile_content, symoro_par_model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromParModelTree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad42fec66d231b744fdade0069beab0fe</anchor>
      <arglist>(const symoro_par_model &amp;par_model, Tree &amp;tree, const bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromParModelChain</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aff5d28f28e5ac9252748a24e0d726b92</anchor>
      <arglist>(const symoro_par_model &amp;par_model, Tree &amp;tree, const bool consider_first_link_inertia)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromParModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a52cb7e9bcae6df721decc1bfbfbe75fb</anchor>
      <arglist>(const symoro_par_model &amp;par_model, Tree &amp;tree, const bool consider_first_link_inertia)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>symoro_par_import.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/symoro/include/iDynTree/ModelIO/</path>
    <filename>symoro__par__import_8hpp</filename>
    <includes id="symoro__par__model_8hpp" name="symoro_par_model.hpp" local="yes" imported="no">symoro_par_model.hpp</includes>
    <namespace>KDL</namespace>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>treeFromSymoroParFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab6e4378efceb4d3079c7f5daec0acc73</anchor>
      <arglist>(const std::string &amp;parfile_name, KDL::Tree &amp;tree, const bool consider_root_link_inertia=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromSymoroParString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac82eb3ab871fe91e2576b158f42a15f2</anchor>
      <arglist>(const std::string &amp;parfile_content, KDL::Tree &amp;tree, const bool consider_root_link_inertia=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromParModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab3607e43c7523caf4e53f4d938301a19</anchor>
      <arglist>(const symoro_par_model &amp;par_model, KDL::Tree &amp;tree, const bool consider_root_link_inertia=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parModelFromFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a285a017ef87c04227b316ce00b1a21e8</anchor>
      <arglist>(const std::string &amp;parfile_name, symoro_par_model &amp;tree)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parModelFromString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af8f01d1a26262f76d7d2407ecb8c9e03</anchor>
      <arglist>(const std::string &amp;parfile_content, symoro_par_model &amp;tree)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>symoro_par_import_serialization.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/symoro/src/</path>
    <filename>symoro__par__import__serialization_8cpp</filename>
    <includes id="symoro__par__import__serialization_8hpp" name="symoro_par_import_serialization.hpp" local="no" imported="no">iDynTree/ModelIO/symoro_par_import_serialization.hpp</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>treeSerializationFromSymoroParFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5683c139a253d842ca5c2ed0d3f21cad</anchor>
      <arglist>(const string &amp;parfile_name, KDL::CoDyCo::TreeSerialization &amp;serialization, const bool consider_first_link_inertia)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeSerializationFromSymoroParString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8ea54da4b67ece512906a44826142665</anchor>
      <arglist>(const string &amp;parfile_name, KDL::CoDyCo::TreeSerialization &amp;serialization, const bool consider_first_link_inertia)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>int2string_serialization</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a536c93940661d8577c7f4f70f7781fac</anchor>
      <arglist>(const int in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeSerializationFromParModelTree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a05494646e74071eed0bb47226c02012f</anchor>
      <arglist>(const symoro_par_model &amp;par_model, KDL::CoDyCo::TreeSerialization &amp;serialization, const bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeSerializationFromParModelChain</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae67bba4fba4a5afdc58232b1015474e1</anchor>
      <arglist>(const symoro_par_model &amp;, KDL::CoDyCo::TreeSerialization &amp;, const bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeSerializationFromParModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8cf49555ebc69948cd1fc59d4cf28ec5</anchor>
      <arglist>(const symoro_par_model &amp;par_model, KDL::CoDyCo::TreeSerialization &amp;serialization, const bool consider_root_link_inertia=true)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>symoro_par_import_serialization.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/symoro/include/iDynTree/ModelIO/</path>
    <filename>symoro__par__import__serialization_8hpp</filename>
    <includes id="symoro__par__import_8hpp" name="symoro_par_import.hpp" local="yes" imported="no">symoro_par_import.hpp</includes>
    <includes id="symoro__par__model_8hpp" name="symoro_par_model.hpp" local="yes" imported="no">symoro_par_model.hpp</includes>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>treeSerializationFromSymoroParFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afa0ec11c7dfc259e7e4419c8e6009ebd</anchor>
      <arglist>(const std::string &amp;parfile_name, KDL::CoDyCo::TreeSerialization &amp;serialization, const bool consider_root_link_inertia=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeSerializationFromSymoroParString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac0743bb21665a50ffd985811076ae365</anchor>
      <arglist>(const std::string &amp;parfile_content, KDL::CoDyCo::TreeSerialization &amp;serialization, const bool consider_root_link_inertia=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeSerializationFromParModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8cf49555ebc69948cd1fc59d4cf28ec5</anchor>
      <arglist>(const symoro_par_model &amp;par_model, KDL::CoDyCo::TreeSerialization &amp;serialization, const bool consider_root_link_inertia=true)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>symoro_par_model.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/symoro/include/iDynTree/ModelIO/</path>
    <filename>symoro__par__model_8hpp</filename>
    <class kind="class">iDynTree::symoro_par_model</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>SystemLineariser.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>SystemLineariser_8cpp</filename>
    <includes id="SystemLineariser_8h" name="SystemLineariser.h" local="no" imported="no">iDynTree/SystemLineariser.h</includes>
  </compound>
  <compound kind="file">
    <name>SystemLineariser.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>SystemLineariser_8h</filename>
    <class kind="class">iDynTree::optimalcontrol::SystemLineariser</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>TestUtils.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>TestUtils_8cpp</filename>
    <includes id="SpatialForceVector_8h" name="SpatialForceVector.h" local="no" imported="no">iDynTree/Core/SpatialForceVector.h</includes>
    <includes id="SpatialMotionVector_8h" name="SpatialMotionVector.h" local="no" imported="no">iDynTree/Core/SpatialMotionVector.h</includes>
    <includes id="Axis_8h" name="Axis.h" local="no" imported="no">iDynTree/Core/Axis.h</includes>
    <includes id="SpatialInertia_8h" name="SpatialInertia.h" local="no" imported="no">iDynTree/Core/SpatialInertia.h</includes>
    <includes id="TestUtils_8h" name="TestUtils.h" local="no" imported="no">iDynTree/Core/TestUtils.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>void</type>
      <name>assertStringAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a668ee99a790b7af845958d4673161135</anchor>
      <arglist>(const std::string &amp;val1, const std::string &amp;val2, double tol=DEFAULT_TOL, std::string file=&quot;&quot;, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertTrue</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1289062400b0dd99e49653356d569e8e</anchor>
      <arglist>(bool prop, std::string file=&quot;&quot;, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertDoubleAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a274077496ffac0ee45107923c3fe9cee</anchor>
      <arglist>(const double &amp;val1, const double &amp;val2, double tol=DEFAULT_TOL, std::string file=&quot;&quot;, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertTransformsAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac18550f459dae84f3a502274b39193cf</anchor>
      <arglist>(const Transform &amp;trans1, const Transform &amp;trans2, double tol=DEFAULT_TOL, std::string file=&quot;&quot;, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertSpatialForceAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0c0a527efda465b7b190e726c148b5dc</anchor>
      <arglist>(const SpatialForceVector &amp;f1, const SpatialForceVector &amp;f2, double tol=DEFAULT_TOL, std::string file=&quot;&quot;, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertSpatialMotionAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae326a16295b6efe5e6023665cb2a012f</anchor>
      <arglist>(const SpatialMotionVector &amp;t1, const SpatialMotionVector &amp;t2, double tol=DEFAULT_TOL, std::string file=&quot;&quot;, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRandomBool</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2296e58922e46f4fc2d91689f9e59da9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRandomDouble</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a051e689c0d7974b18929629680c95619</anchor>
      <arglist>(double min=0.0, double max=1.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomInteger</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab3920b4ee524d6bb9062435d7c9d7065</anchor>
      <arglist>(int min, int max)</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>getRandomPosition</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a553049a8d951cbad14dd59168935a7b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Rotation</type>
      <name>getRandomRotation</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9929fdbd53800f02bd76305f9d985942</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>getRandomTransform</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a977a15d73114a87fd6705dd9a8f7c736</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Axis</type>
      <name>getRandomAxis</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae4c3a6982c0bec99386eb3f4c05632d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia</type>
      <name>getRandomInertia</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a293fa271f52f72d795f4858b34273ed6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionVector</type>
      <name>getRandomTwist</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a088ed6a480496334ee1dd51f088c6bb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>getRandomWrench</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a04bcdc7077b46c1944825327875cb65b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TestUtils.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>TestUtils_8h</filename>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <class kind="struct">iDynTree::TestMatrixMismatch</class>
    <namespace>iDynTree</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_IS_TRUE</name>
      <anchorfile>TestUtils_8h.html</anchorfile>
      <anchor>a187efc872711557e58cc6e85475ec53f</anchor>
      <arglist>(prop)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_IS_FALSE</name>
      <anchorfile>TestUtils_8h.html</anchorfile>
      <anchor>a6bd7df9ed662cc61bb377703a5476a5f</anchor>
      <arglist>(prop)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_EQUAL_STRING</name>
      <anchorfile>TestUtils_8h.html</anchorfile>
      <anchor>ab6e6df4db528a1a4e2392fc726d69243</anchor>
      <arglist>(val1, val2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_EQUAL_DOUBLE</name>
      <anchorfile>TestUtils_8h.html</anchorfile>
      <anchor>a8358fe401a2b1aecfe83504deea8579f</anchor>
      <arglist>(val1, val2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_EQUAL_DOUBLE_TOL</name>
      <anchorfile>TestUtils_8h.html</anchorfile>
      <anchor>abfd2b5a0c975689666d785260b7512fb</anchor>
      <arglist>(val1, val2, tol)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_EQUAL_VECTOR</name>
      <anchorfile>TestUtils_8h.html</anchorfile>
      <anchor>a2845c548a6ff5828b1e521aed1c4cf08</anchor>
      <arglist>(val1, val2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_EQUAL_VECTOR_TOL</name>
      <anchorfile>TestUtils_8h.html</anchorfile>
      <anchor>ab13d2e5a259c103fd03e24f6a95d5212</anchor>
      <arglist>(val1, val2, tol)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_EQUAL_VECTOR_REL_TOL</name>
      <anchorfile>TestUtils_8h.html</anchorfile>
      <anchor>a2f0028972e244cb04d56af33b61a45fd</anchor>
      <arglist>(val1, val2, relTol, minAbsTol)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_EQUAL_SPATIAL_MOTION</name>
      <anchorfile>TestUtils_8h.html</anchorfile>
      <anchor>a0c45c03414419c518b44c8a386aed6a6</anchor>
      <arglist>(val1, val2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_EQUAL_SPATIAL_FORCE</name>
      <anchorfile>TestUtils_8h.html</anchorfile>
      <anchor>a0020d3bf4ab892c0a95af429d92e0330</anchor>
      <arglist>(val1, val2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_EQUAL_SPATIAL_FORCE_TOL</name>
      <anchorfile>TestUtils_8h.html</anchorfile>
      <anchor>a89834a776ba0a06401b30d32b2e3698b</anchor>
      <arglist>(val1, val2, tol)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_EQUAL_MATRIX</name>
      <anchorfile>TestUtils_8h.html</anchorfile>
      <anchor>a68e554e8d27aca5a55c7a29621e93306</anchor>
      <arglist>(val1, val2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_EQUAL_MATRIX_TOL</name>
      <anchorfile>TestUtils_8h.html</anchorfile>
      <anchor>a9a977b732f304f9f725a068cbf474eff</anchor>
      <arglist>(val1, val2, tol)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_EQUAL_TRANSFORM</name>
      <anchorfile>TestUtils_8h.html</anchorfile>
      <anchor>a42c3c48d507c766d464ccf2502c6031c</anchor>
      <arglist>(val1, val2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_EQUAL_TRANSFORM_TOL</name>
      <anchorfile>TestUtils_8h.html</anchorfile>
      <anchor>a7747a8a71ec7815e6558bf6f6295f6b3</anchor>
      <arglist>(val1, val2, tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertStringAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a668ee99a790b7af845958d4673161135</anchor>
      <arglist>(const std::string &amp;val1, const std::string &amp;val2, double tol=DEFAULT_TOL, std::string file=&quot;&quot;, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertDoubleAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a274077496ffac0ee45107923c3fe9cee</anchor>
      <arglist>(const double &amp;val1, const double &amp;val2, double tol=DEFAULT_TOL, std::string file=&quot;&quot;, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertTransformsAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac18550f459dae84f3a502274b39193cf</anchor>
      <arglist>(const Transform &amp;trans1, const Transform &amp;trans2, double tol=DEFAULT_TOL, std::string file=&quot;&quot;, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertSpatialMotionAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae326a16295b6efe5e6023665cb2a012f</anchor>
      <arglist>(const SpatialMotionVector &amp;t1, const SpatialMotionVector &amp;t2, double tol=DEFAULT_TOL, std::string file=&quot;&quot;, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertSpatialForceAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0c0a527efda465b7b190e726c148b5dc</anchor>
      <arglist>(const SpatialForceVector &amp;f1, const SpatialForceVector &amp;f2, double tol=DEFAULT_TOL, std::string file=&quot;&quot;, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertTrue</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1289062400b0dd99e49653356d569e8e</anchor>
      <arglist>(bool prop, std::string file=&quot;&quot;, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRandomBool</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2296e58922e46f4fc2d91689f9e59da9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRandomDouble</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a051e689c0d7974b18929629680c95619</anchor>
      <arglist>(double min=0.0, double max=1.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomInteger</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab3920b4ee524d6bb9062435d7c9d7065</anchor>
      <arglist>(int min, int max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRandomVector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a30e37efb8be6e98f4bf9aabd7493748c</anchor>
      <arglist>(VectorType &amp;vec, double min=0.0, double max=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRandomMatrix</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8960c4bd871d87f67470f2ab8f8b5e8e</anchor>
      <arglist>(MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>getRandomPosition</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a553049a8d951cbad14dd59168935a7b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Rotation</type>
      <name>getRandomRotation</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9929fdbd53800f02bd76305f9d985942</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>getRandomTransform</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a977a15d73114a87fd6705dd9a8f7c736</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Axis</type>
      <name>getRandomAxis</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae4c3a6982c0bec99386eb3f4c05632d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia</type>
      <name>getRandomInertia</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a293fa271f52f72d795f4858b34273ed6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionVector</type>
      <name>getRandomTwist</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a088ed6a480496334ee1dd51f088c6bb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>getRandomWrench</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a04bcdc7077b46c1944825327875cb65b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printVector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a91197a36381e2fa990a0b54da40abee9</anchor>
      <arglist>(std::string, const VectorType &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printVectorDifference</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2e5af240e2fab62a2527d450c4bdcabd</anchor>
      <arglist>(std::string name, const VectorType1 &amp;vec1, const VectorType2 &amp;vec2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printVectorWrongElements</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa25d97acb2792de12937a70d01e75ae7</anchor>
      <arglist>(std::string name, std::vector&lt; bool &gt; &amp;correctElems)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printMatrixWrongElements</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a456896bb82abd7daca7ac57546380e94</anchor>
      <arglist>(std::string name, std::vector&lt; std::vector&lt; TestMatrixMismatch &gt; &gt; &amp;correctElems)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printMatrixPercentageError</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a004eafd55ec8125ba2842dc2458088be</anchor>
      <arglist>(const MatrixType1 &amp;mat1, const MatrixType2 &amp;mat2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertVectorAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa20d8a80e1de786a905ee0e897e45586</anchor>
      <arglist>(const VectorType1 &amp;vec1, const VectorType2 &amp;vec2, double tol, std::string file, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertVectorAreEqualWithRelativeTol</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6b4c4d79f076ed9013708a5ab40e9273</anchor>
      <arglist>(const VectorType1 &amp;vec1, const VectorType2 &amp;vec2, double relativeTol, double minAbsoluteTol, std::string file, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertMatrixAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac3a22c22491b65545bdfbab336950530</anchor>
      <arglist>(const MatrixType1 &amp;mat1, const MatrixType2 &amp;mat2, double tol, std::string file, int line)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ThreeAxisAngularAccelerometerSensor.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/sensors/src/</path>
    <filename>ThreeAxisAngularAccelerometerSensor_8cpp</filename>
    <includes id="LinearMotionVector3_8h" name="LinearMotionVector3.h" local="yes" imported="no">iDynTree/Core/LinearMotionVector3.h</includes>
    <includes id="ThreeAxisAngularAccelerometerSensor_8h" name="ThreeAxisAngularAccelerometerSensor.h" local="yes" imported="no">iDynTree/Sensors/ThreeAxisAngularAccelerometerSensor.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="yes" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="SpatialAcc_8h" name="SpatialAcc.h" local="yes" imported="no">iDynTree/Core/SpatialAcc.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="yes" imported="no">iDynTree/Core/Twist.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <class kind="struct">iDynTree::ThreeAxisAngularAccelerometerSensor::ThreeAxisAngularAccelerometerPrivateAttributes</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ThreeAxisAngularAccelerometerSensor.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/sensors/include/iDynTree/Sensors/</path>
    <filename>ThreeAxisAngularAccelerometerSensor_8h</filename>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <class kind="class">iDynTree::ThreeAxisAngularAccelerometerSensor</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ThreeAxisForceTorqueContactSensor.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/sensors/src/</path>
    <filename>ThreeAxisForceTorqueContactSensor_8cpp</filename>
    <includes id="LinearMotionVector3_8h" name="LinearMotionVector3.h" local="yes" imported="no">iDynTree/Core/LinearMotionVector3.h</includes>
    <includes id="ThreeAxisForceTorqueContactSensor_8h" name="ThreeAxisForceTorqueContactSensor.h" local="yes" imported="no">iDynTree/Sensors/ThreeAxisForceTorqueContactSensor.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="yes" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="SpatialAcc_8h" name="SpatialAcc.h" local="yes" imported="no">iDynTree/Core/SpatialAcc.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="yes" imported="no">iDynTree/Core/Twist.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <class kind="struct">iDynTree::ThreeAxisForceTorqueContactSensor::ThreeAxisForceTorqueContactSensorPrivateAttributes</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>ThreeAxisForceTorqueContactSensor.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/sensors/include/iDynTree/Sensors/</path>
    <filename>ThreeAxisForceTorqueContactSensor_8h</filename>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <class kind="class">iDynTree::ThreeAxisForceTorqueContactSensor</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>TimeRange.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>TimeRange_8cpp</filename>
    <includes id="TimeRange_8h" name="TimeRange.h" local="no" imported="no">iDynTree/TimeRange.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>TimeRange.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>TimeRange_8h</filename>
    <class kind="class">iDynTree::optimalcontrol::TimeRange</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>TimeVaryingObject.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>TimeVaryingObject_8cpp</filename>
    <includes id="TimeVaryingObject_8h" name="TimeVaryingObject.h" local="no" imported="no">iDynTree/TimeVaryingObject.h</includes>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
  </compound>
  <compound kind="file">
    <name>TimeVaryingObject.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/</path>
    <filename>TimeVaryingObject_8h</filename>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="no" imported="no">iDynTree/Core/MatrixDynSize.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <class kind="class">iDynTree::optimalcontrol::TimeVaryingObject</class>
    <class kind="class">iDynTree::optimalcontrol::TimeInvariantObject</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
    <member kind="typedef">
      <type>TimeVaryingObject&lt; VectorDynSize &gt;</type>
      <name>TimeVaryingVector</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a0a42487f78941fdc98f3a329dc620926</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeVaryingObject&lt; MatrixDynSize &gt;</type>
      <name>TimeVaryingMatrix</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a5aea3cc692810bc6e1be00cb4a545f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeVaryingObject&lt; double &gt;</type>
      <name>TimeVaryingDouble</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>aca822c5e004f5783e8701849c3ae6475</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeVaryingObject&lt; Transform &gt;</type>
      <name>TimeVaryingTransform</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a7fd874777a60870ea07d3353c7dba8ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeVaryingObject&lt; Rotation &gt;</type>
      <name>TimeVaryingRotation</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>ad88b6bd7b0b87dde8db826d5361a1612</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeVaryingObject&lt; Position &gt;</type>
      <name>TimeVaryingPosition</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a7a9dc96e57041de2c1ce2d7b11a2e8f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeInvariantObject&lt; double &gt;</type>
      <name>TimeInvariantDouble</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a12323181a553470ad11b2a7853cdd25a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeInvariantObject&lt; VectorDynSize &gt;</type>
      <name>TimeInvariantVector</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>af42385f609150bd66b3ad68a4bd29722</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeInvariantObject&lt; MatrixDynSize &gt;</type>
      <name>TimeInvariantMatrix</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a61df4a467909edce7f12456c47539f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeInvariantObject&lt; Transform &gt;</type>
      <name>TimeInvariantTransform</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>aa49b07229644a80b5a960072f076def9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeInvariantObject&lt; Rotation &gt;</type>
      <name>TimeInvariantRotation</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a434327935f65cbdfc7ed0c1b3999d0b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeInvariantObject&lt; Position &gt;</type>
      <name>TimeInvariantPosition</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>abc9508a4f067c4b7e8412e75ac0b388a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>torqueRegressor.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/src/</path>
    <filename>torqueRegressor_8cpp</filename>
    <includes id="torqueRegressor_8hpp" name="torqueRegressor.hpp" local="yes" imported="no">kdl_codyco/regressors/torqueRegressor.hpp</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="yes" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <includes id="SixAxisForceTorqueSensor_8h" name="SixAxisForceTorqueSensor.h" local="yes" imported="no">iDynTree/Sensors/SixAxisForceTorqueSensor.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="yes" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="yes" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="dirl__utils_8hpp" name="dirl_utils.hpp" local="yes" imported="no">dirl_utils.hpp</includes>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
  </compound>
  <compound kind="file">
    <name>torqueRegressor.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/regressors/include/kdl_codyco/regressors/</path>
    <filename>torqueRegressor_8hpp</filename>
    <includes id="dynamicRegressorInterface_8hpp" name="dynamicRegressorInterface.hpp" local="yes" imported="no">dynamicRegressorInterface.hpp</includes>
    <class kind="class">KDL::CoDyCo::Regressors::torqueRegressor</class>
    <namespace>iDynTree</namespace>
    <namespace>KDL</namespace>
    <namespace>KDL::CoDyCo</namespace>
    <namespace>KDL::CoDyCo::Regressors</namespace>
  </compound>
  <compound kind="file">
    <name>Transform.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>Transform_8cpp</filename>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Position_8h" name="Position.h" local="no" imported="no">iDynTree/Core/Position.h</includes>
    <includes id="Rotation_8h" name="Rotation.h" local="no" imported="no">iDynTree/Core/Rotation.h</includes>
    <includes id="Twist_8h" name="Twist.h" local="no" imported="no">iDynTree/Core/Twist.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="no" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="SpatialMomentum_8h" name="SpatialMomentum.h" local="no" imported="no">iDynTree/Core/SpatialMomentum.h</includes>
    <includes id="SpatialAcc_8h" name="SpatialAcc.h" local="no" imported="no">iDynTree/Core/SpatialAcc.h</includes>
    <includes id="SpatialInertia_8h" name="SpatialInertia.h" local="no" imported="no">iDynTree/Core/SpatialInertia.h</includes>
    <includes id="Direction_8h" name="Direction.h" local="no" imported="no">iDynTree/Core/Direction.h</includes>
    <includes id="Axis_8h" name="Axis.h" local="no" imported="no">iDynTree/Core/Axis.h</includes>
    <includes id="ArticulatedBodyInertia_8h" name="ArticulatedBodyInertia.h" local="no" imported="no">iDynTree/Core/ArticulatedBodyInertia.h</includes>
    <includes id="MatrixFixSize_8h" name="MatrixFixSize.h" local="no" imported="no">iDynTree/Core/MatrixFixSize.h</includes>
    <includes id="PrivateUtils_8h" name="PrivateUtils.h" local="no" imported="no">iDynTree/Core/PrivateUtils.h</includes>
    <includes id="PrivateSemanticsMacros_8h" name="PrivateSemanticsMacros.h" local="no" imported="no">iDynTree/Core/PrivateSemanticsMacros.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 3, Eigen::RowMajor &gt;</type>
      <name>Matrix3dRowMajor</name>
      <anchorfile>Transform_8cpp.html</anchorfile>
      <anchor>ad4c7dfb28280dff3aa927eb28a2a3fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>transform</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0e83d0ebf209d66127c738d02f6cc458</anchor>
      <arglist>(const Transform &amp;op1, const T &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>transform</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad42a046567233e5170684657a1e91ad8</anchor>
      <arglist>(const Transform &amp;op1, const Position &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia</type>
      <name>transform</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5eb56d318dda81e97743b1117026f2be</anchor>
      <arglist>(const Transform &amp;op1, const SpatialInertia &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ArticulatedBodyInertia</type>
      <name>transform</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a45271a35003d0e66e751ffd5c054bf56</anchor>
      <arglist>(const Transform &amp;op1, const ArticulatedBodyInertia &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>spatialForceType</type>
      <name>transformWrenchEfficient</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae2ec7e9c95aa2dba8904bc9a9c22dcfc</anchor>
      <arglist>(const Transform &amp;op1, const spatialForceType &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>spatialVelType</type>
      <name>transformTwistEfficient</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afbef682ebb9b19d68839455a9a6859b7</anchor>
      <arglist>(const Transform &amp;op1, const spatialVelType &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transform</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab05b1b32ace1a8a4819080a941bf7499</anchor>
      <arglist>(const Transform &amp;op1, const T &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; typename Derived::Scalar, 3, 3 &gt;</type>
      <name>mySkew</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3ebbc45fb9c525050fad36de2469391f</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;vec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transform.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>Transform_8h</filename>
    <includes id="Position_8h" name="Position.h" local="no" imported="no">iDynTree/Core/Position.h</includes>
    <includes id="Rotation_8h" name="Rotation.h" local="no" imported="no">iDynTree/Core/Rotation.h</includes>
    <includes id="TransformSemantics_8h" name="TransformSemantics.h" local="no" imported="no">iDynTree/Core/TransformSemantics.h</includes>
    <includes id="MatrixFixSize_8h" name="MatrixFixSize.h" local="no" imported="no">iDynTree/Core/MatrixFixSize.h</includes>
    <class kind="class">iDynTree::Transform</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>TransformConstraint.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/inverse-kinematics/src/</path>
    <filename>TransformConstraint_8cpp</filename>
    <includes id="TransformConstraint_8h" name="TransformConstraint.h" local="yes" imported="no">TransformConstraint.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <namespace>internal</namespace>
    <namespace>internal::kinematics</namespace>
  </compound>
  <compound kind="file">
    <name>TransformConstraint.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/inverse-kinematics/include/private/</path>
    <filename>TransformConstraint_8h</filename>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="InverseKinematics_8h" name="InverseKinematics.h" local="no" imported="no">iDynTree/InverseKinematics.h</includes>
    <class kind="class">internal::kinematics::TransformConstraint</class>
    <namespace>internal</namespace>
    <namespace>internal::kinematics</namespace>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>TransformDerivative.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>TransformDerivative_8cpp</filename>
    <includes id="ArticulatedBodyInertia_8h" name="ArticulatedBodyInertia.h" local="no" imported="no">iDynTree/Core/ArticulatedBodyInertia.h</includes>
    <includes id="TransformDerivative_8h" name="TransformDerivative.h" local="no" imported="no">iDynTree/Core/TransformDerivative.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 3, Eigen::RowMajor &gt;</type>
      <name>Matrix3dRowMajor</name>
      <anchorfile>TransformDerivative_8cpp.html</anchorfile>
      <anchor>ad4c7dfb28280dff3aa927eb28a2a3fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; typename Derived::Scalar, 3, 3 &gt;</type>
      <name>mySkeww</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6933c093317db64586e0197dcc5fa1e5</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;vec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TransformDerivative.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>TransformDerivative_8h</filename>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="MatrixFixSize_8h" name="MatrixFixSize.h" local="no" imported="no">iDynTree/Core/MatrixFixSize.h</includes>
    <class kind="class">iDynTree::TransformDerivative</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>TransformSemantics.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>TransformSemantics_8cpp</filename>
    <includes id="TransformSemantics_8h" name="TransformSemantics.h" local="no" imported="no">iDynTree/Core/TransformSemantics.h</includes>
    <includes id="RotationSemantics_8h" name="RotationSemantics.h" local="no" imported="no">iDynTree/Core/RotationSemantics.h</includes>
    <includes id="PositionSemantics_8h" name="PositionSemantics.h" local="no" imported="no">iDynTree/Core/PositionSemantics.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Position_8h" name="Position.h" local="no" imported="no">iDynTree/Core/Position.h</includes>
    <includes id="Rotation_8h" name="Rotation.h" local="no" imported="no">iDynTree/Core/Rotation.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="PrivatePreProcessorUtils_8h" name="PrivatePreProcessorUtils.h" local="no" imported="no">iDynTree/Core/PrivatePreProcessorUtils.h</includes>
    <includes id="PrivateSemanticsMacros_8h" name="PrivateSemanticsMacros.h" local="no" imported="no">iDynTree/Core/PrivateSemanticsMacros.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>TransformSemantics.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>TransformSemantics_8h</filename>
    <class kind="class">iDynTree::TransformSemantics</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Traversal.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/src/</path>
    <filename>Traversal_8cpp</filename>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Traversal.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model/include/iDynTree/Model/</path>
    <filename>Traversal_8h</filename>
    <includes id="Indices_8h" name="Indices.h" local="no" imported="no">iDynTree/Model/Indices.h</includes>
    <class kind="class">iDynTree::Traversal</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Triplets.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>Triplets_8cpp</filename>
    <includes id="Triplets_8h" name="Triplets.h" local="yes" imported="no">Triplets.h</includes>
    <includes id="MatrixDynSize_8h" name="MatrixDynSize.h" local="yes" imported="no">MatrixDynSize.h</includes>
    <includes id="MatrixFixSize_8h" name="MatrixFixSize.h" local="yes" imported="no">MatrixFixSize.h</includes>
    <includes id="SparseMatrix_8h" name="SparseMatrix.h" local="yes" imported="no">SparseMatrix.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Triplets.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>Triplets_8h</filename>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <class kind="class">iDynTree::MatrixFixSize</class>
    <class kind="class">iDynTree::SparseMatrix</class>
    <class kind="class">iDynTree::Triplet</class>
    <class kind="class">iDynTree::Triplets</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Twist.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>Twist_8cpp</filename>
    <includes id="Twist_8h" name="Twist.h" local="no" imported="no">iDynTree/Core/Twist.h</includes>
    <includes id="Wrench_8h" name="Wrench.h" local="no" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="SpatialAcc_8h" name="SpatialAcc.h" local="no" imported="no">iDynTree/Core/SpatialAcc.h</includes>
    <includes id="SpatialMomentum_8h" name="SpatialMomentum.h" local="no" imported="no">iDynTree/Core/SpatialMomentum.h</includes>
    <includes id="PrivateUtils_8h" name="PrivateUtils.h" local="no" imported="no">iDynTree/Core/PrivateUtils.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Twist.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>Twist_8h</filename>
    <includes id="SpatialMotionVector_8h" name="SpatialMotionVector.h" local="no" imported="no">iDynTree/Core/SpatialMotionVector.h</includes>
    <class kind="class">iDynTree::Twist</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>urdf2dh.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/</path>
    <filename>urdf2dh_8cpp</filename>
    <includes id="TestUtils_8h" name="TestUtils.h" local="no" imported="no">iDynTree/Core/TestUtils.h</includes>
    <includes id="DenavitHartenberg_8h" name="DenavitHartenberg.h" local="no" imported="no">iDynTree/Model/DenavitHartenberg.h</includes>
    <includes id="ModelTestUtils_8h" name="ModelTestUtils.h" local="no" imported="no">iDynTree/Model/ModelTestUtils.h</includes>
    <includes id="ModelLoader_8h" name="ModelLoader.h" local="no" imported="no">iDynTree/ModelIO/ModelLoader.h</includes>
    <includes id="KinDynComputations_8h" name="KinDynComputations.h" local="no" imported="no">iDynTree/KinDynComputations.h</includes>
    <includes id="iKinConversions_8h" name="iKinConversions.h" local="no" imported="no">iDynTree/iKinConversions.h</includes>
    <member kind="function">
      <type>void</type>
      <name>printHelp</name>
      <anchorfile>urdf2dh_8cpp.html</anchorfile>
      <anchor>a0d20b69b0ad703df78459e1033d5c1d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ExtractReducedJointPosFromFullModel</name>
      <anchorfile>urdf2dh_8cpp.html</anchorfile>
      <anchor>ac003a7f66cf72750e1c34518f53829b4</anchor>
      <arglist>(const iDynTree::Model &amp;fullModel, const iDynTree::VectorDynSize &amp;fullJntPos, const iDynTree::Model &amp;reducedModel, iDynTree::VectorDynSize &amp;reducedJntPos)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkVectorsAreEqual</name>
      <anchorfile>urdf2dh_8cpp.html</anchorfile>
      <anchor>a44771df7132d46c251a6601d01602d10</anchor>
      <arglist>(const VectorType1 &amp;vec1, const VectorType2 &amp;vec2, double tol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMatricesAreEqual</name>
      <anchorfile>urdf2dh_8cpp.html</anchorfile>
      <anchor>a775368f2f464284a408720dee8c22faa</anchor>
      <arglist>(const MatrixType1 &amp;mat1, const MatrixType2 &amp;mat2, double tol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkTransformsAreEqual</name>
      <anchorfile>urdf2dh_8cpp.html</anchorfile>
      <anchor>ac262635e5574eeca402e8bc3c1e2e793</anchor>
      <arglist>(const iDynTree::Transform &amp;trans1, const iDynTree::Transform &amp;trans2, double tol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkiKinChainConversion</name>
      <anchorfile>urdf2dh_8cpp.html</anchorfile>
      <anchor>a9a34885070ef698fb8e05592eaaafcc2</anchor>
      <arglist>(const iDynTree::Model &amp;model, const std::string &amp;baseFrame, const std::string &amp;distalFrame)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>int2string</name>
      <anchorfile>urdf2dh_8cpp.html</anchorfile>
      <anchor>a72eeddd905f2aefb3843724a15793ab9</anchor>
      <arglist>(const int inInt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>urdf2dh_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>urdf2dh_helpers.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/tools/</path>
    <filename>urdf2dh__helpers_8h</filename>
    <includes id="iKin__export_8hpp" name="iKin_export.hpp" local="no" imported="no">iDynTree/ModelIO/iKin_export.hpp</includes>
    <includes id="urdf__import_8hpp" name="urdf_import.hpp" local="no" imported="no">iDynTree/ModelIO/impl/urdf_import.hpp</includes>
    <member kind="function">
      <type>double</type>
      <name>random_double</name>
      <anchorfile>urdf2dh__helpers_8h.html</anchorfile>
      <anchor>a31c028d873c10482f83531d7ca18d9dc</anchor>
      <arglist>(double range)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>KDLtoYarp</name>
      <anchorfile>urdf2dh__helpers_8h.html</anchorfile>
      <anchor>aefb3307d2f233d394202b82f925c2405</anchor>
      <arglist>(const KDL::Vector &amp;kdlVector, yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>KDLtoYarp</name>
      <anchorfile>urdf2dh__helpers_8h.html</anchorfile>
      <anchor>ac7729d495556255a17a6bb18a8aa6d2b</anchor>
      <arglist>(const KDL::Rotation &amp;kdlRotation, yarp::sig::Matrix &amp;yarpMatrix3_3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>KDLtoYarp_position</name>
      <anchorfile>urdf2dh__helpers_8h.html</anchorfile>
      <anchor>a054280a7b5b1904e2dad3d89601ddb83</anchor>
      <arglist>(const KDL::Frame &amp;kdlFrame, yarp::sig::Matrix &amp;yarpMatrix4_4)</arglist>
    </member>
    <member kind="function">
      <type>yarp::sig::Matrix</type>
      <name>KDLtoYarp_position</name>
      <anchorfile>urdf2dh__helpers_8h.html</anchorfile>
      <anchor>a2fc68871f2451d8a7cf0326fef3e5fad</anchor>
      <arglist>(const KDL::Frame &amp;kdlFrame)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkChainsAreEqual</name>
      <anchorfile>urdf2dh__helpers_8h.html</anchorfile>
      <anchor>ab376a035085653951948aa007ce1272e</anchor>
      <arglist>(KDL::Chain kdl_random_chain, iCub::iKin::iKinLimb &amp;ikin_random_chain)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>int2string</name>
      <anchorfile>urdf2dh__helpers_8h.html</anchorfile>
      <anchor>a26b7177037bf7a43eec0c267e74a8a18</anchor>
      <arglist>(int arg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>urdf_compatibility.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf-kdl/include/iDynTree/ModelIO/impl/</path>
    <filename>urdf__compatibility_8h</filename>
    <namespace>urdf</namespace>
    <member kind="typedef">
      <type>JointSharedPtr</type>
      <name>JointPtr</name>
      <anchorfile>namespaceurdf.html</anchorfile>
      <anchor>a8fa6d566387cebcf96581bbb4b74afbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinkSharedPtr</type>
      <name>LinkPtr</name>
      <anchorfile>namespaceurdf.html</anchorfile>
      <anchor>a2ea166dbcbf75b5b0dba00687f1f1138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinkConstSharedPtr</type>
      <name>ConstLinkPtr</name>
      <anchorfile>namespaceurdf.html</anchorfile>
      <anchor>a91ccb605a457c373c650c95ca0c585d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InertialSharedPtr</type>
      <name>InertialPtr</name>
      <anchorfile>namespaceurdf.html</anchorfile>
      <anchor>a4a7b7a5fd2749edef3b1af6a926c9cd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; LinkPtr &gt;</type>
      <name>LinkVector</name>
      <anchorfile>namespaceurdf.html</anchorfile>
      <anchor>affdeee14a8bd9a7588fbe2d04dee05d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ModelInterfaceSharedPtr</type>
      <name>ModelInterfacePtr</name>
      <anchorfile>namespaceurdf.html</anchorfile>
      <anchor>aad8b2ef244a2a5e53d69418f7d4967c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, JointPtr &gt;</type>
      <name>JointPtrMap</name>
      <anchorfile>namespaceurdf.html</anchorfile>
      <anchor>ad0d37a73a209f779a084da3e9b19303e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetPtr</name>
      <anchorfile>namespaceurdf.html</anchorfile>
      <anchor>a4223fb8861247aabe3d1448901708e79</anchor>
      <arglist>(PtrType &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetPtr</name>
      <anchorfile>namespaceurdf.html</anchorfile>
      <anchor>ade13e96007f510636d2d86e50b64c401</anchor>
      <arglist>(PtrType &amp;ptr, PlainType *plain_ptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>urdf_export.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf-kdl/src/</path>
    <filename>urdf__export_8cpp</filename>
    <includes id="urdf__export_8hpp" name="urdf_export.hpp" local="no" imported="no">iDynTree/ModelIO/impl/urdf_export.hpp</includes>
    <includes id="config_8h" name="config.h" local="no" imported="no">iDynTree/ModelIO/impl/config.h</includes>
    <includes id="urdf__compatibility_8h" name="urdf_compatibility.h" local="no" imported="no">iDynTree/ModelIO/impl/urdf_compatibility.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>urdf::Vector3</type>
      <name>toUrdf</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a7ec379a7959e3755fb8f8a93dd706e01</anchor>
      <arglist>(const KDL::Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>urdf::Rotation</type>
      <name>toUrdf</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a994b38f734104e55cf9dde5aaadedcbc</anchor>
      <arglist>(const KDL::Rotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>urdf::Pose</type>
      <name>toUrdf</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad9d6b652d1d1a1343015f4f84b32c743</anchor>
      <arglist>(const KDL::Frame &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>KDL::Frame</type>
      <name>getH_new_old</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a074ecb17f0d31adfe03b9cf4f947b70b</anchor>
      <arglist>(KDL::Joint jnt, KDL::Frame frameToTip)</arglist>
    </member>
    <member kind="function">
      <type>KDL::Frame</type>
      <name>getH_new_old</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a00b2585fdcff87ccd9ea009e7c6b2701</anchor>
      <arglist>(KDL::Segment seg)</arglist>
    </member>
    <member kind="function">
      <type>urdf::Joint</type>
      <name>toUrdf</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a16d6f8052f577335ccff42b6caca5b9f</anchor>
      <arglist>(const KDL::Joint &amp;jnt, const KDL::Frame &amp;frameToTip, const KDL::Frame &amp;H_new_old_predecessor, KDL::Frame &amp;H_new_old_successor)</arglist>
    </member>
    <member kind="function">
      <type>urdf::Inertial</type>
      <name>toUrdf</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9250b6946c8b5a1fea6eed488bb4f1a7</anchor>
      <arglist>(KDL::RigidBodyInertia i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeToUrdfFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae47e9a903f5c531ab4a411698ea8c55d</anchor>
      <arglist>(const std::string &amp;file, const KDL::Tree &amp;tree, const std::string &amp;robot_name=&quot;URDF_generated_by_kdl_format_io&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeToUrdfXml</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a65a0f3207d49e20e6030ca70c8ce4723</anchor>
      <arglist>(TiXmlDocument *&amp;xml_doc, const KDL::Tree &amp;tree, const std::string &amp;robot_name=&quot;URDF_generated_by_kdl_format_io&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeToUrdfModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a30f27a0a427f07508859ff0d7cd288b0</anchor>
      <arglist>(const KDL::Tree &amp;tree, const std::string &amp;robot_name, urdf::ModelInterface &amp;robot_model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeUpdateUrdfModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af521b4003ac71bec5d54afa90cbe2405</anchor>
      <arglist>(const KDL::Tree &amp;tree, urdf::ModelInterface &amp;robot_model)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>urdf_export.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf-kdl/include/iDynTree/ModelIO/impl/</path>
    <filename>urdf__export_8hpp</filename>
    <namespace>KDL</namespace>
    <namespace>urdf</namespace>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>treeToUrdfFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae47e9a903f5c531ab4a411698ea8c55d</anchor>
      <arglist>(const std::string &amp;file, const KDL::Tree &amp;tree, const std::string &amp;robot_name=&quot;URDF_generated_by_kdl_format_io&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeToUrdfXml</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a65a0f3207d49e20e6030ca70c8ce4723</anchor>
      <arglist>(TiXmlDocument *&amp;xml_doc, const KDL::Tree &amp;tree, const std::string &amp;robot_name=&quot;URDF_generated_by_kdl_format_io&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeUpdateUrdfModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af521b4003ac71bec5d54afa90cbe2405</anchor>
      <arglist>(const KDL::Tree &amp;tree, urdf::ModelInterface &amp;robot_model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeToUrdfModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a30f27a0a427f07508859ff0d7cd288b0</anchor>
      <arglist>(const KDL::Tree &amp;tree, const std::string &amp;robot_name, urdf::ModelInterface &amp;robot_model)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>urdf_import.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf-kdl/src/</path>
    <filename>urdf__import_8cpp</filename>
    <includes id="urdf__import_8hpp" name="urdf_import.hpp" local="no" imported="no">iDynTree/ModelIO/impl/urdf_import.hpp</includes>
    <includes id="urdf__compatibility_8h" name="urdf_compatibility.h" local="no" imported="no">iDynTree/ModelIO/impl/urdf_compatibility.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>void</type>
      <name>printTree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>affcd3c50112ee6c1e3d537dbf460db2a</anchor>
      <arglist>(urdf::ConstLinkPtr link, int level=0)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>toKdl</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3216d0f5eaed76f8420433c0795bd866</anchor>
      <arglist>(urdf::Vector3 v)</arglist>
    </member>
    <member kind="function">
      <type>Rotation</type>
      <name>toKdl</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1f1b06dbdd48e88c855c84887ff7ddee</anchor>
      <arglist>(urdf::Rotation r)</arglist>
    </member>
    <member kind="function">
      <type>Frame</type>
      <name>toKdl</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a943c5a726b5f719094e52f0be2b61505</anchor>
      <arglist>(urdf::Pose p)</arglist>
    </member>
    <member kind="function">
      <type>Joint</type>
      <name>toKdl</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab1031343eb07359d212e1fb8096a0462</anchor>
      <arglist>(urdf::JointPtr jnt)</arglist>
    </member>
    <member kind="function">
      <type>RigidBodyInertia</type>
      <name>toKdl</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af498d7a27f39843ef235774db7546f09</anchor>
      <arglist>(urdf::InertialPtr i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addChildrenToTree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad1c9657dc92daf84f981d2633acead8a</anchor>
      <arglist>(urdf::LinkPtr root, Tree &amp;tree)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromUrdfFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a763558fb4319f611a9990f37e96cd55c</anchor>
      <arglist>(const std::string &amp;file, Tree &amp;tree, const bool consider_root_link_inertia)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>print_tree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a495fc89e4907a2e3852aeb6fa933ced1</anchor>
      <arglist>(urdf::ModelInterfacePtr &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromUrdfString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>adbe0347e4c38811ddb6fd5cadf930aca</anchor>
      <arglist>(const std::string &amp;xml, Tree &amp;tree, const bool consider_root_link_inertia)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromUrdfModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afaa730de68ab1934321873284b10a285</anchor>
      <arglist>(const urdf::ModelInterface &amp;robot_model, Tree &amp;tree, const bool consider_root_link_inertia)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jointPosLimitsFromUrdfFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a240f2c85141d72c6ac7f26c1fb36a1fe</anchor>
      <arglist>(const std::string &amp;file, std::vector&lt; std::string &gt; &amp;joint_names, KDL::JntArray &amp;min, KDL::JntArray &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jointPosLimitsFromUrdfString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab4751f8996b5ca8a747f9ae7b3c93a26</anchor>
      <arglist>(const std::string &amp;urdf_xml, std::vector&lt; std::string &gt; &amp;joint_names, KDL::JntArray &amp;min, KDL::JntArray &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jointPosLimitsFromUrdfModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af3e655ecfbbeb6a75d90a2e23b7eba40</anchor>
      <arglist>(const urdf::ModelInterface &amp;robot_model, std::vector&lt; std::string &gt; &amp;joint_names, KDL::JntArray &amp;min, KDL::JntArray &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>framesFromKDLTree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a05479a17eabc0067dab3791eb2a62075</anchor>
      <arglist>(const KDL::Tree &amp;tree, std::vector&lt; std::string &gt; &amp;framesNames, std::vector&lt; std::string &gt; &amp;parentLinkNames)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>urdf_import.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf-kdl/include/iDynTree/ModelIO/impl/</path>
    <filename>urdf__import_8hpp</filename>
    <namespace>urdf</namespace>
    <namespace>KDL</namespace>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>treeFromUrdfFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad98edb9f3983e0c609abd9bc2252332e</anchor>
      <arglist>(const std::string &amp;file, KDL::Tree &amp;tree, const bool consider_root_link_inertia=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromUrdfString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae2bdc4832c23e1e85947a0950e851d0d</anchor>
      <arglist>(const std::string &amp;xml, KDL::Tree &amp;tree, const bool consider_root_link_inertia=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromUrdfModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac9f105aa07b694a765018673598acc63</anchor>
      <arglist>(const urdf::ModelInterface &amp;robot_model, KDL::Tree &amp;tree, const bool consider_root_link_inertia=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jointPosLimitsFromUrdfFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a240f2c85141d72c6ac7f26c1fb36a1fe</anchor>
      <arglist>(const std::string &amp;file, std::vector&lt; std::string &gt; &amp;joint_names, KDL::JntArray &amp;min, KDL::JntArray &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jointPosLimitsFromUrdfString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab4751f8996b5ca8a747f9ae7b3c93a26</anchor>
      <arglist>(const std::string &amp;urdf_xml, std::vector&lt; std::string &gt; &amp;joint_names, KDL::JntArray &amp;min, KDL::JntArray &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jointPosLimitsFromUrdfModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af3e655ecfbbeb6a75d90a2e23b7eba40</anchor>
      <arglist>(const urdf::ModelInterface &amp;robot_model, std::vector&lt; std::string &gt; &amp;joint_names, KDL::JntArray &amp;min, KDL::JntArray &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>framesFromKDLTree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a05479a17eabc0067dab3791eb2a62075</anchor>
      <arglist>(const KDL::Tree &amp;tree, std::vector&lt; std::string &gt; &amp;framesNames, std::vector&lt; std::string &gt; &amp;parentLinkNames)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>urdf_sensor_import.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf-kdl/src/</path>
    <filename>urdf__sensor__import_8cpp</filename>
    <includes id="urdf__sensor__import_8hpp" name="urdf_sensor_import.hpp" local="no" imported="no">iDynTree/ModelIO/impl/urdf_sensor_import.hpp</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <includes id="SixAxisForceTorqueSensor_8h" name="SixAxisForceTorqueSensor.h" local="no" imported="no">iDynTree/Sensors/SixAxisForceTorqueSensor.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>ftSensorsFromUrdfFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0e64d8a715e88916260db8d755f91d51</anchor>
      <arglist>(const std::string &amp;file, std::vector&lt; FTSensorData &gt; &amp;ft_sensors)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt; &amp;</type>
      <name>split</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afed6fbc83782a3ea34ad8110fb1aabf2</anchor>
      <arglist>(const std::string &amp;s, std::vector&lt; std::string &gt; &amp;elems)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>localStringToDoubleWithClassicLocale</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8d15d0dd6abe2a6d89bbb5dd22993a20</anchor>
      <arglist>(const std::string &amp;inStr, double &amp;outDouble)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ftSensorsFromUrdfString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a88f9cea6b3b31cf45815289edaed9e7b</anchor>
      <arglist>(const std::string &amp;urdf_xml, std::vector&lt; FTSensorData &gt; &amp;ft_sensors)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SensorsList</type>
      <name>sensorsListFromURDF</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac9e229371a2934f43dd05cbdd629d9b9</anchor>
      <arglist>(KDL::CoDyCo::UndirectedTree &amp;undirected_tree, std::string urdf_filename)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SensorsList</type>
      <name>sensorsListFromFtSensors</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>acdeac2940dc6002aeb4d06a6f64ff249</anchor>
      <arglist>(KDL::CoDyCo::UndirectedTree &amp;undirected_tree, std::vector&lt; iDynTree::FTSensorData &gt; &amp;ft_sensors)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SensorsList</type>
      <name>sensorsListFromURDFString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab17dedc14b12d782f74b8ae7cab214a8</anchor>
      <arglist>(KDL::CoDyCo::UndirectedTree &amp;undirected_tree, std::string urdf_string)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>urdf_sensor_import.hpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf-kdl/include/iDynTree/ModelIO/impl/</path>
    <filename>urdf__sensor__import_8hpp</filename>
    <class kind="struct">iDynTree::FTSensorData</class>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>std::vector&lt; std::string &gt; &amp;</type>
      <name>split</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afed6fbc83782a3ea34ad8110fb1aabf2</anchor>
      <arglist>(const std::string &amp;s, std::vector&lt; std::string &gt; &amp;elems)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ftSensorsFromUrdfFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0e64d8a715e88916260db8d755f91d51</anchor>
      <arglist>(const std::string &amp;file, std::vector&lt; FTSensorData &gt; &amp;ft_sensors)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ftSensorsFromUrdfString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a88f9cea6b3b31cf45815289edaed9e7b</anchor>
      <arglist>(const std::string &amp;urdf_xml, std::vector&lt; FTSensorData &gt; &amp;ft_sensors)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SensorsList</type>
      <name>sensorsListFromURDF</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac9e229371a2934f43dd05cbdd629d9b9</anchor>
      <arglist>(KDL::CoDyCo::UndirectedTree &amp;undirected_tree, std::string urdf_filename)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SensorsList</type>
      <name>sensorsListFromURDFString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab17dedc14b12d782f74b8ae7cab214a8</anchor>
      <arglist>(KDL::CoDyCo::UndirectedTree &amp;undirected_tree, std::string urdf_string)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SensorsList</type>
      <name>sensorsListFromFtSensors</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>abc1cdc3263af9599b777dece127e5146</anchor>
      <arglist>(KDL::CoDyCo::UndirectedTree &amp;undirected_tree, std::vector&lt; FTSensorData &gt; &amp;ft_sensors)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>URDFDocument.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/</path>
    <filename>URDFDocument_8cpp</filename>
    <includes id="URDFDocument_8h" name="URDFDocument.h" local="yes" imported="no">URDFDocument.h</includes>
    <includes id="RobotElement_8h" name="RobotElement.h" local="yes" imported="no">RobotElement.h</includes>
    <includes id="PrismaticJoint_8h" name="PrismaticJoint.h" local="no" imported="no">iDynTree/Model/PrismaticJoint.h</includes>
    <includes id="RevoluteJoint_8h" name="RevoluteJoint.h" local="no" imported="no">iDynTree/Model/RevoluteJoint.h</includes>
    <includes id="ModelTransformers_8h" name="ModelTransformers.h" local="no" imported="no">iDynTree/Model/ModelTransformers.h</includes>
    <includes id="SixAxisForceTorqueSensor_8h" name="SixAxisForceTorqueSensor.h" local="no" imported="no">iDynTree/Sensors/SixAxisForceTorqueSensor.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function" static="yes">
      <type>static std::unordered_set&lt; std::string &gt;</type>
      <name>processJoints</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2c09a9788e3ae139fe8b46be9b321d4f</anchor>
      <arglist>(iDynTree::Model &amp;model, std::unordered_map&lt; std::string, JointElement::JointInfo &gt; &amp;joints, std::unordered_map&lt; std::string, JointElement::JointInfo &gt; &amp;fixed_joints)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFakeLink</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa64841c3795872a5f074c188b160eaaf</anchor>
      <arglist>(const Model &amp;modelWithFakeLinks, const LinkIndex linkToCheck)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>p_removeFakeLinks</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a09294fd9e341ccdb394bdd16ede55529</anchor>
      <arglist>(const iDynTree::Model &amp;originalModel, iDynTree::Model &amp;cleanModel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>processSensors</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2a587be0faa386fc30d9ba0b769ec191</anchor>
      <arglist>(const Model &amp;model, const std::vector&lt; std::shared_ptr&lt; SensorHelper &gt;&gt; &amp;helpers, iDynTree::SensorsList &amp;sensors)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>addSensorFramesAsAdditionalFramesToModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a84d81c45a0bae6fd29e809d0ea9633a7</anchor>
      <arglist>(Model &amp;model, const SensorsList &amp;sensors)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>addVisualPropertiesToModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab5c5e11284a4fbf7b3407aca23dfda5f</anchor>
      <arglist>(const Model &amp;model, const std::unordered_map&lt; std::string, std::vector&lt; VisualElement::VisualInfo &gt;&gt; &amp;visuals, const std::unordered_map&lt; std::string, MaterialElement::MaterialInfo &gt; &amp;materialDatabase, ModelSolidShapes &amp;modelGeometries)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>URDFDocument.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/private/</path>
    <filename>URDFDocument_8h</filename>
    <includes id="XMLDocument_8h" name="XMLDocument.h" local="no" imported="no">iDynTree/XMLDocument.h</includes>
    <includes id="JointElement_8h" name="JointElement.h" local="yes" imported="no">JointElement.h</includes>
    <includes id="MaterialElement_8h" name="MaterialElement.h" local="yes" imported="no">MaterialElement.h</includes>
    <includes id="SensorElement_8h" name="SensorElement.h" local="yes" imported="no">SensorElement.h</includes>
    <includes id="VisualElement_8h" name="VisualElement.h" local="yes" imported="no">VisualElement.h</includes>
    <includes id="ModelLoader_8h" name="ModelLoader.h" local="yes" imported="no">iDynTree/ModelIO/ModelLoader.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <class kind="class">iDynTree::URDFDocument</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>URDFDofsImport.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/</path>
    <filename>URDFDofsImport_8cpp</filename>
    <includes id="URDFDofsImport_8h" name="URDFDofsImport.h" local="yes" imported="no">iDynTree/ModelIO/URDFDofsImport.h</includes>
    <includes id="ModelLoader_8h" name="ModelLoader.h" local="yes" imported="no">iDynTree/ModelIO/ModelLoader.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>dofsListFromURDF</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>ga80941e03b0209a745a76fadc3264879a</anchor>
      <arglist>(const std::string &amp;urdf_filename, std::vector&lt; std::string &gt; &amp;dofs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dofsListFromURDFString</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>ga657c7f9a0eedd9b8f71a54e6a83acdc0</anchor>
      <arglist>(const std::string &amp;urdf_string, std::vector&lt; std::string &gt; &amp;dofs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>URDFDofsImport.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/iDynTree/ModelIO/</path>
    <filename>URDFDofsImport_8h</filename>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>dofsListFromURDF</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>ga80941e03b0209a745a76fadc3264879a</anchor>
      <arglist>(const std::string &amp;urdf_filename, std::vector&lt; std::string &gt; &amp;dofs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dofsListFromURDFString</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>ga657c7f9a0eedd9b8f71a54e6a83acdc0</anchor>
      <arglist>(const std::string &amp;urdf_string, std::vector&lt; std::string &gt; &amp;dofs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>URDFGenericSensorsImport.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/deprecated/</path>
    <filename>URDFGenericSensorsImport_8cpp</filename>
    <includes id="URDFGenericSensorsImport_8h" name="URDFGenericSensorsImport.h" local="yes" imported="no">iDynTree/ModelIO/URDFGenericSensorsImport.h</includes>
    <includes id="ModelLoader_8h" name="ModelLoader.h" local="yes" imported="no">iDynTree/ModelIO/ModelLoader.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>sensorsFromURDF</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa85d9d4a30c51e79e6a17425adb2e7e7</anchor>
      <arglist>(const std::string &amp;urdf_filename, iDynTree::SensorsList &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sensorsFromURDF</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>acb2dbb7fef76aaf2f8fab0c4da47b770</anchor>
      <arglist>(const std::string &amp;urdf_filename, const Model &amp;model, iDynTree::SensorsList &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sensorsFromURDFString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ade804ea70676b56046e78520c586b3d8</anchor>
      <arglist>(const std::string &amp;urdf_string, iDynTree::SensorsList &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sensorsFromURDFString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a865cbf3dc23685a682743b2ff7b3783c</anchor>
      <arglist>(const std::string &amp;urdf_string, const Model &amp;model, iDynTree::SensorsList &amp;output)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>URDFGenericSensorsImport.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/deprecated/iDynTree/ModelIO/</path>
    <filename>URDFGenericSensorsImport_8h</filename>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>sensorsFromURDF</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa85d9d4a30c51e79e6a17425adb2e7e7</anchor>
      <arglist>(const std::string &amp;urdf_filename, iDynTree::SensorsList &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sensorsFromURDF</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>acb2dbb7fef76aaf2f8fab0c4da47b770</anchor>
      <arglist>(const std::string &amp;urdf_filename, const Model &amp;model, iDynTree::SensorsList &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sensorsFromURDFString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ade804ea70676b56046e78520c586b3d8</anchor>
      <arglist>(const std::string &amp;urdf_string, iDynTree::SensorsList &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sensorsFromURDFString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a865cbf3dc23685a682743b2ff7b3783c</anchor>
      <arglist>(const std::string &amp;urdf_string, const Model &amp;model, iDynTree::SensorsList &amp;output)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>URDFModelExport.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/</path>
    <filename>URDFModelExport_8cpp</filename>
    <includes id="URDFModelExport_8h" name="URDFModelExport.h" local="yes" imported="no">URDFModelExport.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="SpatialInertia_8h" name="SpatialInertia.h" local="no" imported="no">iDynTree/Core/SpatialInertia.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <includes id="Traversal_8h" name="Traversal.h" local="no" imported="no">iDynTree/Model/Traversal.h</includes>
    <includes id="FixedJoint_8h" name="FixedJoint.h" local="no" imported="no">iDynTree/Model/FixedJoint.h</includes>
    <includes id="PrismaticJoint_8h" name="PrismaticJoint.h" local="no" imported="no">iDynTree/Model/PrismaticJoint.h</includes>
    <includes id="RevoluteJoint_8h" name="RevoluteJoint.h" local="no" imported="no">iDynTree/Model/RevoluteJoint.h</includes>
    <includes id="URDFParsingUtils_8h" name="URDFParsingUtils.h" local="yes" imported="no">URDFParsingUtils.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="enumeration">
      <type></type>
      <name>exportSolidShapePropertyType</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a97acc3ec57195595c1e90baf6e5301e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VISUAL</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a97acc3ec57195595c1e90baf6e5301e0a216e90cfa71b9da7464b509ffb091da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLLISION</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a97acc3ec57195595c1e90baf6e5301e0a7838370813a6da0ad65787404838d153</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>exportAdditionalFrameDirectionOption</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac4b1a735b11402fa88e96321d976c5a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAKE_LINK_IS_CHILD</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac4b1a735b11402fa88e96321d976c5a7a5c9dd7caa99335cafd3f9e3994d4e6b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAKE_LINK_IS_PARENT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac4b1a735b11402fa88e96321d976c5a7a4a73c64755f54ce4d1ef9e43f3afa907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportTransform</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a619f553f72f43cbfe099a20c98773d0b</anchor>
      <arglist>(const Transform &amp;trans, xmlNodePtr parent_element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportInertial</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aada083d29e26cc8e6abc2497bba88caf</anchor>
      <arglist>(const SpatialInertia &amp;inertia, xmlNodePtr parent_element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportSolidShape</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4aaa1bf7c96f642d210e14e4b49a5323</anchor>
      <arglist>(const SolidShape *solidShape, exportSolidShapePropertyType type, xmlNodePtr parent_element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportLink</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae9f8c50a2c8f7d249e4105a1de0ef0c7</anchor>
      <arglist>(const Link &amp;link, const std::string linkName, const Model &amp;model, xmlNodePtr parent_element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportJoint</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af20c6cc917e371b07cc3f39e281aabd1</anchor>
      <arglist>(IJointConstPtr joint, LinkConstPtr parentLink, LinkConstPtr childLink, const Model &amp;model, xmlNodePtr parent_element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportAdditionalFrame</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1cabf2a944e4db9907e6ef84de5149c9</anchor>
      <arglist>(const std::string frame_name, Transform link_H_frame, const std::string link_name, exportAdditionalFrameDirectionOption direction_option, xmlNodePtr parent_element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>URDFStringFromModel</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>gab9223d51ca118bea013bbbde14d6e054</anchor>
      <arglist>(const iDynTree::Model &amp;output, std::string &amp;urdf_string, const ModelExporterOptions options=ModelExporterOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>URDFFromModel</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>gaeaa7b0320760138dab8d2e7ba5525b2a</anchor>
      <arglist>(const iDynTree::Model &amp;model, const std::string &amp;urdf_filename, const ModelExporterOptions options=ModelExporterOptions())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>URDFModelExport.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/private/</path>
    <filename>URDFModelExport_8h</filename>
    <includes id="ModelExporter_8h" name="ModelExporter.h" local="no" imported="no">iDynTree/ModelIO/ModelExporter.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>URDFFromModel</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>gaeaa7b0320760138dab8d2e7ba5525b2a</anchor>
      <arglist>(const iDynTree::Model &amp;model, const std::string &amp;urdf_filename, const ModelExporterOptions options=ModelExporterOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>URDFStringFromModel</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>gab9223d51ca118bea013bbbde14d6e054</anchor>
      <arglist>(const iDynTree::Model &amp;output, std::string &amp;urdf_string, const ModelExporterOptions options=ModelExporterOptions())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>URDFModelImport.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/deprecated/</path>
    <filename>URDFModelImport_8cpp</filename>
    <includes id="URDFModelImport_8h" name="URDFModelImport.h" local="yes" imported="no">iDynTree/ModelIO/URDFModelImport.h</includes>
    <includes id="ModelLoader_8h" name="ModelLoader.h" local="yes" imported="no">iDynTree/ModelIO/ModelLoader.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">iDynTree/Model/Model.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>ModelParserOptions</type>
      <name>convertOptions</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a928d97967994efe92aadc4e6aa9de081</anchor>
      <arglist>(const URDFParserOptions options)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>modelFromURDF</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>ga7fc5d09c1c301c6d1d92ad4dc4a775df</anchor>
      <arglist>(const std::string &amp;urdf_filename, iDynTree::Model &amp;output, const URDFParserOptions options=URDFParserOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>modelFromURDFString</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>ga9d12c5fcc7f3787c38d00e5cbf867712</anchor>
      <arglist>(const std::string &amp;urdf_string, iDynTree::Model &amp;output, const URDFParserOptions options=URDFParserOptions())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>URDFModelImport.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/deprecated/iDynTree/ModelIO/</path>
    <filename>URDFModelImport_8h</filename>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <class kind="struct">iDynTree::URDFParserOptions</class>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>modelFromURDF</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>ga7fc5d09c1c301c6d1d92ad4dc4a775df</anchor>
      <arglist>(const std::string &amp;urdf_filename, iDynTree::Model &amp;output, const URDFParserOptions options=URDFParserOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>modelFromURDFString</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>ga9d12c5fcc7f3787c38d00e5cbf867712</anchor>
      <arglist>(const std::string &amp;urdf_string, iDynTree::Model &amp;output, const URDFParserOptions options=URDFParserOptions())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>URDFParsingUtils.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/private/</path>
    <filename>URDFParsingUtils_8h</filename>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="VectorFixSize_8h" name="VectorFixSize.h" local="no" imported="no">iDynTree/Core/VectorFixSize.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>stringToDoubleWithClassicLocale</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a91b6a382b3717636fb3a45a8ba4f8850</anchor>
      <arglist>(const std::string &amp;inStr, double &amp;outDouble)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stringToIntWithClassicLocale</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9c8ea4244ff5dc2276f8008b53a609e8</anchor>
      <arglist>(const std::string &amp;inStr, int &amp;outInt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stringToUnsignedIntWithClassicLocale</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab5e3c195abc73e35657df0f831daab96</anchor>
      <arglist>(const std::string &amp;inStr, unsigned int &amp;outInt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doubleToStringWithClassicLocale</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a072b6eff9a6c9173d96ebef185343d90</anchor>
      <arglist>(const double &amp;inDouble, std::string &amp;outStr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>intToString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>adffeb935ed6aad8d6f30705238117df8</anchor>
      <arglist>(const int inInt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>splitString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab77f7c41e63dbfbfc327283490b7cb92</anchor>
      <arglist>(const std::string &amp;inStr, std::vector&lt; std::string &gt; &amp;pieces)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vector3FromString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8645d0238ce891d16d8d7be074bd33dc</anchor>
      <arglist>(const std::string &amp;vector_str, Vector3 &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vectorToString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5872c10e6e9f23dbeeb87ad4b503a5ba</anchor>
      <arglist>(const iDynTreeVectorType &amp;in, std::string &amp;out_str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vector4FromString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab55f4fdf60c8947b61adde47e0495b10</anchor>
      <arglist>(const std::string &amp;vector_str, Vector4 &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>URDFSensorsImport.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf-kdl/src/</path>
    <filename>URDFSensorsImport_8cpp</filename>
    <includes id="URDFSensorsImport_8h" name="URDFSensorsImport.h" local="no" imported="no">iDynTree/ModelIO/URDFSensorsImport.h</includes>
    <includes id="urdf__import_8hpp" name="urdf_import.hpp" local="no" imported="no">iDynTree/ModelIO/impl/urdf_import.hpp</includes>
    <includes id="urdf__sensor__import_8hpp" name="urdf_sensor_import.hpp" local="no" imported="no">iDynTree/ModelIO/impl/urdf_sensor_import.hpp</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>sensorsListFromURDF</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2886164ec0bdd0526a5bbdd1c9b1dacc</anchor>
      <arglist>(const std::string &amp;urdf_filename, iDynTree::SensorsList &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sensorsListFromURDFString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2ea31b45d800a22df2da51ee8042abac</anchor>
      <arglist>(const std::string &amp;urdf_string, iDynTree::SensorsList &amp;output)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>URDFSensorsImport.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf-kdl/include/iDynTree/ModelIO/</path>
    <filename>URDFSensorsImport_8h</filename>
    <includes id="Sensors_8h" name="Sensors.h" local="no" imported="no">iDynTree/Sensors/Sensors.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>sensorsListFromURDF</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2886164ec0bdd0526a5bbdd1c9b1dacc</anchor>
      <arglist>(const std::string &amp;urdf_filename, iDynTree::SensorsList &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sensorsListFromURDFString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2ea31b45d800a22df2da51ee8042abac</anchor>
      <arglist>(const std::string &amp;urdf_string, iDynTree::SensorsList &amp;output)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>URDFSolidShapesImport.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/deprecated/</path>
    <filename>URDFSolidShapesImport_8cpp</filename>
    <includes id="URDFSolidShapesImport_8h" name="URDFSolidShapesImport.h" local="yes" imported="no">iDynTree/ModelIO/URDFSolidShapesImport.h</includes>
    <includes id="ModelLoader_8h" name="ModelLoader.h" local="yes" imported="no">iDynTree/ModelIO/ModelLoader.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>solidShapesFromURDF</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa17d1ee4cc812584367891a9f35b42f1</anchor>
      <arglist>(const std::string &amp;urdf_filename, const Model &amp;model, const std::string urdfGeometryType, ModelSolidShapes &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solidShapesFromURDFString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aded8915c704ed8e44a4dc35d2f1a3004</anchor>
      <arglist>(const std::string &amp;urdf_string, const std::string &amp;urdf_filename, const Model &amp;model, const std::string urdfGeometryType, iDynTree::ModelSolidShapes &amp;output)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>URDFSolidShapesImport.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/deprecated/iDynTree/ModelIO/</path>
    <filename>URDFSolidShapesImport_8h</filename>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>solidShapesFromURDF</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa17d1ee4cc812584367891a9f35b42f1</anchor>
      <arglist>(const std::string &amp;urdf_filename, const Model &amp;model, const std::string urdfGeometryType, ModelSolidShapes &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solidShapesFromURDFString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aded8915c704ed8e44a4dc35d2f1a3004</anchor>
      <arglist>(const std::string &amp;urdf_string, const std::string &amp;urdf_filename, const Model &amp;model, const std::string urdfGeometryType, iDynTree::ModelSolidShapes &amp;output)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Utils.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>Utils_8cpp</filename>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>checkEqualOrUnknown</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af82eb4858f1f94dbcf92a68210e17593</anchor>
      <arglist>(const int op1, const int op2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertWoAbort</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac967fe3c6f3c26e946fe2f70ee6f3af9</anchor>
      <arglist>(const char *semCheck, const char *file, const char *func, int line)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkEqualAndNotUnknown</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a15618b328c0042725fdaafb387132a46</anchor>
      <arglist>(const int op1, const int op2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportError</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab710bc576b963cce44ee3a97a0d37df5</anchor>
      <arglist>(const char *className, const char *methodName, const char *errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reportErrorIf</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1b924287a0557e41bb16704961399f68</anchor>
      <arglist>(bool condition, const char *className_methodName, const char *errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportWarning</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad1ad9933bf06265120db1feecb34ac9a</anchor>
      <arglist>(const char *className, const char *methodName, const char *errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportInfo</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6260625e944d3b34a7db5730dbd11d21</anchor>
      <arglist>(const char *className, const char *methodName, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportDebug</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a34f0ca347ac5bfae3a50fe09ccd787d1</anchor>
      <arglist>(const char *className, const char *methodName, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deg2rad</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2099697a85abd10017e2ab2ca9f3336e</anchor>
      <arglist>(const double valueInDeg)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rad2deg</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3ffc4d06e77379cc44c32f2ea44df1d5</anchor>
      <arglist>(const double valueInRad)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkDoublesAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3f330bf40f3d09799c2b4923f79173ff</anchor>
      <arglist>(const double &amp;val1, const double &amp;val2, double tol=DEFAULT_TOL)</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>IDYNTREE_PI</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8adc7f92fba141695b493600a4d818d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>IDYNTREE_RAD2DEG</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9db3748f7ccfae71c77cb76ca4fd5e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>IDYNTREE_DEG2RAD</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5ec1a49c7429787cc0abdeea1e70ffe1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Utils.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>Utils_8h</filename>
    <class kind="struct">iDynTree::IndexRange</class>
    <namespace>iDynTree</namespace>
    <member kind="define">
      <type>#define</type>
      <name>IDYNTREE_UNUSED</name>
      <anchorfile>Utils_8h.html</anchorfile>
      <anchor>a92a04f61c0d9680aebd960d653165339</anchor>
      <arglist>(var)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IDYNTREE_DEPRECATED</name>
      <anchorfile>Utils_8h.html</anchorfile>
      <anchor>a069ac05ff9cbb2e8c9a27845f641a184</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IDYNTREE_DEPRECATED_WITH_MSG</name>
      <anchorfile>Utils_8h.html</anchorfile>
      <anchor>a604e6a884902ee52a0cbb3e0c5fcfb64</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MatrixStorageOrdering</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1d9848852f7effdff0a7206e361759dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowMajor</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1d9848852f7effdff0a7206e361759dca2b26025c525aa73dc7d5a8ab6b75c277</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColumnMajor</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1d9848852f7effdff0a7206e361759dcaa2d6963e41f11651763298147696f0dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertWoAbort</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac967fe3c6f3c26e946fe2f70ee6f3af9</anchor>
      <arglist>(const char *semCheck, const char *file, const char *func, int line)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkEqualOrUnknown</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af82eb4858f1f94dbcf92a68210e17593</anchor>
      <arglist>(const int op1, const int op2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportError</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab710bc576b963cce44ee3a97a0d37df5</anchor>
      <arglist>(const char *className, const char *methodName, const char *errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reportErrorIf</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1b924287a0557e41bb16704961399f68</anchor>
      <arglist>(bool condition, const char *className_methodName, const char *errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportWarning</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad1ad9933bf06265120db1feecb34ac9a</anchor>
      <arglist>(const char *className, const char *methodName, const char *errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportInfo</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6260625e944d3b34a7db5730dbd11d21</anchor>
      <arglist>(const char *className, const char *methodName, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportDebug</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a34f0ca347ac5bfae3a50fe09ccd787d1</anchor>
      <arglist>(const char *className, const char *methodName, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deg2rad</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2099697a85abd10017e2ab2ca9f3336e</anchor>
      <arglist>(const double valueInDeg)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rad2deg</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3ffc4d06e77379cc44c32f2ea44df1d5</anchor>
      <arglist>(const double valueInRad)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkDoublesAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3f330bf40f3d09799c2b4923f79173ff</anchor>
      <arglist>(const double &amp;val1, const double &amp;val2, double tol=DEFAULT_TOL)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>UNKNOWN</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a79d980eee07cb2f08368804f713ba6f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>DEFAULT_TOL</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aaed0bfb02e0a77c063b675cd958f68ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorDynSize.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>VectorDynSize_8cpp</filename>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>VectorDynSize.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>VectorDynSize_8h</filename>
    <includes id="Span_8h" name="Span.h" local="no" imported="no">iDynTree/Core/Span.h</includes>
    <class kind="class">iDynTree::VectorDynSize</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>VectorFixSize.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>VectorFixSize_8h</filename>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="Span_8h" name="Span.h" local="no" imported="no">iDynTree/Core/Span.h</includes>
    <class kind="class">iDynTree::VectorFixSize</class>
    <namespace>iDynTree</namespace>
    <member kind="typedef">
      <type>VectorFixSize&lt; 2 &gt;</type>
      <name>Vector2</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a60f2b9c49979e66bbc9fd83dba192e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorFixSize&lt; 3 &gt;</type>
      <name>Vector3</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6ba91315448cf1d275f460097e36d134</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorFixSize&lt; 4 &gt;</type>
      <name>Vector4</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9827b82ba400214bc1c3f0a2714aee0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorFixSize&lt; 6 &gt;</type>
      <name>Vector6</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aacbdf066949a170899a2e43ad52987d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorFixSize&lt; 10 &gt;</type>
      <name>Vector10</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a658ee3743c3ccf3d61c38e4fa1c81ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorFixSize&lt; 16 &gt;</type>
      <name>Vector16</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a68b87219f8e66c52f9d5de9d84aef7c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorsVisualization.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/visualization/src/</path>
    <filename>VectorsVisualization_8cpp</filename>
    <includes id="VectorsVisualization_8h" name="VectorsVisualization.h" local="yes" imported="no">VectorsVisualization.h</includes>
    <includes id="IrrlichtUtils_8h" name="IrrlichtUtils.h" local="yes" imported="no">IrrlichtUtils.h</includes>
  </compound>
  <compound kind="file">
    <name>VectorsVisualization.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/visualization/src/</path>
    <filename>VectorsVisualization_8h</filename>
    <includes id="Visualizer_8h" name="Visualizer.h" local="no" imported="no">iDynTree/Visualizer.h</includes>
    <class kind="class">iDynTree::VectorsVisualization</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>VisualElement.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/src/</path>
    <filename>VisualElement_8cpp</filename>
    <includes id="VisualElement_8h" name="VisualElement.h" local="yes" imported="no">VisualElement.h</includes>
    <includes id="GeometryElement_8h" name="GeometryElement.h" local="yes" imported="no">GeometryElement.h</includes>
    <includes id="MaterialElement_8h" name="MaterialElement.h" local="yes" imported="no">MaterialElement.h</includes>
    <includes id="OriginElement_8h" name="OriginElement.h" local="yes" imported="no">OriginElement.h</includes>
    <includes id="XMLAttribute_8h" name="XMLAttribute.h" local="no" imported="no">iDynTree/XMLAttribute.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>VisualElement.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/urdf/include/private/</path>
    <filename>VisualElement_8h</filename>
    <includes id="XMLElement_8h" name="XMLElement.h" local="no" imported="no">iDynTree/XMLElement.h</includes>
    <includes id="MaterialElement_8h" name="MaterialElement.h" local="yes" imported="no">MaterialElement.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="SolidShapes_8h" name="SolidShapes.h" local="no" imported="no">iDynTree/Model/SolidShapes.h</includes>
    <class kind="class">iDynTree::VisualElement</class>
    <class kind="struct">iDynTree::VisualElement::VisualInfo</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Visualizer.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/visualization/src/</path>
    <filename>Visualizer_8cpp</filename>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="JointState_8h" name="JointState.h" local="no" imported="no">iDynTree/Model/JointState.h</includes>
    <includes id="Visualizer_8h" name="Visualizer.h" local="no" imported="no">iDynTree/Visualizer.h</includes>
    <includes id="DummyImplementations_8h" name="DummyImplementations.h" local="yes" imported="no">DummyImplementations.h</includes>
    <class kind="struct">iDynTree::Visualizer::VisualizerPimpl</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Visualizer.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/visualization/include/iDynTree/</path>
    <filename>Visualizer_8h</filename>
    <includes id="Direction_8h" name="Direction.h" local="no" imported="no">iDynTree/Core/Direction.h</includes>
    <includes id="Position_8h" name="Position.h" local="no" imported="no">iDynTree/Core/Position.h</includes>
    <includes id="JointState_8h" name="JointState.h" local="no" imported="no">iDynTree/Model/JointState.h</includes>
    <includes id="LinkState_8h" name="LinkState.h" local="no" imported="no">iDynTree/Model/LinkState.h</includes>
    <class kind="class">iDynTree::ICamera</class>
    <class kind="class">iDynTree::ColorViz</class>
    <class kind="class">iDynTree::ILight</class>
    <class kind="class">iDynTree::IEnvironment</class>
    <class kind="class">iDynTree::IJetsVisualization</class>
    <class kind="class">iDynTree::IVectorsVisualization</class>
    <class kind="class">iDynTree::IModelVisualization</class>
    <class kind="struct">iDynTree::VisualizerOptions</class>
    <class kind="class">iDynTree::Visualizer</class>
    <namespace>iDynTree</namespace>
    <member kind="enumeration">
      <type></type>
      <name>LightType</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aad6844bb3e20ca63bfe9e3ee6e26515a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_LIGHT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aad6844bb3e20ca63bfe9e3ee6e26515aa7552ee08212d810760cfcca2c9e26976</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIRECTIONAL_LIGHT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aad6844bb3e20ca63bfe9e3ee6e26515aac19ca7f555771da916a01ed3fa781d21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorhpInterface.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>WorhpInterface_8cpp</filename>
    <includes id="WorhpInterface_8h" name="WorhpInterface.h" local="no" imported="no">iDynTree/Optimizers/WorhpInterface.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <includes id="EigenHelpers_8h" name="EigenHelpers.h" local="no" imported="no">iDynTree/Core/EigenHelpers.h</includes>
    <includes id="Triplets_8h" name="Triplets.h" local="no" imported="no">iDynTree/Core/Triplets.h</includes>
    <class kind="struct">WorhpVariables</class>
    <class kind="class">MatrixElement</class>
    <class kind="class">WorhpInterface::WorhpInterfaceImplementation</class>
  </compound>
  <compound kind="file">
    <name>WorhpInterface.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/include/iDynTree/Optimizers/</path>
    <filename>WorhpInterface_8h</filename>
    <includes id="Optimizer_8h" name="Optimizer.h" local="no" imported="no">iDynTree/Optimizer.h</includes>
    <class kind="class">iDynTree::optimization::WorhpInterface</class>
    <namespace>iDynTree</namespace>
    <namespace>iDynTree::optimization</namespace>
  </compound>
  <compound kind="file">
    <name>WorhpInterfaceNotImplemented.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/optimalcontrol/src/</path>
    <filename>WorhpInterfaceNotImplemented_8cpp</filename>
    <includes id="WorhpInterface_8h" name="WorhpInterface.h" local="no" imported="no">iDynTree/Optimizers/WorhpInterface.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
  </compound>
  <compound kind="file">
    <name>Wrench.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/src/</path>
    <filename>Wrench_8cpp</filename>
    <includes id="Wrench_8h" name="Wrench.h" local="no" imported="no">iDynTree/Core/Wrench.h</includes>
    <includes id="PrivateSemanticsMacros_8h" name="PrivateSemanticsMacros.h" local="no" imported="no">iDynTree/Core/PrivateSemanticsMacros.h</includes>
    <includes id="PrivateUtils_8h" name="PrivateUtils.h" local="no" imported="no">iDynTree/Core/PrivateUtils.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>Wrench.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/core/include/iDynTree/Core/</path>
    <filename>Wrench_8h</filename>
    <includes id="SpatialForceVector_8h" name="SpatialForceVector.h" local="no" imported="no">iDynTree/Core/SpatialForceVector.h</includes>
    <class kind="class">iDynTree::Wrench</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>XMLAttribute.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/xml/src/</path>
    <filename>XMLAttribute_8cpp</filename>
    <includes id="XMLAttribute_8h" name="XMLAttribute.h" local="yes" imported="no">XMLAttribute.h</includes>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>XMLAttribute.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/xml/include/iDynTree/</path>
    <filename>XMLAttribute_8h</filename>
    <class kind="class">iDynTree::XMLAttribute</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>XMLDocument.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/xml/src/</path>
    <filename>XMLDocument_8cpp</filename>
    <includes id="XMLDocument_8h" name="XMLDocument.h" local="yes" imported="no">XMLDocument.h</includes>
    <includes id="XMLElement_8h" name="XMLElement.h" local="yes" imported="no">XMLElement.h</includes>
    <class kind="class">iDynTree::XMLDocument::XMLDocumentPimpl</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>XMLDocument.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/xml/include/iDynTree/</path>
    <filename>XMLDocument_8h</filename>
    <class kind="class">iDynTree::XMLDocument</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>XMLElement.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/xml/src/</path>
    <filename>XMLElement_8cpp</filename>
    <includes id="XMLElement_8h" name="XMLElement.h" local="yes" imported="no">XMLElement.h</includes>
    <includes id="XMLAttribute_8h" name="XMLAttribute.h" local="yes" imported="no">XMLAttribute.h</includes>
    <class kind="class">iDynTree::XMLElement::XMLElementPimpl</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>XMLElement.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/xml/include/iDynTree/</path>
    <filename>XMLElement_8h</filename>
    <class kind="class">iDynTree::XMLElement</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>XMLParser.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/xml/src/</path>
    <filename>XMLParser_8cpp</filename>
    <includes id="XMLParser_8h" name="XMLParser.h" local="yes" imported="no">XMLParser.h</includes>
    <includes id="XMLElement_8h" name="XMLElement.h" local="yes" imported="no">XMLElement.h</includes>
    <includes id="XMLAttribute_8h" name="XMLAttribute.h" local="yes" imported="no">XMLAttribute.h</includes>
    <includes id="XMLDocument_8h" name="XMLDocument.h" local="yes" imported="no">XMLDocument.h</includes>
    <includes id="Utils_8h" name="Utils.h" local="no" imported="no">iDynTree/Core/Utils.h</includes>
    <class kind="class">iDynTree::XMLParser::XMLParserPimpl</class>
    <namespace>iDynTree</namespace>
    <member kind="function" static="yes">
      <type>static const std::string</type>
      <name>stringFromFormattedCString</name>
      <anchorfile>XMLParser_8cpp.html</anchorfile>
      <anchor>a4ebb03dd487647fa935a04c2a43f1123</anchor>
      <arglist>(const char *message, va_list arguments)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XMLParser.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/model_io/xml/include/iDynTree/</path>
    <filename>XMLParser_8h</filename>
    <class kind="class">iDynTree::XMLParser</class>
    <namespace>iDynTree</namespace>
  </compound>
  <compound kind="file">
    <name>YARPConfigurationsLoader.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/yarp/src/</path>
    <filename>YARPConfigurationsLoader_8cpp</filename>
    <includes id="YARPConfigurationsLoader_8h" name="YARPConfigurationsLoader.h" local="yes" imported="no">iDynTree/yarp/YARPConfigurationsLoader.h</includes>
  </compound>
  <compound kind="file">
    <name>YARPConfigurationsLoader.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/yarp/include/iDynTree/yarp/</path>
    <filename>YARPConfigurationsLoader_8h</filename>
    <includes id="Rotation_8h" name="Rotation.h" local="no" imported="no">iDynTree/Core/Rotation.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>parseRotationMatrix</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a51e39202a162fa642eed01df66c75878</anchor>
      <arglist>(const yarp::os::Searchable &amp;rf, const std::string &amp;key, iDynTree::Rotation &amp;rotation)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>YARPConversions.cpp</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/yarp/src/</path>
    <filename>YARPConversions_8cpp</filename>
    <includes id="YARPConversions_8h" name="YARPConversions.h" local="no" imported="no">iDynTree/yarp/YARPConversions.h</includes>
    <includes id="Direction_8h" name="Direction.h" local="no" imported="no">iDynTree/Core/Direction.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">iDynTree/Core/Transform.h</includes>
    <includes id="VectorDynSize_8h" name="VectorDynSize.h" local="no" imported="no">iDynTree/Core/VectorDynSize.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga5043dfa20b4ffc99d8dbdae5b15c0dae</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::Wrench &amp;iDynTreeWrench)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gaa28c5100610c33e81bafbdad8cd65f74</anchor>
      <arglist>(const iDynTree::Wrench &amp;iDynTreeWrench, yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gaf7ed1a24bb847b7742685eb9f59bb92b</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::Position &amp;iDynTreePosition)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gafcb81129ef0d16f5f1eb1cc6e1df4252</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::Vector3 &amp;iDynTreeVector3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga9020f2412b884fd0ef63e726c1342947</anchor>
      <arglist>(const iDynTree::Position &amp;iDynTreePosition, yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gaea2d5b8825259e8fa15c166cb843ee40</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::Direction &amp;iDynTreeDirection)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga6b716f09fcb568a6b3eea04b44160f19</anchor>
      <arglist>(const iDynTree::Vector3 &amp;iDynTreeDirection, yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga8c4d32377000e6629f2855a6d5aebf72</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::VectorDynSize &amp;iDynTreeVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gaa01de51e3acfd87599aa688e4c3d32c0</anchor>
      <arglist>(const yarp::sig::Matrix &amp;yarpHomogeneousMatrix, iDynTree::Transform &amp;iDynTreeTransform)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga0c1a2189345fb926b98f2d82219d5dd1</anchor>
      <arglist>(const iDynTree::Transform &amp;iDynTreeTransform, yarp::sig::Matrix &amp;yarpHomogeneousMatrix)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>YARPConversions.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/yarp/include/iDynTree/yarp/</path>
    <filename>YARPConversions_8h</filename>
    <includes id="Wrench_8h" name="Wrench.h" local="no" imported="no">iDynTree/Core/Wrench.h</includes>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga5043dfa20b4ffc99d8dbdae5b15c0dae</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::Wrench &amp;iDynTreeWrench)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gaa28c5100610c33e81bafbdad8cd65f74</anchor>
      <arglist>(const iDynTree::Wrench &amp;iDynTreeWrench, yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gaf7ed1a24bb847b7742685eb9f59bb92b</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::Position &amp;iDynTreePosition)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gafcb81129ef0d16f5f1eb1cc6e1df4252</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::Vector3 &amp;iDynTreeVector3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga9020f2412b884fd0ef63e726c1342947</anchor>
      <arglist>(const iDynTree::Position &amp;iDynTreePosition, yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gaea2d5b8825259e8fa15c166cb843ee40</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::Direction &amp;iDynTreeDirection)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga6b716f09fcb568a6b3eea04b44160f19</anchor>
      <arglist>(const iDynTree::Vector3 &amp;iDynTreeDirection, yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gaa01de51e3acfd87599aa688e4c3d32c0</anchor>
      <arglist>(const yarp::sig::Matrix &amp;yarpHomogeneousMatrix, iDynTree::Transform &amp;iDynTreeTransform)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga0c1a2189345fb926b98f2d82219d5dd1</anchor>
      <arglist>(const iDynTree::Transform &amp;iDynTreeTransform, yarp::sig::Matrix &amp;yarpHomogeneousMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga8c4d32377000e6629f2855a6d5aebf72</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::VectorDynSize &amp;iDynTreeVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga3e0ac29c597c34c171d29fb18127ab3b</anchor>
      <arglist>(const VectorType &amp;iDynTreeVector, yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga63598edaacfc53e5728e944a0dab5ebb</anchor>
      <arglist>(const MatrixType &amp;iDynTreeMatrix, yarp::sig::Matrix &amp;yarpMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga056a45c2887a5f314c963c89bb16a270</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, VectorType &amp;iDynTreeVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gae1c1d7e3baf33d9b84f593330a3cf199</anchor>
      <arglist>(const yarp::sig::Matrix &amp;yarpMatrix, MatrixType &amp;iDynTreeMatrix)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>YARPEigenConversions.h</name>
    <path>/home/gromualdi/robot-code/robotology-superbuild/robotology/iDynTree/src/yarp/include/iDynTree/yarp/</path>
    <filename>YARPEigenConversions_8h</filename>
    <namespace>iDynTree</namespace>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::VectorXd &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae7c28c545c2775b437536fd84dabc97d</anchor>
      <arglist>(yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a19f060a1b963d4cdd58a142372675f6b</anchor>
      <arglist>(yarp::sig::Matrix &amp;yarpMatrix)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::VectorXd &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0fc1ec0d7de0f823d4a8c32524aaecd7</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4f400cf54f7b7757adbaa768205b9df9</anchor>
      <arglist>(const yarp::sig::Matrix &amp;yarpMatrix)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::AccelerometerSensor::AccelerometerPrivateAttributes</name>
    <filename>structiDynTree_1_1AccelerometerSensor_1_1AccelerometerPrivateAttributes.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structiDynTree_1_1AccelerometerSensor_1_1AccelerometerPrivateAttributes.html</anchorfile>
      <anchor>a88c63d8d33916e70475bdef3eef7e82b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform</type>
      <name>link_H_sensor</name>
      <anchorfile>structiDynTree_1_1AccelerometerSensor_1_1AccelerometerPrivateAttributes.html</anchorfile>
      <anchor>ad92a5cbf5b1e85dea6bf636eb95a7e64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>parent_link_index</name>
      <anchorfile>structiDynTree_1_1AccelerometerSensor_1_1AccelerometerPrivateAttributes.html</anchorfile>
      <anchor>ad4e0152217a9eb0048a335ccdd60754a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>parent_link_name</name>
      <anchorfile>structiDynTree_1_1AccelerometerSensor_1_1AccelerometerPrivateAttributes.html</anchorfile>
      <anchor>a63fc7db2200b2c981b2a2ca7f0b22059</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::AccelerometerSensor</name>
    <filename>classiDynTree_1_1AccelerometerSensor.html</filename>
    <base>iDynTree::LinkSensor</base>
    <class kind="struct">iDynTree::AccelerometerSensor::AccelerometerPrivateAttributes</class>
    <member kind="function">
      <type></type>
      <name>AccelerometerSensor</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensor.html</anchorfile>
      <anchor>a86c0607b1918169ea6d81f0b4c6145c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AccelerometerSensor</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensor.html</anchorfile>
      <anchor>aa5b186782694e96fc3e1e4add9b4c52a</anchor>
      <arglist>(const AccelerometerSensor &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>AccelerometerSensor &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensor.html</anchorfile>
      <anchor>a2581728ecc16f011535f4f767c6ed652</anchor>
      <arglist>(const AccelerometerSensor &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AccelerometerSensor</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensor.html</anchorfile>
      <anchor>a0b275bbab59e965da7d1403245509ae9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setName</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensor.html</anchorfile>
      <anchor>af6e1ad0f6ae149b8cb6591ceb6359648</anchor>
      <arglist>(const std::string &amp;_name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setLinkSensorTransform</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensor.html</anchorfile>
      <anchor>ad91ec3dc73a1d4f298a0b87ed62c07a7</anchor>
      <arglist>(const iDynTree::Transform &amp;link_H_sensor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setParentLink</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensor.html</anchorfile>
      <anchor>aa7fafe90845ba06b008191e59f983406</anchor>
      <arglist>(const std::string &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setParentLinkIndex</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensor.html</anchorfile>
      <anchor>adc7fb955a4aa6ce83dbb621da9ab7e8e</anchor>
      <arglist>(const LinkIndex &amp;parent_index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensor.html</anchorfile>
      <anchor>aa9d4f983bdf10f65edb53ae79fd93436</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SensorType</type>
      <name>getSensorType</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensor.html</anchorfile>
      <anchor>a991cf7c3abd0ff5d6117d30603d1b003</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParentLink</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensor.html</anchorfile>
      <anchor>aa718fb58c93b02f9365df195d8aba8cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinkIndex</type>
      <name>getParentLinkIndex</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensor.html</anchorfile>
      <anchor>a39691ca25db214d14f37cdc8b895b2da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>getLinkSensorTransform</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensor.html</anchorfile>
      <anchor>ab009666f7115b8591e516087d89e5dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensor.html</anchorfile>
      <anchor>a05bf54b4a247b4536c5846ef93702b46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Sensor *</type>
      <name>clone</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensor.html</anchorfile>
      <anchor>a677f6af96085db8f84ee4f843aee2cf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateIndices</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensor.html</anchorfile>
      <anchor>a4b8a0d3c55a3341ad98b9490864512d0</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateIndeces</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensor.html</anchorfile>
      <anchor>a60eac6ada5eaa9e062a3d7589b5970b7</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::LinAcceleration</type>
      <name>predictMeasurement</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensor.html</anchorfile>
      <anchor>a5b7a76db7f9d42fa2d0cd9719e5c29a6</anchor>
      <arglist>(const iDynTree::SpatialAcc &amp;linkAcc, const iDynTree::Twist &amp;linkTwist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1LinkSensor.html</anchorfile>
      <anchor>ab715a5a2deca41ecb920133b075f7c58</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::AccelerometerSensorHelper</name>
    <filename>classiDynTree_1_1AccelerometerSensorHelper.html</filename>
    <base>iDynTree::SensorHelper</base>
    <member kind="function">
      <type></type>
      <name>AccelerometerSensorHelper</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensorHelper.html</anchorfile>
      <anchor>acea72cb712142cdcf4e28cebd2927c83</anchor>
      <arglist>(std::shared_ptr&lt; const SensorElement::SensorInfo &gt; sensorInfo)</arglist>
    </member>
    <member kind="function">
      <type>Sensor *</type>
      <name>generateSensor</name>
      <anchorfile>classiDynTree_1_1AccelerometerSensorHelper.html</anchorfile>
      <anchor>a6f6d577a22168f97eb82a67315ad9225</anchor>
      <arglist>(const Model &amp;model) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; const SensorElement::SensorInfo &gt;</type>
      <name>m_sensorInfo</name>
      <anchorfile>classiDynTree_1_1SensorHelper.html</anchorfile>
      <anchor>ac726e84fbbcc59662ab2bf0c531b1270</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimization::AlglibInterface</name>
    <filename>classiDynTree_1_1optimization_1_1AlglibInterface.html</filename>
    <base>iDynTree::optimization::Optimizer</base>
    <class kind="class">iDynTree::optimization::AlglibInterface::AlglibInterfaceImplementation</class>
    <member kind="function">
      <type></type>
      <name>AlglibInterface</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface.html</anchorfile>
      <anchor>a75cc0634b21a7148022f6e84236cfbff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlglibInterface</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface.html</anchorfile>
      <anchor>ac4f37167d1e64a8e1aa6306afd0c52e0</anchor>
      <arglist>(const AlglibInterface &amp;other)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AlglibInterface</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface.html</anchorfile>
      <anchor>a755cbbeae4bc97b311ce8ec031779f50</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAvailable</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface.html</anchorfile>
      <anchor>acd9e30e5d403c497e60a68c54dbdcf37</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setProblem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface.html</anchorfile>
      <anchor>a8f2bcb36bd7f6cdc9857c8212785ea4c</anchor>
      <arglist>(std::shared_ptr&lt; OptimizationProblem &gt; problem) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>solve</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface.html</anchorfile>
      <anchor>a9378c189eddd25f3da3171d9d2be7224</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getPrimalVariables</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface.html</anchorfile>
      <anchor>afa6bb95a03cc026529bb5ad2a1f97aff</anchor>
      <arglist>(VectorDynSize &amp;primalVariables) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getDualVariables</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface.html</anchorfile>
      <anchor>a08953636337b1414052f329f42649f0f</anchor>
      <arglist>(VectorDynSize &amp;constraintsMultipliers, VectorDynSize &amp;lowerBoundsMultipliers, VectorDynSize &amp;upperBoundsMultipliers) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getOptimalCost</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface.html</anchorfile>
      <anchor>aa98dc1cbe48a07206d201838f8027768</anchor>
      <arglist>(double &amp;optimalCost) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getOptimalConstraintsValues</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface.html</anchorfile>
      <anchor>a059093f5710fc6bca4bfb52c1f192fe3</anchor>
      <arglist>(VectorDynSize &amp;constraintsValues) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>minusInfinity</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface.html</anchorfile>
      <anchor>a21aebbcc1e60dd526f74f996fe1d9e22</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>plusInfinity</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface.html</anchorfile>
      <anchor>a237d586b135d79150a50d6fea5ea9cf2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRHO</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface.html</anchorfile>
      <anchor>a33e40b7437e55dd6f36104d1a4d914cf</anchor>
      <arglist>(double rho)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setOuterIterations</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface.html</anchorfile>
      <anchor>ae2345a755afb4b994faf0c6b0522bd77</anchor>
      <arglist>(unsigned int outerIterations)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStoppingCondition</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface.html</anchorfile>
      <anchor>a79a9f496151b7de19c9a998be4f323a9</anchor>
      <arglist>(double epsX)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setMaximumIterations</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface.html</anchorfile>
      <anchor>ad20ff1c23c66b9e8d0a803c870fc131f</anchor>
      <arglist>(unsigned int maxIter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::weak_ptr&lt; OptimizationProblem &gt;</type>
      <name>problem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>a6836c50c97f711451f5c0f011a2efddb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; OptimizationProblem &gt;</type>
      <name>m_problem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>ae3b9609d905cbbf3c3336c9350e94106</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimization::AlglibInterface::AlglibInterfaceImplementation</name>
    <filename>classiDynTree_1_1optimization_1_1AlglibInterface_1_1AlglibInterfaceImplementation.html</filename>
    <member kind="function">
      <type></type>
      <name>AlglibInterfaceImplementation</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface_1_1AlglibInterfaceImplementation.html</anchorfile>
      <anchor>ab6da5fa39926fb420f6a0ad67f56e41d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>SharedData *</type>
      <name>nlpData</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface_1_1AlglibInterfaceImplementation.html</anchorfile>
      <anchor>a86ed8ed66bc6bf36899fe1c715f85889</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>constraintsLowerBounds</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface_1_1AlglibInterfaceImplementation.html</anchorfile>
      <anchor>a8dd4aa8a0e18bc7ba1486e4d75847c21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>constraintsUpperBounds</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface_1_1AlglibInterfaceImplementation.html</anchorfile>
      <anchor>a1e99232b604508f0f7768c4170857435</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>variablesLowerBounds</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface_1_1AlglibInterfaceImplementation.html</anchorfile>
      <anchor>aa9e525e1131c70f4e69c7cdd6b2f3555</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>variablesUpperBounds</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface_1_1AlglibInterfaceImplementation.html</anchorfile>
      <anchor>ac8d811dbf705b34d078dc7cefebaa4a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>x0</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface_1_1AlglibInterfaceImplementation.html</anchorfile>
      <anchor>aa235b3332277626276888d3e6e2f169b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>solution</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface_1_1AlglibInterfaceImplementation.html</anchorfile>
      <anchor>ab8b69d0f0a160831c3ef237c0bd8aaf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>alglib::minnlcstate</type>
      <name>alglibState</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface_1_1AlglibInterfaceImplementation.html</anchorfile>
      <anchor>ac726937a51e489fca79fa2f9df9ae041</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>alglib::minnlcreport</type>
      <name>alglibReport</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface_1_1AlglibInterfaceImplementation.html</anchorfile>
      <anchor>afc388dafe3be04ad0b6054384ab9fa7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>alglib::real_1d_array</type>
      <name>alglibScaling</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface_1_1AlglibInterfaceImplementation.html</anchorfile>
      <anchor>a9d59624f4881eeabf8dc1c5854334dc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>exitCode</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface_1_1AlglibInterfaceImplementation.html</anchorfile>
      <anchor>a08e137acf05c17cfb4e91586ecb17062</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>epsx</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface_1_1AlglibInterfaceImplementation.html</anchorfile>
      <anchor>ad8e433bfef1fad102a9271b6b0bd28c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>alglib::ae_int_t</type>
      <name>maxits</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface_1_1AlglibInterfaceImplementation.html</anchorfile>
      <anchor>a45d053c96a8ee4a817a2aa8a2518b241</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>alglib::ae_int_t</type>
      <name>outerits</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface_1_1AlglibInterfaceImplementation.html</anchorfile>
      <anchor>a16a7608deb13a03419dbf3e997dd5389</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rho</name>
      <anchorfile>classiDynTree_1_1optimization_1_1AlglibInterface_1_1AlglibInterfaceImplementation.html</anchorfile>
      <anchor>a310f25b6045919a37c3523a144e14c44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::AngularForceVector3</name>
    <filename>classiDynTree_1_1AngularForceVector3.html</filename>
    <base>ForceVector3&lt; AngularForceVector3 &gt;</base>
    <member kind="typedef">
      <type>MotionForce_traits&lt; AngularForceVector3 &gt;::SemanticsType</type>
      <name>SemanticsType</name>
      <anchorfile>classiDynTree_1_1AngularForceVector3.html</anchorfile>
      <anchor>ac0388d14c0a8ed2ab6350694b8cf4fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngularForceVector3</name>
      <anchorfile>classiDynTree_1_1AngularForceVector3.html</anchorfile>
      <anchor>ae56923d5fab7cd68a3786e4c1646c53d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngularForceVector3</name>
      <anchorfile>classiDynTree_1_1AngularForceVector3.html</anchorfile>
      <anchor>aaeca41943d714e48dfaf03ba624cc0d2</anchor>
      <arglist>(const double x, const double y, const double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngularForceVector3</name>
      <anchorfile>classiDynTree_1_1AngularForceVector3.html</anchorfile>
      <anchor>a7911407cc964f58f85bf3d5dec643960</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngularForceVector3</name>
      <anchorfile>classiDynTree_1_1AngularForceVector3.html</anchorfile>
      <anchor>a87c775367da9388055407f200f62984c</anchor>
      <arglist>(const AngularForceVector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngularForceVector3</name>
      <anchorfile>classiDynTree_1_1AngularForceVector3.html</anchorfile>
      <anchor>ad40d4fedba02cff38dc85e8b203a7a18</anchor>
      <arglist>(const Vector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>AngularForceVector3</type>
      <name>changePoint</name>
      <anchorfile>classiDynTree_1_1AngularForceVector3.html</anchorfile>
      <anchor>a7508c9553856563759d234aab54d2b8a</anchor>
      <arglist>(const Position &amp;newPoint, const LinearForceVector3 &amp;otherLinear) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::AngularForceVector3Semantics</name>
    <filename>classiDynTree_1_1AngularForceVector3Semantics.html</filename>
    <base>ForceVector3Semantics&lt; AngularForceVector3Semantics &gt;</base>
    <member kind="function">
      <type></type>
      <name>AngularForceVector3Semantics</name>
      <anchorfile>classiDynTree_1_1AngularForceVector3Semantics.html</anchorfile>
      <anchor>afe0e242ac32da898152cbb3d7d042f1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngularForceVector3Semantics</name>
      <anchorfile>classiDynTree_1_1AngularForceVector3Semantics.html</anchorfile>
      <anchor>a0ad1d85628203406eb6c63cd088671f9</anchor>
      <arglist>(int _point, int _body, int _refBody, int _coordinateFrame)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngularForceVector3Semantics</name>
      <anchorfile>classiDynTree_1_1AngularForceVector3Semantics.html</anchorfile>
      <anchor>a1d1e15224b42ed286e3b4e65a0ce0f11</anchor>
      <arglist>(const AngularForceVector3Semantics &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changePoint</name>
      <anchorfile>classiDynTree_1_1AngularForceVector3Semantics.html</anchorfile>
      <anchor>a4d64785d29dc162234900038bfa97854</anchor>
      <arglist>(const PositionSemantics &amp;newPoint, const LinearForceVector3Semantics &amp;otherLinear, AngularForceVector3Semantics &amp;resultAngular) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1AngularForceVector3Semantics.html</anchorfile>
      <anchor>abe10b6467f80702485c41de7181cdfad</anchor>
      <arglist>(const AngularForceVector3Semantics &amp;op1, const AngularForceVector3Semantics &amp;op2, AngularForceVector3Semantics &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>ad58b79754fa8eb7419cff86e5f6b76c5</anchor>
      <arglist>(const ForceVector3Semantics &amp;op1, const ForceVector3Semantics &amp;op2, ForceVector3Semantics &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>a86b5db61b28c45d33e329ea266b41122</anchor>
      <arglist>(const ForceVector3Semantics &amp;op, ForceVector3Semantics &amp;result)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>point</name>
      <anchorfile>classiDynTree_1_1AngularForceVector3Semantics.html</anchorfile>
      <anchor>a55fb26ed72ff74b9ceae8a42e518f6d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::AngularMotionVector3</name>
    <filename>classiDynTree_1_1AngularMotionVector3.html</filename>
    <base>MotionVector3&lt; AngularMotionVector3 &gt;</base>
    <member kind="typedef">
      <type>MotionForce_traits&lt; AngularMotionVector3 &gt;::SemanticsType</type>
      <name>SemanticsType</name>
      <anchorfile>classiDynTree_1_1AngularMotionVector3.html</anchorfile>
      <anchor>a0a50f1e90a4539b30c3110b8f9dd6299</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, LinearMotionVector3 &gt;::Type</type>
      <name>MotionCrossLinM</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>aaed41f551e18d2629dd79bbd8cd8120b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, AngularMotionVector3 &gt;::Type</type>
      <name>MotionCrossAngM</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a0a3372200f0037ba3dd0188bd8c6e5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, LinearForceVector3 &gt;::Type</type>
      <name>MotionCrossLinF</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a63d0eec936e8c873068f754320ec9151</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, AngularForceVector3 &gt;::Type</type>
      <name>MotionCrossAngF</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>af8d2135ab33e05e53b58b01dae91e617</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngularMotionVector3</name>
      <anchorfile>classiDynTree_1_1AngularMotionVector3.html</anchorfile>
      <anchor>ab70779fd6e164c202578156a803e6f67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngularMotionVector3</name>
      <anchorfile>classiDynTree_1_1AngularMotionVector3.html</anchorfile>
      <anchor>ad83ee27b0afe0cde73d5ca1e990fc9e3</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngularMotionVector3</name>
      <anchorfile>classiDynTree_1_1AngularMotionVector3.html</anchorfile>
      <anchor>aae1da6c283edb8fdfb86df3c7d070da0</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngularMotionVector3</name>
      <anchorfile>classiDynTree_1_1AngularMotionVector3.html</anchorfile>
      <anchor>aa92cf3d81b6df9bca3473b8baac9d043</anchor>
      <arglist>(const AngularMotionVector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngularMotionVector3</name>
      <anchorfile>classiDynTree_1_1AngularMotionVector3.html</anchorfile>
      <anchor>adc4b788faed1c8be713d56a6dfea15f4</anchor>
      <arglist>(const Vector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Rotation</type>
      <name>exp</name>
      <anchorfile>classiDynTree_1_1AngularMotionVector3.html</anchorfile>
      <anchor>adaabb7fe5916d39c70242fb713b9cea4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossLinM</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a5cac47f80f5e61e9b8ab3a877d961a37</anchor>
      <arglist>(const LinearMotionVector3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossAngM</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>af7b437b08fd688a52caefeee8e575620</anchor>
      <arglist>(const AngularMotionVector3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossLinF</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a6c2656ec0a2dd9855548372c509d9903</anchor>
      <arglist>(const LinearForceVector3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossAngF</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>ab036ecc2db2593cb9e44e748e11ef789</anchor>
      <arglist>(const AngularForceVector3 &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::AngularMotionVector3Semantics</name>
    <filename>classiDynTree_1_1AngularMotionVector3Semantics.html</filename>
    <base>GeomVector3Semantics&lt; AngularMotionVector3Semantics &gt;</base>
    <member kind="function">
      <type></type>
      <name>AngularMotionVector3Semantics</name>
      <anchorfile>classiDynTree_1_1AngularMotionVector3Semantics.html</anchorfile>
      <anchor>af7a936e3ced858cad57d7bddc78d0b8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngularMotionVector3Semantics</name>
      <anchorfile>classiDynTree_1_1AngularMotionVector3Semantics.html</anchorfile>
      <anchor>a66bb1ba28a91acb7ecdc7e310a95bcbc</anchor>
      <arglist>(int _body, int _refBody, int _coordinateFrame)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngularMotionVector3Semantics</name>
      <anchorfile>classiDynTree_1_1AngularMotionVector3Semantics.html</anchorfile>
      <anchor>a9d7cbd49cbec2ae2c9f52cc072e16ee8</anchor>
      <arglist>(const AngularMotionVector3Semantics &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToUnknown</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>abd883af03b4203fd00ea1cf4f504cfc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a4f0bb7a25a966f92f8cf19494088e4e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRefBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a3e57319bb4392cb63a6077e8180e28d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoordinateFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a32b5b64c6e34938ad1521732331bc474</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnknown</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>ab1430528dd300c1cb4d507918680e779</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a0017f085753fd7da90d7e7a4e4625fbf</anchor>
      <arglist>(const RotationSemantics &amp;newCoordFrame, MotionForceSemanticsT &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>aa99906ab81a042e55b654b37ef24d620</anchor>
      <arglist>(const typename DualMotionForceSemanticsT&lt; MotionForceSemanticsT &gt;::Type &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a7060b666780b2024ee6ed4a2dac8991d</anchor>
      <arglist>(const MotionForceSemanticsT &amp;op1, const MotionForceSemanticsT &amp;op2, MotionForceSemanticsT &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>ac03fa8a55e563b79cfc2b752318ed55e</anchor>
      <arglist>(const MotionForceSemanticsT &amp;op, MotionForceSemanticsT &amp;result)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>body</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a41d8bb8a198ce9d9e6b1790f98cfeaa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>refBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a3394a4c417154821e37c11e95ce1d934</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>coordinateFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a7bbc827d06b06a8b67a86165da66634b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::ArticulatedBodyAlgorithmInternalBuffers</name>
    <filename>structiDynTree_1_1ArticulatedBodyAlgorithmInternalBuffers.html</filename>
    <member kind="function">
      <type></type>
      <name>ArticulatedBodyAlgorithmInternalBuffers</name>
      <anchorfile>structiDynTree_1_1ArticulatedBodyAlgorithmInternalBuffers.html</anchorfile>
      <anchor>aeae686f2c4221e757dbae74b611db79d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArticulatedBodyAlgorithmInternalBuffers</name>
      <anchorfile>structiDynTree_1_1ArticulatedBodyAlgorithmInternalBuffers.html</anchorfile>
      <anchor>a6cef99970f81b6218d27f8b71ac4bc50</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>structiDynTree_1_1ArticulatedBodyAlgorithmInternalBuffers.html</anchorfile>
      <anchor>a0051da05566db4035a0a55856c01424e</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsistent</name>
      <anchorfile>structiDynTree_1_1ArticulatedBodyAlgorithmInternalBuffers.html</anchorfile>
      <anchor>a9cc877128e38e26e00636e3b82101347</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="variable">
      <type>DOFSpatialMotionArray</type>
      <name>S</name>
      <anchorfile>structiDynTree_1_1ArticulatedBodyAlgorithmInternalBuffers.html</anchorfile>
      <anchor>a3650dcf3e59123a82b51473821756c33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DOFSpatialForceArray</type>
      <name>U</name>
      <anchorfile>structiDynTree_1_1ArticulatedBodyAlgorithmInternalBuffers.html</anchorfile>
      <anchor>a8ad42f2fc2d272d3e7df9daa0a93d348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JointDOFsDoubleArray</type>
      <name>D</name>
      <anchorfile>structiDynTree_1_1ArticulatedBodyAlgorithmInternalBuffers.html</anchorfile>
      <anchor>a3074d9a0482a6493e0d277100fe230bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JointDOFsDoubleArray</type>
      <name>u</name>
      <anchorfile>structiDynTree_1_1ArticulatedBodyAlgorithmInternalBuffers.html</anchorfile>
      <anchor>a18705d68a17253e373f1f414174540ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkVelArray</type>
      <name>linksVel</name>
      <anchorfile>structiDynTree_1_1ArticulatedBodyAlgorithmInternalBuffers.html</anchorfile>
      <anchor>aa3575bb3e88be7382c8fb23c984c0450</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkAccArray</type>
      <name>linksBiasAcceleration</name>
      <anchorfile>structiDynTree_1_1ArticulatedBodyAlgorithmInternalBuffers.html</anchorfile>
      <anchor>a7a97b87c9dfb97f73b6e5e2a6c75f1c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkAccArray</type>
      <name>linksAccelerations</name>
      <anchorfile>structiDynTree_1_1ArticulatedBodyAlgorithmInternalBuffers.html</anchorfile>
      <anchor>a7618ba222a09e0238d34b37921a4d2ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkArticulatedBodyInertias</type>
      <name>linkABIs</name>
      <anchorfile>structiDynTree_1_1ArticulatedBodyAlgorithmInternalBuffers.html</anchorfile>
      <anchor>a12af294aa9e5406d910c20f128899ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkWrenches</type>
      <name>linksBiasWrench</name>
      <anchorfile>structiDynTree_1_1ArticulatedBodyAlgorithmInternalBuffers.html</anchorfile>
      <anchor>ace4d9f7246717e5cb62ac131d5dc3a09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ArticulatedBodyInertia</name>
    <filename>classiDynTree_1_1ArticulatedBodyInertia.html</filename>
    <member kind="function">
      <type></type>
      <name>ArticulatedBodyInertia</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>a12f9a7346c21f9b7984debac097ca635</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArticulatedBodyInertia</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>a8ab0ff3fa532512b2a0adf3de8c9b48e</anchor>
      <arglist>(const double *in_data, const unsigned int in_rows, const unsigned int in_cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArticulatedBodyInertia</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>aac26350192a3c1904d96046d89310a3d</anchor>
      <arglist>(const iDynTree::SpatialInertia &amp;rigidBodyInertia)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArticulatedBodyInertia</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>a587c378f42665f7d2a873b54a39c90a7</anchor>
      <arglist>(const ArticulatedBodyInertia &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3x3 &amp;</type>
      <name>getLinearLinearSubmatrix</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>aaf75dbf6a7c0aac9596b78f24cf3e352</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix3x3 &amp;</type>
      <name>getLinearAngularSubmatrix</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>acbc7f4d430a7cbe75f80ce85b4593532</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix3x3 &amp;</type>
      <name>getAngularAngularSubmatrix</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>a08df50c369bc1eea5fe25ecbc5151d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3x3 &amp;</type>
      <name>getLinearLinearSubmatrix</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>ad3c85a1ddf6e4261579e7cb1dd818265</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3x3 &amp;</type>
      <name>getLinearAngularSubmatrix</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>ac31d53e6a235e4962e9e62daf91242fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3x3 &amp;</type>
      <name>getAngularAngularSubmatrix</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>aa62d419561f8615a2590c34e6462eccb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SpatialAcc</type>
      <name>applyInverse</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>a45f8719d91c14e05995194781264be13</anchor>
      <arglist>(const Wrench &amp;wrench) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>asMatrix</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>a1f56026d13ebaa206b443ec6e9540dd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>getInverse</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>ad1cf87241021c1120cea85b91c1fea67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArticulatedBodyInertia</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>ae8aa194058326ff74c70833b8705edd6</anchor>
      <arglist>(const ArticulatedBodyInertia &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ArticulatedBodyInertia</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>ad64bd042c2320be4600c8871f92f0811</anchor>
      <arglist>(const ArticulatedBodyInertia &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ArticulatedBodyInertia &amp;</type>
      <name>operator+=</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>a3dbfd2261cb2cd0f474cb1a8b5430177</anchor>
      <arglist>(const ArticulatedBodyInertia &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>aa30a087d496d8e588f4453fdc34df7cf</anchor>
      <arglist>(const SpatialMotionVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>a0a9260283b4c44503746022169e9cb45</anchor>
      <arglist>(const SpatialAcc &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>ac2c93bbab431993fa4a19be898246d22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArticulatedBodyInertia</type>
      <name>combine</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>a8a8abdc930e3db44eb7c7492dbee616b</anchor>
      <arglist>(const ArticulatedBodyInertia &amp;op1, const ArticulatedBodyInertia &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArticulatedBodyInertia</type>
      <name>ABADyadHelper</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>af77888261f29ec0b68b7a851ac000b57</anchor>
      <arglist>(const SpatialForceVector &amp;U, const double d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArticulatedBodyInertia</type>
      <name>ABADyadHelperLin</name>
      <anchorfile>classiDynTree_1_1ArticulatedBodyInertia.html</anchorfile>
      <anchor>ab2dee6af6ba2d6fcc3dfa50632c80517</anchor>
      <arglist>(const SpatialForceVector &amp;U, const double inv_d, const SpatialForceVector &amp;dU, const double d_inv_d)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::AttitudeEstimatorState</name>
    <filename>structiDynTree_1_1AttitudeEstimatorState.html</filename>
    <member kind="variable">
      <type>iDynTree::UnitQuaternion</type>
      <name>m_orientation</name>
      <anchorfile>structiDynTree_1_1AttitudeEstimatorState.html</anchorfile>
      <anchor>af52c5dec19f0d8b86adfd86d9aa826a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Vector3</type>
      <name>m_angular_velocity</name>
      <anchorfile>structiDynTree_1_1AttitudeEstimatorState.html</anchorfile>
      <anchor>a980cefaadc8f87a0d276cfd83b5b2c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Vector3</type>
      <name>m_gyroscope_bias</name>
      <anchorfile>structiDynTree_1_1AttitudeEstimatorState.html</anchorfile>
      <anchor>ae6279b61ae1fe0a734ccbc5cc32b6a2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::AttitudeMahonyFilter</name>
    <filename>classiDynTree_1_1AttitudeMahonyFilter.html</filename>
    <base>iDynTree::IAttitudeEstimator</base>
    <member kind="function">
      <type></type>
      <name>AttitudeMahonyFilter</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>ae2a22d925e2bfac7f4c3f6a91a3a1871</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useMagnetoMeterMeasurements</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>af4722cd241bbe3990de91bd3a8f29138</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConfidenceForMagnetometerMeasurements</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>ae0d9d819b5a9e7d2d4dc9ae95168c0d2</anchor>
      <arglist>(double confidence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGainkp</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>a6ca15476d3c86749bce4a61230e5959d</anchor>
      <arglist>(double kp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGainki</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>a17b6e6f323a3fc741351a68e3225a662</anchor>
      <arglist>(double ki)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeStepInSeconds</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>aae10fdac1916d45d912763443e246500</anchor>
      <arglist>(double timestepInSeconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGravityDirection</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>a2d04a24c139621ec0d036a18c721b02c</anchor>
      <arglist>(const iDynTree::Direction &amp;gravity_dir)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setParameters</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>aca94c3f5d2341a11d80c03914c9372a0</anchor>
      <arglist>(const AttitudeMahonyFilterParameters &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParameters</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>a1b7e9dc1d9d573bc739279c10487337a</anchor>
      <arglist>(AttitudeMahonyFilterParameters &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateFilterWithMeasurements</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>a761c1ce98405a7bf629e1e523e3649f5</anchor>
      <arglist>(const iDynTree::LinearAccelerometerMeasurements &amp;linAccMeas, const iDynTree::GyroscopeMeasurements &amp;gyroMeas) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateFilterWithMeasurements</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>aa87977f5cb6afd23f73aa526dc993ade</anchor>
      <arglist>(const iDynTree::LinearAccelerometerMeasurements &amp;linAccMeas, const iDynTree::GyroscopeMeasurements &amp;gyroMeas, const iDynTree::MagnetometerMeasurements &amp;magMeas) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>propagateStates</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>af743b419ed9b87c50cc3d3bd87c09ce0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getOrientationEstimateAsRotationMatrix</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>a17791aee32f963e4b1117625fb19a509</anchor>
      <arglist>(iDynTree::Rotation &amp;rot) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getOrientationEstimateAsQuaternion</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>a12b66b4f277bb7942e82eb970550878a</anchor>
      <arglist>(iDynTree::UnitQuaternion &amp;q) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getOrientationEstimateAsRPY</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>acae8174e86843da647341949ca29e17a</anchor>
      <arglist>(iDynTree::RPY &amp;rpy) override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getInternalStateSize</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>a14a59acedee3a36d1cb1a57c863f6e21</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getInternalState</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>ae5f871007add5e65389039743a88ab71</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;stateBuffer) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDefaultInternalInitialState</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>af275b53472f9fa6f5f146f1f5a302bdc</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;stateBuffer) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInternalState</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>a056cbfe2f712924c67609afcda054271</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;stateBuffer) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInternalStateInitialOrientation</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>a9f0c070353e6da5b2ad7b478de1eb7dd</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;orientationBuffer) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AttitudeMahonyFilterParameters</type>
      <name>m_params_mahony</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>ac0fc46ec94c50c7d38a193a204acf139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AttitudeEstimatorState</type>
      <name>m_state_mahony</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>ab40c1b03d4acc60dcdf9dc9dcdb6c9d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AttitudeEstimatorState</type>
      <name>m_initial_state_mahony</name>
      <anchorfile>classiDynTree_1_1AttitudeMahonyFilter.html</anchorfile>
      <anchor>a07413b093183b85df04fdbcfa241cec3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::AttitudeMahonyFilterParameters</name>
    <filename>structiDynTree_1_1AttitudeMahonyFilterParameters.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>time_step_in_seconds</name>
      <anchorfile>structiDynTree_1_1AttitudeMahonyFilterParameters.html</anchorfile>
      <anchor>a58df2c6120f64cbe5264821b9775f6b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>kp</name>
      <anchorfile>structiDynTree_1_1AttitudeMahonyFilterParameters.html</anchorfile>
      <anchor>a32e6e9a5a5a95d4060f7135a2b8f501c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ki</name>
      <anchorfile>structiDynTree_1_1AttitudeMahonyFilterParameters.html</anchorfile>
      <anchor>a81eeb7bbcd18f339cb1c0355be15c62a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_magnetometer_measurements</name>
      <anchorfile>structiDynTree_1_1AttitudeMahonyFilterParameters.html</anchorfile>
      <anchor>ac7cf816b7de8f77a8bb573903fd168b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>confidence_magnetometer_measurements</name>
      <anchorfile>structiDynTree_1_1AttitudeMahonyFilterParameters.html</anchorfile>
      <anchor>a8c0089a3102447cfe9527bce9a2e7ddd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::AttitudeQuaternionEKF</name>
    <filename>classiDynTree_1_1AttitudeQuaternionEKF.html</filename>
    <base>iDynTree::IAttitudeEstimator</base>
    <base>iDynTree::DiscreteExtendedKalmanFilterHelper</base>
    <member kind="function">
      <type></type>
      <name>AttitudeQuaternionEKF</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>a6ac6c60831a6e6e7d725f4a0fccb89bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParameters</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>a72b3f1dfb973ce781b7419d563ba9034</anchor>
      <arglist>(AttitudeQuaternionEKFParameters &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>a6e7703c18de1dc271848bfd0dc0ac95e</anchor>
      <arglist>(const AttitudeQuaternionEKFParameters &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGravityDirection</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>aff1960e49e08ce5219426f88ed38d9ce</anchor>
      <arglist>(const iDynTree::Direction &amp;gravity_dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeStepInSeconds</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>a56f991f11a96c646dda00856e0c3f2f8</anchor>
      <arglist>(double time_step_in_seconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBiasCorrelationTimeFactor</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>afeea4332a25849b1fd96708d6d7c42ee</anchor>
      <arglist>(double bias_correlation_time_factor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>useMagnetometerMeasurements</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>adbc3ebc4d6e60eb849b23ba32abd4a66</anchor>
      <arglist>(bool use_magnetometer_measurements)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setMeasurementNoiseVariance</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>a1246a70eb1035dfa8f2c6ff7d41b12c2</anchor>
      <arglist>(double acc, double mag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setSystemNoiseVariance</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>a06a0a22738cb1d87a14dea460a56b547</anchor>
      <arglist>(double gyro, double gyro_bias)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInitialStateCovariance</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>ab359a33634ff3c1aa789cb1feb3169a4</anchor>
      <arglist>(double orientation_var, double ang_vel_var, double gyro_bias_var)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initializeFilter</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>a97c97d04ff819678edc75e694b02a8ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateFilterWithMeasurements</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>addb65b053f2854685bb193318cfd5e6c</anchor>
      <arglist>(const iDynTree::LinearAccelerometerMeasurements &amp;linAccMeas, const iDynTree::GyroscopeMeasurements &amp;gyroMeas) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateFilterWithMeasurements</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>a066e3d8d073c3374c3c49cfc41bb4618</anchor>
      <arglist>(const iDynTree::LinearAccelerometerMeasurements &amp;linAccMeas, const iDynTree::GyroscopeMeasurements &amp;gyroMeas, const iDynTree::MagnetometerMeasurements &amp;magMeas) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>propagateStates</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>a6d06f0744427bd918a7175919176fa05</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getOrientationEstimateAsRotationMatrix</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>a0fd7d6c689f0ff66d799469d0fd1dbf0</anchor>
      <arglist>(iDynTree::Rotation &amp;rot) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getOrientationEstimateAsQuaternion</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>a01e03a0620f4abf473d8cf42c37528ea</anchor>
      <arglist>(iDynTree::UnitQuaternion &amp;q) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getOrientationEstimateAsRPY</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>a0fc087b7d9adc7384e008c8dae11677b</anchor>
      <arglist>(iDynTree::RPY &amp;rpy) override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getInternalStateSize</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>add647ea478071ebfc8d16a421c36f3ef</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getInternalState</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>a38b5c9a6cc64d28e33bb5ccf424b6622</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;stateBuffer) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDefaultInternalInitialState</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>a687b22236d1149388d9dae9bc3eed81f</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;stateBuffer) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInternalState</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>af2c3440e43f4a09841e7aacb977fc5f6</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;stateBuffer) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInternalStateInitialOrientation</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>aa7a6ab9ed9227c130dd6edc9fbe02e49</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;orientationBuffer) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfPredict</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a06e0c6ab212f148079af396e0eb69244</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfUpdate</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a3511ef7000edb1af2f22c750ac5ccb63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfInit</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a37450d1833a7ce6d7b2caec4e00c9a62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfInit</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a48dda1a9c2249dc1d7d38dbc6da69b8b</anchor>
      <arglist>(const size_t &amp;state_size, const size_t &amp;input_size, const size_t &amp;output_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ekfReset</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a236c419106fbe83a4651cdd8f28fb3f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfReset</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a5980548288752504e9e4758b532e4c66</anchor>
      <arglist>(const size_t &amp;state_size, const size_t &amp;input_size, const size_t &amp;output_size, const iDynTree::Span&lt; double &gt; &amp;x0, const iDynTree::Span&lt; double &gt; &amp;P0, const iDynTree::Span&lt; double &gt; &amp;Q, const iDynTree::Span&lt; double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfSetMeasurementVector</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a395b24fd4ae30bb88b35179ea80117cb</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfSetInputVector</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>af2ec69c3ded347027f494c84af300d45</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfSetInitialState</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>abcc0fd06681f866166e527abf303929e</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;x0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfSetStateCovariance</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a557ecd035b2ff1e2267d3f98c0cf3a35</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfSetSystemNoiseCovariance</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a927eee549a560c68d95cbea5b0cec797</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfSetMeasurementNoiseCovariance</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a0d1bd4ba94586c78c477a4a3af1fce0b</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ekfSetStateSize</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a47a4ba3b26206d2607d724866e4bfd1a</anchor>
      <arglist>(size_t dim_X)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ekfSetInputSize</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a301ab496750472b1681d509e30c75da1</anchor>
      <arglist>(size_t dim_U)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ekfSetOutputSize</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>af8e0003290ca166251c7d8bb4a80162d</anchor>
      <arglist>(size_t dim_Y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfGetStates</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a46b41687186a840fdd1b15288339c51e</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfGetStateCovariance</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a65ac546a68e8ee705927c5dd9b57eb11</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;P) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ignore</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a540be21bdc4ec8636da39190df3a3157</anchor>
      <arglist>(T &amp;&amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AttitudeEstimatorState</type>
      <name>m_state_qekf</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>aeba1557b81069aec88408f1d54b1ca9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AttitudeEstimatorState</type>
      <name>m_initial_state_qekf</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>a2f87de8c8b6ab893bee277896ff6f983</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AttitudeQuaternionEKFParameters</type>
      <name>m_params_qekf</name>
      <anchorfile>classiDynTree_1_1AttitudeQuaternionEKF.html</anchorfile>
      <anchor>ad6d8453c695937413e0f7885a87aad65</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::AttitudeQuaternionEKFParameters</name>
    <filename>structiDynTree_1_1AttitudeQuaternionEKFParameters.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>time_step_in_seconds</name>
      <anchorfile>structiDynTree_1_1AttitudeQuaternionEKFParameters.html</anchorfile>
      <anchor>aa7f9cfe773bc891cfe24de78430fccd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>bias_correlation_time_factor</name>
      <anchorfile>structiDynTree_1_1AttitudeQuaternionEKFParameters.html</anchorfile>
      <anchor>a36632047df81704134f3e68aa4e3041c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>accelerometer_noise_variance</name>
      <anchorfile>structiDynTree_1_1AttitudeQuaternionEKFParameters.html</anchorfile>
      <anchor>a7240502333c0ddceee465fe196f24564</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>magnetometer_noise_variance</name>
      <anchorfile>structiDynTree_1_1AttitudeQuaternionEKFParameters.html</anchorfile>
      <anchor>a7822b825b05c3f0ab6cc0888e62831c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>gyroscope_noise_variance</name>
      <anchorfile>structiDynTree_1_1AttitudeQuaternionEKFParameters.html</anchorfile>
      <anchor>a62569b4408f25fc383fec5378c56c6b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>gyro_bias_noise_variance</name>
      <anchorfile>structiDynTree_1_1AttitudeQuaternionEKFParameters.html</anchorfile>
      <anchor>a1713af1c3f17f856ad34127372590abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>initial_orientation_error_variance</name>
      <anchorfile>structiDynTree_1_1AttitudeQuaternionEKFParameters.html</anchorfile>
      <anchor>ab89d382744fb69db1570767a960b0b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>initial_ang_vel_error_variance</name>
      <anchorfile>structiDynTree_1_1AttitudeQuaternionEKFParameters.html</anchorfile>
      <anchor>adebf29310eb3bbe3aa2e5f02baad3d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>initial_gyro_bias_error_variance</name>
      <anchorfile>structiDynTree_1_1AttitudeQuaternionEKFParameters.html</anchorfile>
      <anchor>a746a917e3743a21c74d46d21970c3ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_magnetometer_measurements</name>
      <anchorfile>structiDynTree_1_1AttitudeQuaternionEKFParameters.html</anchorfile>
      <anchor>ad6736d3272d84629e5e78fe9e5b60d96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ChartsManager::ChartInfo::Axis</name>
    <filename>structChartsManager_1_1ChartInfo_1_1Axis.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>AxisType</name>
      <anchorfile>structChartsManager_1_1ChartInfo_1_1Axis.html</anchorfile>
      <anchor>a21fc2288a3267eab5cb93ec63f374831</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AxisTypeFixed</name>
      <anchorfile>structChartsManager_1_1ChartInfo_1_1Axis.html</anchorfile>
      <anchor>a21fc2288a3267eab5cb93ec63f374831aaeaad0a569d7bfbf35bbbe47b8ec2c4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AxisTypeAuto</name>
      <anchorfile>structChartsManager_1_1ChartInfo_1_1Axis.html</anchorfile>
      <anchor>a21fc2288a3267eab5cb93ec63f374831a5635ce6d70a027005f073bf274e9d5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AxisTypeDynamic</name>
      <anchorfile>structChartsManager_1_1ChartInfo_1_1Axis.html</anchorfile>
      <anchor>a21fc2288a3267eab5cb93ec63f374831a36d548f1e28043a12a33710f7aff7d8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AxisTypeFixed</name>
      <anchorfile>structChartsManager_1_1ChartInfo_1_1Axis.html</anchorfile>
      <anchor>a21fc2288a3267eab5cb93ec63f374831aaeaad0a569d7bfbf35bbbe47b8ec2c4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AxisTypeAuto</name>
      <anchorfile>structChartsManager_1_1ChartInfo_1_1Axis.html</anchorfile>
      <anchor>a21fc2288a3267eab5cb93ec63f374831a5635ce6d70a027005f073bf274e9d5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AxisTypeDynamic</name>
      <anchorfile>structChartsManager_1_1ChartInfo_1_1Axis.html</anchorfile>
      <anchor>a21fc2288a3267eab5cb93ec63f374831a36d548f1e28043a12a33710f7aff7d8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum ChartsManager::ChartInfo::Axis::AxisType</type>
      <name>axisType</name>
      <anchorfile>structChartsManager_1_1ChartInfo_1_1Axis.html</anchorfile>
      <anchor>a8c61280086e219fdd7e7a61347683be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min</name>
      <anchorfile>structChartsManager_1_1ChartInfo_1_1Axis.html</anchorfile>
      <anchor>a3ca57c1b87f2dc38154d965cd7ac498d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max</name>
      <anchorfile>structChartsManager_1_1ChartInfo_1_1Axis.html</anchorfile>
      <anchor>a48e1bedb2ea6454068b7a04febca90f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Axis</name>
    <filename>classiDynTree_1_1Axis.html</filename>
    <member kind="function">
      <type></type>
      <name>Axis</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>aa1aff15197c9bdb23d6a8a397cfa5d79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Axis</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>a56cbca5b0f569174b2f8ce96b2b645e0</anchor>
      <arglist>(const Direction &amp;_direction, const Position &amp;_origin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Axis</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>add0c40dde7f3dc9e4c05f633a74354b2</anchor>
      <arglist>(const Axis &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Direction &amp;</type>
      <name>getDirection</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>aee279a40e09bb3f222d0ee77a3461249</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Position &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>a67f6db96ec96966e49e0d76069f23817</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirection</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>aea61e891277aabb22e1067404d6d50d5</anchor>
      <arglist>(const Direction &amp;_direction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>ae672b6d583b8d07ffda719bfeb4de766</anchor>
      <arglist>(const Position &amp;_position)</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>getRotationTransform</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>a80b21674827ef8701daed4addc4e1ee1</anchor>
      <arglist>(const double theta) const</arglist>
    </member>
    <member kind="function">
      <type>TransformDerivative</type>
      <name>getRotationTransformDerivative</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>a134ff8af97722174e27fbb47db6fa729</anchor>
      <arglist>(const double theta) const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>getRotationTwist</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>a67346ce78cfcf70550028606af8fd8b5</anchor>
      <arglist>(const double dtheta) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialAcc</type>
      <name>getRotationSpatialAcc</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>a847202356c483a5b60f628c22712c04b</anchor>
      <arglist>(const double d2theta) const</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>getTranslationTransform</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>a57a3799baeaa916d82a1a010631b5cb3</anchor>
      <arglist>(const double dist) const</arglist>
    </member>
    <member kind="function">
      <type>TransformDerivative</type>
      <name>getTranslationTransformDerivative</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>a215d3dcc5c1da6293c2576905ab046fd</anchor>
      <arglist>(const double) const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>getTranslationTwist</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>a8cee386983f00c053a3632c0c061839f</anchor>
      <arglist>(const double ddist) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialAcc</type>
      <name>getTranslationSpatialAcc</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>a1355ccdd4ea9f7dbf775920e3b2a694c</anchor>
      <arglist>(const double d2dist) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParallel</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>a5f9e8b8b7d511a6662d21be27570b1c4</anchor>
      <arglist>(const Axis &amp;otherAxis, const double tolerance) const</arglist>
    </member>
    <member kind="function">
      <type>Axis</type>
      <name>reverse</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>ab473268436d3549692c5ef59b7ad5730</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>ad33d0ab60bc41164780144474606f4e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>a80528ce33353f585f61f967e86f9e9ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>ad33d0ab60bc41164780144474606f4e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1Axis.html</anchorfile>
      <anchor>a80528ce33353f585f61f967e86f9e9ee</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KDL::CoDyCo::Regressors::baseDynamicsRegressor</name>
    <filename>classKDL_1_1CoDyCo_1_1Regressors_1_1baseDynamicsRegressor.html</filename>
    <base>KDL::CoDyCo::Regressors::DynamicRegressorInterface</base>
    <member kind="function">
      <type></type>
      <name>baseDynamicsRegressor</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1baseDynamicsRegressor.html</anchorfile>
      <anchor>a29b1acbc9c85263fa4582cad903aaacf</anchor>
      <arglist>(const KDL::CoDyCo::UndirectedTree &amp;_undirected_tree, const std::vector&lt; int &gt; &amp;_linkIndices2regrCols, bool _verbose=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~baseDynamicsRegressor</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1baseDynamicsRegressor.html</anchorfile>
      <anchor>a346c69e4065899af5064139253f08eb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNrOfOutputs</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1baseDynamicsRegressor.html</anchorfile>
      <anchor>a9e67e93daa0cb6e79ba0a6e0e22d2f1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; int &gt;</type>
      <name>getRelativeJunctions</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1baseDynamicsRegressor.html</anchorfile>
      <anchor>a810b5703982617af63858164310a02ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iDynTree::Regressors::DynamicsRegressorParametersList</type>
      <name>getUsedParameters</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1baseDynamicsRegressor.html</anchorfile>
      <anchor>a09c1b5ef903d6b036f6afcf867905cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setGlobalParameters</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1baseDynamicsRegressor.html</anchorfile>
      <anchor>abfd7d91d080a284ba808e851d660fc13</anchor>
      <arglist>(const iDynTree::Regressors::DynamicsRegressorParametersList &amp;globalParameters)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeRegressor</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1baseDynamicsRegressor.html</anchorfile>
      <anchor>a34bcac7c12c12b9caf17b142c48fbf4b</anchor>
      <arglist>(const KDL::JntArray &amp;q, const KDL::JntArray &amp;q_dot, const KDL::JntArray &amp;q_dotdot, const std::vector&lt; KDL::Frame &gt; &amp;X_dynamic_base, const std::vector&lt; KDL::Twist &gt; &amp;v, const std::vector&lt; KDL::Twist &gt; &amp;a, const iDynTree::SensorsMeasurements &amp;measured_wrenches, const KDL::JntArray &amp;measured_torques, Eigen::MatrixXd &amp;regressor_matrix, Eigen::VectorXd &amp;known_terms)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>configure</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1baseDynamicsRegressor.html</anchorfile>
      <anchor>abcf842f8d78badfa3961c1c360f9b474</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::BerdyDynamicVariable</name>
    <filename>structiDynTree_1_1BerdyDynamicVariable.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structiDynTree_1_1BerdyDynamicVariable.html</anchorfile>
      <anchor>aec4742379db719b896f9c548c7ce2701</anchor>
      <arglist>(const struct BerdyDynamicVariable &amp;variable) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structiDynTree_1_1BerdyDynamicVariable.html</anchorfile>
      <anchor>ab5a01f2e4131b103356568173de952eb</anchor>
      <arglist>(const struct BerdyDynamicVariable &amp;variable) const</arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::BerdyDynamicVariablesTypes</type>
      <name>type</name>
      <anchorfile>structiDynTree_1_1BerdyDynamicVariable.html</anchorfile>
      <anchor>a589e92c8f4542ad8b0bab669103fdac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>id</name>
      <anchorfile>structiDynTree_1_1BerdyDynamicVariable.html</anchorfile>
      <anchor>aab0a375da4d5da6c8c51da7d076fcaa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::IndexRange</type>
      <name>range</name>
      <anchorfile>structiDynTree_1_1BerdyDynamicVariable.html</anchorfile>
      <anchor>a16199a3b4bd74df1a8578ecf066e1524</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::BerdyHelper</name>
    <filename>classiDynTree_1_1BerdyHelper.html</filename>
    <member kind="function">
      <type></type>
      <name>BerdyHelper</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a87d946099a5c1491b7b5143eea33cbea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Model &amp;</type>
      <name>model</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>af3cd75f6763e81d3be4d66dae979f63b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SensorsList &amp;</type>
      <name>sensors</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a99bb3424d3a848eb588a26ef8b9f81b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traversal &amp;</type>
      <name>dynamicTraversal</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a21be2b3b1cd628ea71db2aaa35aaf526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Model &amp;</type>
      <name>model</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a8f2859f241d810df22016dfe2a9bf0ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SensorsList &amp;</type>
      <name>sensors</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a800333718265b4f00c2f348a086c5e6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a1e159c73e14672efc1a4ad5db4e4c070</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a4570e41df3b6dfedd00fe4dfcc2bc02b</anchor>
      <arglist>(const Model &amp;model, const SensorsList &amp;sensors, const BerdyOptions options=BerdyOptions())</arglist>
    </member>
    <member kind="function">
      <type>BerdyOptions</type>
      <name>getOptions</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a744e3d20ec3a98f80ab341f2201c204e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfDynamicVariables</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a47b69a027609e28259584304ed786ff9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfDynamicEquations</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a8d104eb5b61cea207e4d2655530d5c61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfSensorsMeasurements</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a5931a1798fdabdcd745790b3e76270c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resizeAndZeroBerdyMatrices</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a07ac9f8c9edc4a8f1790b12bb8d2afb2</anchor>
      <arglist>(SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;D, VectorDynSize &amp;bD, SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;Y, VectorDynSize &amp;bY)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resizeAndZeroBerdyMatrices</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a227c6d0eb94a11aa3a37888e36e0b407</anchor>
      <arglist>(MatrixDynSize &amp;D, VectorDynSize &amp;bD, MatrixDynSize &amp;Y, VectorDynSize &amp;bY)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBerdyMatrices</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a2ae3488e237da8123143073239a9392a</anchor>
      <arglist>(SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;D, VectorDynSize &amp;bD, SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;Y, VectorDynSize &amp;bY)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBerdyMatrices</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>adb30abcc23e36497be55219958a10f4a</anchor>
      <arglist>(MatrixDynSize &amp;D, VectorDynSize &amp;bD, MatrixDynSize &amp;Y, VectorDynSize &amp;bY)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; BerdySensor &gt; &amp;</type>
      <name>getSensorsOrdering</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a38f9787519fae69ea139de2c41096b5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndexRange</type>
      <name>getRangeSensorVariable</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>afec80ee26f3dc3314b9adf89d9a48ea7</anchor>
      <arglist>(const SensorType type, const unsigned int sensorIdx) const</arglist>
    </member>
    <member kind="function">
      <type>IndexRange</type>
      <name>getRangeDOFSensorVariable</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a872306fd0944d855f90f4c02af249911</anchor>
      <arglist>(const BerdySensorTypes sensorType, const DOFIndex idx) const</arglist>
    </member>
    <member kind="function">
      <type>IndexRange</type>
      <name>getRangeJointSensorVariable</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>adeea4eb63a190a5cb05223e877d1cd73</anchor>
      <arglist>(const BerdySensorTypes sensorType, const JointIndex idx) const</arglist>
    </member>
    <member kind="function">
      <type>IndexRange</type>
      <name>getRangeLinkSensorVariable</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>aaef6e11574a175497e3788a6f21b2121</anchor>
      <arglist>(const BerdySensorTypes sensorType, const LinkIndex idx) const</arglist>
    </member>
    <member kind="function">
      <type>IndexRange</type>
      <name>getRangeLinkVariable</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>adba971ab3536d551efc4cfb0ed101486</anchor>
      <arglist>(const BerdyDynamicVariablesTypes dynamicVariableType, const LinkIndex idx) const</arglist>
    </member>
    <member kind="function">
      <type>IndexRange</type>
      <name>getRangeJointVariable</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>aaa87e8a4cbe18717bfe1b85d8507d283</anchor>
      <arglist>(const BerdyDynamicVariablesTypes dynamicVariableType, const JointIndex idx) const</arglist>
    </member>
    <member kind="function">
      <type>IndexRange</type>
      <name>getRangeDOFVariable</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a46de7046800d2515c76f07c82806234a</anchor>
      <arglist>(const BerdyDynamicVariablesTypes dynamicVariableType, const DOFIndex idx) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; BerdyDynamicVariable &gt; &amp;</type>
      <name>getDynamicVariablesOrdering</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a631da759fb949ae8242cfda4f2b8fc81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>serializeDynamicVariables</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>ab36505d65fe931c1457d1f3401816d6b</anchor>
      <arglist>(LinkProperAccArray &amp;properAccs, LinkNetTotalWrenchesWithoutGravity &amp;netTotalWrenchesWithoutGrav, LinkNetExternalWrenches &amp;netExtWrenches, LinkInternalWrenches &amp;linkJointWrenches, JointDOFsDoubleArray &amp;jointTorques, JointDOFsDoubleArray &amp;jointAccs, VectorDynSize &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>serializeSensorVariables</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a7d6d9e5c9e4a9f226ebccecfa2caf6c6</anchor>
      <arglist>(SensorsMeasurements &amp;sensMeas, LinkNetExternalWrenches &amp;netExtWrenches, JointDOFsDoubleArray &amp;jointTorques, JointDOFsDoubleArray &amp;jointAccs, LinkInternalWrenches &amp;linkJointWrenches, VectorDynSize &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>serializeDynamicVariablesComputedFromFixedBaseRNEA</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>ab2bd06be1f6e8bdc30192c4a2f1daa56</anchor>
      <arglist>(JointDOFsDoubleArray &amp;jointAccs, LinkNetExternalWrenches &amp;netExtWrenches, VectorDynSize &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extractJointTorquesFromDynamicVariables</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a4d20c43dafa947578e70ee7205bc8888</anchor>
      <arglist>(const VectorDynSize &amp;d, const VectorDynSize &amp;jointPos, VectorDynSize &amp;jointTorques) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extractLinkNetExternalWrenchesFromDynamicVariables</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a27f4613ae2247590ff8040b123d425ef</anchor>
      <arglist>(const VectorDynSize &amp;d, LinkNetExternalWrenches &amp;netExtWrenches) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateKinematicsFromFloatingBase</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a0fca122aca01f6020d2ee1b42a24dab5</anchor>
      <arglist>(const JointPosDoubleArray &amp;jointPos, const JointDOFsDoubleArray &amp;jointVel, const FrameIndex &amp;floatingFrame, const Vector3 &amp;angularVel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateKinematicsFromFixedBase</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>adb2510174af7732d539cba93525917d1</anchor>
      <arglist>(const JointPosDoubleArray &amp;jointPos, const JointDOFsDoubleArray &amp;jointVel, const FrameIndex &amp;fixedFrame, const Vector3 &amp;gravity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateKinematicsFromTraversalFixedBase</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a09a6af1d970848a25f78cac46ddd4aab</anchor>
      <arglist>(const JointPosDoubleArray &amp;jointPos, const JointDOFsDoubleArray &amp;jointVel, const Vector3 &amp;gravity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setNetExternalWrenchMeasurementFrame</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a71dbc8dc62b4f35ddb6eecee36701493</anchor>
      <arglist>(const LinkIndex lnkIndex, const Transform &amp;link_H_contact)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNetExternalWrenchMeasurementFrame</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>adeff7572b3c19f5e0b265384f8eba8f4</anchor>
      <arglist>(const LinkIndex lnkIndex, Transform &amp;link_H_contact) const</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>dofAccelerationOffset</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>aad48a7580411076dee094425eaf68b75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>dofTorquesOffset</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>adc34fedb4bf6b7f1b18f66fa66aed308</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>netExtWrenchOffset</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a0da9493e128ce7800adb90aa7cca8a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>jointWrenchOffset</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a624f21fbf5ecdc33119f707d39528e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; JointIndex &gt;</type>
      <name>wrenchSensors</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a1bf2f8c62b8afde8b687a02191a3501b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_t &gt;</type>
      <name>jntIdxToOffset</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>af8a24a4b0fae237d14a8b4931c706f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateKinematicsFromFloatingBase</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a0fca122aca01f6020d2ee1b42a24dab5</anchor>
      <arglist>(const JointPosDoubleArray &amp;jointPos, const JointDOFsDoubleArray &amp;jointVel, const FrameIndex &amp;floatingFrame, const Vector3 &amp;angularVel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateKinematicsFromFixedBase</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>adb2510174af7732d539cba93525917d1</anchor>
      <arglist>(const JointPosDoubleArray &amp;jointPos, const JointDOFsDoubleArray &amp;jointVel, const FrameIndex &amp;fixedFrame, const Vector3 &amp;gravity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateKinematicsFromTraversalFixedBase</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a09a6af1d970848a25f78cac46ddd4aab</anchor>
      <arglist>(const JointPosDoubleArray &amp;jointPos, const JointDOFsDoubleArray &amp;jointVel, const Vector3 &amp;gravity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setNetExternalWrenchMeasurementFrame</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>a71dbc8dc62b4f35ddb6eecee36701493</anchor>
      <arglist>(const LinkIndex lnkIndex, const Transform &amp;link_H_contact)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNetExternalWrenchMeasurementFrame</name>
      <anchorfile>classiDynTree_1_1BerdyHelper.html</anchorfile>
      <anchor>adeff7572b3c19f5e0b265384f8eba8f4</anchor>
      <arglist>(const LinkIndex lnkIndex, Transform &amp;link_H_contact) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::BerdyOptions</name>
    <filename>structiDynTree_1_1BerdyOptions.html</filename>
    <member kind="function">
      <type></type>
      <name>BerdyOptions</name>
      <anchorfile>structiDynTree_1_1BerdyOptions.html</anchorfile>
      <anchor>ac9aab7a6f83181df7b667c049665dc03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkConsistency</name>
      <anchorfile>structiDynTree_1_1BerdyOptions.html</anchorfile>
      <anchor>a1b9fc6eff357d120844ee98f48cc28a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>BerdyVariants</type>
      <name>berdyVariant</name>
      <anchorfile>structiDynTree_1_1BerdyOptions.html</anchorfile>
      <anchor>a19628b15cf3bbcf28b976c39b437d006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>includeAllNetExternalWrenchesAsDynamicVariables</name>
      <anchorfile>structiDynTree_1_1BerdyOptions.html</anchorfile>
      <anchor>af051c7f89d8e3dc8d7b455c587344a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>includeAllJointAccelerationsAsSensors</name>
      <anchorfile>structiDynTree_1_1BerdyOptions.html</anchorfile>
      <anchor>aea6e6fac0efefbe5add4a140b1dcaccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>includeAllJointTorquesAsSensors</name>
      <anchorfile>structiDynTree_1_1BerdyOptions.html</anchorfile>
      <anchor>af70033b6bbcded8f40b50946ecb66107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>includeAllNetExternalWrenchesAsSensors</name>
      <anchorfile>structiDynTree_1_1BerdyOptions.html</anchorfile>
      <anchor>ae3072e1e8330ff15fb6fbc4f838aeb89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>includeFixedBaseExternalWrench</name>
      <anchorfile>structiDynTree_1_1BerdyOptions.html</anchorfile>
      <anchor>ad8132d863ced1232d12fc0ef0053c6d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>jointOnWhichTheInternalWrenchIsMeasured</name>
      <anchorfile>structiDynTree_1_1BerdyOptions.html</anchorfile>
      <anchor>a963fa2e88833e09594b13a22f788c5cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>baseLink</name>
      <anchorfile>structiDynTree_1_1BerdyOptions.html</anchorfile>
      <anchor>a0fa96e6bdabbcf1165d7027de1977698</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::BerdySensor</name>
    <filename>structiDynTree_1_1BerdySensor.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structiDynTree_1_1BerdySensor.html</anchorfile>
      <anchor>aa91108da48e5b5d3222746b039c80139</anchor>
      <arglist>(const struct BerdySensor &amp;sensor) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structiDynTree_1_1BerdySensor.html</anchorfile>
      <anchor>aec02e210d6aec35287642c9b6a051974</anchor>
      <arglist>(const struct BerdySensor &amp;sensor) const</arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::BerdySensorTypes</type>
      <name>type</name>
      <anchorfile>structiDynTree_1_1BerdySensor.html</anchorfile>
      <anchor>aa22d89e1f66022ef86b9343b47e287e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>id</name>
      <anchorfile>structiDynTree_1_1BerdySensor.html</anchorfile>
      <anchor>a0207a3c90241c0519a529b23042af393</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::IndexRange</type>
      <name>range</name>
      <anchorfile>structiDynTree_1_1BerdySensor.html</anchorfile>
      <anchor>a7f773ad0965cddf3e56f637fca860716</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::BerdySparseMAPSolver</name>
    <filename>classiDynTree_1_1BerdySparseMAPSolver.html</filename>
    <class kind="class">iDynTree::BerdySparseMAPSolver::BerdySparseMAPSolverPimpl</class>
    <member kind="function">
      <type></type>
      <name>BerdySparseMAPSolver</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>a130a453068579e964dfab978436ea81c</anchor>
      <arglist>(BerdyHelper &amp;berdyHelper)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BerdySparseMAPSolver</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>abd25b426bcc0dbbe1c46caef70f21593</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDynamicsConstraintsPriorCovariance</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>a701f6cef4a81edd47dad7dceee9bbf7d</anchor>
      <arglist>(const iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;covariance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDynamicsRegularizationPriorCovariance</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>a9dce012842a2844047c8619e76f8d580</anchor>
      <arglist>(const iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;covariance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDynamicsRegularizationPriorExpectedValue</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>a8c7420a41f6c78d33d100f93c85e15b8</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;expectedValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMeasurementsPriorCovariance</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>a0c252cfe0ac42168fd3e21d92dac8a5e</anchor>
      <arglist>(const iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;covariance)</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;</type>
      <name>dynamicsConstraintsPriorCovarianceInverse</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>aa8606c231a3861aa7d51c0e86bb45a67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;</type>
      <name>dynamicsConstraintsPriorCovarianceInverse</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>acb7ba681153221dc8b879bc474183917</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;</type>
      <name>dynamicsRegularizationPriorCovarianceInverse</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>a1e8d456cc87466b91a8e2056ecea5707</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;</type>
      <name>dynamicsRegularizationPriorCovarianceInverse</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>af7b32d6fbdd32d0f4b92d5c48e346513</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::VectorDynSize &amp;</type>
      <name>dynamicsRegularizationPriorExpectedValue</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>aaf687f4a8a93e3c6e7b6ddc2ca6d0908</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::VectorDynSize &amp;</type>
      <name>dynamicsRegularizationPriorExpectedValue</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>a7f7599c7b130597481d94814cf7bc482</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;</type>
      <name>measurementsPriorCovarianceInverse</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>a67aad3f03ef19affe8f17addb48b03a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;</type>
      <name>measurementsPriorCovarianceInverse</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>a79b35f9e343c0da47a132c30746ef79c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>afa78c94fadaeb70a2bc1df863773bb5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>a94b057c0979d8fa75fa757032aff800f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateEstimateInformationFixedBase</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>a9688a8bcc6393a250cbd7d06ca17d792</anchor>
      <arglist>(const JointPosDoubleArray &amp;jointsConfiguration, const JointDOFsDoubleArray &amp;jointsVelocity, const FrameIndex fixedFrame, const Vector3 &amp;gravityInFixedFrame, const VectorDynSize &amp;measurements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateEstimateInformationFloatingBase</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>afc9692b826414fc1590aaf491f9a47fd</anchor>
      <arglist>(const JointPosDoubleArray &amp;jointsConfiguration, const JointDOFsDoubleArray &amp;jointsVelocity, const FrameIndex floatingFrame, const Vector3 &amp;bodyAngularVelocityOfSpecifiedFrame, const VectorDynSize &amp;measurements)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doEstimate</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>a261899e0a79f8e3fdcc2f22617b8d71f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLastEstimate</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>a754382b5a9743a48f9762022b6d75289</anchor>
      <arglist>(iDynTree::VectorDynSize &amp;lastEstimate) const</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::VectorDynSize &amp;</type>
      <name>getLastEstimate</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver.html</anchorfile>
      <anchor>a6d620205c356a470aa758f2db103706b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::BerdySparseMAPSolver::BerdySparseMAPSolverPimpl</name>
    <filename>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</filename>
    <member kind="function">
      <type></type>
      <name>BerdySparseMAPSolverPimpl</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>a73a70762877ac80e10ecd5cbf262a08b</anchor>
      <arglist>(BerdyHelper &amp;berdyHelper)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>aef17c8b4c849f5b90575f3b128aac653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeMAP</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>a36d461be4842affbcb65b322b51b3d6f</anchor>
      <arglist>(bool computePermutation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>invertSparseMatrix</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>adc4ea7514a20cae2df6e585d92d2c293</anchor>
      <arglist>(const iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;in, iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;inverted)</arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::BerdyHelper &amp;</type>
      <name>berdy</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>a00f10de1758b6f270aebb1f417e0f63e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>a8e3f9af5296bdb9d0ff4b0451a6b9b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt;</type>
      <name>priorDynamicsConstraintsCovarianceInverse</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>a13c339e87c7e5cb0832349e57c0e1e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt;</type>
      <name>priorDynamicsRegularizationCovarianceInverse</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>ab9c4e5e1b65dde7eb519439a8772985a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>priorDynamicsRegularizationExpectedValue</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>a6b3ae6dc766d88d17c040285c854af75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt;</type>
      <name>priorMeasurementsCovarianceInverse</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>ae4fa8cc736181c32c814495e3f80e8f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt;</type>
      <name>dynamicsConstraintsMatrix</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>af17c7ffcf497ef0cb14983664caf61b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt;</type>
      <name>measurementsMatrix</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>aa05fee989b04ea9c37ce00958d1547a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>dynamicsConstraintsBias</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>ae85f25ccf37c9a4d6bc4b8bbd903e053</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>measurementsBias</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>ae03085fd55b99d586f8ae00621c41d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::JointPosDoubleArray</type>
      <name>jointsConfiguration</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>a29599314ae41de10bd1af7eedb1e80a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::JointDOFsDoubleArray</type>
      <name>jointsVelocity</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>a594a0367c524a0caf2a6feb9685fad76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>measurements</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>a80d38682de732946ec41f3ad2dec111d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>expectedDynamicsPrior</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>a88e3daaaef97cd27994cf7ee021218ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::SparseMatrix&lt; double, Eigen::ColMajor &gt;</type>
      <name>covarianceDynamicsPriorInverse</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>a66e9d9706f88fc5f03bd6202fe8f56d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>expectedDynamicsPriorRHS</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>ab73d682414d23259b832acb7e9b20dca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>expectedDynamicsAPosteriori</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>afb7b1bd7321c7eaf9cb64d85818a8951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::SparseMatrix&lt; double, Eigen::ColMajor &gt;</type>
      <name>covarianceDynamicsAPosterioriInverse</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>af1de2bf9c1e5893908e4ff3474943e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>expectedDynamicsAPosterioriRHS</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>ae21544cdfff294162b8e3560bbfc5195</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::SimplicialLDLT&lt; Eigen::SparseMatrix&lt; double, Eigen::ColMajor &gt; &gt;</type>
      <name>covarianceDynamicsPriorInverseDecomposition</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>a46987ef1037f7680c8c16d27bcfb99b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::SimplicialLDLT&lt; Eigen::SparseMatrix&lt; double, Eigen::ColMajor &gt; &gt;</type>
      <name>covarianceDynamicsAPosterioriInverseDecomposition</name>
      <anchorfile>classiDynTree_1_1BerdySparseMAPSolver_1_1BerdySparseMAPSolverPimpl.html</anchorfile>
      <anchor>a148c1a6e1719878dca38e913591eeb44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::BipedFootContactClassifier</name>
    <filename>classiDynTree_1_1BipedFootContactClassifier.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>contactFoot</name>
      <anchorfile>classiDynTree_1_1BipedFootContactClassifier.html</anchorfile>
      <anchor>af20af239a0c6b136d86155c97f12d49c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEFT_FOOT</name>
      <anchorfile>classiDynTree_1_1BipedFootContactClassifier.html</anchorfile>
      <anchor>af20af239a0c6b136d86155c97f12d49ca585e09db1a02009343fb9a4b16876ce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RIGHT_FOOT</name>
      <anchorfile>classiDynTree_1_1BipedFootContactClassifier.html</anchorfile>
      <anchor>af20af239a0c6b136d86155c97f12d49ca0b9fe2ce907f396ca3b39082ae8ed18e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_FOOT</name>
      <anchorfile>classiDynTree_1_1BipedFootContactClassifier.html</anchorfile>
      <anchor>af20af239a0c6b136d86155c97f12d49cae186a4c36f4ad5cd9df0373aec20aac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEFT_FOOT</name>
      <anchorfile>classiDynTree_1_1BipedFootContactClassifier.html</anchorfile>
      <anchor>af20af239a0c6b136d86155c97f12d49ca585e09db1a02009343fb9a4b16876ce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RIGHT_FOOT</name>
      <anchorfile>classiDynTree_1_1BipedFootContactClassifier.html</anchorfile>
      <anchor>af20af239a0c6b136d86155c97f12d49ca0b9fe2ce907f396ca3b39082ae8ed18e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_FOOT</name>
      <anchorfile>classiDynTree_1_1BipedFootContactClassifier.html</anchorfile>
      <anchor>af20af239a0c6b136d86155c97f12d49cae186a4c36f4ad5cd9df0373aec20aac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BipedFootContactClassifier</name>
      <anchorfile>classiDynTree_1_1BipedFootContactClassifier.html</anchorfile>
      <anchor>a6ef3012ada7c652d5b0fe42e4a0f7a99</anchor>
      <arglist>(const SchmittParams &amp;leftFootSchmittParams, const SchmittParams &amp;rightFootSchmittParams)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateFootContactState</name>
      <anchorfile>classiDynTree_1_1BipedFootContactClassifier.html</anchorfile>
      <anchor>abcca793ac3370f48466c7ccd03d3745c</anchor>
      <arglist>(double currentTime, double leftFootNormalForce, double rightFootNormalForce)</arglist>
    </member>
    <member kind="function">
      <type>contactFoot</type>
      <name>getPrimaryFoot</name>
      <anchorfile>classiDynTree_1_1BipedFootContactClassifier.html</anchorfile>
      <anchor>a3670a1ea2e0a0daf25c774239207bc64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLeftFootContactState</name>
      <anchorfile>classiDynTree_1_1BipedFootContactClassifier.html</anchorfile>
      <anchor>aacebedbb7eb0332f2184ac2c5ce30015</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRightFootContactState</name>
      <anchorfile>classiDynTree_1_1BipedFootContactClassifier.html</anchorfile>
      <anchor>a7ce32a5902d9ebe0fd46d0be2ef7dc12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContactSwitchingPattern</name>
      <anchorfile>classiDynTree_1_1BipedFootContactClassifier.html</anchorfile>
      <anchor>a2bc82cacefd7f593f8fd1ac5a086a8b4</anchor>
      <arglist>(SwitchingPattern pattern)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrimaryFoot</name>
      <anchorfile>classiDynTree_1_1BipedFootContactClassifier.html</anchorfile>
      <anchor>a9fd24cc710528f2f992b28c858fde974</anchor>
      <arglist>(contactFoot foot)</arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; ContactStateMachine &gt;</type>
      <name>m_leftFootContactClassifier</name>
      <anchorfile>classiDynTree_1_1BipedFootContactClassifier.html</anchorfile>
      <anchor>a4f87e55eb99efdd923345b87ac31fd1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; ContactStateMachine &gt;</type>
      <name>m_rightFootContactClassifier</name>
      <anchorfile>classiDynTree_1_1BipedFootContactClassifier.html</anchorfile>
      <anchor>a3b3376779f100d06906e53cd32ebd7ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::BoundingBoxProjectionConstraint</name>
    <filename>classiDynTree_1_1BoundingBoxProjectionConstraint.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setActive</name>
      <anchorfile>classiDynTree_1_1BoundingBoxProjectionConstraint.html</anchorfile>
      <anchor>ad950afd6663135de4b7656d7be278235</anchor>
      <arglist>(const bool isActive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classiDynTree_1_1BoundingBoxProjectionConstraint.html</anchorfile>
      <anchor>a81936e6f83d733acb670173d3b30141d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfConstraints</name>
      <anchorfile>classiDynTree_1_1BoundingBoxProjectionConstraint.html</anchorfile>
      <anchor>a804e9f94e56b62cf35d269eb0fed0639</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>buildBoundingBox</name>
      <anchorfile>classiDynTree_1_1BoundingBoxProjectionConstraint.html</anchorfile>
      <anchor>af283e0be96a667d9446be6a737569804</anchor>
      <arglist>(const iDynTree::Direction xAxisOfPlaneInWorld, const iDynTree::Direction yAxisOfPlaneInWorld, const iDynTree::Position originOfPlaneInWorld, const std::vector&lt; Polygon &gt; &amp;supportPolygonsExpressedInSupportFrame, const std::vector&lt; Transform &gt; &amp;absoluteFrame_X_supportFrame)</arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>project</name>
      <anchorfile>classiDynTree_1_1BoundingBoxProjectionConstraint.html</anchorfile>
      <anchor>a9d97dc9a2a54e958ed345faae3d51f54</anchor>
      <arglist>(iDynTree::Position &amp;posIn3dInAbsoluteFrame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionAlongDirection</name>
      <anchorfile>classiDynTree_1_1BoundingBoxProjectionConstraint.html</anchorfile>
      <anchor>a8b0076cd2583bcc73035920345fc8c1c</anchor>
      <arglist>(Vector3 direction)</arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>projectAlongDirection</name>
      <anchorfile>classiDynTree_1_1BoundingBoxProjectionConstraint.html</anchorfile>
      <anchor>a930823fe7cb62c1ff65a5c1b2ad33863</anchor>
      <arglist>(iDynTree::Position &amp;posIn3dInAbsoluteFrame)</arglist>
    </member>
    <member kind="variable">
      <type>Polygon2D</type>
      <name>projectedBoundingBox</name>
      <anchorfile>classiDynTree_1_1BoundingBoxProjectionConstraint.html</anchorfile>
      <anchor>a4d968d97432efec2b3f0e279b5314dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixDynSize</type>
      <name>A</name>
      <anchorfile>classiDynTree_1_1BoundingBoxProjectionConstraint.html</anchorfile>
      <anchor>a67e2db7524cabbada251ebfec6118d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>b</name>
      <anchorfile>classiDynTree_1_1BoundingBoxProjectionConstraint.html</anchorfile>
      <anchor>a174e78fcbd73beb939c18fc7793819ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix2x3</type>
      <name>P</name>
      <anchorfile>classiDynTree_1_1BoundingBoxProjectionConstraint.html</anchorfile>
      <anchor>a0965c5b8cf5d35b5eb6359e813ee08f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix2x3</type>
      <name>Pdirection</name>
      <anchorfile>classiDynTree_1_1BoundingBoxProjectionConstraint.html</anchorfile>
      <anchor>aabea435e6e536c29f835e2253eb58b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixDynSize</type>
      <name>AtimesP</name>
      <anchorfile>classiDynTree_1_1BoundingBoxProjectionConstraint.html</anchorfile>
      <anchor>aed4485913893e4e6392ff5be2a5ca82c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Position</type>
      <name>o</name>
      <anchorfile>classiDynTree_1_1BoundingBoxProjectionConstraint.html</anchorfile>
      <anchor>a1a1819a14597fd17e759b6b1a1ede95e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>supportFrameIndices</name>
      <anchorfile>classiDynTree_1_1BoundingBoxProjectionConstraint.html</anchorfile>
      <anchor>a3e1874b20406c550cc38d335b8753f8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Transform &gt;</type>
      <name>absoluteFrame_X_supportFrame</name>
      <anchorfile>classiDynTree_1_1BoundingBoxProjectionConstraint.html</anchorfile>
      <anchor>aec7064bb7cb6d238bf0c8473984d293c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Box</name>
    <filename>classiDynTree_1_1Box.html</filename>
    <base>iDynTree::SolidShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Box</name>
      <anchorfile>classiDynTree_1_1Box.html</anchorfile>
      <anchor>acc55eb330b82b35f8c4236b1b3b7ea2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolidShape *</type>
      <name>clone</name>
      <anchorfile>classiDynTree_1_1Box.html</anchorfile>
      <anchor>a52e18fbebb351260b6b7a61196a4e0f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSphere</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a8ba065f0e60ad78baad071a3a870faf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBox</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a661c33c6139a4cde9c9eeb55ebcd915e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCylinder</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a8218783b444c4f651ebc5517399a04bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExternalMesh</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>aeef66627d452a2b192c9d62ac6e6b908</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Sphere *</type>
      <name>asSphere</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a99663faed75dfd72d0d89cc4bed840d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Sphere *</type>
      <name>asSphere</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a720d8b9d4d78dc3ae961e0c9f0529465</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Box *</type>
      <name>asBox</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a45e488bee1b295013389a7c67a5512f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box *</type>
      <name>asBox</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a4ea5d8b8ea2e334c1edecc390ca2e06c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cylinder *</type>
      <name>asCylinder</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>ac1a4e162221fb08c270af4d0424b86b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Cylinder *</type>
      <name>asCylinder</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>ac6ba4dbcf0b0a10b8f09689d85842515</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ExternalMesh *</type>
      <name>asExternalMesh</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a87e9c96203f414d82a09ea4c391f1d88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExternalMesh *</type>
      <name>asExternalMesh</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a6ed24fecde411acdfc1d1c6cfdaa4330</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>classiDynTree_1_1Box.html</anchorfile>
      <anchor>a6c2572489891468177899f65c0115d9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>classiDynTree_1_1Box.html</anchorfile>
      <anchor>a76b5925258003a79d08f51c3b9e4d2bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z</name>
      <anchorfile>classiDynTree_1_1Box.html</anchorfile>
      <anchor>a85f1c8576f6573c00bbd387ef4ab6775</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a5026e44f557e25b407642e95dd7bbb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>nameIsValid</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>adca1aa44db797c0122b0479b2a65ff9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform</type>
      <name>link_H_geometry</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a8be2a1e24878ac8de853123219a6ac64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector4</type>
      <name>material</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a61f1577ee526add690666ad2e07e21c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::optimalcontrol::BufferedGroup</name>
    <filename>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</filename>
    <member kind="function">
      <type>void</type>
      <name>resizeBuffers</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>a6aa6033f9c33a814a5de2cc00485844a</anchor>
      <arglist>(intType stateDim, intType controlDim)</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; ConstraintsGroup &gt;</type>
      <name>group_ptr</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>a5cd8d8b0caa31cec9bdec2121b82fa57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>constraintsBuffer</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>aef019aced8060f89f352ab76980d68b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixDynSize</type>
      <name>stateJacobianBuffer</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>ae95a699881416f0c966caa009ca2ba8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixDynSize</type>
      <name>controlJacobianBuffer</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>ac73bf5753201012db82e5726fc7354a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixDynSize</type>
      <name>stateHessianBuffer</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>a0650aecd84c3d07f42a0ad6c0dab493d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixDynSize</type>
      <name>controlHessianBuffer</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>a56602098b15ace6074f9ae48a3ff6ba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixDynSize</type>
      <name>mixedHessianBuffer</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>ad4d786cf41861a3e997a63052e614b58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>lambdaBuffer</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>af14b5457139d8e99810be3476c2418f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>stateJacobianSparsity</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>a8fb4d0ce2af20f8c64f4ad096ebcda12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>controlJacobianSparsity</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>a3261dec7ead9d5da87daaa893c865212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasStateJacobianSparsity</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>afaafe8b7aa9aaf8d23dad2436941ac3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasControlJacobianSparsity</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>a94923a0180d6f0069a642250c3e914d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>stateHessianSparsity</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>a34d7e05cf171aeb454e742d1465da07d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>controlHessianSparsity</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>af89690567528f9673a95a3b716ca3157</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>mixedHessianSparsity</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>a092f6b530c1f9d3571630ce799a4f1ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasStateHessianSparsity</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>a031756b23adfc804774d14d6f419c297</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasControlHessianSparsity</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>ac4cf6c6393fd50825aefd8d559171243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasMixedHessianSparsity</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1BufferedGroup.html</anchorfile>
      <anchor>ab32b84c78dc90fe6f4a7ddb97b547eaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::details::calculate_byte_size</name>
    <filename>structiDynTree_1_1details_1_1calculate__byte__size.html</filename>
    <templarg></templarg>
    <templarg>Extent</templarg>
  </compound>
  <compound kind="struct">
    <name>iDynTree::details::calculate_byte_size&lt; ElementType, dynamic_extent &gt;</name>
    <filename>structiDynTree_1_1details_1_1calculate__byte__size_3_01ElementType_00_01dynamic__extent_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>iDynTree::details::calculate_subspan_type</name>
    <filename>structiDynTree_1_1details_1_1calculate__subspan__type.html</filename>
    <templarg></templarg>
    <templarg>Extent</templarg>
    <templarg>Offset</templarg>
    <templarg>Count</templarg>
    <member kind="typedef">
      <type>Span&lt; ElementType, Count !=dynamic_extent ? Count :(Extent !=dynamic_extent ? Extent - Offset :Extent)&gt;</type>
      <name>type</name>
      <anchorfile>structiDynTree_1_1details_1_1calculate__subspan__type.html</anchorfile>
      <anchor>aa2737e67ca087bb17788bbaf284f374f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Camera</name>
    <filename>classiDynTree_1_1Camera.html</filename>
    <base>iDynTree::ICamera</base>
    <member kind="function">
      <type></type>
      <name>Camera</name>
      <anchorfile>classiDynTree_1_1Camera.html</anchorfile>
      <anchor>a76ecfbfeb4d7dbe3a02550f00ae395fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Camera</name>
      <anchorfile>classiDynTree_1_1Camera.html</anchorfile>
      <anchor>a530b63ed50441b00b933921aec71650b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIrrlichtCamera</name>
      <anchorfile>classiDynTree_1_1Camera.html</anchorfile>
      <anchor>aa4d79b40c9d5c2380c3cc5e51ac29471</anchor>
      <arglist>(irr::scene::ICameraSceneNode *cam)</arglist>
    </member>
    <member kind="function">
      <type>irr::scene::ICameraSceneNode *</type>
      <name>irrlichtCamera</name>
      <anchorfile>classiDynTree_1_1Camera.html</anchorfile>
      <anchor>abec5dc9fe0b9e1c929f19d0f87e83cbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classiDynTree_1_1Camera.html</anchorfile>
      <anchor>a1c34fe8b3c9cc24b7676ff8d6e165647</anchor>
      <arglist>(const Position &amp;cameraPos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTarget</name>
      <anchorfile>classiDynTree_1_1Camera.html</anchorfile>
      <anchor>aa507197d384f52d5c35c9867923947e6</anchor>
      <arglist>(const Position &amp;targetPos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpVector</name>
      <anchorfile>classiDynTree_1_1Camera.html</anchorfile>
      <anchor>abab5566bd4b1ee5092445328ada5e9e2</anchor>
      <arglist>(const Direction &amp;upVector)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::CFloorGridSceneNode</name>
    <filename>classiDynTree_1_1CFloorGridSceneNode.html</filename>
    <member kind="function">
      <type></type>
      <name>CFloorGridSceneNode</name>
      <anchorfile>classiDynTree_1_1CFloorGridSceneNode.html</anchorfile>
      <anchor>a087cd743923d7eea99c34e3efde33f2b</anchor>
      <arglist>(irr::scene::ISceneNode *parent, irr::scene::ISceneManager *mgr, irr::s32 id=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>OnRegisterSceneNode</name>
      <anchorfile>classiDynTree_1_1CFloorGridSceneNode.html</anchorfile>
      <anchor>a6fd98935a59108c5b243d608c30e2693</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classiDynTree_1_1CFloorGridSceneNode.html</anchorfile>
      <anchor>acaf6c305677d6e556a98e90ec0bc3312</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const irr::core::aabbox3d&lt; irr::f32 &gt; &amp;</type>
      <name>getBoundingBox</name>
      <anchorfile>classiDynTree_1_1CFloorGridSceneNode.html</anchorfile>
      <anchor>a04c2cb24b7ff2c7fb171676f87c07575</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual irr::u32</type>
      <name>getMaterialCount</name>
      <anchorfile>classiDynTree_1_1CFloorGridSceneNode.html</anchorfile>
      <anchor>aaf46e46762d9f64054201878ac124114</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual irr::video::SMaterial &amp;</type>
      <name>getMaterial</name>
      <anchorfile>classiDynTree_1_1CFloorGridSceneNode.html</anchorfile>
      <anchor>a5758ea7cd1e882bd757d68259639449f</anchor>
      <arglist>(irr::u32 i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChartsManager</name>
    <filename>classChartsManager.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChartsManager</name>
      <anchorfile>classChartsManager.html</anchorfile>
      <anchor>a1de1e3e01d410a8a961b66cf6c9fe24f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classChartsManager.html</anchorfile>
      <anchor>a6536db1e0c7b991995c308166fc3edc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classChartsManager.html</anchorfile>
      <anchor>afc4cc466bddf04e5aaf00aa0bbee5a43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>plotBatchChart</name>
      <anchorfile>classChartsManager.html</anchorfile>
      <anchor>a971b2e8c96d696c041d798072c7278a2</anchor>
      <arglist>(const Chart &amp;chart)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealTimeChartResponse</type>
      <name>plotRealTimeChart</name>
      <anchorfile>classChartsManager.html</anchorfile>
      <anchor>a2deb4d593343f6dff5587ea8db732ef4</anchor>
      <arglist>(const Chart &amp;chart, const RealTimeChartRequest &amp;chartInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>closeAllCharts</name>
      <anchorfile>classChartsManager.html</anchorfile>
      <anchor>a374065b9a00ed1e767e70c13e30a9a70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>closeChart</name>
      <anchorfile>classChartsManager.html</anchorfile>
      <anchor>a79ae665045da2930577d0b166058881e</anchor>
      <arglist>(const std::string &amp;chartID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; ChartSimpleInfo &gt;</type>
      <name>listAllCharts</name>
      <anchorfile>classChartsManager.html</anchorfile>
      <anchor>a4c9164d60cb7802944dbd5aa7ea6ec50</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChartsManagerWindow</name>
    <filename>classChartsManagerWindow.html</filename>
    <member kind="function">
      <type></type>
      <name>ChartsManagerWindow</name>
      <anchorfile>classChartsManagerWindow.html</anchorfile>
      <anchor>a30230392e930855d48a67c14c0baf194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChartsManagerWindow</name>
      <anchorfile>classChartsManagerWindow.html</anchorfile>
      <anchor>afd1768dfff1e94b34eceecd300c47bdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>event</name>
      <anchorfile>classChartsManagerWindow.html</anchorfile>
      <anchor>af2fdc6ed3d0d4ae62b1b03867d01a992</anchor>
      <arglist>(QEvent *e)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ClassicalAcc</name>
    <filename>classiDynTree_1_1ClassicalAcc.html</filename>
    <base>iDynTree::VectorFixSize</base>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ada7487eff1fee83db8d41165d30f1263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ad0f06a255dc213a5904d232f703a0192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aa11c3eee00e88dabb7880f6cac2a9b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a69b51f8119155d31a254676ae867ae8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClassicalAcc</name>
      <anchorfile>classiDynTree_1_1ClassicalAcc.html</anchorfile>
      <anchor>af2840c213b585301e38240715afbb360</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClassicalAcc</name>
      <anchorfile>classiDynTree_1_1ClassicalAcc.html</anchorfile>
      <anchor>acb7b4a36b251b50c79af8b06037977cf</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClassicalAcc</name>
      <anchorfile>classiDynTree_1_1ClassicalAcc.html</anchorfile>
      <anchor>a9ce69cc1e892338d4e2d0b5c13ebbedf</anchor>
      <arglist>(const ClassicalAcc &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const ClassicalAcc &amp;</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1ClassicalAcc.html</anchorfile>
      <anchor>a1b7decadf15b2fb3b78b4be6f3786b40</anchor>
      <arglist>(const RotationRaw &amp;newCoordFrame)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1ClassicalAcc.html</anchorfile>
      <anchor>ab0e6e43ee966f2533517c85785b0caf1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1ClassicalAcc.html</anchorfile>
      <anchor>a3379201467dbcfad92ee7c3db9568513</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromSpatial</name>
      <anchorfile>classiDynTree_1_1ClassicalAcc.html</anchorfile>
      <anchor>aa79bec4d759003f661270ac600dd5712</anchor>
      <arglist>(const SpatialAcc &amp;spatialAcc, const Twist &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toSpatial</name>
      <anchorfile>classiDynTree_1_1ClassicalAcc.html</anchorfile>
      <anchor>aae939ebabb53cb1270daffc48b62571c</anchor>
      <arglist>(SpatialAcc &amp;spatialAcc, const Twist &amp;vel) const</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a3bd1389dbdf51e06f4c64451c242397e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab6f044aea32e55a72f6ebed68f93f767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a57b77a6c96f3276ed8e12b5e35b7f442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBuffer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aee106d61ebb0925fecfa55cbaa515981</anchor>
      <arglist>(double *buf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a2e935e37d751752feab107dc58560aaf</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a8ca6cab1f06019c34d593f0aaff4dced</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a9c0f65c965c198e3bebd3cc9a03937d3</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab0e81983f76aab4997962a423dc3189d</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>abc9aca9e8f729a9d78e4da70bac72382</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>af793dbb7d980c53813b1bccc4703f450</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a5f04ccb5f96cd94aa207b98ced2b3254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a11d7cfdce4e1674e2ce73a23c7e29990</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>acae25eb63bcbe6b524849d77134c168d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ClassicalAcc</type>
      <name>Zero</name>
      <anchorfile>classiDynTree_1_1ClassicalAcc.html</anchorfile>
      <anchor>a6e231fb59aa0d2d54a1d4e741871218a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a7bf5cd26b6fc24c9ddaf8854ebb8ec63</anchor>
      <arglist>[VecSize]</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a2e935e37d751752feab107dc58560aaf</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a8ca6cab1f06019c34d593f0aaff4dced</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a9c0f65c965c198e3bebd3cc9a03937d3</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab0e81983f76aab4997962a423dc3189d</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>abc9aca9e8f729a9d78e4da70bac72382</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>af793dbb7d980c53813b1bccc4703f450</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a5f04ccb5f96cd94aa207b98ced2b3254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a11d7cfdce4e1674e2ce73a23c7e29990</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>acae25eb63bcbe6b524849d77134c168d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ada7487eff1fee83db8d41165d30f1263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ad0f06a255dc213a5904d232f703a0192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aa11c3eee00e88dabb7880f6cac2a9b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a69b51f8119155d31a254676ae867ae8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cmdline::cmdline_error</name>
    <filename>classcmdline_1_1cmdline__error.html</filename>
    <member kind="function">
      <type></type>
      <name>cmdline_error</name>
      <anchorfile>classcmdline_1_1cmdline__error.html</anchorfile>
      <anchor>a56748242954e40048c3197a24bdfa036</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cmdline_error</name>
      <anchorfile>classcmdline_1_1cmdline__error.html</anchorfile>
      <anchor>a4fb14d65b75bf0dd97a84e76f571a8be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>classcmdline_1_1cmdline__error.html</anchorfile>
      <anchor>a95d8810a6a9372dba775829300d9a1cb</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::integrators::CollocationHessianIndex</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1integrators_1_1CollocationHessianIndex.html</filename>
    <member kind="function">
      <type></type>
      <name>CollocationHessianIndex</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1CollocationHessianIndex.html</anchorfile>
      <anchor>af60bc2893f839a14b141c16821ac7a13</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollocationHessianIndex</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1CollocationHessianIndex.html</anchorfile>
      <anchor>ab2fb941b5f2ca3e2819c5fb3cdd6e7c0</anchor>
      <arglist>(size_t first, size_t second)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1CollocationHessianIndex.html</anchorfile>
      <anchor>aab39ac7479d2ce7b28a263d6d661f6b0</anchor>
      <arglist>(const CollocationHessianIndex &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>first</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1CollocationHessianIndex.html</anchorfile>
      <anchor>aedc919144a19ad3e4842dc926cb4c69d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>second</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1CollocationHessianIndex.html</anchorfile>
      <anchor>a2a1a49e122b10a948b46d9eb88ae4598</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ColorViz</name>
    <filename>classiDynTree_1_1ColorViz.html</filename>
    <member kind="function">
      <type></type>
      <name>ColorViz</name>
      <anchorfile>classiDynTree_1_1ColorViz.html</anchorfile>
      <anchor>a76f94a49b08d57cfcbd1153324f5cc42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorViz</name>
      <anchorfile>classiDynTree_1_1ColorViz.html</anchorfile>
      <anchor>afa1267993192af9e91a8a4b63a9f41f9</anchor>
      <arglist>(float r, float g, float b, float a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorViz</name>
      <anchorfile>classiDynTree_1_1ColorViz.html</anchorfile>
      <anchor>a66c1f26b9f0ab71c5a0424b7138e4801</anchor>
      <arglist>(const Vector4 &amp;rgba)</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>r</name>
      <anchorfile>classiDynTree_1_1ColorViz.html</anchorfile>
      <anchor>ac0d868d2b5eccab6808bab3d092fb0fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>g</name>
      <anchorfile>classiDynTree_1_1ColorViz.html</anchorfile>
      <anchor>a55604c0ff20631284b127b85cef9ed3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>b</name>
      <anchorfile>classiDynTree_1_1ColorViz.html</anchorfile>
      <anchor>ab7bb92c9c5bc5d9b83190143136f277a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>a</name>
      <anchorfile>classiDynTree_1_1ColorViz.html</anchorfile>
      <anchor>a097c11ce78907c8cca1f932bb53f9a15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SparseMatrix::ConstIterator</name>
    <filename>classiDynTree_1_1SparseMatrix_1_1ConstIterator.html</filename>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1ConstIterator.html</anchorfile>
      <anchor>a1d144337cb3c33e57af2fe0c32f343ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iDynTree::Triplet</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1ConstIterator.html</anchorfile>
      <anchor>aad1f845823d8822f4b3d91935a633e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1ConstIterator.html</anchorfile>
      <anchor>a0b231f80bab1c0f1a21b4e01188c5d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1ConstIterator.html</anchorfile>
      <anchor>a60433660de7fa281dc14d56afe52293d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::output_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1ConstIterator.html</anchorfile>
      <anchor>a6266f402bd3d147e7b1ecb13572781da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1ConstIterator.html</anchorfile>
      <anchor>a7c192232a1e67c75c322d6bb144a5ac7</anchor>
      <arglist>(const Iterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1ConstIterator.html</anchorfile>
      <anchor>a0fa7af23044d196c424e41e1bfcc17d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>operator++</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1ConstIterator.html</anchorfile>
      <anchor>a5498446d80eb03345f9d41bfbe7929f0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1ConstIterator.html</anchorfile>
      <anchor>a67c5562b30001cb316279caa62fee7d6</anchor>
      <arglist>(const ConstIterator &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1ConstIterator.html</anchorfile>
      <anchor>a9cff3c7a75e63dd5cac47a84fb65f797</anchor>
      <arglist>(const Iterator &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1ConstIterator.html</anchorfile>
      <anchor>a8f43480d8c2039bb08bb4ff6ceb858ba</anchor>
      <arglist>(const ConstIterator &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1ConstIterator.html</anchorfile>
      <anchor>a8bd7fcb7942fa190d6cfad297ec6f9b9</anchor>
      <arglist>(const Iterator &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1ConstIterator.html</anchorfile>
      <anchor>ae787f3cdb5239e7c08bd270505463325</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1ConstIterator.html</anchorfile>
      <anchor>acc707b41b0600c64442b029c37dd4840</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1ConstIterator.html</anchorfile>
      <anchor>ace38fb210dda678dba773ebf34d63cba</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SensorsList::ConstIterator</name>
    <filename>classiDynTree_1_1SensorsList_1_1ConstIterator.html</filename>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstIterator.html</anchorfile>
      <anchor>a4fe50b4ce1838f72ba6fa989861ccc63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sensor *</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstIterator.html</anchorfile>
      <anchor>ab77f21bd26fa98dc44a4a0bb9d788716</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstIterator.html</anchorfile>
      <anchor>a346360a15663632de6b24b82a79f0ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstIterator.html</anchorfile>
      <anchor>acd9cccc7612f2c8df8e561c7eaa8efdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::input_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstIterator.html</anchorfile>
      <anchor>a970cb921e2d50f8bc67291019f469c78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstIterator.html</anchorfile>
      <anchor>a5f0960f58f5ea1e18da0f1fca757f106</anchor>
      <arglist>(const Iterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstIterator.html</anchorfile>
      <anchor>a3109496936d34b725375d10378a6cb04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>operator++</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstIterator.html</anchorfile>
      <anchor>a268c8ca731d679cf5b7feddef37cdee1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstIterator.html</anchorfile>
      <anchor>a3fbb6e6d31172ac5493eb55835c165a3</anchor>
      <arglist>(const ConstIterator &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstIterator.html</anchorfile>
      <anchor>a414ff9c7f523607738d74fe2827dff55</anchor>
      <arglist>(const Iterator &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstIterator.html</anchorfile>
      <anchor>a9e15be1d7e1601d786f10f46495352b1</anchor>
      <arglist>(const ConstIterator &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstIterator.html</anchorfile>
      <anchor>aa68f9be4da4ee1e0886b826b30f78764</anchor>
      <arglist>(const Iterator &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstIterator.html</anchorfile>
      <anchor>a861626b393c7edf071e211e53887a448</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstIterator.html</anchorfile>
      <anchor>ad2aa795eb251ae42dd58f858470c4ba0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstIterator.html</anchorfile>
      <anchor>af6c4fa1f656eb24167c734dc5d0bdcd2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SensorsList</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstIterator.html</anchorfile>
      <anchor>a51c57a31c0c18c18341920b6346dc830</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::Constraint</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1Constraint.html</filename>
    <member kind="function">
      <type></type>
      <name>Constraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a48bd2962ef941257545801ed45a3550e</anchor>
      <arglist>(size_t size, const std::string name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>ab57fd09c48118b1a6d9bd69723ead6b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>constraintSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a1df753c970a78df754d6ca54943dea93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a89ecaf57ab310fc62a6ea624c1dbd439</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setLowerBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a3e3f580470ce860c9964d6e24b3ded5d</anchor>
      <arglist>(const VectorDynSize &amp;lowerBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLowerBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a9322706b7f88baa02e4924097605827b</anchor>
      <arglist>(VectorDynSize &amp;lowerBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setUpperBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a2b1b9fb5134c4d2e7bc52f20a9963173</anchor>
      <arglist>(const VectorDynSize &amp;upperBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUpperBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a41d21a8cfc855439a2601650e9c130ba</anchor>
      <arglist>(VectorDynSize &amp;upperBound)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFeasiblePoint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a52b67723a11898155b75a782e4f0205a</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>evaluateConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a9a7d980f35aebb6c3d60ba8f52b3829d</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, VectorDynSize &amp;constraint)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintJacobianWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>aee82718b0581764b765ce25c0aa049c3</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, MatrixDynSize &amp;jacobian)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintJacobianWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a21b8786faecf1da5b43faa408a292f8d</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, MatrixDynSize &amp;jacobian)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>expectedStateSpaceSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a0e3bceea30a60cc17f2eeb083f935776</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>expectedControlSpaceSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a90f0559327c2024aeae9637bde1cf007</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintJacobianWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a5d420558f50d0a82aee7f9d11889885e</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintJacobianWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>afd5a12a117ba430c259510b1db04a013</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintSecondPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>ac26cfd09ef99553f0b4ebeb898a15847</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, const VectorDynSize &amp;lambda, MatrixDynSize &amp;hessian)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintSecondPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a8c3d33bfe65634eda98875898c3d787e</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, const VectorDynSize &amp;lambda, MatrixDynSize &amp;hessian)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintSecondPartialDerivativeWRTStateControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>ad836958536b0ce6640f6d08fd80fd922</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, const VectorDynSize &amp;lambda, MatrixDynSize &amp;hessian)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintSecondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a7592cdcfcff1986e95e64f5508ab412d</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintSecondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a4eacc463eda891b4de08e4ed85dd0c6b</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateControlSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintSecondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>af07fb481ca8947140e244f9948ae9288</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorDynSize</type>
      <name>m_lowerBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>ac485074ba8861bae196497dbf6256761</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorDynSize</type>
      <name>m_upperBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a14742944fcb6cb9011b728dad5a688f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_isLowerBounded</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a5805024ea2d6064d0ce0c263cae83c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_isUpperBounded</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a39b0f7fd8ff9ead00ce7010f7fc81896</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::optimization::ConstraintInfo</name>
    <filename>structiDynTree_1_1optimization_1_1ConstraintInfo.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>boundValue</name>
      <anchorfile>structiDynTree_1_1optimization_1_1ConstraintInfo.html</anchorfile>
      <anchor>a0bad4c733d57a7605e15e1398a0471a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>constraintSign</name>
      <anchorfile>structiDynTree_1_1optimization_1_1ConstraintInfo.html</anchorfile>
      <anchor>a9040fd83b8eaf8e3d6d5d5e3af564d43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>index</name>
      <anchorfile>structiDynTree_1_1optimization_1_1ConstraintInfo.html</anchorfile>
      <anchor>ac04bba7ba75081c67e0d062ee4369eca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::ConstraintsGroup</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</filename>
    <class kind="class">iDynTree::optimalcontrol::ConstraintsGroup::ConstraintsGroupPimpl</class>
    <member kind="function">
      <type></type>
      <name>ConstraintsGroup</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a593407e913d25676d1bb8fcff0f09b91</anchor>
      <arglist>(const std::string &amp;name, unsigned int maxConstraintSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstraintsGroup</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a1fec76ff1d42dc7f3adcc3acc99f95b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstraintsGroup</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a66023d93d7bb66ae77c5dc5b1b6cb40a</anchor>
      <arglist>(const ConstraintsGroup &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a5140627adcedded7849f6714e2e64e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>constraintsDimension</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a5d217c617b0a3f317a5fc3ae259abb35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>ae0026ebe5c345a6df3cc6eed6ee647b4</anchor>
      <arglist>(std::shared_ptr&lt; Constraint &gt; constraint, const TimeRange &amp;timeRange)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a7e0aa1c237e187d9c99ef55a50226a68</anchor>
      <arglist>(std::shared_ptr&lt; LinearConstraint &gt; linearConstraint, const TimeRange &amp;timeRange)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateTimeRange</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>acc256e4ae98b36e6ad1849348b8ad5d4</anchor>
      <arglist>(const std::string &amp;name, const TimeRange &amp;timeRange)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a482696c38527f59f393dc0165a9b134a</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTimeRange</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a6140b576f1b5b0f65906fd1026ac7dd4</anchor>
      <arglist>(const std::string &amp;name, TimeRange &amp;timeRange)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; TimeRange &gt; &amp;</type>
      <name>getTimeRanges</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a1a4ab2add789a5e7bfe3ccf3d825db04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasibilePoint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a5379fb2ea07fc4571706b29e53e79c67</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateConstraints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a81013d0cf1b4b71eff111dff2299b604</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, VectorDynSize &amp;constraints)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLowerBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>ae2555fe639e01afdd35c920395d08d7e</anchor>
      <arglist>(double time, VectorDynSize &amp;lowerBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUpperBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a8532cfbf612aef484fbf70ad9d609596</anchor>
      <arglist>(double time, VectorDynSize &amp;upperBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintJacobianWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a8aafbfaebcd05313d6e935749d5b88ea</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, MatrixDynSize &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintJacobianWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a68d1dfd82bb37e7e1fe2005aaa730686</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, MatrixDynSize &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintJacobianWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>ac3e00bf25f6697f52179aaf4308291ad</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintJacobianWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a33a2f63df7da1a82c314f9cb9efa1533</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintSecondPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a3e0b81af7e248f4fd7b77439b0b2df22</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, const VectorDynSize &amp;lambda, MatrixDynSize &amp;hessian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintSecondPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>adc6480876db7aeaf3484ad77f1ab9a8a</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, const VectorDynSize &amp;lambda, MatrixDynSize &amp;hessian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintSecondPartialDerivativeWRTStateControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a0161b4457cf802815a94a8a6eec7ce6a</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, const VectorDynSize &amp;lambda, MatrixDynSize &amp;hessian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintsSecondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a92bd3dc34369aa9b8f313227f721a7cc</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintsSecondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>ae3c04549670837f5cc2d4613289d7c80</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateControlSparsity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintsSecondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a7829d4f018f668b295ce0e9443bed555</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnyTimeGroup</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a116fdd0435e3dd18526eaef723d021ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numberOfConstraints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a55d7b7ac636d84e0a1859e17ef530edf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt;</type>
      <name>listConstraints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a5e6d038d896c675f91eb03f891851b1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinearGroup</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup.html</anchorfile>
      <anchor>a3570a6ba4f5c3d317b05a1afdd607afb</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::ConstraintsGroup::ConstraintsGroupPimpl</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</filename>
    <member kind="function">
      <type>std::vector&lt; TimedConstraint_ptr &gt;::reverse_iterator</type>
      <name>findActiveConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</anchorfile>
      <anchor>ac5055df2f161d9487fed9277b2a4fc28</anchor>
      <arglist>(double time)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</anchorfile>
      <anchor>a989df488ca596a8c84eba2f3d7eb86fe</anchor>
      <arglist>(std::shared_ptr&lt; Constraint &gt; constraint, const TimeRange &amp;timeRange)</arglist>
    </member>
    <member kind="variable">
      <type>GroupOfConstraintsMap</type>
      <name>group</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</anchorfile>
      <anchor>a9bbe0a3fe329366ef78ab4827be35d3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TimedConstraint_ptr &gt;</type>
      <name>orderedIntervals</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</anchorfile>
      <anchor>af32e8480dd87c1718115bcbf593af255</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>groupStateJacobianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</anchorfile>
      <anchor>aa6ae46fab492b4733c61cfaa04d0d4cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>groupControlJacobianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</anchorfile>
      <anchor>a31a520de082024b3668436ff36526523</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>groupStateHessianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</anchorfile>
      <anchor>a6a9fc75bd3e6f49d8e1b1f7407eecd33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>groupControlHessianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</anchorfile>
      <anchor>a1d1160d5c88a96c9c10386fce2d396b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>groupMixedHessianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</anchorfile>
      <anchor>a4cf7fc3c48a392474ba9622e61dc2877</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</anchorfile>
      <anchor>a8a6a1269f0582fb3800607b6dd74e61a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>maxConstraintSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</anchorfile>
      <anchor>a04d0c57b35c427a53015d47a5af59f2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TimeRange &gt;</type>
      <name>timeRanges</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</anchorfile>
      <anchor>a18be1aeaa6ebc0c5ed4bc16922be9148</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isLinearGroup</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</anchorfile>
      <anchor>af8aa8693344e170053f41f4254dcfed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>stateJacobianSparsityProvided</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</anchorfile>
      <anchor>a7c0cf9270aaf83cbc94fec9e973c3108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>controlJacobianSparsityProvided</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</anchorfile>
      <anchor>aad88160063917d4dcad69553935ae3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>stateHessianSparsityProvided</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</anchorfile>
      <anchor>a58f5a2804556ae08c4897a7aa8f06413</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>controlHessianSparsityProvided</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</anchorfile>
      <anchor>a25d245c880039420957c0ee937464947</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mixedHessianSparsityProvided</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ConstraintsGroup_1_1ConstraintsGroupPimpl.html</anchorfile>
      <anchor>aa7621ebcd0054309a80b79b6b041cbf2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SensorsList::ConstTypedIterator</name>
    <filename>classiDynTree_1_1SensorsList_1_1ConstTypedIterator.html</filename>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstTypedIterator.html</anchorfile>
      <anchor>aa689a1caaa190d764b62647a57c50c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sensor *</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstTypedIterator.html</anchorfile>
      <anchor>af6c1fd450b1cfbd0b53731fa97613b6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstTypedIterator.html</anchorfile>
      <anchor>a9e6220679fb6468ca5727658eb5f9100</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstTypedIterator.html</anchorfile>
      <anchor>a17f21b802f07869341619a00063d1fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::input_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstTypedIterator.html</anchorfile>
      <anchor>a3b3e65284f302aeb199ef1fdc1f80949</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstTypedIterator</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstTypedIterator.html</anchorfile>
      <anchor>ae92fdc1297fd95c9fe792af1efe27f7c</anchor>
      <arglist>(const TypedIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ConstTypedIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstTypedIterator.html</anchorfile>
      <anchor>a29c2801a475fa759804103b4b5001cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstTypedIterator</type>
      <name>operator++</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstTypedIterator.html</anchorfile>
      <anchor>ab45c8d8aa665d4521ac2f1b5d96b12ff</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstTypedIterator.html</anchorfile>
      <anchor>a2ec99ce923627f5d696136a0a74e805c</anchor>
      <arglist>(const ConstTypedIterator &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstTypedIterator.html</anchorfile>
      <anchor>a26f67388539f553dbab287656bf9dbc7</anchor>
      <arglist>(const TypedIterator &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstTypedIterator.html</anchorfile>
      <anchor>acec6f74521d5fb93c3c6e30193167e4b</anchor>
      <arglist>(const ConstTypedIterator &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstTypedIterator.html</anchorfile>
      <anchor>a1180e7fc84c56ab497bb97a985ba9464</anchor>
      <arglist>(const TypedIterator &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstTypedIterator.html</anchorfile>
      <anchor>a0b5d5522bb014550af52b67c39f7a692</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstTypedIterator.html</anchorfile>
      <anchor>adcc3244bc38af90526055300a22958c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstTypedIterator.html</anchorfile>
      <anchor>af1cc782593c29afa0829ebdb5e565206</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SensorsList</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1ConstTypedIterator.html</anchorfile>
      <anchor>a51c57a31c0c18c18341920b6346dc830</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ContactStateMachine</name>
    <filename>classiDynTree_1_1ContactStateMachine.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>contactTransition</name>
      <anchorfile>classiDynTree_1_1ContactStateMachine.html</anchorfile>
      <anchor>a3ff1e2de3b160f0a4a4b3b6de6593a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STABLE_OFFCONTACT</name>
      <anchorfile>classiDynTree_1_1ContactStateMachine.html</anchorfile>
      <anchor>a3ff1e2de3b160f0a4a4b3b6de6593a49a21b97376600fe519447527427ec228b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STABLE_ONCONTACT</name>
      <anchorfile>classiDynTree_1_1ContactStateMachine.html</anchorfile>
      <anchor>a3ff1e2de3b160f0a4a4b3b6de6593a49aa8f55eb8a65e86cd76634b286136223c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTACT_BREAK</name>
      <anchorfile>classiDynTree_1_1ContactStateMachine.html</anchorfile>
      <anchor>a3ff1e2de3b160f0a4a4b3b6de6593a49a036db61ab6a2856f3a3186af39b8e454</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTACT_MAKE</name>
      <anchorfile>classiDynTree_1_1ContactStateMachine.html</anchorfile>
      <anchor>a3ff1e2de3b160f0a4a4b3b6de6593a49ae7d672315b8c5329c68891ec9c6c2f80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_TRANSITION</name>
      <anchorfile>classiDynTree_1_1ContactStateMachine.html</anchorfile>
      <anchor>a3ff1e2de3b160f0a4a4b3b6de6593a49a2df246442db275db4de2f07bd4af0923</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STABLE_OFFCONTACT</name>
      <anchorfile>classiDynTree_1_1ContactStateMachine.html</anchorfile>
      <anchor>a3ff1e2de3b160f0a4a4b3b6de6593a49a21b97376600fe519447527427ec228b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STABLE_ONCONTACT</name>
      <anchorfile>classiDynTree_1_1ContactStateMachine.html</anchorfile>
      <anchor>a3ff1e2de3b160f0a4a4b3b6de6593a49aa8f55eb8a65e86cd76634b286136223c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTACT_BREAK</name>
      <anchorfile>classiDynTree_1_1ContactStateMachine.html</anchorfile>
      <anchor>a3ff1e2de3b160f0a4a4b3b6de6593a49a036db61ab6a2856f3a3186af39b8e454</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTACT_MAKE</name>
      <anchorfile>classiDynTree_1_1ContactStateMachine.html</anchorfile>
      <anchor>a3ff1e2de3b160f0a4a4b3b6de6593a49ae7d672315b8c5329c68891ec9c6c2f80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_TRANSITION</name>
      <anchorfile>classiDynTree_1_1ContactStateMachine.html</anchorfile>
      <anchor>a3ff1e2de3b160f0a4a4b3b6de6593a49a2df246442db275db4de2f07bd4af0923</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContactStateMachine</name>
      <anchorfile>classiDynTree_1_1ContactStateMachine.html</anchorfile>
      <anchor>a84f56bd6dc10cd56035c907c4a191c06</anchor>
      <arglist>(const SchmittParams &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>contactMeasurementUpdate</name>
      <anchorfile>classiDynTree_1_1ContactStateMachine.html</anchorfile>
      <anchor>a4557b8a49662617f8902e60b54a327fc</anchor>
      <arglist>(double currentTime, double contactNormalForce)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetDevice</name>
      <anchorfile>classiDynTree_1_1ContactStateMachine.html</anchorfile>
      <anchor>ad7c8a61bf69587923f0990bb3c88b23b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contactState</name>
      <anchorfile>classiDynTree_1_1ContactStateMachine.html</anchorfile>
      <anchor>ad7e300074de0e0e1627f4e6c6e50779a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>contactTransition</type>
      <name>contactTransitionMode</name>
      <anchorfile>classiDynTree_1_1ContactStateMachine.html</anchorfile>
      <anchor>a096c02021ab7d756c7de3553748d614b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lastUpdateTime</name>
      <anchorfile>classiDynTree_1_1ContactStateMachine.html</anchorfile>
      <anchor>a441c61571ece47719322503b7bad6ca5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; SchmittTrigger &gt;</type>
      <name>m_contactSchmitt</name>
      <anchorfile>classiDynTree_1_1ContactStateMachine.html</anchorfile>
      <anchor>a73662a4e19793f96e938acc8ef0f5b43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ContactWrench</name>
    <filename>classiDynTree_1_1ContactWrench.html</filename>
    <member kind="function">
      <type>Position &amp;</type>
      <name>contactPoint</name>
      <anchorfile>classiDynTree_1_1ContactWrench.html</anchorfile>
      <anchor>a41e18d5ec5cf140b37a675e069b2f0b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Wrench &amp;</type>
      <name>contactWrench</name>
      <anchorfile>classiDynTree_1_1ContactWrench.html</anchorfile>
      <anchor>a2d7a89a62f58c29c3bd451a38e9e733e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned long &amp;</type>
      <name>contactId</name>
      <anchorfile>classiDynTree_1_1ContactWrench.html</anchorfile>
      <anchor>a0d5b15060fceac46c01b23e04db63de0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Position &amp;</type>
      <name>contactPoint</name>
      <anchorfile>classiDynTree_1_1ContactWrench.html</anchorfile>
      <anchor>a3405f50ffeeb22522cc288242ac73c69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Wrench &amp;</type>
      <name>contactWrench</name>
      <anchorfile>classiDynTree_1_1ContactWrench.html</anchorfile>
      <anchor>a72d4e9fdb25fba554e2c89d749e2a4ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const unsigned long &amp;</type>
      <name>contactId</name>
      <anchorfile>classiDynTree_1_1ContactWrench.html</anchorfile>
      <anchor>a03746a6455d9a1a5ce583e0ab919fbb3</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::ControlledDynamicalSystem</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1ControlledDynamicalSystem.html</filename>
    <class kind="class">iDynTree::optimalcontrol::ControlledDynamicalSystem::ControlledDynamicalSystemImplementation</class>
    <member kind="function">
      <type></type>
      <name>ControlledDynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ControlledDynamicalSystem.html</anchorfile>
      <anchor>a9a54ab23ab86a89d1385c3715dd9f74c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ControlledDynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ControlledDynamicalSystem.html</anchorfile>
      <anchor>ab52ff2a4d3b4710dcae26c474debf1e8</anchor>
      <arglist>(const ControlledDynamicalSystem &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ControlledDynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ControlledDynamicalSystem.html</anchorfile>
      <anchor>adc948b7d3046a17f7095e3f09a624d23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ControlledDynamicalSystem.html</anchorfile>
      <anchor>abb44051465e3022d2cbdd60b6fd7bea3</anchor>
      <arglist>(std::shared_ptr&lt; DynamicalSystem &gt; autonomousSystem, bool usePreviousController=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setController</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ControlledDynamicalSystem.html</anchorfile>
      <anchor>aecd92e0995c2d54416a8f81c3e5c1426</anchor>
      <arglist>(std::shared_ptr&lt; Controller &gt; controller)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; DynamicalSystem &gt;</type>
      <name>asDynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ControlledDynamicalSystem.html</anchorfile>
      <anchor>add7e34c9914205a0a428692c83af1c18</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::ControlledDynamicalSystem::ControlledDynamicalSystemImplementation</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1ControlledDynamicalSystem_1_1ControlledDynamicalSystemImplementation.html</filename>
    <member kind="function">
      <type></type>
      <name>ControlledDynamicalSystemImplementation</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ControlledDynamicalSystem_1_1ControlledDynamicalSystemImplementation.html</anchorfile>
      <anchor>ade8a0562d067061a1e79a02e1fbac163</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; Controller &gt;</type>
      <name>lastController</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ControlledDynamicalSystem_1_1ControlledDynamicalSystemImplementation.html</anchorfile>
      <anchor>a70ede2a9a201730c2f649e12d64cc555</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; DerivedDynamicalSystem &gt;</type>
      <name>controlledSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ControlledDynamicalSystem_1_1ControlledDynamicalSystemImplementation.html</anchorfile>
      <anchor>a1a993a1d3f654577c4d9c90c40b23312</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; DynamicalSystem &gt;</type>
      <name>asDynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1ControlledDynamicalSystem_1_1ControlledDynamicalSystemImplementation.html</anchorfile>
      <anchor>a34a98dd8d28505720ff3eae9d983da29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::Controller</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1Controller.html</filename>
    <member kind="function">
      <type></type>
      <name>Controller</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Controller.html</anchorfile>
      <anchor>a5c6cef39543689d9432148446c299487</anchor>
      <arglist>(size_t controlSpaceSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Controller</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Controller.html</anchorfile>
      <anchor>ac2e2cf0c70604d5f1d4d234330602e4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>doControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Controller.html</anchorfile>
      <anchor>a9013b3f976e2b5a9e5095d17e4a28d9e</anchor>
      <arglist>(VectorDynSize &amp;controllerOutput)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setStateFeedback</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Controller.html</anchorfile>
      <anchor>ad4882e055d69768021bd78a886580106</anchor>
      <arglist>(double time, const VectorDynSize &amp;stateFeedback)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>controlSpaceSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Controller.html</anchorfile>
      <anchor>a8741ab8bc10e852123c11cb87749125b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::ConvertSem2motionForceTraits</name>
    <filename>structiDynTree_1_1ConvertSem2motionForceTraits.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>iDynTree::ConvertSem2motionForceTraits&lt; AngularForceVector3Semantics &gt;</name>
    <filename>structiDynTree_1_1ConvertSem2motionForceTraits_3_01AngularForceVector3Semantics_01_4.html</filename>
    <member kind="typedef">
      <type>MotionForce_traits&lt; AngularForceVector3 &gt;</type>
      <name>Traits</name>
      <anchorfile>structiDynTree_1_1ConvertSem2motionForceTraits_3_01AngularForceVector3Semantics_01_4.html</anchorfile>
      <anchor>ad97aba39455dc009d5f8b9bb7276f956</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::ConvertSem2motionForceTraits&lt; AngularMotionVector3Semantics &gt;</name>
    <filename>structiDynTree_1_1ConvertSem2motionForceTraits_3_01AngularMotionVector3Semantics_01_4.html</filename>
    <member kind="typedef">
      <type>MotionForce_traits&lt; AngularMotionVector3 &gt;</type>
      <name>Traits</name>
      <anchorfile>structiDynTree_1_1ConvertSem2motionForceTraits_3_01AngularMotionVector3Semantics_01_4.html</anchorfile>
      <anchor>abec38896f97d76b76ba591f07b5966e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::ConvertSem2motionForceTraits&lt; LinearForceVector3Semantics &gt;</name>
    <filename>structiDynTree_1_1ConvertSem2motionForceTraits_3_01LinearForceVector3Semantics_01_4.html</filename>
    <member kind="typedef">
      <type>MotionForce_traits&lt; LinearForceVector3 &gt;</type>
      <name>Traits</name>
      <anchorfile>structiDynTree_1_1ConvertSem2motionForceTraits_3_01LinearForceVector3Semantics_01_4.html</anchorfile>
      <anchor>a76b504e886f43211e153bc42c6717b20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::ConvertSem2motionForceTraits&lt; LinearMotionVector3Semantics &gt;</name>
    <filename>structiDynTree_1_1ConvertSem2motionForceTraits_3_01LinearMotionVector3Semantics_01_4.html</filename>
    <member kind="typedef">
      <type>MotionForce_traits&lt; LinearMotionVector3 &gt;</type>
      <name>Traits</name>
      <anchorfile>structiDynTree_1_1ConvertSem2motionForceTraits_3_01LinearMotionVector3Semantics_01_4.html</anchorfile>
      <anchor>a9c6812152bc3beca1d99aadb06750baf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ConvexHullProjectionConstraint</name>
    <filename>classiDynTree_1_1ConvexHullProjectionConstraint.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setActive</name>
      <anchorfile>classiDynTree_1_1ConvexHullProjectionConstraint.html</anchorfile>
      <anchor>ab4c121f74d52ad5644e9d34fa25627ce</anchor>
      <arglist>(const bool isActive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classiDynTree_1_1ConvexHullProjectionConstraint.html</anchorfile>
      <anchor>a6f2c6f94c250f829c773ccd57af8c91b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfConstraints</name>
      <anchorfile>classiDynTree_1_1ConvexHullProjectionConstraint.html</anchorfile>
      <anchor>a352974d52215c352df2b7782e96cea52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>buildConvexHull</name>
      <anchorfile>classiDynTree_1_1ConvexHullProjectionConstraint.html</anchorfile>
      <anchor>a13e3880c7cbe8c9edefcdf55acc6453c</anchor>
      <arglist>(const iDynTree::Direction xAxisOfPlaneInWorld, const iDynTree::Direction yAxisOfPlaneInWorld, const iDynTree::Position originOfPlaneInWorld, const std::vector&lt; Polygon &gt; &amp;supportPolygonsExpressedInSupportFrame, const std::vector&lt; Transform &gt; &amp;absoluteFrame_X_supportFrame)</arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>project</name>
      <anchorfile>classiDynTree_1_1ConvexHullProjectionConstraint.html</anchorfile>
      <anchor>a59453b10a697b26c1bb8412ff6de23bc</anchor>
      <arglist>(iDynTree::Position &amp;posIn3dInAbsoluteFrame)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeMargin</name>
      <anchorfile>classiDynTree_1_1ConvexHullProjectionConstraint.html</anchorfile>
      <anchor>a059bd064100e5d7ec355db11d8eb2247</anchor>
      <arglist>(const Vector2 &amp;posIn2D)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionAlongDirection</name>
      <anchorfile>classiDynTree_1_1ConvexHullProjectionConstraint.html</anchorfile>
      <anchor>ab86c9c5ee910a7d992d172ad57491515</anchor>
      <arglist>(Vector3 direction)</arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>projectAlongDirection</name>
      <anchorfile>classiDynTree_1_1ConvexHullProjectionConstraint.html</anchorfile>
      <anchor>a7e557bf0b5e69f9d1130a8fcd205a1a5</anchor>
      <arglist>(iDynTree::Position &amp;posIn3dInAbsoluteFrame)</arglist>
    </member>
    <member kind="variable">
      <type>Polygon2D</type>
      <name>projectedConvexHull</name>
      <anchorfile>classiDynTree_1_1ConvexHullProjectionConstraint.html</anchorfile>
      <anchor>a2fb8660bb7a22f483fa131afe9f0f0a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixDynSize</type>
      <name>A</name>
      <anchorfile>classiDynTree_1_1ConvexHullProjectionConstraint.html</anchorfile>
      <anchor>ae9a9c4c0431f2304a4d96fbe05050c02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>b</name>
      <anchorfile>classiDynTree_1_1ConvexHullProjectionConstraint.html</anchorfile>
      <anchor>a5b139d3f1537af28205aa35951cf9efc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix2x3</type>
      <name>P</name>
      <anchorfile>classiDynTree_1_1ConvexHullProjectionConstraint.html</anchorfile>
      <anchor>a14a6666c07b7422f23842628c06dc869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix2x3</type>
      <name>Pdirection</name>
      <anchorfile>classiDynTree_1_1ConvexHullProjectionConstraint.html</anchorfile>
      <anchor>a1bad4948a74b4d6b609396ab13deea40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixDynSize</type>
      <name>AtimesP</name>
      <anchorfile>classiDynTree_1_1ConvexHullProjectionConstraint.html</anchorfile>
      <anchor>a6045a81d03a76f3384b3c68ced17cfba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Position</type>
      <name>o</name>
      <anchorfile>classiDynTree_1_1ConvexHullProjectionConstraint.html</anchorfile>
      <anchor>a041fceaaceea5cdc5a53670e26352f8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>supportFrameIndices</name>
      <anchorfile>classiDynTree_1_1ConvexHullProjectionConstraint.html</anchorfile>
      <anchor>abecdae2b60c7cbfd13b585679271f99b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Transform &gt;</type>
      <name>absoluteFrame_X_supportFrame</name>
      <anchorfile>classiDynTree_1_1ConvexHullProjectionConstraint.html</anchorfile>
      <anchor>a612270a7771c882f80c76d64a220e54a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::Cost</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1Cost.html</filename>
    <member kind="function">
      <type></type>
      <name>Cost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Cost.html</anchorfile>
      <anchor>a97ea5427f72a47d5abd6b37ca71a51f5</anchor>
      <arglist>(const std::string &amp;costName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Cost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Cost.html</anchorfile>
      <anchor>a3570feb53313bcc738e84b309da88f96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Cost.html</anchorfile>
      <anchor>ab75a1c3759901f6cd1dc3543481d06c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>costEvaluation</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Cost.html</anchorfile>
      <anchor>a1bb0880783d8f4ed6baff2b922a571f0</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, double &amp;costValue)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costFirstPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Cost.html</anchorfile>
      <anchor>a14e94945d7910f3ccbfc93c5d0361e3f</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::VectorDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costFirstPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Cost.html</anchorfile>
      <anchor>ab0ee005fc5c31e339afe49465ad16bcb</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::VectorDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Cost.html</anchorfile>
      <anchor>a91f19ea556fe7f0472dd2b55fe8d2fee</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::MatrixDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Cost.html</anchorfile>
      <anchor>a17cc161e55da4ab15fee752638d58516</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::MatrixDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTStateControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Cost.html</anchorfile>
      <anchor>a1a9170a3ef8c1aff0bdcf1fd20792cec</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::MatrixDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Cost.html</anchorfile>
      <anchor>ac788ccbdeb3d62c5efe7086eae118514</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Cost.html</anchorfile>
      <anchor>a46f4d4ebe9c1cca2801719097f17ba13</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateControlSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Cost.html</anchorfile>
      <anchor>a738632bad6504574fb6c61da3adafe11</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::CostAttributes</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</filename>
    <member kind="function">
      <type>void</type>
      <name>initializeBuffers</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</anchorfile>
      <anchor>ab71e518a6e80e85c7744e6e7d963fb82</anchor>
      <arglist>(unsigned int rangeSize, unsigned int totalDimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</anchorfile>
      <anchor>aa2d6064f89763a13efb78f88891db8a1</anchor>
      <arglist>(const IndexRange &amp;selectedRange, unsigned int totalDimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</anchorfile>
      <anchor>ac1f6c56655999cf94bdb2bb1950cf729</anchor>
      <arglist>(const MatrixDynSize &amp;inputSelector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDesiredTrajectory</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</anchorfile>
      <anchor>ad37d94e342f04e47dc79f4f25f9a761f</anchor>
      <arglist>(std::shared_ptr&lt; TimeVaryingVector &gt; inputTrajectory)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setWeightMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</anchorfile>
      <anchor>a8c1e9c718230dd2dea98beeb635be848</anchor>
      <arglist>(const MatrixDynSize &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setWeightMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</anchorfile>
      <anchor>af89f16157fb2eca9439d9bc2b3987e83</anchor>
      <arglist>(const VectorDynSize &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeSelector</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</anchorfile>
      <anchor>ab0be5d393e287e2bd9de8f5191fc57c0</anchor>
      <arglist>(const MatrixDynSize &amp;inputSelector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</anchorfile>
      <anchor>ac08ab87051147aed6eb558b7d8b6feb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</anchorfile>
      <anchor>a16dfd4e6deccf584e868ddfe92f38a92</anchor>
      <arglist>(double time, const VectorDynSize &amp;values, double &amp;costValue, const std::string &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateGradient</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</anchorfile>
      <anchor>a6b191871a164764e81d0154aa214306f</anchor>
      <arglist>(double time, const VectorDynSize &amp;values, VectorDynSize &amp;partialDerivative, const std::string &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getHessian</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</anchorfile>
      <anchor>a3c94d15f3b2b544e0d36ee2c4ee5d5b3</anchor>
      <arglist>(const VectorDynSize &amp;values, MatrixDynSize &amp;partialDerivative, const std::string &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>const SparsityStructure &amp;</type>
      <name>getHessianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</anchorfile>
      <anchor>a60eef68af5f913c1f6e49e6d9a59329e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; TimeVaryingVector &gt;</type>
      <name>desiredTrajectory</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</anchorfile>
      <anchor>a881ddf6ab7b057c2bb6a3a02be5bb6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::MatrixDynSize</type>
      <name>gradientSubMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</anchorfile>
      <anchor>a95fdc0f2f2a8a8c79bfe2b221d0b48af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::MatrixDynSize</type>
      <name>hessianMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</anchorfile>
      <anchor>a431bb559cdc17ba24eebb9200658ebd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::MatrixDynSize</type>
      <name>weightMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</anchorfile>
      <anchor>a317ca6dacf1615471a9dc5a425440d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; Selector &gt;</type>
      <name>selector</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</anchorfile>
      <anchor>a5fd0f271cf634dd2d5cac133e0bf2a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>buffer</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1CostAttributes.html</anchorfile>
      <anchor>a097dc1d8206e95783115386d6efb5898</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::CubicSpline</name>
    <filename>classiDynTree_1_1CubicSpline.html</filename>
    <member kind="function">
      <type></type>
      <name>CubicSpline</name>
      <anchorfile>classiDynTree_1_1CubicSpline.html</anchorfile>
      <anchor>a7a8786b8af7dc928ef1b2403e99986ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSpline</name>
      <anchorfile>classiDynTree_1_1CubicSpline.html</anchorfile>
      <anchor>af8cf647e87fe3bb2b20892c064cc6299</anchor>
      <arglist>(unsigned int buffersDimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setData</name>
      <anchorfile>classiDynTree_1_1CubicSpline.html</anchorfile>
      <anchor>aa710c371f1764b3ded4c987eaa332d50</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;time, const iDynTree::VectorDynSize &amp;yData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialConditions</name>
      <anchorfile>classiDynTree_1_1CubicSpline.html</anchorfile>
      <anchor>a7e3bc04b73fd0eaba3777e792d24d1d8</anchor>
      <arglist>(double initialVelocity, double initialAcceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinalConditions</name>
      <anchorfile>classiDynTree_1_1CubicSpline.html</anchorfile>
      <anchor>a1788387538428d08b01fc64d4e14fbbe</anchor>
      <arglist>(double finalVelocity, double finalAcceleration)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluatePoint</name>
      <anchorfile>classiDynTree_1_1CubicSpline.html</anchorfile>
      <anchor>abfee06bdec13637fa531fab8e9af3c32</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluatePoint</name>
      <anchorfile>classiDynTree_1_1CubicSpline.html</anchorfile>
      <anchor>a939f5cc592336be4ff7f92caee1f784b</anchor>
      <arglist>(double t, double &amp;velocity, double &amp;acceleration)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Cylinder</name>
    <filename>classiDynTree_1_1Cylinder.html</filename>
    <base>iDynTree::SolidShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Cylinder</name>
      <anchorfile>classiDynTree_1_1Cylinder.html</anchorfile>
      <anchor>a18b931f7b10bdfe6802db0d527da5be7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolidShape *</type>
      <name>clone</name>
      <anchorfile>classiDynTree_1_1Cylinder.html</anchorfile>
      <anchor>a3aaf1fadb11600c85d8d0d0fc9de6650</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSphere</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a8ba065f0e60ad78baad071a3a870faf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBox</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a661c33c6139a4cde9c9eeb55ebcd915e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCylinder</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a8218783b444c4f651ebc5517399a04bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExternalMesh</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>aeef66627d452a2b192c9d62ac6e6b908</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Sphere *</type>
      <name>asSphere</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a99663faed75dfd72d0d89cc4bed840d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Sphere *</type>
      <name>asSphere</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a720d8b9d4d78dc3ae961e0c9f0529465</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Box *</type>
      <name>asBox</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a45e488bee1b295013389a7c67a5512f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box *</type>
      <name>asBox</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a4ea5d8b8ea2e334c1edecc390ca2e06c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cylinder *</type>
      <name>asCylinder</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>ac1a4e162221fb08c270af4d0424b86b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Cylinder *</type>
      <name>asCylinder</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>ac6ba4dbcf0b0a10b8f09689d85842515</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ExternalMesh *</type>
      <name>asExternalMesh</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a87e9c96203f414d82a09ea4c391f1d88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExternalMesh *</type>
      <name>asExternalMesh</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a6ed24fecde411acdfc1d1c6cfdaa4330</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>length</name>
      <anchorfile>classiDynTree_1_1Cylinder.html</anchorfile>
      <anchor>a75133a2141be7b8e56b314032774964c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>radius</name>
      <anchorfile>classiDynTree_1_1Cylinder.html</anchorfile>
      <anchor>abc2eb4a54c374743547791509fe532a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a5026e44f557e25b407642e95dd7bbb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>nameIsValid</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>adca1aa44db797c0122b0479b2a65ff9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform</type>
      <name>link_H_geometry</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a8be2a1e24878ac8de853123219a6ac64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector4</type>
      <name>material</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a61f1577ee526add690666ad2e07e21c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cmdline::default_reader</name>
    <filename>structcmdline_1_1default__reader.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structcmdline_1_1default__reader.html</anchorfile>
      <anchor>a71f97c64added8d907fb95c0e5fe1f6f</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimization::DenseIterator</name>
    <filename>classiDynTree_1_1optimization_1_1DenseIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>DenseIterator</name>
      <anchorfile>classiDynTree_1_1optimization_1_1DenseIterator.html</anchorfile>
      <anchor>af8f7fe793ce72488dac78a6b70f2885d</anchor>
      <arglist>(std::shared_ptr&lt; MatrixDynSize &gt; denseMatrix, bool addIdentityOnTop=false)</arglist>
    </member>
    <member kind="function">
      <type>DenseIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classiDynTree_1_1optimization_1_1DenseIterator.html</anchorfile>
      <anchor>a35d3b49d98762d217e6c5bda85e55e3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1optimization_1_1DenseIterator.html</anchorfile>
      <anchor>a045a43cb357878a848d30da223f989f3</anchor>
      <arglist>(const DenseIterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiDynTree_1_1optimization_1_1DenseIterator.html</anchorfile>
      <anchor>ab7fcef2c33a2d115951f6c0e0022a4d5</anchor>
      <arglist>(const DenseIterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Triplet *</type>
      <name>operator-&gt;</name>
      <anchorfile>classiDynTree_1_1optimization_1_1DenseIterator.html</anchorfile>
      <anchor>a0262a3cb3177c4f1c9924bf4cb42a42f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Triplet &amp;</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1optimization_1_1DenseIterator.html</anchorfile>
      <anchor>a14aacdbcb49ad1ea68428053b074e448</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DenseIterator</type>
      <name>begin</name>
      <anchorfile>classiDynTree_1_1optimization_1_1DenseIterator.html</anchorfile>
      <anchor>ab138b7cbdd22d57aecdda88e19a04494</anchor>
      <arglist>(std::shared_ptr&lt; MatrixDynSize &gt; denseMatrix, bool addIdentityOnTop=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DenseIterator</type>
      <name>end</name>
      <anchorfile>classiDynTree_1_1optimization_1_1DenseIterator.html</anchorfile>
      <anchor>a809a464a14c6c024dcd265a30e2a425f</anchor>
      <arglist>(std::shared_ptr&lt; MatrixDynSize &gt; denseMatrix, bool addIdentityOnTop=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::DerivedDynamicalSystem</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1DerivedDynamicalSystem.html</filename>
    <base>iDynTree::optimalcontrol::DynamicalSystem</base>
    <member kind="function">
      <type></type>
      <name>DerivedDynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DerivedDynamicalSystem.html</anchorfile>
      <anchor>abce111bdfaf4c1ddd014ff71286b8793</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DerivedDynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DerivedDynamicalSystem.html</anchorfile>
      <anchor>afb54de84a689023f8493f9d264af22e3</anchor>
      <arglist>(std::shared_ptr&lt; DynamicalSystem &gt; autonomousSystem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DerivedDynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DerivedDynamicalSystem.html</anchorfile>
      <anchor>aa1ca5b510c2794ca970f84178d250a3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setController</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DerivedDynamicalSystem.html</anchorfile>
      <anchor>a7b969e08131e14e1b7a52697243305e4</anchor>
      <arglist>(std::shared_ptr&lt; Controller &gt; controller)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamics</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DerivedDynamicalSystem.html</anchorfile>
      <anchor>a88f34254c07ba9542e34e3520418e9bf</anchor>
      <arglist>(const VectorDynSize &amp;state, double time, VectorDynSize &amp;stateDynamics) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setControlInput</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DerivedDynamicalSystem.html</anchorfile>
      <anchor>adbd9f3cd4539ba035aac540b1dfb8b25</anchor>
      <arglist>(const VectorDynSize &amp;control) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VectorDynSize &amp;</type>
      <name>initialState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DerivedDynamicalSystem.html</anchorfile>
      <anchor>a1fd99959d9beca663b96dc431f5e444a</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setInitialState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DerivedDynamicalSystem.html</anchorfile>
      <anchor>a61fbd2efb86a8a0b1a99298f861e06f0</anchor>
      <arglist>(const VectorDynSize &amp;state) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsStateFirstDerivative</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DerivedDynamicalSystem.html</anchorfile>
      <anchor>a51d86ea9a48a45323d47d21c4e519a46</anchor>
      <arglist>(const VectorDynSize &amp;state, double time, MatrixDynSize &amp;dynamicsDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsControlFirstDerivative</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DerivedDynamicalSystem.html</anchorfile>
      <anchor>afc4122f549b5b94d10d25b65db577767</anchor>
      <arglist>(const VectorDynSize &amp;state, double time, MatrixDynSize &amp;dynamicsDerivative) final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>stateSpaceSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a1fdc25cc07f3bc2d02ac0cc2c74e8abc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>controlSpaceSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ae9048969fa6bb586f08332aa279ac01a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VectorDynSize &amp;</type>
      <name>controlInput</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ac130f0cfaa6a5843fdbcb944493b7951</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>controlInput</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a165aa744348a711a192333374a5b938b</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>initialState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a91ba05fa8d7fd40b9336f33130ec48ed</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsStateFirstDerivativeSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>accd838dc2907a169e22c70c694011175</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsControlFirstDerivativeSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a643ace9059ca3fa31cd05037a1531fa3</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a2eb5bc925c0c9b44daf3430972cdefb4</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;lambda, iDynTree::MatrixDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a4337e4f4965ca5ddfe86ecc25e200da9</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;lambda, iDynTree::MatrixDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTStateControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ad92bf817f57da0b2d6752022bc31a20d</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;lambda, iDynTree::MatrixDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ab843117494f9eaa4b11b380bb3eb6737</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ab43abf8cf7f671213184e811e815b10f</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateControlSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>aa75c7d3cf8bf63b622bc6b83d392a100</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::DHChain</name>
    <filename>classiDynTree_1_1DHChain.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setNrOfDOFs</name>
      <anchorfile>classiDynTree_1_1DHChain.html</anchorfile>
      <anchor>ac8509771f5d1f9488791bbf352302a37</anchor>
      <arglist>(size_t nDofs)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfDOFs</name>
      <anchorfile>classiDynTree_1_1DHChain.html</anchorfile>
      <anchor>ac8ec2b05145ff21bd09102050f41be52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setH0</name>
      <anchorfile>classiDynTree_1_1DHChain.html</anchorfile>
      <anchor>ac1e61774269fcf4ca8ed17a610ff2e1a</anchor>
      <arglist>(const iDynTree::Transform &amp;_H0)</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::Transform &amp;</type>
      <name>getH0</name>
      <anchorfile>classiDynTree_1_1DHChain.html</anchorfile>
      <anchor>a41688a12cc02ce9ecd51a668cb6fbbd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHN</name>
      <anchorfile>classiDynTree_1_1DHChain.html</anchorfile>
      <anchor>aa08991e4469d716726dea2904b7659e7</anchor>
      <arglist>(const Transform &amp;_HN)</arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getHN</name>
      <anchorfile>classiDynTree_1_1DHChain.html</anchorfile>
      <anchor>ae7a81bd292ec0c4c4f26993f685a7470</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DHLink &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1DHChain.html</anchorfile>
      <anchor>aeda25a128d33e7587a73d9231ccb4705</anchor>
      <arglist>(const size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const DHLink &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1DHChain.html</anchorfile>
      <anchor>a58c7f02081d238760a003b39663538be</anchor>
      <arglist>(const size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDOFName</name>
      <anchorfile>classiDynTree_1_1DHChain.html</anchorfile>
      <anchor>ae0d3f071d632ec173a33fa5d38e2bcdb</anchor>
      <arglist>(size_t dofIdx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDOFName</name>
      <anchorfile>classiDynTree_1_1DHChain.html</anchorfile>
      <anchor>af1384b7f4385bfb88a1fb5031d5eb467</anchor>
      <arglist>(size_t dofIdx, const std::string &amp;dofName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toModel</name>
      <anchorfile>classiDynTree_1_1DHChain.html</anchorfile>
      <anchor>a6131ce652566c6f82cee9e51cfb15010</anchor>
      <arglist>(Model &amp;outputModel) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromModel</name>
      <anchorfile>classiDynTree_1_1DHChain.html</anchorfile>
      <anchor>a2ba930d39c99e692f39a9649f3588099</anchor>
      <arglist>(const iDynTree::Model &amp;model, std::string baseFrame, std::string eeFrame)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::DHLink</name>
    <filename>structiDynTree_1_1DHLink.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>A</name>
      <anchorfile>structiDynTree_1_1DHLink.html</anchorfile>
      <anchor>abdf3091a9be9717958dfd34a638a36c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>D</name>
      <anchorfile>structiDynTree_1_1DHLink.html</anchorfile>
      <anchor>a8ff447e8d5dbd529df73ebe52942002f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Alpha</name>
      <anchorfile>structiDynTree_1_1DHLink.html</anchorfile>
      <anchor>ab0d1b90f8b9426ef971bb1bc9be52c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Offset</name>
      <anchorfile>structiDynTree_1_1DHLink.html</anchorfile>
      <anchor>a52a155fa9a88620f759833cd1372b2eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Min</name>
      <anchorfile>structiDynTree_1_1DHLink.html</anchorfile>
      <anchor>aee26eee6f5b68bc4e1df717737770ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Max</name>
      <anchorfile>structiDynTree_1_1DHLink.html</anchorfile>
      <anchor>a926a3e6338c3068e1232ad50b9a73841</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Direction</name>
    <filename>classiDynTree_1_1Direction.html</filename>
    <base>iDynTree::VectorFixSize</base>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ada7487eff1fee83db8d41165d30f1263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ad0f06a255dc213a5904d232f703a0192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aa11c3eee00e88dabb7880f6cac2a9b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a69b51f8119155d31a254676ae867ae8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Direction</name>
      <anchorfile>classiDynTree_1_1Direction.html</anchorfile>
      <anchor>a43663eaa83353965c43db097c958b521</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Direction</name>
      <anchorfile>classiDynTree_1_1Direction.html</anchorfile>
      <anchor>a672c6529f15e722aae114037129079d1</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Direction</name>
      <anchorfile>classiDynTree_1_1Direction.html</anchorfile>
      <anchor>a27bad1805642f34c355f1acdf4a342fb</anchor>
      <arglist>(const Direction &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Direction</name>
      <anchorfile>classiDynTree_1_1Direction.html</anchorfile>
      <anchor>a1609526471348ae9e754b980dbb031fd</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Normalize</name>
      <anchorfile>classiDynTree_1_1Direction.html</anchorfile>
      <anchor>a5d5834ef11b8373e4349dbe4f6020d08</anchor>
      <arglist>(double tol=DEFAULT_TOL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParallel</name>
      <anchorfile>classiDynTree_1_1Direction.html</anchorfile>
      <anchor>af9342642d4167ba6916f81a483b061f4</anchor>
      <arglist>(const Direction &amp;otherDirection, double tolerance) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPerpendicular</name>
      <anchorfile>classiDynTree_1_1Direction.html</anchorfile>
      <anchor>a71848027a8d49d11d937e55fc926bd29</anchor>
      <arglist>(const Direction &amp;otherDirection, double tolerance) const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>reverse</name>
      <anchorfile>classiDynTree_1_1Direction.html</anchorfile>
      <anchor>af8fe72342e63486a2f6cdbcbc35f1bac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a3bd1389dbdf51e06f4c64451c242397e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab6f044aea32e55a72f6ebed68f93f767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a57b77a6c96f3276ed8e12b5e35b7f442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBuffer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aee106d61ebb0925fecfa55cbaa515981</anchor>
      <arglist>(double *buf) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1Direction.html</anchorfile>
      <anchor>a4e2d75723e6a784e2404700f672f6bad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1Direction.html</anchorfile>
      <anchor>ab007f4cdb99df36cc3f1faca4aa26f7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a2e935e37d751752feab107dc58560aaf</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a8ca6cab1f06019c34d593f0aaff4dced</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a9c0f65c965c198e3bebd3cc9a03937d3</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab0e81983f76aab4997962a423dc3189d</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>abc9aca9e8f729a9d78e4da70bac72382</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>af793dbb7d980c53813b1bccc4703f450</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a5f04ccb5f96cd94aa207b98ced2b3254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Direction</type>
      <name>Default</name>
      <anchorfile>classiDynTree_1_1Direction.html</anchorfile>
      <anchor>a6b931f84b17379de11ef081c08798fdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a7bf5cd26b6fc24c9ddaf8854ebb8ec63</anchor>
      <arglist>[VecSize]</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1Direction.html</anchorfile>
      <anchor>a4e2d75723e6a784e2404700f672f6bad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1Direction.html</anchorfile>
      <anchor>ab007f4cdb99df36cc3f1faca4aa26f7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a2e935e37d751752feab107dc58560aaf</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a8ca6cab1f06019c34d593f0aaff4dced</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a9c0f65c965c198e3bebd3cc9a03937d3</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab0e81983f76aab4997962a423dc3189d</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>abc9aca9e8f729a9d78e4da70bac72382</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>af793dbb7d980c53813b1bccc4703f450</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a5f04ccb5f96cd94aa207b98ced2b3254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ada7487eff1fee83db8d41165d30f1263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ad0f06a255dc213a5904d232f703a0192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aa11c3eee00e88dabb7880f6cac2a9b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a69b51f8119155d31a254676ae867ae8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::DiscreteExtendedKalmanFilterHelper</name>
    <filename>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</filename>
    <member kind="function">
      <type></type>
      <name>DiscreteExtendedKalmanFilterHelper</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a6cb21a197ab80253529694710473c0fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>ekf_f</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>aa35db724dab6168cb3d84e44cbb809ea</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;x_k, const iDynTree::VectorDynSize &amp;u_k, iDynTree::VectorDynSize &amp;xhat_k_plus_one)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>ekf_h</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a823fd6ec74999d302d6ba38322de1a82</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;xhat_k_plus_one, iDynTree::VectorDynSize &amp;zhat_k_plus_one)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>ekfComputeJacobianF</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>acfe816c4328411dcdd86426b1877510f</anchor>
      <arglist>(iDynTree::VectorDynSize &amp;x, iDynTree::MatrixDynSize &amp;F)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>ekfComputeJacobianF</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>aa5f048b7cf4b255e9d77b06edf7d4f3d</anchor>
      <arglist>(iDynTree::VectorDynSize &amp;x, iDynTree::VectorDynSize &amp;u, iDynTree::MatrixDynSize &amp;F)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>ekfComputeJacobianH</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a8729efeddce087e809db28749fb2da20</anchor>
      <arglist>(iDynTree::VectorDynSize &amp;x, iDynTree::MatrixDynSize &amp;H)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfPredict</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a06e0c6ab212f148079af396e0eb69244</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfUpdate</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a3511ef7000edb1af2f22c750ac5ccb63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfInit</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a37450d1833a7ce6d7b2caec4e00c9a62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfInit</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a48dda1a9c2249dc1d7d38dbc6da69b8b</anchor>
      <arglist>(const size_t &amp;state_size, const size_t &amp;input_size, const size_t &amp;output_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ekfReset</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a236c419106fbe83a4651cdd8f28fb3f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfReset</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a5980548288752504e9e4758b532e4c66</anchor>
      <arglist>(const size_t &amp;state_size, const size_t &amp;input_size, const size_t &amp;output_size, const iDynTree::Span&lt; double &gt; &amp;x0, const iDynTree::Span&lt; double &gt; &amp;P0, const iDynTree::Span&lt; double &gt; &amp;Q, const iDynTree::Span&lt; double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfSetMeasurementVector</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a395b24fd4ae30bb88b35179ea80117cb</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfSetInputVector</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>af2ec69c3ded347027f494c84af300d45</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfSetInitialState</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>abcc0fd06681f866166e527abf303929e</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;x0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfSetStateCovariance</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a557ecd035b2ff1e2267d3f98c0cf3a35</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfSetSystemNoiseCovariance</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a927eee549a560c68d95cbea5b0cec797</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfSetMeasurementNoiseCovariance</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a0d1bd4ba94586c78c477a4a3af1fce0b</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ekfSetStateSize</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a47a4ba3b26206d2607d724866e4bfd1a</anchor>
      <arglist>(size_t dim_X)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ekfSetInputSize</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a301ab496750472b1681d509e30c75da1</anchor>
      <arglist>(size_t dim_U)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ekfSetOutputSize</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>af8e0003290ca166251c7d8bb4a80162d</anchor>
      <arglist>(size_t dim_Y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfGetStates</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a46b41687186a840fdd1b15288339c51e</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ekfGetStateCovariance</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a65ac546a68e8ee705927c5dd9b57eb11</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;P) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ignore</name>
      <anchorfile>classiDynTree_1_1DiscreteExtendedKalmanFilterHelper.html</anchorfile>
      <anchor>a540be21bdc4ec8636da39190df3a3157</anchor>
      <arglist>(T &amp;&amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::DiscreteKalmanFilterHelper</name>
    <filename>classiDynTree_1_1DiscreteKalmanFilterHelper.html</filename>
    <member kind="function">
      <type></type>
      <name>DiscreteKalmanFilterHelper</name>
      <anchorfile>classiDynTree_1_1DiscreteKalmanFilterHelper.html</anchorfile>
      <anchor>a6e92e6097a9c72d5112dd132d2ea2a0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constructKalmanFilter</name>
      <anchorfile>classiDynTree_1_1DiscreteKalmanFilterHelper.html</anchorfile>
      <anchor>aa21afff6cf2dbf26aa40456f5f19cd03</anchor>
      <arglist>(const iDynTree::MatrixDynSize &amp;A, const iDynTree::MatrixDynSize &amp;B, const iDynTree::MatrixDynSize &amp;C, const iDynTree::MatrixDynSize &amp;D)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constructKalmanFilter</name>
      <anchorfile>classiDynTree_1_1DiscreteKalmanFilterHelper.html</anchorfile>
      <anchor>a8a72b101b740dadfc402ec8afb0c1e24</anchor>
      <arglist>(const iDynTree::MatrixDynSize &amp;A, const iDynTree::MatrixDynSize &amp;B, const iDynTree::MatrixDynSize &amp;C)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constructKalmanFilter</name>
      <anchorfile>classiDynTree_1_1DiscreteKalmanFilterHelper.html</anchorfile>
      <anchor>a3b4495421947a0c45dce66302dea1131</anchor>
      <arglist>(const iDynTree::MatrixDynSize &amp;A, const iDynTree::MatrixDynSize &amp;C)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>kfSetInitialState</name>
      <anchorfile>classiDynTree_1_1DiscreteKalmanFilterHelper.html</anchorfile>
      <anchor>a9352a67f115714e8c1b33fa31bfe35e4</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;x0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>kfSetStateCovariance</name>
      <anchorfile>classiDynTree_1_1DiscreteKalmanFilterHelper.html</anchorfile>
      <anchor>a9d9d8650d8f0f69a75a85cf7297a449c</anchor>
      <arglist>(const iDynTree::MatrixDynSize &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>kfSetSystemNoiseCovariance</name>
      <anchorfile>classiDynTree_1_1DiscreteKalmanFilterHelper.html</anchorfile>
      <anchor>ab827cf616cbc08e7cb4ced4e00454cdb</anchor>
      <arglist>(const iDynTree::MatrixDynSize &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>kfSetMeasurementNoiseCovariance</name>
      <anchorfile>classiDynTree_1_1DiscreteKalmanFilterHelper.html</anchorfile>
      <anchor>ab6f38e366f4cdec7dde0d1ef7a07b08a</anchor>
      <arglist>(const iDynTree::MatrixDynSize &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>kfInit</name>
      <anchorfile>classiDynTree_1_1DiscreteKalmanFilterHelper.html</anchorfile>
      <anchor>a84517077a1e6cda8d31ebc9692c472e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>kfSetInputVector</name>
      <anchorfile>classiDynTree_1_1DiscreteKalmanFilterHelper.html</anchorfile>
      <anchor>acb2a1a9a2b6325fb9607cd03eac3264d</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>kfPredict</name>
      <anchorfile>classiDynTree_1_1DiscreteKalmanFilterHelper.html</anchorfile>
      <anchor>a62d9614df8c118dfc724299580c6b1f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>kfSetMeasurementVector</name>
      <anchorfile>classiDynTree_1_1DiscreteKalmanFilterHelper.html</anchorfile>
      <anchor>af31fb466481343f57b98864ba81b2c50</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>kfUpdate</name>
      <anchorfile>classiDynTree_1_1DiscreteKalmanFilterHelper.html</anchorfile>
      <anchor>a27141bb647a7b20076d054ee4fe0f912</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>kfGetStates</name>
      <anchorfile>classiDynTree_1_1DiscreteKalmanFilterHelper.html</anchorfile>
      <anchor>afd296039a06a6d90477648be49b1ddbf</anchor>
      <arglist>(iDynTree::VectorDynSize &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>kfGetStateCovariance</name>
      <anchorfile>classiDynTree_1_1DiscreteKalmanFilterHelper.html</anchorfile>
      <anchor>a47b76a7de3f01be1b70cfe792939c321</anchor>
      <arglist>(iDynTree::MatrixDynSize &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>kfReset</name>
      <anchorfile>classiDynTree_1_1DiscreteKalmanFilterHelper.html</anchorfile>
      <anchor>a0ee09e0a76acfbf37443c26a58ab3100</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>kfReset</name>
      <anchorfile>classiDynTree_1_1DiscreteKalmanFilterHelper.html</anchorfile>
      <anchor>a16c084e0804a0d52e3a32fb5deab03b3</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;x0, const iDynTree::MatrixDynSize &amp;P0, const iDynTree::MatrixDynSize &amp;Q, const iDynTree::MatrixDynSize &amp;R)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::DOFSpatialForceArray</name>
    <filename>classiDynTree_1_1DOFSpatialForceArray.html</filename>
    <member kind="function">
      <type></type>
      <name>DOFSpatialForceArray</name>
      <anchorfile>classiDynTree_1_1DOFSpatialForceArray.html</anchorfile>
      <anchor>a5b5814ebf4e768d55aabd91dec32026f</anchor>
      <arglist>(unsigned int nrOfDOFs=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DOFSpatialForceArray</name>
      <anchorfile>classiDynTree_1_1DOFSpatialForceArray.html</anchorfile>
      <anchor>a1d0d0cf5b72815ab0a2a9851f80a9abb</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1DOFSpatialForceArray.html</anchorfile>
      <anchor>a5f8f162dcd4d5235d0da4b14d8c54523</anchor>
      <arglist>(const unsigned int nrOfDOFs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1DOFSpatialForceArray.html</anchorfile>
      <anchor>a12df728ab52203e8ae5cf272fa182ad5</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1DOFSpatialForceArray.html</anchorfile>
      <anchor>ae6eb03cd772474610315378aa9e546a6</anchor>
      <arglist>(const iDynTree::Model &amp;model) const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SpatialForceVector &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1DOFSpatialForceArray.html</anchorfile>
      <anchor>a7c4f47d8c9629c1622f355f194873768</anchor>
      <arglist>(const size_t dof)</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::SpatialForceVector &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1DOFSpatialForceArray.html</anchorfile>
      <anchor>a5012206ff8b5b7c87ee911e8e54b8d0c</anchor>
      <arglist>(const size_t dof) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DOFSpatialForceArray</name>
      <anchorfile>classiDynTree_1_1DOFSpatialForceArray.html</anchorfile>
      <anchor>aa8afed1e7569ba155aba45abd1721ff8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::DOFSpatialMotionArray</name>
    <filename>classiDynTree_1_1DOFSpatialMotionArray.html</filename>
    <member kind="function">
      <type></type>
      <name>DOFSpatialMotionArray</name>
      <anchorfile>classiDynTree_1_1DOFSpatialMotionArray.html</anchorfile>
      <anchor>a199ec49798d30a6b87c66c68698f5558</anchor>
      <arglist>(unsigned int nrOfDOFs=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DOFSpatialMotionArray</name>
      <anchorfile>classiDynTree_1_1DOFSpatialMotionArray.html</anchorfile>
      <anchor>a48e1e7e2f8d578b983220ab091274482</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1DOFSpatialMotionArray.html</anchorfile>
      <anchor>ab8a3abc9fd2b7218550755ed2bcc741d</anchor>
      <arglist>(const unsigned int nrOfDOFs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1DOFSpatialMotionArray.html</anchorfile>
      <anchor>a2c03aa02d558e139337d061e4b471785</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1DOFSpatialMotionArray.html</anchorfile>
      <anchor>a84105fd3e858f5a55645a4436e125ec5</anchor>
      <arglist>(const iDynTree::Model &amp;model) const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SpatialMotionVector &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1DOFSpatialMotionArray.html</anchorfile>
      <anchor>a65d289d8868a71be8244eac68a09c4ac</anchor>
      <arglist>(const size_t dof)</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::SpatialMotionVector &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1DOFSpatialMotionArray.html</anchorfile>
      <anchor>a3a3eb8a745f773e4c9ae94f2060cc4f4</anchor>
      <arglist>(const size_t dof) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DOFSpatialMotionArray</name>
      <anchorfile>classiDynTree_1_1DOFSpatialMotionArray.html</anchorfile>
      <anchor>ab5331dbe1432a3442f2ed81a6d3eb621</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::DualMotionForceSemanticsT</name>
    <filename>structiDynTree_1_1DualMotionForceSemanticsT.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>MotionForce_traits&lt; typename ConvertSem2motionForceTraits&lt; MotionForceSemanticsT &gt;::Traits::DualSpace &gt;::SemanticsType</type>
      <name>Type</name>
      <anchorfile>structiDynTree_1_1DualMotionForceSemanticsT.html</anchorfile>
      <anchor>a7e466f333849e882ed3a697b21d47d5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::DualSpace</name>
    <filename>structiDynTree_1_1DualSpace.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>iDynTree::DualSpace&lt; SpatialForceVector &gt;</name>
    <filename>structiDynTree_1_1DualSpace_3_01SpatialForceVector_01_4.html</filename>
    <member kind="typedef">
      <type>SpatialMotionVector</type>
      <name>Type</name>
      <anchorfile>structiDynTree_1_1DualSpace_3_01SpatialForceVector_01_4.html</anchorfile>
      <anchor>a3c9d35b241e2d343f91eac6c3db04123</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::DualSpace&lt; SpatialMotionVector &gt;</name>
    <filename>structiDynTree_1_1DualSpace_3_01SpatialMotionVector_01_4.html</filename>
    <member kind="typedef">
      <type>SpatialForceVector</type>
      <name>Type</name>
      <anchorfile>structiDynTree_1_1DualSpace_3_01SpatialMotionVector_01_4.html</anchorfile>
      <anchor>ad541bafd1a7eccbabe4ead3bff64efa4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Dummy</name>
    <filename>classiDynTree_1_1Dummy.html</filename>
  </compound>
  <compound kind="class">
    <name>iDynTree::DummyCamera</name>
    <filename>classiDynTree_1_1DummyCamera.html</filename>
    <base>iDynTree::ICamera</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DummyCamera</name>
      <anchorfile>classiDynTree_1_1DummyCamera.html</anchorfile>
      <anchor>a1158f986b8d40c2f24c85fac8e8c6a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classiDynTree_1_1DummyCamera.html</anchorfile>
      <anchor>a64f659ed04b4a77bd2844ea84ed51670</anchor>
      <arglist>(const iDynTree::Position &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTarget</name>
      <anchorfile>classiDynTree_1_1DummyCamera.html</anchorfile>
      <anchor>a056cbabc723dc65ab2eb618e57ef4b17</anchor>
      <arglist>(const iDynTree::Position &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpVector</name>
      <anchorfile>classiDynTree_1_1DummyCamera.html</anchorfile>
      <anchor>a377572cfda9aee37f1f58a41544782fd</anchor>
      <arglist>(const Direction &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::DummyEnvironment</name>
    <filename>classiDynTree_1_1DummyEnvironment.html</filename>
    <base>iDynTree::IEnvironment</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DummyEnvironment</name>
      <anchorfile>classiDynTree_1_1DummyEnvironment.html</anchorfile>
      <anchor>a168eca8386295d16ad959ecfa042f817</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setElementVisibility</name>
      <anchorfile>classiDynTree_1_1DummyEnvironment.html</anchorfile>
      <anchor>a83bdbb46aec02b480f6fc7107461bcac</anchor>
      <arglist>(const std::string, bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getElements</name>
      <anchorfile>classiDynTree_1_1DummyEnvironment.html</anchorfile>
      <anchor>af1d5a3b4cd81e2c769a18c94ecec7174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBackgroundColor</name>
      <anchorfile>classiDynTree_1_1DummyEnvironment.html</anchorfile>
      <anchor>a134804eee4deaedeb299b0667b58f396</anchor>
      <arglist>(const ColorViz &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAmbientLight</name>
      <anchorfile>classiDynTree_1_1DummyEnvironment.html</anchorfile>
      <anchor>aeaf96cd52eba5388556d777f69f6f174</anchor>
      <arglist>(const ColorViz &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getLights</name>
      <anchorfile>classiDynTree_1_1DummyEnvironment.html</anchorfile>
      <anchor>a817c7548e6dcefb61ac3b2923cab6ce4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addLight</name>
      <anchorfile>classiDynTree_1_1DummyEnvironment.html</anchorfile>
      <anchor>a42920817f60f70ff0ad9ff33acfc74a7</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ILight &amp;</type>
      <name>lightViz</name>
      <anchorfile>classiDynTree_1_1DummyEnvironment.html</anchorfile>
      <anchor>a0c1d1d86aec1ac9eca185ceee1efe393</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeLight</name>
      <anchorfile>classiDynTree_1_1DummyEnvironment.html</anchorfile>
      <anchor>a7d1af44ce20cc96db61f2a726a4e2488</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::DummyJetsVisualization</name>
    <filename>classiDynTree_1_1DummyJetsVisualization.html</filename>
    <base>iDynTree::IJetsVisualization</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DummyJetsVisualization</name>
      <anchorfile>classiDynTree_1_1DummyJetsVisualization.html</anchorfile>
      <anchor>a0257a5b0cc07f150057f61bdac62a171</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setJetsFrames</name>
      <anchorfile>classiDynTree_1_1DummyJetsVisualization.html</anchorfile>
      <anchor>ac6228a7dc413365ef1f8ea72f8e7386a</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getNrOfJets</name>
      <anchorfile>classiDynTree_1_1DummyJetsVisualization.html</anchorfile>
      <anchor>a6075eb1619eff215e0eccf3e8a74a55f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Direction</type>
      <name>getJetDirection</name>
      <anchorfile>classiDynTree_1_1DummyJetsVisualization.html</anchorfile>
      <anchor>a2242f2e320a24fa0c95944d3c133343e</anchor>
      <arglist>(const int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setJetDirection</name>
      <anchorfile>classiDynTree_1_1DummyJetsVisualization.html</anchorfile>
      <anchor>ad6a8223817fa9014b5a40f43a26814a4</anchor>
      <arglist>(const int, const Direction &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setJetColor</name>
      <anchorfile>classiDynTree_1_1DummyJetsVisualization.html</anchorfile>
      <anchor>a3e55d72c9634764fa44fb9143832f2ed</anchor>
      <arglist>(const int, const ColorViz &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setJetsDimensions</name>
      <anchorfile>classiDynTree_1_1DummyJetsVisualization.html</anchorfile>
      <anchor>abc44a4ef1bb1f7c6ac1b74ac070d84c7</anchor>
      <arglist>(const double &amp;, const double &amp;, const double &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setJetsIntensity</name>
      <anchorfile>classiDynTree_1_1DummyJetsVisualization.html</anchorfile>
      <anchor>a1a9efc1e1387a204d2cc31eef33d5e3e</anchor>
      <arglist>(const VectorDynSize &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::DummyLight</name>
    <filename>classiDynTree_1_1DummyLight.html</filename>
    <base>iDynTree::ILight</base>
    <member kind="function">
      <type></type>
      <name>DummyLight</name>
      <anchorfile>classiDynTree_1_1DummyLight.html</anchorfile>
      <anchor>a20bd35099739cfd8244cc2a5aec2ebb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DummyLight</name>
      <anchorfile>classiDynTree_1_1DummyLight.html</anchorfile>
      <anchor>ad19bac00c689920c82359020cc50eadc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classiDynTree_1_1DummyLight.html</anchorfile>
      <anchor>a7e595edaf0cb5018d5dec49fe3bc0610</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classiDynTree_1_1DummyLight.html</anchorfile>
      <anchor>a368364be9be64086a715b76f6252c0b1</anchor>
      <arglist>(const LightType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LightType</type>
      <name>getType</name>
      <anchorfile>classiDynTree_1_1DummyLight.html</anchorfile>
      <anchor>ab3f3d3122350959d6c961461d623c132</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classiDynTree_1_1DummyLight.html</anchorfile>
      <anchor>a58ab2df280371bf51cd1c3b14091fafb</anchor>
      <arglist>(const iDynTree::Position &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iDynTree::Position</type>
      <name>getPosition</name>
      <anchorfile>classiDynTree_1_1DummyLight.html</anchorfile>
      <anchor>a1b7292ba6fcc2f76c4520316fb53c1a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDirection</name>
      <anchorfile>classiDynTree_1_1DummyLight.html</anchorfile>
      <anchor>a8c3757c6b9ab1dee0a918753145a3515</anchor>
      <arglist>(const Direction &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Direction</type>
      <name>getDirection</name>
      <anchorfile>classiDynTree_1_1DummyLight.html</anchorfile>
      <anchor>a1548a0029b02e9f523d341157b145578</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAmbientColor</name>
      <anchorfile>classiDynTree_1_1DummyLight.html</anchorfile>
      <anchor>a7cd573cb9978d116db0463ab39f1fe84</anchor>
      <arglist>(const ColorViz &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ColorViz</type>
      <name>getAmbientColor</name>
      <anchorfile>classiDynTree_1_1DummyLight.html</anchorfile>
      <anchor>af3f93dc2b96522060d8e542dac513f9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSpecularColor</name>
      <anchorfile>classiDynTree_1_1DummyLight.html</anchorfile>
      <anchor>a6ee9af3d388dd5819cc1b9511516fc7b</anchor>
      <arglist>(const ColorViz &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ColorViz</type>
      <name>getSpecularColor</name>
      <anchorfile>classiDynTree_1_1DummyLight.html</anchorfile>
      <anchor>a8710992cb28f636bf20d987da73d7ec1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDiffuseColor</name>
      <anchorfile>classiDynTree_1_1DummyLight.html</anchorfile>
      <anchor>a7c4d08684233b1c2308aa9bb402c6f1b</anchor>
      <arglist>(const ColorViz &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ColorViz</type>
      <name>getDiffuseColor</name>
      <anchorfile>classiDynTree_1_1DummyLight.html</anchorfile>
      <anchor>ac3d6f2b358b908714b6871044de6bc52</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::DummyModelVisualization</name>
    <filename>classiDynTree_1_1DummyModelVisualization.html</filename>
    <base>iDynTree::IModelVisualization</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DummyModelVisualization</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>a6e9552c64637334091e668736f747ba3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>init</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>a613a1fe1961ecbf53f4b1fdeea296c6d</anchor>
      <arglist>(const Model &amp;, const std::string, Visualizer &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setPositions</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>a63993e4f1e77021cda48a5d6ea772a38</anchor>
      <arglist>(const Transform &amp;, const VectorDynSize &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setLinkPositions</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>ae30dd7fe01de7a890d2c47d739435d5d</anchor>
      <arglist>(const LinkPositions &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Model &amp;</type>
      <name>model</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>a9e1d20750dfd843039f23b8d66c3c07c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>a4ff660905beec696ed91cc15c1d8e84a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getInstanceName</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>a5ebec925284350c08094add86b9522aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setModelVisibility</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>ac9b99f8f91f261cd334d0c3da3c90433</anchor>
      <arglist>(const bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setModelColor</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>a36ebfe454c9cb3851f988ff2b789fd8d</anchor>
      <arglist>(const ColorViz &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetModelColor</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>a879b17438190b89ce8402d1bf1798ad0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setLinkColor</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>ad6d09efb3f13fa3d9aa272389a23723f</anchor>
      <arglist>(const LinkIndex &amp;, const ColorViz &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>resetLinkColor</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>a594842f47dc1638d8b3cfabdd32cdccb</anchor>
      <arglist>(const LinkIndex &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getLinkNames</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>ad8474b991a868c2c3949c145c73e7a83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setLinkVisibility</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>aac904896ec38e643f02abcc627fae538</anchor>
      <arglist>(const std::string &amp;, bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getFeatures</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>a3bdcdfcaf1c37690a010f3429bc050d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setFeatureVisibility</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>aa80c179731c41729cccaa7b447a8368a</anchor>
      <arglist>(const std::string &amp;, bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IJetsVisualization &amp;</type>
      <name>jets</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>a63505b6fd52ee361a9ddb75463cb8d25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Transform</type>
      <name>getWorldModelTransform</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>ac095fe317114290305ea7e797f5b22c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Transform</type>
      <name>getWorldLinkTransform</name>
      <anchorfile>classiDynTree_1_1DummyModelVisualization.html</anchorfile>
      <anchor>a48b30a5b643d86e817414b95ca097500</anchor>
      <arglist>(const LinkIndex &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::DummyVectorsVisualization</name>
    <filename>classiDynTree_1_1DummyVectorsVisualization.html</filename>
    <base>iDynTree::IVectorsVisualization</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DummyVectorsVisualization</name>
      <anchorfile>classiDynTree_1_1DummyVectorsVisualization.html</anchorfile>
      <anchor>afcab7f1388ad2564292a0bdc58fe66b7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>addVector</name>
      <anchorfile>classiDynTree_1_1DummyVectorsVisualization.html</anchorfile>
      <anchor>af0dc9c05e82d80c1abb8823c8b79fcb5</anchor>
      <arglist>(const Position &amp;, const Direction &amp;, double) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>addVector</name>
      <anchorfile>classiDynTree_1_1DummyVectorsVisualization.html</anchorfile>
      <anchor>ac9c62ce1f09bd5d052d79f20fd8e4807</anchor>
      <arglist>(const Position &amp;, const Vector3 &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getNrOfVectors</name>
      <anchorfile>classiDynTree_1_1DummyVectorsVisualization.html</anchorfile>
      <anchor>a97bc9ce3900b4c0ef5eea569cbc3139c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getVector</name>
      <anchorfile>classiDynTree_1_1DummyVectorsVisualization.html</anchorfile>
      <anchor>a249ec039cb115c166ec52604c7dc2568</anchor>
      <arglist>(size_t, Position &amp;, Direction &amp;, double &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getVector</name>
      <anchorfile>classiDynTree_1_1DummyVectorsVisualization.html</anchorfile>
      <anchor>a2633002af6da4195a22f1a53ac7b7fa1</anchor>
      <arglist>(size_t, Position &amp;, Vector3 &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>updateVector</name>
      <anchorfile>classiDynTree_1_1DummyVectorsVisualization.html</anchorfile>
      <anchor>a0ead5c7089fb0ee3106e1858434e41da</anchor>
      <arglist>(size_t, const Position &amp;, const Direction &amp;, double) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>updateVector</name>
      <anchorfile>classiDynTree_1_1DummyVectorsVisualization.html</anchorfile>
      <anchor>a0a4e24dfd7d5767ed8430183ac92cbc5</anchor>
      <arglist>(size_t, const Position &amp;, const Vector3 &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setVectorColor</name>
      <anchorfile>classiDynTree_1_1DummyVectorsVisualization.html</anchorfile>
      <anchor>a2cf90d1eb68ec5eeaf3e5bb3021d0e5b</anchor>
      <arglist>(size_t, const ColorViz &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setVectorsAspect</name>
      <anchorfile>classiDynTree_1_1DummyVectorsVisualization.html</anchorfile>
      <anchor>ac7738eb45cd8ffc5570641df53db5229</anchor>
      <arglist>(double, double, double) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::DynamicalSystem</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</filename>
    <member kind="function">
      <type></type>
      <name>DynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>af4b91c95d739fd82a0013560fa051233</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ab82065e18425aa56e59b030519d5e123</anchor>
      <arglist>(size_t stateSpaceSize, size_t controlSpaceSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a4020c60fe630d1f5b6b4baf06e7b42a4</anchor>
      <arglist>(const DynamicalSystem &amp;other)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a69465218303f6778b70906c8f7e38914</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>stateSpaceSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a1fdc25cc07f3bc2d02ac0cc2c74e8abc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>controlSpaceSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ae9048969fa6bb586f08332aa279ac01a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>dynamics</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>aa10bd35bc49f5dfaea48ffeecf945312</anchor>
      <arglist>(const VectorDynSize &amp;state, double time, VectorDynSize &amp;stateDynamics)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setControlInput</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a1d4cfff710d3a77308992878408ca87b</anchor>
      <arglist>(const VectorDynSize &amp;control)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VectorDynSize &amp;</type>
      <name>controlInput</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ac130f0cfaa6a5843fdbcb944493b7951</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>controlInput</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a165aa744348a711a192333374a5b938b</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VectorDynSize &amp;</type>
      <name>initialState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ae62cb69e88b5598944dffd5c9f8336b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>initialState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a91ba05fa8d7fd40b9336f33130ec48ed</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setInitialState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>abb552b6be02127013c69f1106ad09497</anchor>
      <arglist>(const VectorDynSize &amp;state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsStateFirstDerivative</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ae954adda9b54889d67dee596570f9ace</anchor>
      <arglist>(const VectorDynSize &amp;state, double time, MatrixDynSize &amp;dynamicsDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsControlFirstDerivative</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ae12972299e8e49ba5957d0acb90ca2c2</anchor>
      <arglist>(const VectorDynSize &amp;state, double time, MatrixDynSize &amp;dynamicsDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsStateFirstDerivativeSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>accd838dc2907a169e22c70c694011175</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsControlFirstDerivativeSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a643ace9059ca3fa31cd05037a1531fa3</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a2eb5bc925c0c9b44daf3430972cdefb4</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;lambda, iDynTree::MatrixDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a4337e4f4965ca5ddfe86ecc25e200da9</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;lambda, iDynTree::MatrixDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTStateControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ad92bf817f57da0b2d6752022bc31a20d</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;lambda, iDynTree::MatrixDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ab843117494f9eaa4b11b380bb3eb6737</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ab43abf8cf7f671213184e811e815b10f</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateControlSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>aa75c7d3cf8bf63b622bc6b83d392a100</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KDL::CoDyCo::Regressors::DynamicDatasetFile</name>
    <filename>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicDatasetFile.html</filename>
    <base>KDL::CoDyCo::Regressors::IBatchDynamicDataset</base>
    <member kind="function">
      <type></type>
      <name>DynamicDatasetFile</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicDatasetFile.html</anchorfile>
      <anchor>a5c66febd2d00f347c2abcfd12ec087e0</anchor>
      <arglist>(bool _verbose=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadFromFile</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicDatasetFile.html</anchorfile>
      <anchor>a2e5ddc2770bf27d5d14566191f32ea40</anchor>
      <arglist>(std::string filename, const bool append=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicDatasetFile</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicDatasetFile.html</anchorfile>
      <anchor>a22627c3589f3f325f74f5e432327d6c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfSamples</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicDatasetFile.html</anchorfile>
      <anchor>adc4fc21adc2702ecbd4cc94d2f8b7891</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSample</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicDatasetFile.html</anchorfile>
      <anchor>a599ab574bbf68f75d081a791eed713a6</anchor>
      <arglist>(const int sample_n, DynamicSample &amp;sample) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getFileName</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicDatasetFile.html</anchorfile>
      <anchor>ad1490738a5f4cd6a0f6aeea093642f00</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KDL::CoDyCo::Regressors::DynamicDatasetFileCollection</name>
    <filename>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicDatasetFileCollection.html</filename>
    <base>KDL::CoDyCo::Regressors::IBatchDynamicDataset</base>
    <member kind="function">
      <type></type>
      <name>DynamicDatasetFileCollection</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicDatasetFileCollection.html</anchorfile>
      <anchor>ab90e93b68b83b9d25e140625c8d50276</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicDatasetFileCollection</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicDatasetFileCollection.html</anchorfile>
      <anchor>a7aee8f4670482a72d0692b46c4e8db90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadDatasetFilesFromFilenameVector</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicDatasetFileCollection.html</anchorfile>
      <anchor>a8d469957621b9b82dcf34339185fbecd</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;filenames)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadDatasetFilesFromFile</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicDatasetFileCollection.html</anchorfile>
      <anchor>a5d3c96128ea2611d0b098dccd78562b0</anchor>
      <arglist>(const std::string &amp;file_name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfSamples</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicDatasetFileCollection.html</anchorfile>
      <anchor>a12105f6c7267ecd8a0a33eaf31ea486d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSample</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicDatasetFileCollection.html</anchorfile>
      <anchor>ad8b30274687fccc2ea85497e13d3befa</anchor>
      <arglist>(const int sample_n, DynamicSample &amp;sample) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KDL::CoDyCo::Regressors::DynamicRegressorGenerator</name>
    <filename>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</filename>
    <member kind="function">
      <type>int</type>
      <name>changeDynamicBase</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a53c727ea9bd0dcaea23faf03394d0ae7</anchor>
      <arglist>(std::string new_dynamic_base_name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>changeKinematicBase</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a9951b38c57b4bb03d34f80ae367d1e34</anchor>
      <arglist>(std::string new_kinematic_base_name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDynamicBaseIndex</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a5b8a194f9c998e0f231e6cce04d9bab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getKinematicBaseIndex</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a5ded09509ecbd1f73a27ad52a391b49e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicRegressorGenerator</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>ae5c4e6988501fe71b81cdb4c74c5e7ac</anchor>
      <arglist>(const KDL::CoDyCo::UndirectedTree &amp;undirected_tree, const iDynTree::SensorsList &amp;sensors_tree, std::string kinematic_base=&quot;&quot;, bool ft_sensor_offset=true, std::vector&lt; std::string &gt; fake_link_names=std::vector&lt; std::string &gt;(0), const bool _verbose=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicRegressorGenerator</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>af1934ac03dd5e1808b723b24a7556453</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubtreeRegressorRows</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a4208f0706f0bc5c66c1b2e135b08f7f1</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;_subtree_leaf_links)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTorqueRegressorRows</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a9aef7f9697a8b7efaec65fb484c78718</anchor>
      <arglist>(const std::string &amp;dof_name, const bool reverse_direction=false, const std::vector&lt; bool &gt; &amp;_activated_ft_sensors=std::vector&lt; bool &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTorqueRegressorRows</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a9521aaa185b7390d90c2a0278f138b24</anchor>
      <arglist>(const std::string &amp;dof_name, const bool reverse_direction, const std::vector&lt; std::string &gt; &amp;_activated_ft_sensors)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAllTorqueRegressorRows</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>ad83610ddc36b2224b41f14d51ee2ed6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addBaseRegressorRows</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>afb30caaedaba04622f006bfecf19a09a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>configure</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a35f3061621790309d9494079b3f92d82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfParameters</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>aeae8c3d406755b0fa087e7d7e1047b20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfOutputs</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>afdf567a5f70317f3ca6f9338b8f0b4f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfDOFs</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a6cb7cde833679644d5ab09f361669068</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfFakeLinks</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a72858d2a3021f6feacb5f48818aeaa99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfWrenchSensors</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a51f11126f53dd07e569071c36d6178ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfLink</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a0450918dd0f465c401799b10fd7a8be0</anchor>
      <arglist>(int link_index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfLinks</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a8fdeb31984e0089ece266d88ef8e9900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfParameter</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a7f921648c2f5a1610f7a6220a1ff99a2</anchor>
      <arglist>(int parameter_index, bool with_value=false, double value=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfParameters</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>aebe6e026c03fe20572f14c796152dcab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfParameters</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a659e26bbae14992a7ab350e17a9a606c</anchor>
      <arglist>(const Eigen::VectorXd &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfOutput</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>ad58847d71960e6fea133f3782026dfa9</anchor>
      <arglist>(int output_index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfOutputs</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>abc551178ebfe2699446c3c858f1136f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setRobotState</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a282f7c1d1e4f9c54c77c7483e3605cda</anchor>
      <arglist>(const KDL::JntArray &amp;q, const KDL::JntArray &amp;q_dot, const KDL::JntArray &amp;q_dotdot, const KDL::Twist &amp;base_velocity, const KDL::Twist &amp;base_acceleration)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setRobotState</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a547319e67eac81378709966eff17391b</anchor>
      <arglist>(const KDL::JntArray &amp;q, const KDL::JntArray &amp;q_dot, const KDL::JntArray &amp;q_dotdot, const KDL::Twist &amp;base_gravity)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setRobotStateAndSensors</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a128b0bdbb1bcb299c90445c54c3aa810</anchor>
      <arglist>(const DynamicSample &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setFTSensorMeasurement</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a9d1b1c5337c021db07528b76f9cd1a07</anchor>
      <arglist>(const int ft_sensor_index, const iDynTree::Wrench ftm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setTorqueSensorMeasurement</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a0dc849c65926abadf0a856c46897e115</anchor>
      <arglist>(const int dof_index, const double measure)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setTorqueSensorMeasurement</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a5589e50b66d58bd36afeb6ea615a7ce4</anchor>
      <arglist>(const KDL::JntArray &amp;torques)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeRegressor</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a036c9be287564ebc1d1627c541af56ad</anchor>
      <arglist>(Eigen::MatrixXd &amp;regressor, Eigen::VectorXd &amp;known_terms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicRegressorGenerator</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>ae5c4e6988501fe71b81cdb4c74c5e7ac</anchor>
      <arglist>(const KDL::CoDyCo::UndirectedTree &amp;undirected_tree, const iDynTree::SensorsList &amp;sensors_tree, std::string kinematic_base=&quot;&quot;, bool ft_sensor_offset=true, std::vector&lt; std::string &gt; fake_link_names=std::vector&lt; std::string &gt;(0), const bool _verbose=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicRegressorGenerator</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>af1934ac03dd5e1808b723b24a7556453</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubtreeRegressorRows</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a4208f0706f0bc5c66c1b2e135b08f7f1</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;_subtree_leaf_links)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTorqueRegressorRows</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a9aef7f9697a8b7efaec65fb484c78718</anchor>
      <arglist>(const std::string &amp;dof_name, const bool reverse_direction=false, const std::vector&lt; bool &gt; &amp;_activated_ft_sensors=std::vector&lt; bool &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTorqueRegressorRows</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a9521aaa185b7390d90c2a0278f138b24</anchor>
      <arglist>(const std::string &amp;dof_name, const bool reverse_direction, const std::vector&lt; std::string &gt; &amp;_activated_ft_sensors)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAllTorqueRegressorRows</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>ad83610ddc36b2224b41f14d51ee2ed6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addBaseRegressorRows</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>afb30caaedaba04622f006bfecf19a09a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>configure</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a35f3061621790309d9494079b3f92d82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfParameters</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>aeae8c3d406755b0fa087e7d7e1047b20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfOutputs</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>afdf567a5f70317f3ca6f9338b8f0b4f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfDOFs</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a6cb7cde833679644d5ab09f361669068</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfFakeLinks</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a72858d2a3021f6feacb5f48818aeaa99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfWrenchSensors</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a51f11126f53dd07e569071c36d6178ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfLink</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a0450918dd0f465c401799b10fd7a8be0</anchor>
      <arglist>(int link_index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfLinks</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a8fdeb31984e0089ece266d88ef8e9900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfParameter</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a7f921648c2f5a1610f7a6220a1ff99a2</anchor>
      <arglist>(int parameter_index, bool with_value=false, double value=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfParameters</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>aebe6e026c03fe20572f14c796152dcab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfParameters</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a659e26bbae14992a7ab350e17a9a606c</anchor>
      <arglist>(const Eigen::VectorXd &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfOutput</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>ad58847d71960e6fea133f3782026dfa9</anchor>
      <arglist>(int output_index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfOutputs</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>abc551178ebfe2699446c3c858f1136f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setRobotState</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a282f7c1d1e4f9c54c77c7483e3605cda</anchor>
      <arglist>(const KDL::JntArray &amp;q, const KDL::JntArray &amp;q_dot, const KDL::JntArray &amp;q_dotdot, const KDL::Twist &amp;base_velocity, const KDL::Twist &amp;base_acceleration)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setRobotState</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a547319e67eac81378709966eff17391b</anchor>
      <arglist>(const KDL::JntArray &amp;q, const KDL::JntArray &amp;q_dot, const KDL::JntArray &amp;q_dotdot, const KDL::Twist &amp;base_gravity)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setRobotStateAndSensors</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a128b0bdbb1bcb299c90445c54c3aa810</anchor>
      <arglist>(const DynamicSample &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setFTSensorMeasurement</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a9d1b1c5337c021db07528b76f9cd1a07</anchor>
      <arglist>(const int ft_sensor_index, const iDynTree::Wrench ftm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setTorqueSensorMeasurement</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a0dc849c65926abadf0a856c46897e115</anchor>
      <arglist>(const int dof_index, const double measure)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setTorqueSensorMeasurement</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a5589e50b66d58bd36afeb6ea615a7ce4</anchor>
      <arglist>(const KDL::JntArray &amp;torques)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeRegressor</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a036c9be287564ebc1d1627c541af56ad</anchor>
      <arglist>(Eigen::MatrixXd &amp;regressor, Eigen::VectorXd &amp;known_terms)</arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::SensorsList</type>
      <name>sensorsList</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a19f6095b8303565527b2a9326f1bd4a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::SensorsMeasurements</type>
      <name>sensorMeasures</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a2fdde448aff5d0d7155c9fbb21197f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeNumericalIdentifiableSubspace</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a9881b5654775c3c01ce83d5ed8ef1894</anchor>
      <arglist>(Eigen::MatrixXd &amp;basis, const bool static_regressor=false, const bool fixed_base=false, const KDL::Vector grav_direction=KDL::Vector(0.0, 0.0, 9.8), const std::vector&lt; int &gt; fixed_dofs=std::vector&lt; int &gt;(0), const std::vector&lt; double &gt; fixed_dofs_values=std::vector&lt; double &gt;(0), double tol=-1.0, int n_samples=1000, const bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeNumericalIdentifiableSubspace</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a36770ff0a0073a785530fa90e91c23af</anchor>
      <arglist>(Eigen::MatrixXd &amp;basis, const bool static_regressor, int n_samples=1000, double tol=-1.0, const bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>analyseBaseSubspace</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a192823ce85bf72b5ed4b77c2c0419b6f</anchor>
      <arglist>(const Eigen::MatrixXd &amp;basis, int verbosity_level=0, double tol=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>analyseSparseBaseSubspace</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>ae0b3161f6616fb7caefbb0d8129c0634</anchor>
      <arglist>(const Eigen::MatrixXd &amp;basis, double tol=-1.0, bool only_summary=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeSparseNumericalIdentifiableSubspaceV1</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>ad91a28f6ba1acd5a5f3e37a2eb14da18</anchor>
      <arglist>(Eigen::MatrixXd &amp;basis, const bool static_regressor=false, const bool fixed_base=false, const KDL::Vector grav_direction=KDL::Vector(0.0, 0.0, 9.8), double tol=-1.0, int n_samples=50, const bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeSparseNumericalIdentifiableSubspaceV2</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a7370e203b9552043fd8c7d18227005d0</anchor>
      <arglist>(Eigen::MatrixXd &amp;basis, const bool static_regressor=false, const bool fixed_base=false, const KDL::Vector grav_direction=KDL::Vector(0.0, 0.0, 9.8), double tol=-1.0, int n_samples=1000, const bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeSparseNumericalIdentifiableSubspaceSimpleAlgorithm</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a064ffe148cb620926e31a333ee70eee4</anchor>
      <arglist>(Eigen::MatrixXd &amp;basis, const bool static_regressor=false, const bool fixed_base=false, const KDL::Vector grav_direction=KDL::Vector(0.0, 0.0, 9.8), double tol=-1.0, int n_samples=100, const bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeSparseNumericalIdentifiableSubspaceAdvancedAlgorithm</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a7715b93f9e5a59cffa8d29d2545f9a80</anchor>
      <arglist>(Eigen::MatrixXd &amp;basis, const bool static_regressor=false, const bool fixed_base=false, const KDL::Vector grav_direction=KDL::Vector(0.0, 0.0, 9.8), double tol=-1.0, int n_samples=100, const bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeSparseNumericalIdentifiableSubspaceSimplePaper</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a076092077d3f29d516f5715b71956190</anchor>
      <arglist>(Eigen::MatrixXd &amp;basis, const bool static_regressor=false, const bool fixed_base=false, const KDL::Vector grav_direction=KDL::Vector(0.0, 0.0, 9.8), double tol=-1.0, int n_samples=100, const bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeSparseNumericalIdentifiableSubspaceSimpleGolub</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>aa486589ffc2c2a2985b9da52c1fda7dc</anchor>
      <arglist>(Eigen::MatrixXd &amp;basis, const bool static_regressor=false, const bool fixed_base=false, const KDL::Vector grav_direction=KDL::Vector(0.0, 0.0, 9.8), double tol=-1.0, int n_samples=100, const bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeSparseNumericalIdentifiableSubspaceAdvancedPaper</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>ab3a1ace763d95d8e86b6553fe0230a3f</anchor>
      <arglist>(Eigen::MatrixXd &amp;basis, const bool static_regressor=false, const bool fixed_base=false, const KDL::Vector grav_direction=KDL::Vector(0.0, 0.0, 9.8), double tol=-1.0, int n_samples=100, const bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getUpdatedModel</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>ad6faebd82c581a42fbba4f247b265dca</anchor>
      <arglist>(const Eigen::VectorXd &amp;values, KDL::CoDyCo::UndirectedTree &amp;updated_model)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getModelParameters</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a111971f94d79d1051f07f71a791e19c7</anchor>
      <arglist>(Eigen::VectorXd &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>generate_random_regressors</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorGenerator.html</anchorfile>
      <anchor>a9f0c318e5b81f034f71264b82222aa4f</anchor>
      <arglist>(Eigen::MatrixXd &amp;output_matrix, const bool static_regressor=false, const bool fixed_base=false, const KDL::Vector grav_direction=KDL::Vector(0.0, 0.0, 9.8), int n_samples=1000, const bool verbose=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KDL::CoDyCo::Regressors::DynamicRegressorInterface</name>
    <filename>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorInterface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DynamicRegressorInterface</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorInterface.html</anchorfile>
      <anchor>a8c520bf51fac2749e49f84b4cedeb2b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNrOfOutputs</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorInterface.html</anchorfile>
      <anchor>acbae62ac2d2d6726ec6a9629701cf1d8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; int &gt;</type>
      <name>getRelativeJunctions</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorInterface.html</anchorfile>
      <anchor>ad59b033ab4119721cc774eb055862378</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iDynTree::Regressors::DynamicsRegressorParametersList</type>
      <name>getUsedParameters</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorInterface.html</anchorfile>
      <anchor>ad05379d7d898c8c684544a4a0cd2eaf9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setGlobalParameters</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorInterface.html</anchorfile>
      <anchor>aecaf5d55ceeddd7d54a4a5774e0cd70b</anchor>
      <arglist>(const iDynTree::Regressors::DynamicsRegressorParametersList &amp;globalParameters)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>configure</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorInterface.html</anchorfile>
      <anchor>a25fbe05aaf29d70786b7d8f6c372ff2f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>computeRegressor</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicRegressorInterface.html</anchorfile>
      <anchor>a5e3f6138fc9d4aa98530bbdde686ba67</anchor>
      <arglist>(const KDL::JntArray &amp;q, const KDL::JntArray &amp;q_dot, const KDL::JntArray &amp;q_dotdot, const std::vector&lt; KDL::Frame &gt; &amp;X_dynamic_base, const std::vector&lt; KDL::Twist &gt; &amp;v, const std::vector&lt; KDL::Twist &gt; &amp;a, const iDynTree::SensorsMeasurements &amp;sensors_measurements, const KDL::JntArray &amp;measured_torques, Eigen::MatrixXd &amp;regressor_matrix, Eigen::VectorXd &amp;known_terms)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KDL::CoDyCo::Regressors::DynamicSample</name>
    <filename>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSample.html</filename>
    <base>KDL::CoDyCo::Regressors::DynamicStateSample</base>
    <base>KDL::CoDyCo::Regressors::DynamicSensorSample</base>
    <member kind="function">
      <type></type>
      <name>DynamicSample</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSample.html</anchorfile>
      <anchor>a4fdce98c528c28c5f2260864234e000d</anchor>
      <arglist>(const int NrOfDOFs=0, const int NrOfTorqueSensors=0, const int NrOfWrenchSensors=0, const int NrOf3AxisFTSensors=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicSample</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSample.html</anchorfile>
      <anchor>ac14e1e4fcee803e69f6e81537ad44ac7</anchor>
      <arglist>(const DynamicSample &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicSample</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSample.html</anchorfile>
      <anchor>afc9c9141ee188740fcb2c147f3dda1f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfDOFs</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a6037e9bd8fbd7d1173baf79d09b10fef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTimestamp</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>aab055d6ed0f5c1767060b19fb6e0fb77</anchor>
      <arglist>(const double ts)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTimestamp</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>adf7290172284f6ab0b9b378557e6a7d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KDL::Frame</type>
      <name>getWorldBaseTransform</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a91c79bacd77bb6d04b3d26cef5dcc303</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setWorldBaseTransform</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>aea8cbb8c286fc55a8d4a8412ee05adbd</anchor>
      <arglist>(const KDL::Frame &amp;world_base_frame)</arglist>
    </member>
    <member kind="function">
      <type>KDL::Twist</type>
      <name>getBaseVelocity</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>adae095f29b981102eb119c8fd4858fff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setBaseVelocity</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a703758608be66b16cd25080434fd701a</anchor>
      <arglist>(const KDL::Twist &amp;base_velocity)</arglist>
    </member>
    <member kind="function">
      <type>KDL::Twist</type>
      <name>getBaseSpatialAcceleration</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a4bf1f4bcee3b2dbcea4f64638bb4f374</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KDL::Twist</type>
      <name>getBaseClassicalAcceleration</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>aa758d19e675d07e05c328ae90f8b373e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setBaseSpatialAcceleration</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>acf2d3039318bbd59f08ac718b115aa43</anchor>
      <arglist>(const KDL::Twist &amp;spatial_base_acc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setBaseClassicalAcceleration</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a4dfcee60bd17d3d9c0c5e5c8052cbd2f</anchor>
      <arglist>(const KDL::Twist &amp;classical_base_acc)</arglist>
    </member>
    <member kind="function">
      <type>const KDL::JntArray &amp;</type>
      <name>getJointPosition</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a4ca6cd4c221875b316edc9db33514332</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setJointPosition</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>ab7679a6d0f70cffaac1ebbe660bd1f2e</anchor>
      <arglist>(const KDL::JntArray &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setJointPosition</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>aa13186fa7c9e7d1cce6242d36729b2e9</anchor>
      <arglist>(double _q, int dof_id)</arglist>
    </member>
    <member kind="function">
      <type>const KDL::JntArray &amp;</type>
      <name>getJointVelocity</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a4285d36e2d927e3a9d969bc1ef2e6f75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setJointVelocity</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a14e74a7733218b2f6b279af6ee392133</anchor>
      <arglist>(const KDL::JntArray &amp;dq)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setJointVelocity</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a8ac1cb654360ab7234743892b82b8826</anchor>
      <arglist>(double _dq, int dof_id)</arglist>
    </member>
    <member kind="function">
      <type>const KDL::JntArray &amp;</type>
      <name>getJointAcceleration</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>aafb47546abfda277f378fe03978bee00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setJointAcceleration</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>aa5452acb0c65936fd64b821e6148a3fa</anchor>
      <arglist>(const KDL::JntArray &amp;ddq)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setJointAcceleration</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>acf49f8dae7496e376e59b0eca705a48e</anchor>
      <arglist>(double _ddq, int dof_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfWrenchSensors</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a067595a0ef7b8c46bf0cc5de5d05fcc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfTorqueSensors</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a9740d7271487c08ff029797dcc5afcdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfThreeAxisForceTorqueSensors</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a65a78f77964d6965663926f11df65f5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setNrOfWrenchSensors</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a0555c8931ca76036a3d6cbf14c9baa2e</anchor>
      <arglist>(int nr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setNrOfTorqueSensors</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a8f57622bb5a3383bbf8c2a327bde8ae6</anchor>
      <arglist>(int nr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setNrOfThreeAxisForceTorqueSensors</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>add12cdbef988ad92e618d4d238cca9da</anchor>
      <arglist>(int nr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTorqueMeasure</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a695aabcf205495188082ca45691532c9</anchor>
      <arglist>(const double measured_torque, const int torque_measured_id)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTorqueMeasure</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a96b7adf18e70faa489e9ee32dbb013b6</anchor>
      <arglist>(const int torque_measured_id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setWrenchMeasure</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>ab5c211ee3b0e37545eb1d6e5fd16aa79</anchor>
      <arglist>(const KDL::Wrench measured_ft, const int wrench_measured_id)</arglist>
    </member>
    <member kind="function">
      <type>KDL::Wrench</type>
      <name>getWrenchMeasure</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a7d06c3d5995129ad91c3205294de5877</anchor>
      <arglist>(const int wrench_measured_id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setThreeAxisForceTorqueMeasure</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a1c2739a2f0a6522afe20569fee6a2be5</anchor>
      <arglist>(const KDL::Vector measured_three_axis_ft, const int three_axis_ft_measured_id)</arglist>
    </member>
    <member kind="function">
      <type>KDL::Vector</type>
      <name>getThreeAxisForceTorqueMeasure</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>abd78e440f15ff69300830a3a02b589ff</anchor>
      <arglist>(const int three_axis_ft_measured_id) const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>timestamp</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a5681a7d67728db8bd9963b28e052616f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::Frame</type>
      <name>world_base_transform</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>af849647167eed12f09778143f4a5ee1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::Twist</type>
      <name>base_vel</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a70c73caf1aa91d8f2416b8f2cbe123c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::Twist</type>
      <name>base_acc</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a8754b945bcc5d06947b8dc8d12307a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::JntArray</type>
      <name>q</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a5cbb5b45641582c02220c2385dd9deac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::JntArray</type>
      <name>dq</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a578f140e317381e66aaca36237387937</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::JntArray</type>
      <name>ddq</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>ad00f62f3aba06f4de563bf19d73f61e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::JntArray</type>
      <name>torque_sensors_measures</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a775b0c2b86c1dd88f422f9535dadabcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; KDL::Wrench &gt;</type>
      <name>wrench_sensors_measures</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a01e2b1f7e392c78913d6b5c556ad3eb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; KDL::Vector &gt;</type>
      <name>three_axis_ft_sensors_measures</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a0f7bd687c80ffcace56f1b5c6649d749</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KDL::CoDyCo::Regressors::DynamicSensorSample</name>
    <filename>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</filename>
    <member kind="function">
      <type></type>
      <name>DynamicSensorSample</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a13a6dd7e1796c309ac0ba0153e8ad305</anchor>
      <arglist>(const int NrOfTorqueSensors=0, const int NrOfWrenchSensors=0, const int NrOf3AxisFTSensors=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicSensorSample</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a327520fcb5781bec4293a82baf106d8a</anchor>
      <arglist>(const DynamicSensorSample &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicSensorSample</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>ab365b9eb9a16b71e452d2da5edd97353</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfWrenchSensors</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a067595a0ef7b8c46bf0cc5de5d05fcc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfTorqueSensors</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a9740d7271487c08ff029797dcc5afcdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfThreeAxisForceTorqueSensors</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a65a78f77964d6965663926f11df65f5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setNrOfWrenchSensors</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a0555c8931ca76036a3d6cbf14c9baa2e</anchor>
      <arglist>(int nr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setNrOfTorqueSensors</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a8f57622bb5a3383bbf8c2a327bde8ae6</anchor>
      <arglist>(int nr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setNrOfThreeAxisForceTorqueSensors</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>add12cdbef988ad92e618d4d238cca9da</anchor>
      <arglist>(int nr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTorqueMeasure</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a695aabcf205495188082ca45691532c9</anchor>
      <arglist>(const double measured_torque, const int torque_measured_id)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTorqueMeasure</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a96b7adf18e70faa489e9ee32dbb013b6</anchor>
      <arglist>(const int torque_measured_id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setWrenchMeasure</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>ab5c211ee3b0e37545eb1d6e5fd16aa79</anchor>
      <arglist>(const KDL::Wrench measured_ft, const int wrench_measured_id)</arglist>
    </member>
    <member kind="function">
      <type>KDL::Wrench</type>
      <name>getWrenchMeasure</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a7d06c3d5995129ad91c3205294de5877</anchor>
      <arglist>(const int wrench_measured_id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setThreeAxisForceTorqueMeasure</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a1c2739a2f0a6522afe20569fee6a2be5</anchor>
      <arglist>(const KDL::Vector measured_three_axis_ft, const int three_axis_ft_measured_id)</arglist>
    </member>
    <member kind="function">
      <type>KDL::Vector</type>
      <name>getThreeAxisForceTorqueMeasure</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>abd78e440f15ff69300830a3a02b589ff</anchor>
      <arglist>(const int three_axis_ft_measured_id) const</arglist>
    </member>
    <member kind="variable">
      <type>KDL::JntArray</type>
      <name>torque_sensors_measures</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a775b0c2b86c1dd88f422f9535dadabcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; KDL::Wrench &gt;</type>
      <name>wrench_sensors_measures</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a01e2b1f7e392c78913d6b5c556ad3eb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; KDL::Vector &gt;</type>
      <name>three_axis_ft_sensors_measures</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicSensorSample.html</anchorfile>
      <anchor>a0f7bd687c80ffcace56f1b5c6649d749</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Regressors::DynamicsRegressorGenerator</name>
    <filename>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</filename>
    <class kind="struct">iDynTree::Regressors::DynamicsRegressorGenerator::DynamicsRegressorGeneratorPrivateAttributes</class>
    <member kind="function">
      <type></type>
      <name>DynamicsRegressorGenerator</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a6fd4851eb58b915f0e052d4a165c6ffa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DynamicsRegressorGenerator</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>ad8d8565dd457eff12af251ff42493111</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadRobotAndSensorsModelFromFile</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a4c48bbea2bf59782a28b58ea4e1737df</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;filetype=&quot;urdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadRobotAndSensorsModelFromString</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>ab280c105344dcf22a34e1bba32340410</anchor>
      <arglist>(const std::string &amp;modelString, const std::string &amp;filetype=&quot;urdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadRegressorStructureFromFile</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a1e03cd2bef93b4fb901d2ef6b7361bed</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadRegressorStructureFromString</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a3c28a38f98da1dec0b3ed2b2b8a1c2ae</anchor>
      <arglist>(const std::string &amp;regressorStructureString)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a011440a8f6938f256c219f779e47d778</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfParameters</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a6b2b0e75ce052b437399ff37e935a47b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfOutputs</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>af9746da5c7d35ec19f23d3bdb93bc1ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfDegreesOfFreedom</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>aafffeb424e7f7ee038a9fc9a35f2f34b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfParameter</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>aa1d1a6edc44ceab15ca13a4a5214a4d8</anchor>
      <arglist>(int parameter_index, bool with_value=false, double value=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfParameters</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a8f6f590900ef9846c6954861f62dbc29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfParameters</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a7f8ff018fc6e950711d1341006a43f07</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfOutput</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a25b7b4e0ec8e3dae7d11cab3083be7be</anchor>
      <arglist>(int output_index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfOutputs</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>aafb5dc42f5a2dc524a11b9d5e0012791</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfDegreeOfFreedom</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>aac0a944dcbe6bc06858b5483a093406a</anchor>
      <arglist>(int dof_index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfDegreesOfFreedom</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>ad241765ce3169f5beeec17f8cf2f239f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfLink</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a839e83aab8282a552e53d969e84f2210</anchor>
      <arglist>(int link_index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfLinks</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a34e826b679f5f625deb3aa2e70a7f734</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfLinks</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>af5781905a113ab91a0eee2163a009b1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfFakeLinks</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>acbf25118bbf3d0bedde15bc5f30ac1bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getBaseLinkName</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>aa0c88d6b42409d2ffe21405c1c46714f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SensorsList &amp;</type>
      <name>getSensorsModel</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>af3a554f988c9ac6e3e9445ca282d6e1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRobotState</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>af2f1c67b465d77da5f35cd5621fd7f9a</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;q, const iDynTree::VectorDynSize &amp;q_dot, const iDynTree::VectorDynSize &amp;q_dotdot, const iDynTree::Transform &amp;world_T_base, const iDynTree::Twist &amp;base_velocity, const iDynTree::Twist &amp;base_acceleration, const iDynTree::Twist &amp;world_gravity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRobotState</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>ac2916a4e348926e474bd8db907c13592</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;q, const iDynTree::VectorDynSize &amp;q_dot, const iDynTree::VectorDynSize &amp;q_dotdot, const iDynTree::Twist &amp;world_gravity)</arglist>
    </member>
    <member kind="function">
      <type>SensorsMeasurements &amp;</type>
      <name>getSensorsMeasurements</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>aa61ee4cec473b7f6f5866099496edb7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setTorqueSensorMeasurement</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a29394d91a5d9c0656e5dab9912948399</anchor>
      <arglist>(const int dof_index, const double measure)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setTorqueSensorMeasurement</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a6d0d489b2f36f1335168d40cf789b577</anchor>
      <arglist>(iDynTree::VectorDynSize &amp;torques)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeRegressor</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a6e67bae95aa3b33fb24b1b9eb7cc36e7</anchor>
      <arglist>(iDynTree::MatrixDynSize &amp;regressor, iDynTree::VectorDynSize &amp;known_terms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getModelParameters</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>abf8fa5cbdb88349d2617da471f8f081f</anchor>
      <arglist>(iDynTree::VectorDynSize &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeFloatingBaseIdentifiableSubspace</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>aa603c4444fef44f404d7d896f652e121</anchor>
      <arglist>(iDynTree::MatrixDynSize &amp;basisMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeFixedBaseIdentifiableSubspace</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>aaef9ef3ac39c3dc883f9a8ddd0ac8073</anchor>
      <arglist>(iDynTree::MatrixDynSize &amp;basisMatrix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>generate_random_regressors</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a12ee67625906265ddcc44a7f0910e4ba</anchor>
      <arglist>(iDynTree::MatrixDynSize &amp;output_matrix, const bool static_regressor=false, const bool fixed_base=false, int n_samples=1000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicsRegressorGenerator</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a6fd4851eb58b915f0e052d4a165c6ffa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DynamicsRegressorGenerator</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>ad8d8565dd457eff12af251ff42493111</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadRobotAndSensorsModelFromFile</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a4c48bbea2bf59782a28b58ea4e1737df</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;filetype=&quot;urdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadRobotAndSensorsModelFromString</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>ab280c105344dcf22a34e1bba32340410</anchor>
      <arglist>(const std::string &amp;modelString, const std::string &amp;filetype=&quot;urdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadRegressorStructureFromFile</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a1e03cd2bef93b4fb901d2ef6b7361bed</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadRegressorStructureFromString</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a3c28a38f98da1dec0b3ed2b2b8a1c2ae</anchor>
      <arglist>(const std::string &amp;regressorStructureString)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a011440a8f6938f256c219f779e47d778</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfParameters</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a6b2b0e75ce052b437399ff37e935a47b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfOutputs</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>af9746da5c7d35ec19f23d3bdb93bc1ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfDegreesOfFreedom</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>aafffeb424e7f7ee038a9fc9a35f2f34b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfParameter</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>aa1d1a6edc44ceab15ca13a4a5214a4d8</anchor>
      <arglist>(int parameter_index, bool with_value=false, double value=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfParameters</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a8f6f590900ef9846c6954861f62dbc29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfParameters</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a7f8ff018fc6e950711d1341006a43f07</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfOutput</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a25b7b4e0ec8e3dae7d11cab3083be7be</anchor>
      <arglist>(int output_index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfOutputs</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>aafb5dc42f5a2dc524a11b9d5e0012791</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfDegreeOfFreedom</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>aac0a944dcbe6bc06858b5483a093406a</anchor>
      <arglist>(int dof_index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfDegreesOfFreedom</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>ad241765ce3169f5beeec17f8cf2f239f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfLink</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a839e83aab8282a552e53d969e84f2210</anchor>
      <arglist>(int link_index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfLinks</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a34e826b679f5f625deb3aa2e70a7f734</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfLinks</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>af5781905a113ab91a0eee2163a009b1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfFakeLinks</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>acbf25118bbf3d0bedde15bc5f30ac1bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getBaseLinkName</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>aa0c88d6b42409d2ffe21405c1c46714f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SensorsList &amp;</type>
      <name>getSensorsModel</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>af3a554f988c9ac6e3e9445ca282d6e1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRobotState</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>af2f1c67b465d77da5f35cd5621fd7f9a</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;q, const iDynTree::VectorDynSize &amp;q_dot, const iDynTree::VectorDynSize &amp;q_dotdot, const iDynTree::Transform &amp;world_T_base, const iDynTree::Twist &amp;base_velocity, const iDynTree::Twist &amp;base_acceleration, const iDynTree::Twist &amp;world_gravity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRobotState</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>ac2916a4e348926e474bd8db907c13592</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;q, const iDynTree::VectorDynSize &amp;q_dot, const iDynTree::VectorDynSize &amp;q_dotdot, const iDynTree::Twist &amp;world_gravity)</arglist>
    </member>
    <member kind="function">
      <type>SensorsMeasurements &amp;</type>
      <name>getSensorsMeasurements</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>aa61ee4cec473b7f6f5866099496edb7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setTorqueSensorMeasurement</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a29394d91a5d9c0656e5dab9912948399</anchor>
      <arglist>(const int dof_index, const double measure)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setTorqueSensorMeasurement</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a6d0d489b2f36f1335168d40cf789b577</anchor>
      <arglist>(iDynTree::VectorDynSize &amp;torques)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeRegressor</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a6e67bae95aa3b33fb24b1b9eb7cc36e7</anchor>
      <arglist>(iDynTree::MatrixDynSize &amp;regressor, iDynTree::VectorDynSize &amp;known_terms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getModelParameters</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>abf8fa5cbdb88349d2617da471f8f081f</anchor>
      <arglist>(iDynTree::VectorDynSize &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeFloatingBaseIdentifiableSubspace</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>aa603c4444fef44f404d7d896f652e121</anchor>
      <arglist>(iDynTree::MatrixDynSize &amp;basisMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeFixedBaseIdentifiableSubspace</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>aaef9ef3ac39c3dc883f9a8ddd0ac8073</anchor>
      <arglist>(iDynTree::MatrixDynSize &amp;basisMatrix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>generate_random_regressors</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator.html</anchorfile>
      <anchor>a12ee67625906265ddcc44a7f0910e4ba</anchor>
      <arglist>(iDynTree::MatrixDynSize &amp;output_matrix, const bool static_regressor=false, const bool fixed_base=false, int n_samples=1000)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::Regressors::DynamicsRegressorGenerator::DynamicsRegressorGeneratorPrivateAttributes</name>
    <filename>structiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator_1_1DynamicsRegressorGeneratorPrivateAttributes.html</filename>
    <member kind="function">
      <type></type>
      <name>DynamicsRegressorGeneratorPrivateAttributes</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator_1_1DynamicsRegressorGeneratorPrivateAttributes.html</anchorfile>
      <anchor>a9491cdd0a3378757cccebe66a7b9df9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>SensorsList</type>
      <name>dummySensorsList</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator_1_1DynamicsRegressorGeneratorPrivateAttributes.html</anchorfile>
      <anchor>ad33c399b3d8423889ec83963473ff6a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SensorsMeasurements</type>
      <name>dummySensorsMeasurements</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator_1_1DynamicsRegressorGeneratorPrivateAttributes.html</anchorfile>
      <anchor>a37a65e95bd5ad09c99aa78579ef75828</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_isRegressorValid</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator_1_1DynamicsRegressorGeneratorPrivateAttributes.html</anchorfile>
      <anchor>a1f609df13732a95f482c376dee3ca306</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_isModelValid</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator_1_1DynamicsRegressorGeneratorPrivateAttributes.html</anchorfile>
      <anchor>ab96063d9258c88a190557405a2ec7701</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::CoDyCo::UndirectedTree *</type>
      <name>robot_model</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator_1_1DynamicsRegressorGeneratorPrivateAttributes.html</anchorfile>
      <anchor>a3224bfe1425c8062b31bd007f80cbacd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::SensorsList</type>
      <name>sensors_model</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator_1_1DynamicsRegressorGeneratorPrivateAttributes.html</anchorfile>
      <anchor>aaa904b2dd629696c1ccb630fa28bce5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::CoDyCo::Regressors::DynamicRegressorGenerator *</type>
      <name>m_pLegacyGenerator</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator_1_1DynamicsRegressorGeneratorPrivateAttributes.html</anchorfile>
      <anchor>a03616cd565038ee70aa72e896034b298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::MatrixXd</type>
      <name>m_regressor</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator_1_1DynamicsRegressorGeneratorPrivateAttributes.html</anchorfile>
      <anchor>a617dc2255d268de50665b5d33f46faf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>m_knownTerms</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator_1_1DynamicsRegressorGeneratorPrivateAttributes.html</anchorfile>
      <anchor>abab87f26c82a04658b01983e280e5e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>m_parameters</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator_1_1DynamicsRegressorGeneratorPrivateAttributes.html</anchorfile>
      <anchor>aa6d1a2e196c4d50e04ddf45196fa57d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::MatrixXd</type>
      <name>m_basisMatrix</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator_1_1DynamicsRegressorGeneratorPrivateAttributes.html</anchorfile>
      <anchor>abed1c2224844a96b8e79d565a73385af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::JntArray</type>
      <name>m_qKDL</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator_1_1DynamicsRegressorGeneratorPrivateAttributes.html</anchorfile>
      <anchor>a2cd58e3ef01142d7bfe97952cd60596d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::JntArray</type>
      <name>m_dqKDL</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator_1_1DynamicsRegressorGeneratorPrivateAttributes.html</anchorfile>
      <anchor>a97bee22adbe1e21ee55c765cf78cd37e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::JntArray</type>
      <name>m_ddqKDL</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorGenerator_1_1DynamicsRegressorGeneratorPrivateAttributes.html</anchorfile>
      <anchor>ad7848114cb308a4f66f1b8cb1c9ea480</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::Regressors::DynamicsRegressorParameter</name>
    <filename>structiDynTree_1_1Regressors_1_1DynamicsRegressorParameter.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorParameter.html</anchorfile>
      <anchor>a0e332d9bacce97a556fe631b3e684465</anchor>
      <arglist>(const DynamicsRegressorParameter &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorParameter.html</anchorfile>
      <anchor>a3710f8b889cb1c60d320833b0c29a449</anchor>
      <arglist>(const DynamicsRegressorParameter &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorParameter.html</anchorfile>
      <anchor>a5227366fb350fd4321c17221b53ea6d5</anchor>
      <arglist>(const DynamicsRegressorParameter &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>DynamicsRegressorParameterCategory</type>
      <name>category</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorParameter.html</anchorfile>
      <anchor>a249bfc4a641de934a5a3e27abd0b35ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>elemIndex</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorParameter.html</anchorfile>
      <anchor>ad16df70b064810f1ceec8b06e0a6573a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DynamicsRegressorParameterType</type>
      <name>type</name>
      <anchorfile>structiDynTree_1_1Regressors_1_1DynamicsRegressorParameter.html</anchorfile>
      <anchor>a2bee458c64a9c94a90a5ae4a8e2ec04f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Regressors::DynamicsRegressorParametersList</name>
    <filename>classiDynTree_1_1Regressors_1_1DynamicsRegressorParametersList.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfParameter</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorParametersList.html</anchorfile>
      <anchor>a291e42f6d931817ba5b13204dc2df054</anchor>
      <arglist>(unsigned int param_index) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfParameter</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorParametersList.html</anchorfile>
      <anchor>a8feb0628b79957ca0ec23f8360a13a6e</anchor>
      <arglist>(unsigned int param_index, const std::string elemName) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addParam</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorParametersList.html</anchorfile>
      <anchor>a05ab908ba2b9b6a6715a22429d1bb875</anchor>
      <arglist>(const DynamicsRegressorParameter &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addList</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorParametersList.html</anchorfile>
      <anchor>a6ccef94df9089b523a82ceffdd6540ed</anchor>
      <arglist>(const DynamicsRegressorParametersList &amp;new_params)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findParam</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorParametersList.html</anchorfile>
      <anchor>ae309ac553a70718163ae8643c683b68d</anchor>
      <arglist>(const DynamicsRegressorParameter &amp;param, unsigned int &amp;index) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfParameters</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorParametersList.html</anchorfile>
      <anchor>a762e318bfdb44dd758ec0fce5d3f8e23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; DynamicsRegressorParameter &gt;</type>
      <name>parameters</name>
      <anchorfile>classiDynTree_1_1Regressors_1_1DynamicsRegressorParametersList.html</anchorfile>
      <anchor>af9b1838a118750f426dc9f0a96312d53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KDL::CoDyCo::Regressors::DynamicStateSample</name>
    <filename>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</filename>
    <member kind="function">
      <type></type>
      <name>DynamicStateSample</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>aa2d8a50eed94c9dcdb70bb8846322c04</anchor>
      <arglist>(const int NrOfDOFs=0, double ts=-1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicStateSample</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>aa7eadbd184f7c8997abaf8d6481f8165</anchor>
      <arglist>(const DynamicStateSample &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicStateSample</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a06ac6499ec81074f66a6ea4c561ab437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfDOFs</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a6037e9bd8fbd7d1173baf79d09b10fef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTimestamp</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>aab055d6ed0f5c1767060b19fb6e0fb77</anchor>
      <arglist>(const double ts)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTimestamp</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>adf7290172284f6ab0b9b378557e6a7d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KDL::Frame</type>
      <name>getWorldBaseTransform</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a91c79bacd77bb6d04b3d26cef5dcc303</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setWorldBaseTransform</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>aea8cbb8c286fc55a8d4a8412ee05adbd</anchor>
      <arglist>(const KDL::Frame &amp;world_base_frame)</arglist>
    </member>
    <member kind="function">
      <type>KDL::Twist</type>
      <name>getBaseVelocity</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>adae095f29b981102eb119c8fd4858fff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setBaseVelocity</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a703758608be66b16cd25080434fd701a</anchor>
      <arglist>(const KDL::Twist &amp;base_velocity)</arglist>
    </member>
    <member kind="function">
      <type>KDL::Twist</type>
      <name>getBaseSpatialAcceleration</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a4bf1f4bcee3b2dbcea4f64638bb4f374</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KDL::Twist</type>
      <name>getBaseClassicalAcceleration</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>aa758d19e675d07e05c328ae90f8b373e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setBaseSpatialAcceleration</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>acf2d3039318bbd59f08ac718b115aa43</anchor>
      <arglist>(const KDL::Twist &amp;spatial_base_acc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setBaseClassicalAcceleration</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a4dfcee60bd17d3d9c0c5e5c8052cbd2f</anchor>
      <arglist>(const KDL::Twist &amp;classical_base_acc)</arglist>
    </member>
    <member kind="function">
      <type>const KDL::JntArray &amp;</type>
      <name>getJointPosition</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a4ca6cd4c221875b316edc9db33514332</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setJointPosition</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>ab7679a6d0f70cffaac1ebbe660bd1f2e</anchor>
      <arglist>(const KDL::JntArray &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setJointPosition</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>aa13186fa7c9e7d1cce6242d36729b2e9</anchor>
      <arglist>(double _q, int dof_id)</arglist>
    </member>
    <member kind="function">
      <type>const KDL::JntArray &amp;</type>
      <name>getJointVelocity</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a4285d36e2d927e3a9d969bc1ef2e6f75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setJointVelocity</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a14e74a7733218b2f6b279af6ee392133</anchor>
      <arglist>(const KDL::JntArray &amp;dq)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setJointVelocity</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a8ac1cb654360ab7234743892b82b8826</anchor>
      <arglist>(double _dq, int dof_id)</arglist>
    </member>
    <member kind="function">
      <type>const KDL::JntArray &amp;</type>
      <name>getJointAcceleration</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>aafb47546abfda277f378fe03978bee00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setJointAcceleration</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>aa5452acb0c65936fd64b821e6148a3fa</anchor>
      <arglist>(const KDL::JntArray &amp;ddq)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setJointAcceleration</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>acf49f8dae7496e376e59b0eca705a48e</anchor>
      <arglist>(double _ddq, int dof_id)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>timestamp</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a5681a7d67728db8bd9963b28e052616f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::Frame</type>
      <name>world_base_transform</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>af849647167eed12f09778143f4a5ee1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::Twist</type>
      <name>base_vel</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a70c73caf1aa91d8f2416b8f2cbe123c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::Twist</type>
      <name>base_acc</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a8754b945bcc5d06947b8dc8d12307a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::JntArray</type>
      <name>q</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a5cbb5b45641582c02220c2385dd9deac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::JntArray</type>
      <name>dq</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>a578f140e317381e66aaca36237387937</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::JntArray</type>
      <name>ddq</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1DynamicStateSample.html</anchorfile>
      <anchor>ad00f62f3aba06f4de563bf19d73f61e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Environment</name>
    <filename>classiDynTree_1_1Environment.html</filename>
    <base>iDynTree::IEnvironment</base>
    <member kind="function">
      <type></type>
      <name>Environment</name>
      <anchorfile>classiDynTree_1_1Environment.html</anchorfile>
      <anchor>aa7ae4d7ade64a32bc46f49f4467b5f89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classiDynTree_1_1Environment.html</anchorfile>
      <anchor>ad641cf9e514e196f98bb53fc55c17e06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Environment</name>
      <anchorfile>classiDynTree_1_1Environment.html</anchorfile>
      <anchor>a547da94b663720bbd3ff62992f9b82d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getElements</name>
      <anchorfile>classiDynTree_1_1Environment.html</anchorfile>
      <anchor>aa479ebb39658019dc0d6c9a1a3e0e6e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setElementVisibility</name>
      <anchorfile>classiDynTree_1_1Environment.html</anchorfile>
      <anchor>adc9c4013d2fcdd3e530dc2fa452dc540</anchor>
      <arglist>(const std::string elementKey, bool isVisible)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBackgroundColor</name>
      <anchorfile>classiDynTree_1_1Environment.html</anchorfile>
      <anchor>a36f8deedd409a2cd4942e1471db5094a</anchor>
      <arglist>(const ColorViz &amp;backgroundColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAmbientLight</name>
      <anchorfile>classiDynTree_1_1Environment.html</anchorfile>
      <anchor>a3db6aba81f7bc00fa3a9331e893f3006</anchor>
      <arglist>(const ColorViz &amp;ambientLight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getLights</name>
      <anchorfile>classiDynTree_1_1Environment.html</anchorfile>
      <anchor>a84e6ba7402cfe995015e19c92d849659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addLight</name>
      <anchorfile>classiDynTree_1_1Environment.html</anchorfile>
      <anchor>a00f8da12f4c7afe1fce9b83c9b26b56f</anchor>
      <arglist>(const std::string &amp;lightName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ILight &amp;</type>
      <name>lightViz</name>
      <anchorfile>classiDynTree_1_1Environment.html</anchorfile>
      <anchor>afe1f1dbf91c0b3f031acbd637c152359</anchor>
      <arglist>(const std::string &amp;lightName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeLight</name>
      <anchorfile>classiDynTree_1_1Environment.html</anchorfile>
      <anchor>a6573421c4f662803c3892f5ab5a6ef74</anchor>
      <arglist>(const std::string &amp;lightName)</arglist>
    </member>
    <member kind="variable">
      <type>irr::scene::ISceneManager *</type>
      <name>m_sceneManager</name>
      <anchorfile>classiDynTree_1_1Environment.html</anchorfile>
      <anchor>acf14eb139f32864216460f40d1647be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>irr::scene::ISceneNode *</type>
      <name>m_envNode</name>
      <anchorfile>classiDynTree_1_1Environment.html</anchorfile>
      <anchor>a51310e8d41fc064d1e5917d46bbe5916</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>irr::scene::ISceneNode *</type>
      <name>m_rootFrameNode</name>
      <anchorfile>classiDynTree_1_1Environment.html</anchorfile>
      <anchor>a9733d30a692ce8e4114a35664c7c13ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>irr::scene::ISceneNode *</type>
      <name>m_floorGridNode</name>
      <anchorfile>classiDynTree_1_1Environment.html</anchorfile>
      <anchor>a5fd443b9d40fec358a6123caa462edd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>irr::video::SColorf</type>
      <name>m_backgroundColor</name>
      <anchorfile>classiDynTree_1_1Environment.html</anchorfile>
      <anchor>a5c228bf4467bf1cbb6e171883caa1118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Light * &gt;</type>
      <name>m_lights</name>
      <anchorfile>classiDynTree_1_1Environment.html</anchorfile>
      <anchor>aa189ac345bcf63b43b9c59b19b3d7c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DummyLight</type>
      <name>m_dummyLight</name>
      <anchorfile>classiDynTree_1_1Environment.html</anchorfile>
      <anchor>a7b6f73dbd295a8bc8cacf69a6a4f56b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::estimateExternalWrenchesBuffers</name>
    <filename>structiDynTree_1_1estimateExternalWrenchesBuffers.html</filename>
    <member kind="function">
      <type></type>
      <name>estimateExternalWrenchesBuffers</name>
      <anchorfile>structiDynTree_1_1estimateExternalWrenchesBuffers.html</anchorfile>
      <anchor>a1772f06ec76c567d2c837c61ab8431c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>estimateExternalWrenchesBuffers</name>
      <anchorfile>structiDynTree_1_1estimateExternalWrenchesBuffers.html</anchorfile>
      <anchor>a1f056dfd91587e272c6e396e61ec4930</anchor>
      <arglist>(const SubModelDecomposition &amp;subModels)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>estimateExternalWrenchesBuffers</name>
      <anchorfile>structiDynTree_1_1estimateExternalWrenchesBuffers.html</anchorfile>
      <anchor>aa8e53e1e1d93bc334b03d997e64c1f89</anchor>
      <arglist>(const size_t nrOfSubModels, const size_t nrOfLinks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>structiDynTree_1_1estimateExternalWrenchesBuffers.html</anchorfile>
      <anchor>a8c3a1fd22a99881c8ce7cf23bcd6f9c0</anchor>
      <arglist>(const SubModelDecomposition &amp;subModels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>structiDynTree_1_1estimateExternalWrenchesBuffers.html</anchorfile>
      <anchor>adab6951bbf1293647c47b1fff12cbe6a</anchor>
      <arglist>(const size_t nrOfSubModels, const size_t nrOfLinks)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfSubModels</name>
      <anchorfile>structiDynTree_1_1estimateExternalWrenchesBuffers.html</anchorfile>
      <anchor>a8f2ef44cfc80a707fab7a095fa7809e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfLinks</name>
      <anchorfile>structiDynTree_1_1estimateExternalWrenchesBuffers.html</anchorfile>
      <anchor>a3efa3b93b84e0b0d02a619945d417e33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsistent</name>
      <anchorfile>structiDynTree_1_1estimateExternalWrenchesBuffers.html</anchorfile>
      <anchor>af03ea4dc4b0df412d2fd6df805cc7b4c</anchor>
      <arglist>(const SubModelDecomposition &amp;subModels) const</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; MatrixDynSize &gt;</type>
      <name>A</name>
      <anchorfile>structiDynTree_1_1estimateExternalWrenchesBuffers.html</anchorfile>
      <anchor>ae5744844c1e8672aae03b4c0dff824e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; VectorDynSize &gt;</type>
      <name>x</name>
      <anchorfile>structiDynTree_1_1estimateExternalWrenchesBuffers.html</anchorfile>
      <anchor>ae5a8e31f5b0687c18159f23e690bfc23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Vector6 &gt;</type>
      <name>b</name>
      <anchorfile>structiDynTree_1_1estimateExternalWrenchesBuffers.html</anchorfile>
      <anchor>a3054f9d10cd9f16a08490e0abbb25309</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; MatrixDynSize &gt;</type>
      <name>pinvA</name>
      <anchorfile>structiDynTree_1_1estimateExternalWrenchesBuffers.html</anchorfile>
      <anchor>a7d68bde7917d51ca707f54a44b7a5b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkWrenches</type>
      <name>b_contacts_subtree</name>
      <anchorfile>structiDynTree_1_1estimateExternalWrenchesBuffers.html</anchorfile>
      <anchor>a9df3a903d8a16c8d55c840bbdd91893d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkPositions</type>
      <name>subModelBase_H_link</name>
      <anchorfile>structiDynTree_1_1estimateExternalWrenchesBuffers.html</anchorfile>
      <anchor>a2aca7ab3d8f4092cd9d9394dc714d466</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::details::extent_type</name>
    <filename>classiDynTree_1_1details_1_1extent__type.html</filename>
    <templarg>Ext</templarg>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>index_type</name>
      <anchorfile>classiDynTree_1_1details_1_1extent__type.html</anchorfile>
      <anchor>a05acb6a92ccf5c1c3f66b34c37bb08c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>extent_type</name>
      <anchorfile>classiDynTree_1_1details_1_1extent__type.html</anchorfile>
      <anchor>a46854e836fbb721623e957d561e6fa10</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>extent_type</name>
      <anchorfile>classiDynTree_1_1details_1_1extent__type.html</anchorfile>
      <anchor>abeb2370674effef407cfdec253237646</anchor>
      <arglist>(extent_type&lt; Other &gt; ext)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>extent_type</name>
      <anchorfile>classiDynTree_1_1details_1_1extent__type.html</anchorfile>
      <anchor>a7cd2e47572b105561bfe9aae5eb4ce5e</anchor>
      <arglist>(index_type size)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR index_type</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1details_1_1extent__type.html</anchorfile>
      <anchor>a0604686e44d5c986dbb789ffe264862e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::details::extent_type&lt; dynamic_extent &gt;</name>
    <filename>classiDynTree_1_1details_1_1extent__type_3_01dynamic__extent_01_4.html</filename>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>index_type</name>
      <anchorfile>classiDynTree_1_1details_1_1extent__type_3_01dynamic__extent_01_4.html</anchorfile>
      <anchor>aaf95fe1a655123fbd88a044466fd2318</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>extent_type</name>
      <anchorfile>classiDynTree_1_1details_1_1extent__type_3_01dynamic__extent_01_4.html</anchorfile>
      <anchor>a01911fd63900a1bce91dd1131b4b2d55</anchor>
      <arglist>(extent_type&lt; Other &gt; ext)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>extent_type</name>
      <anchorfile>classiDynTree_1_1details_1_1extent__type_3_01dynamic__extent_01_4.html</anchorfile>
      <anchor>adaa59edeb9f9f9401b27027a94fc574f</anchor>
      <arglist>(index_type size)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR index_type</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1details_1_1extent__type_3_01dynamic__extent_01_4.html</anchorfile>
      <anchor>a028fc5071f3bd64d144bed369bd979bc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>extent_type&lt; Extent &gt;</name>
    <filename>classiDynTree_1_1details_1_1extent__type.html</filename>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>index_type</name>
      <anchorfile>classiDynTree_1_1details_1_1extent__type.html</anchorfile>
      <anchor>a05acb6a92ccf5c1c3f66b34c37bb08c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>extent_type</name>
      <anchorfile>classiDynTree_1_1details_1_1extent__type.html</anchorfile>
      <anchor>a46854e836fbb721623e957d561e6fa10</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>extent_type</name>
      <anchorfile>classiDynTree_1_1details_1_1extent__type.html</anchorfile>
      <anchor>abeb2370674effef407cfdec253237646</anchor>
      <arglist>(extent_type&lt; Other &gt; ext)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>extent_type</name>
      <anchorfile>classiDynTree_1_1details_1_1extent__type.html</anchorfile>
      <anchor>a7cd2e47572b105561bfe9aae5eb4ce5e</anchor>
      <arglist>(index_type size)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR index_type</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1details_1_1extent__type.html</anchorfile>
      <anchor>a0604686e44d5c986dbb789ffe264862e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ExternalMesh</name>
    <filename>classiDynTree_1_1ExternalMesh.html</filename>
    <base>iDynTree::SolidShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExternalMesh</name>
      <anchorfile>classiDynTree_1_1ExternalMesh.html</anchorfile>
      <anchor>a450270a51b12a62470f88067ae94dcd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolidShape *</type>
      <name>clone</name>
      <anchorfile>classiDynTree_1_1ExternalMesh.html</anchorfile>
      <anchor>a508e89c6fd17ba29cbd9e6b60260996a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSphere</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a8ba065f0e60ad78baad071a3a870faf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBox</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a661c33c6139a4cde9c9eeb55ebcd915e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCylinder</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a8218783b444c4f651ebc5517399a04bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExternalMesh</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>aeef66627d452a2b192c9d62ac6e6b908</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Sphere *</type>
      <name>asSphere</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a99663faed75dfd72d0d89cc4bed840d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Sphere *</type>
      <name>asSphere</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a720d8b9d4d78dc3ae961e0c9f0529465</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Box *</type>
      <name>asBox</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a45e488bee1b295013389a7c67a5512f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box *</type>
      <name>asBox</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a4ea5d8b8ea2e334c1edecc390ca2e06c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cylinder *</type>
      <name>asCylinder</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>ac1a4e162221fb08c270af4d0424b86b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Cylinder *</type>
      <name>asCylinder</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>ac6ba4dbcf0b0a10b8f09689d85842515</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ExternalMesh *</type>
      <name>asExternalMesh</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a87e9c96203f414d82a09ea4c391f1d88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExternalMesh *</type>
      <name>asExternalMesh</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a6ed24fecde411acdfc1d1c6cfdaa4330</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>filename</name>
      <anchorfile>classiDynTree_1_1ExternalMesh.html</anchorfile>
      <anchor>addb8f54db0f412195238d5f478b63fa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Vector3</type>
      <name>scale</name>
      <anchorfile>classiDynTree_1_1ExternalMesh.html</anchorfile>
      <anchor>a89a2829549de18df5a546a3e066761cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a5026e44f557e25b407642e95dd7bbb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>nameIsValid</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>adca1aa44db797c0122b0479b2a65ff9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform</type>
      <name>link_H_geometry</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a8be2a1e24878ac8de853123219a6ac64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector4</type>
      <name>material</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a61f1577ee526add690666ad2e07e21c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ExtWrenchesAndJointTorquesEstimator</name>
    <filename>classiDynTree_1_1ExtWrenchesAndJointTorquesEstimator.html</filename>
    <member kind="function">
      <type></type>
      <name>ExtWrenchesAndJointTorquesEstimator</name>
      <anchorfile>classiDynTree_1_1ExtWrenchesAndJointTorquesEstimator.html</anchorfile>
      <anchor>afaddafcf6ed76bc417e3780ceebf81db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ExtWrenchesAndJointTorquesEstimator</name>
      <anchorfile>classiDynTree_1_1ExtWrenchesAndJointTorquesEstimator.html</anchorfile>
      <anchor>a21ecaac3728255f5ad511123ca97ec77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setModelAndSensors</name>
      <anchorfile>classiDynTree_1_1ExtWrenchesAndJointTorquesEstimator.html</anchorfile>
      <anchor>ab62c38a61392178a65af5a90a6a7a076</anchor>
      <arglist>(const Model &amp;_model, const SensorsList &amp;_sensors)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadModelAndSensorsFromFile</name>
      <anchorfile>classiDynTree_1_1ExtWrenchesAndJointTorquesEstimator.html</anchorfile>
      <anchor>af366663099c8b4772ab27485bc3581f8</anchor>
      <arglist>(const std::string filename, const std::string filetype=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadModelAndSensorsFromFileWithSpecifiedDOFs</name>
      <anchorfile>classiDynTree_1_1ExtWrenchesAndJointTorquesEstimator.html</anchorfile>
      <anchor>a65ada8c5265bed3d7f19bd1b3694be18</anchor>
      <arglist>(const std::string filename, const std::vector&lt; std::string &gt; &amp;consideredDOFs, const std::string filetype=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const Model &amp;</type>
      <name>model</name>
      <anchorfile>classiDynTree_1_1ExtWrenchesAndJointTorquesEstimator.html</anchorfile>
      <anchor>a8d2dfda95ea36d78c762af0d912ea3b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SensorsList &amp;</type>
      <name>sensors</name>
      <anchorfile>classiDynTree_1_1ExtWrenchesAndJointTorquesEstimator.html</anchorfile>
      <anchor>a5bd114e3fb72fac6c6bfc3e73e80ce6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SubModelDecomposition &amp;</type>
      <name>submodels</name>
      <anchorfile>classiDynTree_1_1ExtWrenchesAndJointTorquesEstimator.html</anchorfile>
      <anchor>a556723a4b33d19bfec3852d424b6ddcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateKinematicsFromFloatingBase</name>
      <anchorfile>classiDynTree_1_1ExtWrenchesAndJointTorquesEstimator.html</anchorfile>
      <anchor>a5d44956cd4c5a64c2c3397fce2c9edd8</anchor>
      <arglist>(const JointPosDoubleArray &amp;jointPos, const JointDOFsDoubleArray &amp;jointVel, const JointDOFsDoubleArray &amp;jointAcc, const FrameIndex &amp;floatingFrame, const Vector3 &amp;properClassicalLinearAcceleration, const Vector3 &amp;angularVel, const Vector3 &amp;angularAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateKinematicsFromFixedBase</name>
      <anchorfile>classiDynTree_1_1ExtWrenchesAndJointTorquesEstimator.html</anchorfile>
      <anchor>a988f7114c5e0661ddd931d98c04645c9</anchor>
      <arglist>(const JointPosDoubleArray &amp;jointPos, const JointDOFsDoubleArray &amp;jointVel, const JointDOFsDoubleArray &amp;jointAcc, const FrameIndex &amp;fixedFrame, const Vector3 &amp;gravity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeExpectedFTSensorsMeasurements</name>
      <anchorfile>classiDynTree_1_1ExtWrenchesAndJointTorquesEstimator.html</anchorfile>
      <anchor>a903f0fca32abdb551ffe7eda013ce462</anchor>
      <arglist>(const LinkUnknownWrenchContacts &amp;unknowns, SensorsMeasurements &amp;predictedMeasures, LinkContactWrenches &amp;estimatedContactWrenches, JointDOFsDoubleArray &amp;estimatedJointTorques)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>estimateExtWrenchesAndJointTorques</name>
      <anchorfile>classiDynTree_1_1ExtWrenchesAndJointTorquesEstimator.html</anchorfile>
      <anchor>a9abd2346013d2a811c5336255323962b</anchor>
      <arglist>(const LinkUnknownWrenchContacts &amp;unknowns, const SensorsMeasurements &amp;ftSensorsMeasures, LinkContactWrenches &amp;estimatedContactWrenches, JointDOFsDoubleArray &amp;estimatedJointTorques)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkThatTheModelIsStill</name>
      <anchorfile>classiDynTree_1_1ExtWrenchesAndJointTorquesEstimator.html</anchorfile>
      <anchor>a584e5d2ca3426529f407dbb5248f290e</anchor>
      <arglist>(const double gravityNorm, const double properAccTol, const double verbose)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>estimateLinkNetWrenchesWithoutGravity</name>
      <anchorfile>classiDynTree_1_1ExtWrenchesAndJointTorquesEstimator.html</anchorfile>
      <anchor>ad52d10a9a145eba8d52c67ea65128554</anchor>
      <arglist>(LinkNetTotalWrenchesWithoutGravity &amp;netWrenches)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::FixedJoint</name>
    <filename>classiDynTree_1_1FixedJoint.html</filename>
    <base>iDynTree::IJoint</base>
    <member kind="function">
      <type></type>
      <name>FixedJoint</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a0cfd93dca7169f99a116c46270432b9c</anchor>
      <arglist>(const LinkIndex link1, const LinkIndex link2, const Transform &amp;link1_X_link2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixedJoint</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a2d8b3c4a9c19bf932775d5a83d7d2c67</anchor>
      <arglist>(const Transform &amp;link1_X_link2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixedJoint</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>aa625db20fbc6f0683efe90b49ee8f9be</anchor>
      <arglist>(const FixedJoint &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FixedJoint</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a0fdaf9cb55f5e052ebb0127b286b7f3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IJoint *</type>
      <name>clone</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a40282fcd9da9e8517d730b5ecb601ce7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNrOfPosCoords</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a16b511e89bf078f243b6b8b5e8c299ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNrOfDOFs</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>ada3e8262f9461e041261fd2ab965a072</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttachedLinks</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a53c8c3e7413d102742adda999b125c01</anchor>
      <arglist>(const LinkIndex link1, const LinkIndex link2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRestTransform</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a70fcc0a09159ee450e7344b6a18e0a59</anchor>
      <arglist>(const Transform &amp;link1_X_link2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LinkIndex</type>
      <name>getFirstAttachedLink</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a27ed6282c88d7acf16c9ad09837e24af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LinkIndex</type>
      <name>getSecondAttachedLink</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>af2556988a6242335adb351dd08306da7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Transform</type>
      <name>getRestTransform</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a1b5eb7f53f024d051d5d0b661cce1b0c</anchor>
      <arglist>(const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Transform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a9f0fbfd933de7314628f211d703664cf</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function">
      <type>TransformDerivative</type>
      <name>getTransformDerivative</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>aac231749bf30745780aec0d876fd82ed</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const LinkIndex child, const LinkIndex parent, const int posCoord_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SpatialMotionVector</type>
      <name>getMotionSubspaceVector</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>aed45f624ac2a336503ad6a5f3097c390</anchor>
      <arglist>(int dof_i, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeChildPosVelAcc</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a0c90cfaf3ac2131bf6aa675e7ffd82a1</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const VectorDynSize &amp;jntAcc, LinkPositions &amp;linkPositions, LinkVelArray &amp;linkVels, LinkAccArray &amp;linkAccs, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeChildVelAcc</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>ad31684f99d01bfdc36075c848ae62663</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const VectorDynSize &amp;jntAcc, LinkVelArray &amp;linkVels, LinkAccArray &amp;linkAccs, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeChildVel</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a7f2472fb3c334f104f6c438dd7c832e2</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, LinkVelArray &amp;linkVels, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeChildAcc</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>aa2d13946005906201ebe6e8d7b7f0d14</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const LinkVelArray &amp;linkVels, const VectorDynSize &amp;jntAcc, LinkAccArray &amp;linkAccs, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeChildBiasAcc</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>acd140267ec54936b8a769866f5f63b29</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const LinkVelArray &amp;linkVels, LinkAccArray &amp;linkBiasAccs, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeJointTorque</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>aae4292e8a1254d5a484c5de580f65ba6</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const Wrench &amp;internalWrench, const LinkIndex linkThatAppliesWrench, const LinkIndex linkOnWhichWrenchIsApplied, VectorDynSize &amp;jntTorques) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIndex</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a158ceaf3ad919cd6dda2dc36ff8171a6</anchor>
      <arglist>(JointIndex &amp;_index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual JointIndex</type>
      <name>getIndex</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a65e55c4953062ffdd4fe2468b830b712</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosCoordsOffset</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a5b5f1b370bfbe6da174250e816980735</anchor>
      <arglist>(const size_t _index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getPosCoordsOffset</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>afe99084a8951ea49be479f91267a085b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDOFsOffset</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>aa11c36e2d2a31c4ff3177a0c94612500</anchor>
      <arglist>(const size_t _index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getDOFsOffset</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>adc048f83c37bb9a9317cc707a7a7cfbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasPosLimits</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a173624a00c8a5677e965f6c62a8a75e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>enablePosLimits</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a5ffbee0f5ab38247c2375ad833856326</anchor>
      <arglist>(const bool enable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getPosLimits</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>adb61e4299b52a4b4a18faeabca03e6e0</anchor>
      <arglist>(const size_t _index, double &amp;min, double &amp;max) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMinPosLimit</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a59d86314d8676d861cf7ea30b64683dc</anchor>
      <arglist>(const size_t _index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxPosLimit</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a851077e36a063272760794bd8a65f350</anchor>
      <arglist>(const size_t _index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setPosLimits</name>
      <anchorfile>classiDynTree_1_1FixedJoint.html</anchorfile>
      <anchor>a5eb3daeb7ed495ad040fd2e1dc857e47</anchor>
      <arglist>(const size_t _index, double &amp;min, double &amp;max)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::integrators::FixedStepIntegrator</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1integrators_1_1FixedStepIntegrator.html</filename>
    <base>iDynTree::optimalcontrol::integrators::Integrator</base>
    <member kind="function">
      <type></type>
      <name>FixedStepIntegrator</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1FixedStepIntegrator.html</anchorfile>
      <anchor>a64fe09ecf248c2b8653a452409f49670</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixedStepIntegrator</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1FixedStepIntegrator.html</anchorfile>
      <anchor>abe562bb33f310ad9b7c50ebf6190eac2</anchor>
      <arglist>(const std::shared_ptr&lt; iDynTree::optimalcontrol::DynamicalSystem &gt; dynamicalSystem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FixedStepIntegrator</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1FixedStepIntegrator.html</anchorfile>
      <anchor>a33a1c2b2e6c0ebe4370e44666699f65b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>integrate</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1FixedStepIntegrator.html</anchorfile>
      <anchor>a647bc31b7c8d037ae5df8b66518bf0e0</anchor>
      <arglist>(double initialTime, double finalTime) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setMaximumStepSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a6e2b9052aa9b0638ce7d2f8347b4fe00</anchor>
      <arglist>(const double dT)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maximumStepSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a0d39d3023f056364a01963b7520a7c21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a72bf5f94da63280de3c2b3223cd251e6</anchor>
      <arglist>(const std::shared_ptr&lt; iDynTree::optimalcontrol::DynamicalSystem &gt; dynamicalSystem)</arglist>
    </member>
    <member kind="function">
      <type>const std::weak_ptr&lt; DynamicalSystem &gt;</type>
      <name>dynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a00cae12a44e212fac9a71fd2d07d8caf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getSolution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a661760c48a95a73d6061743a7e988c4b</anchor>
      <arglist>(double time, VectorDynSize &amp;solution) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; SolutionElement &gt; &amp;</type>
      <name>getFullSolution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>ab5b22916d2b6e31314d3dd8955a574d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearSolution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>aa0aac8f0c4e34d345c05960591468d73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCollocationConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a12e7200b4cf89eeca101c94de758b3bb</anchor>
      <arglist>(double time, const std::vector&lt; VectorDynSize &gt; &amp;collocationPoints, const std::vector&lt; VectorDynSize &gt; &amp;controlInputs, double dT, VectorDynSize &amp;constraintValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCollocationConstraintJacobian</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>ae44f7ecb211132d6280df85e23378a05</anchor>
      <arglist>(double time, const std::vector&lt; VectorDynSize &gt; &amp;collocationPoints, const std::vector&lt; VectorDynSize &gt; &amp;controlInputs, double dT, std::vector&lt; MatrixDynSize &gt; &amp;stateJacobianValues, std::vector&lt; MatrixDynSize &gt; &amp;controlJacobianValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintJacobianStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>aab4d320903f06565e0fbecbbae934f0f</anchor>
      <arglist>(std::vector&lt; SparsityStructure &gt; &amp;stateJacobianSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintJacobianControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a97950a2b3f0f491f75109ff0739dc0f9</anchor>
      <arglist>(std::vector&lt; SparsityStructure &gt; &amp;controlJacobianSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCollocationConstraintSecondDerivatives</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>aebc2c1544ef18998b7701205549f2cd7</anchor>
      <arglist>(double time, const std::vector&lt; VectorDynSize &gt; &amp;collocationPoints, const std::vector&lt; VectorDynSize &gt; &amp;controlInputs, double dT, const VectorDynSize &amp;lambda, CollocationHessianMap &amp;stateSecondDerivative, CollocationHessianMap &amp;controlSecondDerivative, CollocationHessianMap &amp;stateControlSecondDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintSecondDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a6a8e264a12ba28ef1973d0616e5ac144</anchor>
      <arglist>(CollocationHessianSparsityMap &amp;stateDerivativeSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintSecondDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a77cb08d2a9451f828508e19c25a9991e</anchor>
      <arglist>(CollocationHessianSparsityMap &amp;controlDerivativeSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintSecondDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>acefec19f5d879d9720df1f3a8c1b8186</anchor>
      <arglist>(CollocationHessianSparsityMap &amp;stateControlDerivativeSparsity)</arglist>
    </member>
    <member kind="function">
      <type>const IntegratorInfo &amp;</type>
      <name>info</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a18959a33019837571480eea082a4bdb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>oneStepIntegration</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1FixedStepIntegrator.html</anchorfile>
      <anchor>ab5b7266da1fad6d293766fc19a47c905</anchor>
      <arglist>(double t0, double dT, const VectorDynSize &amp;x0, VectorDynSize &amp;x)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>interpolatePoints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>ad5b95d324ad148603d09aedcb52860ce</anchor>
      <arglist>(const std::vector&lt; SolutionElement &gt;::const_iterator &amp;first, const std::vector&lt; SolutionElement &gt;::const_iterator &amp;second, double time, VectorDynSize &amp;outputPoint) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>allocateBuffers</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a2c69c4bd45522641ebf505a0d2dc99b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_dTmax</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a371179a8cb3e4b4a03a3a0d90d2e6cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; DynamicalSystem &gt;</type>
      <name>m_dynamicalSystem_ptr</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>aa9eb4f3c3a4da99f1ce27b28154e4bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SolutionElement &gt;</type>
      <name>m_solution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a25b9c2215f3bbf7940214925e3a55ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; IntegratorInfoData &gt;</type>
      <name>m_infoData</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a91cc593e13d13305e81b3e7fc5ae6276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntegratorInfo</type>
      <name>m_info</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a3b03ff054e91a4142240dea337524fa1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ForceTorqueSensorElement</name>
    <filename>classiDynTree_1_1ForceTorqueSensorElement.html</filename>
    <base>iDynTree::XMLElement</base>
    <member kind="function">
      <type></type>
      <name>ForceTorqueSensorElement</name>
      <anchorfile>classiDynTree_1_1ForceTorqueSensorElement.html</anchorfile>
      <anchor>a4840a4d5855a9388d603909d5565f0f0</anchor>
      <arglist>(std::shared_ptr&lt; const SensorElement::SensorInfo &gt; sensorInfo)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; XMLElement &gt;</type>
      <name>childElementForName</name>
      <anchorfile>classiDynTree_1_1ForceTorqueSensorElement.html</anchorfile>
      <anchor>a1a9a4e7f42a0864aaff09e4f3734101b</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; iDynTree::SensorHelper &gt;</type>
      <name>helper</name>
      <anchorfile>classiDynTree_1_1ForceTorqueSensorElement.html</anchorfile>
      <anchor>abbafcd6b77f42373206126da9b0b96fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ab40851b7629a74107f2183ca36e412e4</anchor>
      <arglist>(std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a16759fb450635662dced0eb2ace0228b</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChildHasBeenParsedCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a69171cc4b5c552b97f44375029356a2e</anchor>
      <arglist>(std::function&lt; void(std::shared_ptr&lt; XMLElement &gt;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt;</type>
      <name>attributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2a182ac17f5e644b113a67e02c3595e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; void()&gt;</type>
      <name>exitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a04ea33b2a4ebf84647fb6d38e24ba0e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a7129fb1e69a5bc819872e65d3965296d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; XMLElement &gt; &gt;</type>
      <name>children</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2f51748fc6eed4724e86dc5e52ebd5ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt; &gt;</type>
      <name>attributes</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a27347aca070a5dfc250077b6cc3e3748</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>exitElementScope</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a66d20512ef5debea77d1919835dbda1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>childHasBeenParsed</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ac92ce9b144b27970e09f6f9dff77f251</anchor>
      <arglist>(std::shared_ptr&lt; XMLElement &gt; parsedChild)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setAttributes</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a9dc312559f13e9d78d10ddc2242ac27d</anchor>
      <arglist>(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;attributes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsedCharacters</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a949bcf8e3496896d2b6d7d6da72870a7</anchor>
      <arglist>(const std::string &amp;characters)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParsedTextContent</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>abebc95353394912e187ad70e6078fcdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a3d8e1b737e614b35e3df0a4f76ac645b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ForceTorqueSensorHelper</name>
    <filename>classiDynTree_1_1ForceTorqueSensorHelper.html</filename>
    <base>iDynTree::SensorHelper</base>
    <member kind="function">
      <type></type>
      <name>ForceTorqueSensorHelper</name>
      <anchorfile>classiDynTree_1_1ForceTorqueSensorHelper.html</anchorfile>
      <anchor>a29590c3cc2a836f05f1af29fed18db97</anchor>
      <arglist>(std::shared_ptr&lt; const SensorElement::SensorInfo &gt; sensorInfo)</arglist>
    </member>
    <member kind="function">
      <type>Sensor *</type>
      <name>generateSensor</name>
      <anchorfile>classiDynTree_1_1ForceTorqueSensorHelper.html</anchorfile>
      <anchor>a89bff5ec7d1942feed9b89dcda0f7c22</anchor>
      <arglist>(const Model &amp;model) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; const SensorElement::SensorInfo &gt;</type>
      <name>m_sensorInfo</name>
      <anchorfile>classiDynTree_1_1SensorHelper.html</anchorfile>
      <anchor>ac726e84fbbcc59662ab2bf0c531b1270</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ForceTorqueSensorElement</name>
      <anchorfile>classiDynTree_1_1ForceTorqueSensorHelper.html</anchorfile>
      <anchor>a0e2ee63fc978cbe9dba87fa44c8337b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ForceVector3</name>
    <filename>classiDynTree_1_1ForceVector3.html</filename>
    <base>GeomVector3&lt; ForceT &gt;</base>
    <member kind="typedef">
      <type>MotionForce_traits&lt; MotionForceT &gt;::SemanticsType</type>
      <name>MotionForceSemanticsT</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a6d2271c71f2ad4a8cac88a437bfed491</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeomVector3&lt; MotionForceT &gt;</type>
      <name>MotionForceTbase</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a473da581f6541cc39d684ea0026ac838</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceVector3</name>
      <anchorfile>classiDynTree_1_1ForceVector3.html</anchorfile>
      <anchor>abd250855adcbb395e7e44ec30f6866c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceVector3</name>
      <anchorfile>classiDynTree_1_1ForceVector3.html</anchorfile>
      <anchor>a8e47f9f54eaf5f5ad420ef6300a132db</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceVector3</name>
      <anchorfile>classiDynTree_1_1ForceVector3.html</anchorfile>
      <anchor>a917be1bac27f3048105f9ce30474d173</anchor>
      <arglist>(const ForceVector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const MotionForceSemanticsT &amp;</type>
      <name>getSemantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a4cd796475bc41481fbbb1ae179eb8548</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSemantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a7c3f39fe68a340bce3c792720daf2204</anchor>
      <arglist>(MotionForceSemanticsT &amp;_semantics)</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>abda6982b38e6d4069af4577aab8deb62</anchor>
      <arglist>(const Rotation &amp;newCoordFrame) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a28806b83d896ddbf851a5998726318d4</anchor>
      <arglist>(const typename MotionForce_traits&lt; MotionForceT &gt;::DualSpace &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a5459b2c1dd902b3e59331bfc37a2907c</anchor>
      <arglist>(const MotionForceT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>aab92d8d49cafbb94d6ced67ffc514910</anchor>
      <arglist>(const MotionForceT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a1543f5d4b5740cab90c8f7136a787609</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MotionForceT</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>ac0615723d52e3ba20ff5c3b5c27637c5</anchor>
      <arglist>(const MotionForceTbase &amp;op1, const MotionForceT &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MotionForceT</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a9d22bfb36281ecbb7e979ab886cdd2da</anchor>
      <arglist>(const MotionForceTbase &amp;op)</arglist>
    </member>
    <member kind="variable">
      <type>MotionForceSemanticsT</type>
      <name>semantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a23b0961458c4a91fa2a3f3c1b19f6daf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ForceVector3&lt; AngularForceVector3 &gt;</name>
    <filename>classiDynTree_1_1ForceVector3.html</filename>
    <member kind="function">
      <type></type>
      <name>ForceVector3</name>
      <anchorfile>classiDynTree_1_1ForceVector3.html</anchorfile>
      <anchor>abd250855adcbb395e7e44ec30f6866c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceVector3</name>
      <anchorfile>classiDynTree_1_1ForceVector3.html</anchorfile>
      <anchor>a8e47f9f54eaf5f5ad420ef6300a132db</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceVector3</name>
      <anchorfile>classiDynTree_1_1ForceVector3.html</anchorfile>
      <anchor>a917be1bac27f3048105f9ce30474d173</anchor>
      <arglist>(const ForceVector3 &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ForceVector3&lt; LinearForceVector3 &gt;</name>
    <filename>classiDynTree_1_1ForceVector3.html</filename>
    <member kind="function">
      <type></type>
      <name>ForceVector3</name>
      <anchorfile>classiDynTree_1_1ForceVector3.html</anchorfile>
      <anchor>abd250855adcbb395e7e44ec30f6866c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceVector3</name>
      <anchorfile>classiDynTree_1_1ForceVector3.html</anchorfile>
      <anchor>a8e47f9f54eaf5f5ad420ef6300a132db</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceVector3</name>
      <anchorfile>classiDynTree_1_1ForceVector3.html</anchorfile>
      <anchor>a917be1bac27f3048105f9ce30474d173</anchor>
      <arglist>(const ForceVector3 &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ForceVector3Semantics</name>
    <filename>classiDynTree_1_1ForceVector3Semantics.html</filename>
    <base>GeomVector3Semantics&lt; ForceTSemantics &gt;</base>
    <member kind="function">
      <type></type>
      <name>ForceVector3Semantics</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>a8f45e55e967e3fd3596968a705dfb2d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceVector3Semantics</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>a01aa7a2d46d6f4d56ae005431e0ef172</anchor>
      <arglist>(int _body, int _refBody, int _coordinateFrame)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceVector3Semantics</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>a2ee0e79cae87d628c180b644a371fa9d</anchor>
      <arglist>(const ForceVector3Semantics &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToUnknown</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>abd883af03b4203fd00ea1cf4f504cfc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a4f0bb7a25a966f92f8cf19494088e4e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRefBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a3e57319bb4392cb63a6077e8180e28d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoordinateFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a32b5b64c6e34938ad1521732331bc474</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnknown</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>ab1430528dd300c1cb4d507918680e779</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a0017f085753fd7da90d7e7a4e4625fbf</anchor>
      <arglist>(const RotationSemantics &amp;newCoordFrame, MotionForceSemanticsT &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>aa99906ab81a042e55b654b37ef24d620</anchor>
      <arglist>(const typename DualMotionForceSemanticsT&lt; MotionForceSemanticsT &gt;::Type &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>ad58b79754fa8eb7419cff86e5f6b76c5</anchor>
      <arglist>(const ForceVector3Semantics &amp;op1, const ForceVector3Semantics &amp;op2, ForceVector3Semantics &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>a86b5db61b28c45d33e329ea266b41122</anchor>
      <arglist>(const ForceVector3Semantics &amp;op, ForceVector3Semantics &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a7060b666780b2024ee6ed4a2dac8991d</anchor>
      <arglist>(const MotionForceSemanticsT &amp;op1, const MotionForceSemanticsT &amp;op2, MotionForceSemanticsT &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>ac03fa8a55e563b79cfc2b752318ed55e</anchor>
      <arglist>(const MotionForceSemanticsT &amp;op, MotionForceSemanticsT &amp;result)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>body</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a41d8bb8a198ce9d9e6b1790f98cfeaa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>refBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a3394a4c417154821e37c11e95ce1d934</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>coordinateFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a7bbc827d06b06a8b67a86165da66634b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ForceVector3Semantics&lt; AngularForceVector3Semantics &gt;</name>
    <filename>classiDynTree_1_1ForceVector3Semantics.html</filename>
    <member kind="function">
      <type></type>
      <name>ForceVector3Semantics</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>a8f45e55e967e3fd3596968a705dfb2d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceVector3Semantics</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>a01aa7a2d46d6f4d56ae005431e0ef172</anchor>
      <arglist>(int _body, int _refBody, int _coordinateFrame)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceVector3Semantics</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>a2ee0e79cae87d628c180b644a371fa9d</anchor>
      <arglist>(const ForceVector3Semantics &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>ad58b79754fa8eb7419cff86e5f6b76c5</anchor>
      <arglist>(const ForceVector3Semantics &amp;op1, const ForceVector3Semantics &amp;op2, ForceVector3Semantics &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>a86b5db61b28c45d33e329ea266b41122</anchor>
      <arglist>(const ForceVector3Semantics &amp;op, ForceVector3Semantics &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ForceVector3Semantics&lt; LinearForceVector3Semantics &gt;</name>
    <filename>classiDynTree_1_1ForceVector3Semantics.html</filename>
    <member kind="function">
      <type></type>
      <name>ForceVector3Semantics</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>a8f45e55e967e3fd3596968a705dfb2d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceVector3Semantics</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>a01aa7a2d46d6f4d56ae005431e0ef172</anchor>
      <arglist>(int _body, int _refBody, int _coordinateFrame)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceVector3Semantics</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>a2ee0e79cae87d628c180b644a371fa9d</anchor>
      <arglist>(const ForceVector3Semantics &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>ad58b79754fa8eb7419cff86e5f6b76c5</anchor>
      <arglist>(const ForceVector3Semantics &amp;op1, const ForceVector3Semantics &amp;op2, ForceVector3Semantics &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>a86b5db61b28c45d33e329ea266b41122</anchor>
      <arglist>(const ForceVector3Semantics &amp;op, ForceVector3Semantics &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::ForwardDynamicsLinearizationInternalBuffers</name>
    <filename>structiDynTree_1_1ForwardDynamicsLinearizationInternalBuffers.html</filename>
    <member kind="function">
      <type></type>
      <name>ForwardDynamicsLinearizationInternalBuffers</name>
      <anchorfile>structiDynTree_1_1ForwardDynamicsLinearizationInternalBuffers.html</anchorfile>
      <anchor>a67ceed1a6075dd318e8f8becdf907a84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForwardDynamicsLinearizationInternalBuffers</name>
      <anchorfile>structiDynTree_1_1ForwardDynamicsLinearizationInternalBuffers.html</anchorfile>
      <anchor>a1816c8a74000bd02bf897a94dac61dd5</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>structiDynTree_1_1ForwardDynamicsLinearizationInternalBuffers.html</anchorfile>
      <anchor>ae228e32ef93aef6fd9ad11882ab5f2fb</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="variable">
      <type>ArticulatedBodyAlgorithmInternalBuffers</type>
      <name>aba</name>
      <anchorfile>structiDynTree_1_1ForwardDynamicsLinearizationInternalBuffers.html</anchorfile>
      <anchor>aacdc3cee9e5ab6debe145bb100fad6d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ArticulatedBodyAlgorithmInternalBuffers &gt;</type>
      <name>dPos</name>
      <anchorfile>structiDynTree_1_1ForwardDynamicsLinearizationInternalBuffers.html</anchorfile>
      <anchor>a8e8077614597ee1b792b0cdb7a3fcc65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkPositions</type>
      <name>linkPos</name>
      <anchorfile>structiDynTree_1_1ForwardDynamicsLinearizationInternalBuffers.html</anchorfile>
      <anchor>aa2864c3524539d4fa6f7e25ee7d1a708</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SpatialForceWrtMotionDerivative &gt;</type>
      <name>dVb_linkBiasWrench</name>
      <anchorfile>structiDynTree_1_1ForwardDynamicsLinearizationInternalBuffers.html</anchorfile>
      <anchor>a40496ec94c434ff7511a74c5e2d7284e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Matrix1x6 &gt;</type>
      <name>dVb_u</name>
      <anchorfile>structiDynTree_1_1ForwardDynamicsLinearizationInternalBuffers.html</anchorfile>
      <anchor>a47ec31687c5d0d6003fba8347d7e0583</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SpatialMotionWrtMotionDerivative &gt;</type>
      <name>dVb_linkBiasAcceleration</name>
      <anchorfile>structiDynTree_1_1ForwardDynamicsLinearizationInternalBuffers.html</anchorfile>
      <anchor>a618ea9ee2ee5fbf8ad69f2ea79d6ce4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SpatialMotionWrtMotionDerivative &gt;</type>
      <name>dVb_linksAccelerations</name>
      <anchorfile>structiDynTree_1_1ForwardDynamicsLinearizationInternalBuffers.html</anchorfile>
      <anchor>aa38ccefb07d49586aebeeaf56754be5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SpatialForceWrtMotionDerivative &gt;</type>
      <name>dVl_linkLocalBiasWrench</name>
      <anchorfile>structiDynTree_1_1ForwardDynamicsLinearizationInternalBuffers.html</anchorfile>
      <anchor>aafc407754d41f666bd58d5d58f83c3b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ArticulatedBodyAlgorithmInternalBuffers &gt;</type>
      <name>dVel</name>
      <anchorfile>structiDynTree_1_1ForwardDynamicsLinearizationInternalBuffers.html</anchorfile>
      <anchor>afe38324182bdde34d1fb5736adecac4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::integrators::ForwardEuler</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ForwardEuler.html</filename>
    <base>iDynTree::optimalcontrol::integrators::FixedStepIntegrator</base>
    <member kind="function">
      <type></type>
      <name>ForwardEuler</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ForwardEuler.html</anchorfile>
      <anchor>a2a8f93f29e3fd463b826ffdaa8a1b954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForwardEuler</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ForwardEuler.html</anchorfile>
      <anchor>ac145f0cebe267904b6219f1ce3497d5f</anchor>
      <arglist>(const std::shared_ptr&lt; iDynTree::optimalcontrol::DynamicalSystem &gt; dynamicalSystem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ForwardEuler</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ForwardEuler.html</anchorfile>
      <anchor>a2ae7b3d7c03b17d4425b7d32a4a13b7a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateCollocationConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ForwardEuler.html</anchorfile>
      <anchor>ae95a00e825ba60722855c7975978467f</anchor>
      <arglist>(double time, const std::vector&lt; VectorDynSize &gt; &amp;collocationPoints, const std::vector&lt; VectorDynSize &gt; &amp;controlInputs, double dT, VectorDynSize &amp;constraintValue) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateCollocationConstraintJacobian</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ForwardEuler.html</anchorfile>
      <anchor>a45c9c91ce896c6531b48052807a37aa2</anchor>
      <arglist>(double time, const std::vector&lt; VectorDynSize &gt; &amp;collocationPoints, const std::vector&lt; VectorDynSize &gt; &amp;controlInputs, double dT, std::vector&lt; MatrixDynSize &gt; &amp;stateJacobianValues, std::vector&lt; MatrixDynSize &gt; &amp;controlJacobianValues) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintJacobianStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ForwardEuler.html</anchorfile>
      <anchor>a180a07247cae553ad4c89802bad4c350</anchor>
      <arglist>(std::vector&lt; SparsityStructure &gt; &amp;stateJacobianSparsity) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintJacobianControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ForwardEuler.html</anchorfile>
      <anchor>a13d79fa08ab01d0efda8b95bb4b1f2f4</anchor>
      <arglist>(std::vector&lt; SparsityStructure &gt; &amp;controlJacobianSparsity) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCollocationConstraintSecondDerivatives</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ForwardEuler.html</anchorfile>
      <anchor>aba9929efc94354f78195754e30857081</anchor>
      <arglist>(double time, const std::vector&lt; VectorDynSize &gt; &amp;collocationPoints, const std::vector&lt; VectorDynSize &gt; &amp;controlInputs, double dT, const VectorDynSize &amp;lambda, CollocationHessianMap &amp;stateSecondDerivative, CollocationHessianMap &amp;controlSecondDerivative, CollocationHessianMap &amp;stateControlSecondDerivative) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintSecondDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ForwardEuler.html</anchorfile>
      <anchor>a2f52f1f6d4de201fb2997e20955a3f54</anchor>
      <arglist>(CollocationHessianSparsityMap &amp;stateDerivativeSparsity) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintSecondDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ForwardEuler.html</anchorfile>
      <anchor>a9cbdf13d566d6008084ff4bcae868d2b</anchor>
      <arglist>(CollocationHessianSparsityMap &amp;controlDerivativeSparsity) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintSecondDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ForwardEuler.html</anchorfile>
      <anchor>ab2de415e388096c1bddd4d7ebaa2c943</anchor>
      <arglist>(CollocationHessianSparsityMap &amp;stateControlDerivativeSparsity) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>integrate</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1FixedStepIntegrator.html</anchorfile>
      <anchor>a647bc31b7c8d037ae5df8b66518bf0e0</anchor>
      <arglist>(double initialTime, double finalTime) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setMaximumStepSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a6e2b9052aa9b0638ce7d2f8347b4fe00</anchor>
      <arglist>(const double dT)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maximumStepSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a0d39d3023f056364a01963b7520a7c21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a72bf5f94da63280de3c2b3223cd251e6</anchor>
      <arglist>(const std::shared_ptr&lt; iDynTree::optimalcontrol::DynamicalSystem &gt; dynamicalSystem)</arglist>
    </member>
    <member kind="function">
      <type>const std::weak_ptr&lt; DynamicalSystem &gt;</type>
      <name>dynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a00cae12a44e212fac9a71fd2d07d8caf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getSolution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a661760c48a95a73d6061743a7e988c4b</anchor>
      <arglist>(double time, VectorDynSize &amp;solution) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; SolutionElement &gt; &amp;</type>
      <name>getFullSolution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>ab5b22916d2b6e31314d3dd8955a574d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearSolution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>aa0aac8f0c4e34d345c05960591468d73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntegratorInfo &amp;</type>
      <name>info</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a18959a33019837571480eea082a4bdb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>interpolatePoints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>ad5b95d324ad148603d09aedcb52860ce</anchor>
      <arglist>(const std::vector&lt; SolutionElement &gt;::const_iterator &amp;first, const std::vector&lt; SolutionElement &gt;::const_iterator &amp;second, double time, VectorDynSize &amp;outputPoint) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_dTmax</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a371179a8cb3e4b4a03a3a0d90d2e6cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; DynamicalSystem &gt;</type>
      <name>m_dynamicalSystem_ptr</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>aa9eb4f3c3a4da99f1ce27b28154e4bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SolutionElement &gt;</type>
      <name>m_solution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a25b9c2215f3bbf7940214925e3a55ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; IntegratorInfoData &gt;</type>
      <name>m_infoData</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a91cc593e13d13305e81b3e7fc5ae6276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntegratorInfo</type>
      <name>m_info</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a3b03ff054e91a4142240dea337524fa1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::FrameFreeFloatingJacobian</name>
    <filename>classiDynTree_1_1FrameFreeFloatingJacobian.html</filename>
    <base>iDynTree::MatrixDynSize</base>
    <member kind="function">
      <type></type>
      <name>FrameFreeFloatingJacobian</name>
      <anchorfile>classiDynTree_1_1FrameFreeFloatingJacobian.html</anchorfile>
      <anchor>ae28935997944d1e8475eea2cd7883ff1</anchor>
      <arglist>(size_t nrOfDofs=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrameFreeFloatingJacobian</name>
      <anchorfile>classiDynTree_1_1FrameFreeFloatingJacobian.html</anchorfile>
      <anchor>a0a8f549d50ad8f024d9d72144f43a069</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1FrameFreeFloatingJacobian.html</anchorfile>
      <anchor>a436f8c7443bebd724421dfb3ebc64ee2</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1FrameFreeFloatingJacobian.html</anchorfile>
      <anchor>aea2422f1664a9c0cdf736eec4e7fe291</anchor>
      <arglist>(const iDynTree::Model &amp;model) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FrameFreeFloatingJacobian</name>
      <anchorfile>classiDynTree_1_1FrameFreeFloatingJacobian.html</anchorfile>
      <anchor>a33b90c1883b6869fa76d0ee9b028f962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a3b50de2905cdcb1607bd8c33cb74f82f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae8065fef7f00140e0dadd753d3ffee9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a071eb4583b2bd16399cf4bb460e15db0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a9f5604c4e5ae10793383ad9826f3c0c0</anchor>
      <arglist>(const unsigned int _newRows, const unsigned int _newCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a23e474c7161903c18be88d8fac2b4137</anchor>
      <arglist>(const size_t _newCapacity)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aacda29701a42c3943a781b9876500daf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ad5c3a0b1b9ce8c691194c652adf95a5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRowMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aa8af99c672e6a7e188115d2a8144a1c7</anchor>
      <arglist>(double *rowMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillColMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ab11629d6f89ef3d4051867e44abdf76e</anchor>
      <arglist>(double *colMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aa21d33ae39633c077e70c4c31c3e2314</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a901b96fd92d32b2057ea300867fc3028</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a16eee1ed872f339030829be673d59cca</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a46dc64f565e24e95a521523ff1266c97</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a270a9502870b8e4377d2077798f46539</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a20d1b70f6bdc0d4235c86eb1ade4b4d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a77e45ef11c7624ed8b7e150ebd041825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae86eb69f39997bd181971d9bd5f56950</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a80eba7978bcce15f4146f815c557f1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_rows</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae518ef4c4cd7014e6f504c89e2ab68e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_cols</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a07447be5c0420a1c297e605dffbc938b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_capacity</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a0a0c9e92f78c8d8e6676da367c83bba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aa21d33ae39633c077e70c4c31c3e2314</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a901b96fd92d32b2057ea300867fc3028</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a16eee1ed872f339030829be673d59cca</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a46dc64f565e24e95a521523ff1266c97</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a270a9502870b8e4377d2077798f46539</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a20d1b70f6bdc0d4235c86eb1ade4b4d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a77e45ef11c7624ed8b7e150ebd041825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae86eb69f39997bd181971d9bd5f56950</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::FreeFloatingAcc</name>
    <filename>classiDynTree_1_1FreeFloatingAcc.html</filename>
    <member kind="function">
      <type></type>
      <name>FreeFloatingAcc</name>
      <anchorfile>classiDynTree_1_1FreeFloatingAcc.html</anchorfile>
      <anchor>adf06dab2b5127f59dfe2857477fce5b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FreeFloatingAcc</name>
      <anchorfile>classiDynTree_1_1FreeFloatingAcc.html</anchorfile>
      <anchor>a46bb95f9257aeb2b5b7611a7f82179e5</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1FreeFloatingAcc.html</anchorfile>
      <anchor>a1cad94ffbc176207a498dc610351356f</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>SpatialAcc &amp;</type>
      <name>baseAcc</name>
      <anchorfile>classiDynTree_1_1FreeFloatingAcc.html</anchorfile>
      <anchor>a9e9d9dda6a55556dc5b2e5e637581997</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JointDOFsDoubleArray &amp;</type>
      <name>jointAcc</name>
      <anchorfile>classiDynTree_1_1FreeFloatingAcc.html</anchorfile>
      <anchor>ae2cb67c8ae1d55f6962d3eb3a73c5c0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SpatialAcc &amp;</type>
      <name>baseAcc</name>
      <anchorfile>classiDynTree_1_1FreeFloatingAcc.html</anchorfile>
      <anchor>a7c1b38a9f5b57db4faad010910d329e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JointDOFsDoubleArray &amp;</type>
      <name>jointAcc</name>
      <anchorfile>classiDynTree_1_1FreeFloatingAcc.html</anchorfile>
      <anchor>a2ea43d3e06ff20caac92f1b4bb83d7aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfDOFs</name>
      <anchorfile>classiDynTree_1_1FreeFloatingAcc.html</anchorfile>
      <anchor>a3a56360f7bb4652150bb615ae9e9eee0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FreeFloatingAcc</name>
      <anchorfile>classiDynTree_1_1FreeFloatingAcc.html</anchorfile>
      <anchor>a84589b1f5cf18795f22d095d6433b4c1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::FreeFloatingGeneralizedTorques</name>
    <filename>classiDynTree_1_1FreeFloatingGeneralizedTorques.html</filename>
    <member kind="function">
      <type></type>
      <name>FreeFloatingGeneralizedTorques</name>
      <anchorfile>classiDynTree_1_1FreeFloatingGeneralizedTorques.html</anchorfile>
      <anchor>a5a5f1ec8fdc1c4df9a32d4376c9dab64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FreeFloatingGeneralizedTorques</name>
      <anchorfile>classiDynTree_1_1FreeFloatingGeneralizedTorques.html</anchorfile>
      <anchor>af8745d49ca9d8070f571d54af5ca6a6e</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1FreeFloatingGeneralizedTorques.html</anchorfile>
      <anchor>a3767b5dff094576e64bcbbf888570c8a</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>Wrench &amp;</type>
      <name>baseWrench</name>
      <anchorfile>classiDynTree_1_1FreeFloatingGeneralizedTorques.html</anchorfile>
      <anchor>af6f245f5f6f0219a29a9d67f70a84f6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JointDOFsDoubleArray &amp;</type>
      <name>jointTorques</name>
      <anchorfile>classiDynTree_1_1FreeFloatingGeneralizedTorques.html</anchorfile>
      <anchor>a6c81c738ba793b98a482d72b32ec721d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Wrench &amp;</type>
      <name>baseWrench</name>
      <anchorfile>classiDynTree_1_1FreeFloatingGeneralizedTorques.html</anchorfile>
      <anchor>ace580cec385950220fddb3b4011585ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JointDOFsDoubleArray &amp;</type>
      <name>jointTorques</name>
      <anchorfile>classiDynTree_1_1FreeFloatingGeneralizedTorques.html</anchorfile>
      <anchor>a7bd65dfb5577b344663aa27fc8b7b85c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfDOFs</name>
      <anchorfile>classiDynTree_1_1FreeFloatingGeneralizedTorques.html</anchorfile>
      <anchor>a2b5a306d487019b2b529c4f4756af168</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FreeFloatingGeneralizedTorques</name>
      <anchorfile>classiDynTree_1_1FreeFloatingGeneralizedTorques.html</anchorfile>
      <anchor>ae5dd15b2114e8a54ed4a0461393c5f74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::FreeFloatingMassMatrix</name>
    <filename>classiDynTree_1_1FreeFloatingMassMatrix.html</filename>
    <base>iDynTree::MatrixDynSize</base>
    <member kind="function">
      <type></type>
      <name>FreeFloatingMassMatrix</name>
      <anchorfile>classiDynTree_1_1FreeFloatingMassMatrix.html</anchorfile>
      <anchor>ab1604b341525e3b08e9d4b0fc0034263</anchor>
      <arglist>(size_t nrOfDofs=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FreeFloatingMassMatrix</name>
      <anchorfile>classiDynTree_1_1FreeFloatingMassMatrix.html</anchorfile>
      <anchor>a9a21f03cb252d6600dcd7a474ae13667</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1FreeFloatingMassMatrix.html</anchorfile>
      <anchor>a8ac1a8cf3d2010f53263b2bc14d2358d</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FreeFloatingMassMatrix</name>
      <anchorfile>classiDynTree_1_1FreeFloatingMassMatrix.html</anchorfile>
      <anchor>a12282eec614925466dec2a70bcab30c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a3b50de2905cdcb1607bd8c33cb74f82f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae8065fef7f00140e0dadd753d3ffee9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a071eb4583b2bd16399cf4bb460e15db0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a9f5604c4e5ae10793383ad9826f3c0c0</anchor>
      <arglist>(const unsigned int _newRows, const unsigned int _newCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a23e474c7161903c18be88d8fac2b4137</anchor>
      <arglist>(const size_t _newCapacity)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aacda29701a42c3943a781b9876500daf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ad5c3a0b1b9ce8c691194c652adf95a5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRowMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aa8af99c672e6a7e188115d2a8144a1c7</anchor>
      <arglist>(double *rowMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillColMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ab11629d6f89ef3d4051867e44abdf76e</anchor>
      <arglist>(double *colMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aa21d33ae39633c077e70c4c31c3e2314</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a901b96fd92d32b2057ea300867fc3028</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a16eee1ed872f339030829be673d59cca</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a46dc64f565e24e95a521523ff1266c97</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a270a9502870b8e4377d2077798f46539</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a20d1b70f6bdc0d4235c86eb1ade4b4d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a77e45ef11c7624ed8b7e150ebd041825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae86eb69f39997bd181971d9bd5f56950</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a80eba7978bcce15f4146f815c557f1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_rows</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae518ef4c4cd7014e6f504c89e2ab68e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_cols</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a07447be5c0420a1c297e605dffbc938b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_capacity</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a0a0c9e92f78c8d8e6676da367c83bba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aa21d33ae39633c077e70c4c31c3e2314</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a901b96fd92d32b2057ea300867fc3028</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a16eee1ed872f339030829be673d59cca</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a46dc64f565e24e95a521523ff1266c97</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a270a9502870b8e4377d2077798f46539</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a20d1b70f6bdc0d4235c86eb1ade4b4d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a77e45ef11c7624ed8b7e150ebd041825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae86eb69f39997bd181971d9bd5f56950</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::FreeFloatingPos</name>
    <filename>classiDynTree_1_1FreeFloatingPos.html</filename>
    <member kind="function">
      <type></type>
      <name>FreeFloatingPos</name>
      <anchorfile>classiDynTree_1_1FreeFloatingPos.html</anchorfile>
      <anchor>a93e51d593b16b15f5be0f86c92dade51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FreeFloatingPos</name>
      <anchorfile>classiDynTree_1_1FreeFloatingPos.html</anchorfile>
      <anchor>a3e4cc78de27fb152f1d245a0bbb5de2b</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1FreeFloatingPos.html</anchorfile>
      <anchor>ab69d30d60d31af3fd103953d83ead22b</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>worldBasePos</name>
      <anchorfile>classiDynTree_1_1FreeFloatingPos.html</anchorfile>
      <anchor>a7bed05602ad50644048abea2fdb2e951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JointPosDoubleArray &amp;</type>
      <name>jointPos</name>
      <anchorfile>classiDynTree_1_1FreeFloatingPos.html</anchorfile>
      <anchor>a18fe73b2f0e24991dd8612549b0d6c03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>worldBasePos</name>
      <anchorfile>classiDynTree_1_1FreeFloatingPos.html</anchorfile>
      <anchor>ad887c07a7b8d48452680e9ba14529c42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JointPosDoubleArray &amp;</type>
      <name>jointPos</name>
      <anchorfile>classiDynTree_1_1FreeFloatingPos.html</anchorfile>
      <anchor>a01ba807ed73253417530a558fbdc3ff1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfPosCoords</name>
      <anchorfile>classiDynTree_1_1FreeFloatingPos.html</anchorfile>
      <anchor>ad26b33be62d9855e51cbdcaad31eca8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FreeFloatingPos</name>
      <anchorfile>classiDynTree_1_1FreeFloatingPos.html</anchorfile>
      <anchor>aca1ec90d2a551882fe2d07201d44e48c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::FreeFloatingStateLinearization</name>
    <filename>classiDynTree_1_1FreeFloatingStateLinearization.html</filename>
    <base>iDynTree::MatrixDynSize</base>
    <member kind="function">
      <type></type>
      <name>FreeFloatingStateLinearization</name>
      <anchorfile>classiDynTree_1_1FreeFloatingStateLinearization.html</anchorfile>
      <anchor>ad245683c0b8e9df53d576504a485db5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FreeFloatingStateLinearization</name>
      <anchorfile>classiDynTree_1_1FreeFloatingStateLinearization.html</anchorfile>
      <anchor>ac23b2bd5fb9d78d41a795d45560bd3c0</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1FreeFloatingStateLinearization.html</anchorfile>
      <anchor>af536053e82534e8a01170955689312a1</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a3b50de2905cdcb1607bd8c33cb74f82f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae8065fef7f00140e0dadd753d3ffee9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a071eb4583b2bd16399cf4bb460e15db0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a9f5604c4e5ae10793383ad9826f3c0c0</anchor>
      <arglist>(const unsigned int _newRows, const unsigned int _newCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a23e474c7161903c18be88d8fac2b4137</anchor>
      <arglist>(const size_t _newCapacity)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aacda29701a42c3943a781b9876500daf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ad5c3a0b1b9ce8c691194c652adf95a5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRowMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aa8af99c672e6a7e188115d2a8144a1c7</anchor>
      <arglist>(double *rowMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillColMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ab11629d6f89ef3d4051867e44abdf76e</anchor>
      <arglist>(double *colMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aa21d33ae39633c077e70c4c31c3e2314</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a901b96fd92d32b2057ea300867fc3028</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a16eee1ed872f339030829be673d59cca</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a46dc64f565e24e95a521523ff1266c97</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a270a9502870b8e4377d2077798f46539</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a20d1b70f6bdc0d4235c86eb1ade4b4d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a77e45ef11c7624ed8b7e150ebd041825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae86eb69f39997bd181971d9bd5f56950</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a80eba7978bcce15f4146f815c557f1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_rows</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae518ef4c4cd7014e6f504c89e2ab68e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_cols</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a07447be5c0420a1c297e605dffbc938b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_capacity</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a0a0c9e92f78c8d8e6676da367c83bba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aa21d33ae39633c077e70c4c31c3e2314</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a901b96fd92d32b2057ea300867fc3028</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a16eee1ed872f339030829be673d59cca</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a46dc64f565e24e95a521523ff1266c97</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a270a9502870b8e4377d2077798f46539</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a20d1b70f6bdc0d4235c86eb1ade4b4d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a77e45ef11c7624ed8b7e150ebd041825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae86eb69f39997bd181971d9bd5f56950</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::FreeFloatingVel</name>
    <filename>classiDynTree_1_1FreeFloatingVel.html</filename>
    <member kind="function">
      <type></type>
      <name>FreeFloatingVel</name>
      <anchorfile>classiDynTree_1_1FreeFloatingVel.html</anchorfile>
      <anchor>a5493b708ac58cdaaad071600bfb41a78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FreeFloatingVel</name>
      <anchorfile>classiDynTree_1_1FreeFloatingVel.html</anchorfile>
      <anchor>a3049b35df9ac5214995db372e68d9306</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1FreeFloatingVel.html</anchorfile>
      <anchor>a2fa390055bd1848d5c3077d6761b09e4</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>Twist &amp;</type>
      <name>baseVel</name>
      <anchorfile>classiDynTree_1_1FreeFloatingVel.html</anchorfile>
      <anchor>aed074999e1e9b30e0438664b81a100e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JointDOFsDoubleArray &amp;</type>
      <name>jointVel</name>
      <anchorfile>classiDynTree_1_1FreeFloatingVel.html</anchorfile>
      <anchor>ac7771b74b9e3865ecc119604c83d086b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Twist &amp;</type>
      <name>baseVel</name>
      <anchorfile>classiDynTree_1_1FreeFloatingVel.html</anchorfile>
      <anchor>a9558bf49a7d3ebc46ef4d07f69fb2877</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JointDOFsDoubleArray &amp;</type>
      <name>jointVel</name>
      <anchorfile>classiDynTree_1_1FreeFloatingVel.html</anchorfile>
      <anchor>a8203702dcaec33feb07e8e23f74a87a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfDOFs</name>
      <anchorfile>classiDynTree_1_1FreeFloatingVel.html</anchorfile>
      <anchor>a5fc1d49721b37749f16824eabe0e5d73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FreeFloatingVel</name>
      <anchorfile>classiDynTree_1_1FreeFloatingVel.html</anchorfile>
      <anchor>a61d280387aaa803b93dce18ee5cd2b7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::FTSensorData</name>
    <filename>structiDynTree_1_1FTSensorData.html</filename>
    <member kind="enumvalue">
      <name>PARENT_LINK_FRAME</name>
      <anchorfile>structiDynTree_1_1FTSensorData.html</anchorfile>
      <anchor>a28ef803a294f43a13fa1c9b81cdc0231a18b6563d284538ff71db85db87c32e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHILD_LINK_FRAME</name>
      <anchorfile>structiDynTree_1_1FTSensorData.html</anchorfile>
      <anchor>a28ef803a294f43a13fa1c9b81cdc0231a6608b871f18620d7fa2dd6047b48daae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FRAME</name>
      <anchorfile>structiDynTree_1_1FTSensorData.html</anchorfile>
      <anchor>a28ef803a294f43a13fa1c9b81cdc0231adf35592042d3a62380e828775081a2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARENT_TO_CHILD</name>
      <anchorfile>structiDynTree_1_1FTSensorData.html</anchorfile>
      <anchor>a6f37aa9e38338c8cc8e8f8b3e095602dad1450f64290e5a4d8c3902515eedc717</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHILD_TO_PARENT</name>
      <anchorfile>structiDynTree_1_1FTSensorData.html</anchorfile>
      <anchor>a6f37aa9e38338c8cc8e8f8b3e095602da2578ce6de163a82f8e54d30cee9ecbf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARENT_LINK_FRAME</name>
      <anchorfile>structiDynTree_1_1FTSensorData.html</anchorfile>
      <anchor>a28ef803a294f43a13fa1c9b81cdc0231a18b6563d284538ff71db85db87c32e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHILD_LINK_FRAME</name>
      <anchorfile>structiDynTree_1_1FTSensorData.html</anchorfile>
      <anchor>a28ef803a294f43a13fa1c9b81cdc0231a6608b871f18620d7fa2dd6047b48daae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FRAME</name>
      <anchorfile>structiDynTree_1_1FTSensorData.html</anchorfile>
      <anchor>a28ef803a294f43a13fa1c9b81cdc0231adf35592042d3a62380e828775081a2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARENT_TO_CHILD</name>
      <anchorfile>structiDynTree_1_1FTSensorData.html</anchorfile>
      <anchor>a6f37aa9e38338c8cc8e8f8b3e095602dad1450f64290e5a4d8c3902515eedc717</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHILD_TO_PARENT</name>
      <anchorfile>structiDynTree_1_1FTSensorData.html</anchorfile>
      <anchor>a6f37aa9e38338c8cc8e8f8b3e095602da2578ce6de163a82f8e54d30cee9ecbf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>reference_joint</name>
      <anchorfile>structiDynTree_1_1FTSensorData.html</anchorfile>
      <anchor>abc3b62f2875ea2986ed96944251c0a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>sensor_name</name>
      <anchorfile>structiDynTree_1_1FTSensorData.html</anchorfile>
      <anchor>a8258fc3e60afe956afda6daac2ce5d92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum iDynTree::FTSensorData::@6</type>
      <name>frame</name>
      <anchorfile>structiDynTree_1_1FTSensorData.html</anchorfile>
      <anchor>a4c77cf1ffdde5aa474369a37e2bb3177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KDL::Frame</type>
      <name>sensor_pose</name>
      <anchorfile>structiDynTree_1_1FTSensorData.html</anchorfile>
      <anchor>ace31898e059455395a33da2cd8fc33e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum iDynTree::FTSensorData::@7</type>
      <name>measure_direction</name>
      <anchorfile>structiDynTree_1_1FTSensorData.html</anchorfile>
      <anchor>a201e7976753c45325a72c3e1a7dfad0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::GeometryElement</name>
    <filename>classiDynTree_1_1GeometryElement.html</filename>
    <base>iDynTree::XMLElement</base>
    <member kind="function">
      <type></type>
      <name>GeometryElement</name>
      <anchorfile>classiDynTree_1_1GeometryElement.html</anchorfile>
      <anchor>a40e037650d78ff9d2fa1ca10934bf880</anchor>
      <arglist>(std::shared_ptr&lt; SolidShape &gt; &amp;shape)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; iDynTree::XMLElement &gt;</type>
      <name>childElementForName</name>
      <anchorfile>classiDynTree_1_1GeometryElement.html</anchorfile>
      <anchor>ad3cfa599f0592615c80edc8aeb973cca</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ab40851b7629a74107f2183ca36e412e4</anchor>
      <arglist>(std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a16759fb450635662dced0eb2ace0228b</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChildHasBeenParsedCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a69171cc4b5c552b97f44375029356a2e</anchor>
      <arglist>(std::function&lt; void(std::shared_ptr&lt; XMLElement &gt;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt;</type>
      <name>attributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2a182ac17f5e644b113a67e02c3595e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; void()&gt;</type>
      <name>exitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a04ea33b2a4ebf84647fb6d38e24ba0e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a7129fb1e69a5bc819872e65d3965296d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; XMLElement &gt; &gt;</type>
      <name>children</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2f51748fc6eed4724e86dc5e52ebd5ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt; &gt;</type>
      <name>attributes</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a27347aca070a5dfc250077b6cc3e3748</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>exitElementScope</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a66d20512ef5debea77d1919835dbda1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>childHasBeenParsed</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ac92ce9b144b27970e09f6f9dff77f251</anchor>
      <arglist>(std::shared_ptr&lt; XMLElement &gt; parsedChild)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setAttributes</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a9dc312559f13e9d78d10ddc2242ac27d</anchor>
      <arglist>(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;attributes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsedCharacters</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a949bcf8e3496896d2b6d7d6da72870a7</anchor>
      <arglist>(const std::string &amp;characters)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParsedTextContent</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>abebc95353394912e187ad70e6078fcdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a3d8e1b737e614b35e3df0a4f76ac645b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::GeomVector3</name>
    <filename>classiDynTree_1_1GeomVector3.html</filename>
    <base>iDynTree::VectorFixSize</base>
    <class kind="class">iDynTree::GeomVector3::SpatialVector</class>
    <member kind="typedef">
      <type>MotionForce_traits&lt; MotionForceT &gt;::SemanticsType</type>
      <name>MotionForceSemanticsT</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a6d2271c71f2ad4a8cac88a437bfed491</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeomVector3&lt; MotionForceT &gt;</type>
      <name>MotionForceTbase</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a473da581f6541cc39d684ea0026ac838</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ada7487eff1fee83db8d41165d30f1263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ad0f06a255dc213a5904d232f703a0192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aa11c3eee00e88dabb7880f6cac2a9b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a69b51f8119155d31a254676ae867ae8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeomVector3</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>acf6baf078a76ad2d0c5b44dc46d0353f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeomVector3</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>aeeac1dd21b65b6b5dd12904b1351a233</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeomVector3</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a45d2d4b5ee4eecfd7ae881474bd35a5a</anchor>
      <arglist>(const GeomVector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const MotionForceSemanticsT &amp;</type>
      <name>getSemantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a4cd796475bc41481fbbb1ae179eb8548</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSemantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a7c3f39fe68a340bce3c792720daf2204</anchor>
      <arglist>(MotionForceSemanticsT &amp;_semantics)</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>abda6982b38e6d4069af4577aab8deb62</anchor>
      <arglist>(const Rotation &amp;newCoordFrame) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a28806b83d896ddbf851a5998726318d4</anchor>
      <arglist>(const typename MotionForce_traits&lt; MotionForceT &gt;::DualSpace &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a5459b2c1dd902b3e59331bfc37a2907c</anchor>
      <arglist>(const MotionForceT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>aab92d8d49cafbb94d6ced67ffc514910</anchor>
      <arglist>(const MotionForceT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a1543f5d4b5740cab90c8f7136a787609</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a3bd1389dbdf51e06f4c64451c242397e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab6f044aea32e55a72f6ebed68f93f767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a57b77a6c96f3276ed8e12b5e35b7f442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBuffer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aee106d61ebb0925fecfa55cbaa515981</anchor>
      <arglist>(double *buf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a2e935e37d751752feab107dc58560aaf</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a8ca6cab1f06019c34d593f0aaff4dced</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a9c0f65c965c198e3bebd3cc9a03937d3</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab0e81983f76aab4997962a423dc3189d</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>abc9aca9e8f729a9d78e4da70bac72382</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>af793dbb7d980c53813b1bccc4703f450</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a5f04ccb5f96cd94aa207b98ced2b3254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a11d7cfdce4e1674e2ce73a23c7e29990</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>acae25eb63bcbe6b524849d77134c168d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MotionForceT</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>ac0615723d52e3ba20ff5c3b5c27637c5</anchor>
      <arglist>(const MotionForceTbase &amp;op1, const MotionForceT &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MotionForceT</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a9d22bfb36281ecbb7e979ab886cdd2da</anchor>
      <arglist>(const MotionForceTbase &amp;op)</arglist>
    </member>
    <member kind="variable">
      <type>MotionForceSemanticsT</type>
      <name>semantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a23b0961458c4a91fa2a3f3c1b19f6daf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a7bf5cd26b6fc24c9ddaf8854ebb8ec63</anchor>
      <arglist>[VecSize]</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a2e935e37d751752feab107dc58560aaf</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a8ca6cab1f06019c34d593f0aaff4dced</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a9c0f65c965c198e3bebd3cc9a03937d3</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab0e81983f76aab4997962a423dc3189d</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>abc9aca9e8f729a9d78e4da70bac72382</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>af793dbb7d980c53813b1bccc4703f450</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a5f04ccb5f96cd94aa207b98ced2b3254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a11d7cfdce4e1674e2ce73a23c7e29990</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>acae25eb63bcbe6b524849d77134c168d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ada7487eff1fee83db8d41165d30f1263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ad0f06a255dc213a5904d232f703a0192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aa11c3eee00e88dabb7880f6cac2a9b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a69b51f8119155d31a254676ae867ae8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GeomVector3&lt; ForceT &gt;</name>
    <filename>classiDynTree_1_1GeomVector3.html</filename>
    <member kind="typedef">
      <type>MotionForce_traits&lt; MotionForceT &gt;::SemanticsType</type>
      <name>MotionForceSemanticsT</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a6d2271c71f2ad4a8cac88a437bfed491</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeomVector3&lt; MotionForceT &gt;</type>
      <name>MotionForceTbase</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a473da581f6541cc39d684ea0026ac838</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeomVector3</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>acf6baf078a76ad2d0c5b44dc46d0353f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeomVector3</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>aeeac1dd21b65b6b5dd12904b1351a233</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeomVector3</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a45d2d4b5ee4eecfd7ae881474bd35a5a</anchor>
      <arglist>(const GeomVector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const MotionForceSemanticsT &amp;</type>
      <name>getSemantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a4cd796475bc41481fbbb1ae179eb8548</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSemantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a7c3f39fe68a340bce3c792720daf2204</anchor>
      <arglist>(MotionForceSemanticsT &amp;_semantics)</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>abda6982b38e6d4069af4577aab8deb62</anchor>
      <arglist>(const Rotation &amp;newCoordFrame) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a28806b83d896ddbf851a5998726318d4</anchor>
      <arglist>(const typename MotionForce_traits&lt; MotionForceT &gt;::DualSpace &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a5459b2c1dd902b3e59331bfc37a2907c</anchor>
      <arglist>(const MotionForceT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>aab92d8d49cafbb94d6ced67ffc514910</anchor>
      <arglist>(const MotionForceT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a1543f5d4b5740cab90c8f7136a787609</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MotionForceT</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>ac0615723d52e3ba20ff5c3b5c27637c5</anchor>
      <arglist>(const MotionForceTbase &amp;op1, const MotionForceT &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MotionForceT</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a9d22bfb36281ecbb7e979ab886cdd2da</anchor>
      <arglist>(const MotionForceTbase &amp;op)</arglist>
    </member>
    <member kind="variable">
      <type>MotionForceSemanticsT</type>
      <name>semantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a23b0961458c4a91fa2a3f3c1b19f6daf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GeomVector3&lt; MotionT &gt;</name>
    <filename>classiDynTree_1_1GeomVector3.html</filename>
    <member kind="typedef">
      <type>MotionForce_traits&lt; MotionForceT &gt;::SemanticsType</type>
      <name>MotionForceSemanticsT</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a6d2271c71f2ad4a8cac88a437bfed491</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeomVector3&lt; MotionForceT &gt;</type>
      <name>MotionForceTbase</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a473da581f6541cc39d684ea0026ac838</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeomVector3</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>acf6baf078a76ad2d0c5b44dc46d0353f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeomVector3</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>aeeac1dd21b65b6b5dd12904b1351a233</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeomVector3</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a45d2d4b5ee4eecfd7ae881474bd35a5a</anchor>
      <arglist>(const GeomVector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const MotionForceSemanticsT &amp;</type>
      <name>getSemantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a4cd796475bc41481fbbb1ae179eb8548</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSemantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a7c3f39fe68a340bce3c792720daf2204</anchor>
      <arglist>(MotionForceSemanticsT &amp;_semantics)</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>abda6982b38e6d4069af4577aab8deb62</anchor>
      <arglist>(const Rotation &amp;newCoordFrame) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a28806b83d896ddbf851a5998726318d4</anchor>
      <arglist>(const typename MotionForce_traits&lt; MotionForceT &gt;::DualSpace &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a5459b2c1dd902b3e59331bfc37a2907c</anchor>
      <arglist>(const MotionForceT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>aab92d8d49cafbb94d6ced67ffc514910</anchor>
      <arglist>(const MotionForceT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a1543f5d4b5740cab90c8f7136a787609</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MotionForceT</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>ac0615723d52e3ba20ff5c3b5c27637c5</anchor>
      <arglist>(const MotionForceTbase &amp;op1, const MotionForceT &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MotionForceT</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a9d22bfb36281ecbb7e979ab886cdd2da</anchor>
      <arglist>(const MotionForceTbase &amp;op)</arglist>
    </member>
    <member kind="variable">
      <type>MotionForceSemanticsT</type>
      <name>semantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a23b0961458c4a91fa2a3f3c1b19f6daf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::GeomVector3Semantics</name>
    <filename>classiDynTree_1_1GeomVector3Semantics.html</filename>
    <member kind="function">
      <type></type>
      <name>GeomVector3Semantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a5ba401970ef1bdfdd6f9f24283f0b572</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeomVector3Semantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>aa3f3c15cfdf1a61437244bc0562bce58</anchor>
      <arglist>(int _body, int _refBody, int _coordinateFrame)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeomVector3Semantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a55bf7e9735884cef3fa31165563b3863</anchor>
      <arglist>(const GeomVector3Semantics &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToUnknown</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>abd883af03b4203fd00ea1cf4f504cfc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a4f0bb7a25a966f92f8cf19494088e4e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRefBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a3e57319bb4392cb63a6077e8180e28d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoordinateFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a32b5b64c6e34938ad1521732331bc474</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnknown</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>ab1430528dd300c1cb4d507918680e779</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a0017f085753fd7da90d7e7a4e4625fbf</anchor>
      <arglist>(const RotationSemantics &amp;newCoordFrame, MotionForceSemanticsT &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>aa99906ab81a042e55b654b37ef24d620</anchor>
      <arglist>(const typename DualMotionForceSemanticsT&lt; MotionForceSemanticsT &gt;::Type &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a7060b666780b2024ee6ed4a2dac8991d</anchor>
      <arglist>(const MotionForceSemanticsT &amp;op1, const MotionForceSemanticsT &amp;op2, MotionForceSemanticsT &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>ac03fa8a55e563b79cfc2b752318ed55e</anchor>
      <arglist>(const MotionForceSemanticsT &amp;op, MotionForceSemanticsT &amp;result)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>body</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a41d8bb8a198ce9d9e6b1790f98cfeaa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>refBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a3394a4c417154821e37c11e95ce1d934</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>coordinateFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a7bbc827d06b06a8b67a86165da66634b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GeomVector3Semantics&lt; AngularMotionVector3Semantics &gt;</name>
    <filename>classiDynTree_1_1GeomVector3Semantics.html</filename>
    <member kind="function">
      <type></type>
      <name>GeomVector3Semantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a5ba401970ef1bdfdd6f9f24283f0b572</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeomVector3Semantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>aa3f3c15cfdf1a61437244bc0562bce58</anchor>
      <arglist>(int _body, int _refBody, int _coordinateFrame)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeomVector3Semantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a55bf7e9735884cef3fa31165563b3863</anchor>
      <arglist>(const GeomVector3Semantics &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToUnknown</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>abd883af03b4203fd00ea1cf4f504cfc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a4f0bb7a25a966f92f8cf19494088e4e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRefBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a3e57319bb4392cb63a6077e8180e28d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoordinateFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a32b5b64c6e34938ad1521732331bc474</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnknown</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>ab1430528dd300c1cb4d507918680e779</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a0017f085753fd7da90d7e7a4e4625fbf</anchor>
      <arglist>(const RotationSemantics &amp;newCoordFrame, MotionForceSemanticsT &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>aa99906ab81a042e55b654b37ef24d620</anchor>
      <arglist>(const typename DualMotionForceSemanticsT&lt; MotionForceSemanticsT &gt;::Type &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a7060b666780b2024ee6ed4a2dac8991d</anchor>
      <arglist>(const MotionForceSemanticsT &amp;op1, const MotionForceSemanticsT &amp;op2, MotionForceSemanticsT &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>ac03fa8a55e563b79cfc2b752318ed55e</anchor>
      <arglist>(const MotionForceSemanticsT &amp;op, MotionForceSemanticsT &amp;result)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>body</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a41d8bb8a198ce9d9e6b1790f98cfeaa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>refBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a3394a4c417154821e37c11e95ce1d934</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>coordinateFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a7bbc827d06b06a8b67a86165da66634b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GeomVector3Semantics&lt; ForceTSemantics &gt;</name>
    <filename>classiDynTree_1_1GeomVector3Semantics.html</filename>
    <member kind="function">
      <type></type>
      <name>GeomVector3Semantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a5ba401970ef1bdfdd6f9f24283f0b572</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeomVector3Semantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>aa3f3c15cfdf1a61437244bc0562bce58</anchor>
      <arglist>(int _body, int _refBody, int _coordinateFrame)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeomVector3Semantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a55bf7e9735884cef3fa31165563b3863</anchor>
      <arglist>(const GeomVector3Semantics &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToUnknown</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>abd883af03b4203fd00ea1cf4f504cfc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a4f0bb7a25a966f92f8cf19494088e4e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRefBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a3e57319bb4392cb63a6077e8180e28d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoordinateFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a32b5b64c6e34938ad1521732331bc474</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnknown</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>ab1430528dd300c1cb4d507918680e779</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a0017f085753fd7da90d7e7a4e4625fbf</anchor>
      <arglist>(const RotationSemantics &amp;newCoordFrame, MotionForceSemanticsT &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>aa99906ab81a042e55b654b37ef24d620</anchor>
      <arglist>(const typename DualMotionForceSemanticsT&lt; MotionForceSemanticsT &gt;::Type &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a7060b666780b2024ee6ed4a2dac8991d</anchor>
      <arglist>(const MotionForceSemanticsT &amp;op1, const MotionForceSemanticsT &amp;op2, MotionForceSemanticsT &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>ac03fa8a55e563b79cfc2b752318ed55e</anchor>
      <arglist>(const MotionForceSemanticsT &amp;op, MotionForceSemanticsT &amp;result)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>body</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a41d8bb8a198ce9d9e6b1790f98cfeaa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>refBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a3394a4c417154821e37c11e95ce1d934</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>coordinateFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a7bbc827d06b06a8b67a86165da66634b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GeomVector3Semantics&lt; LinearMotionVector3Semantics &gt;</name>
    <filename>classiDynTree_1_1GeomVector3Semantics.html</filename>
    <member kind="function">
      <type></type>
      <name>GeomVector3Semantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a5ba401970ef1bdfdd6f9f24283f0b572</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeomVector3Semantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>aa3f3c15cfdf1a61437244bc0562bce58</anchor>
      <arglist>(int _body, int _refBody, int _coordinateFrame)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeomVector3Semantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a55bf7e9735884cef3fa31165563b3863</anchor>
      <arglist>(const GeomVector3Semantics &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToUnknown</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>abd883af03b4203fd00ea1cf4f504cfc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a4f0bb7a25a966f92f8cf19494088e4e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRefBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a3e57319bb4392cb63a6077e8180e28d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoordinateFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a32b5b64c6e34938ad1521732331bc474</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnknown</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>ab1430528dd300c1cb4d507918680e779</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a0017f085753fd7da90d7e7a4e4625fbf</anchor>
      <arglist>(const RotationSemantics &amp;newCoordFrame, MotionForceSemanticsT &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>aa99906ab81a042e55b654b37ef24d620</anchor>
      <arglist>(const typename DualMotionForceSemanticsT&lt; MotionForceSemanticsT &gt;::Type &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a7060b666780b2024ee6ed4a2dac8991d</anchor>
      <arglist>(const MotionForceSemanticsT &amp;op1, const MotionForceSemanticsT &amp;op2, MotionForceSemanticsT &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>ac03fa8a55e563b79cfc2b752318ed55e</anchor>
      <arglist>(const MotionForceSemanticsT &amp;op, MotionForceSemanticsT &amp;result)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>body</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a41d8bb8a198ce9d9e6b1790f98cfeaa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>refBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a3394a4c417154821e37c11e95ce1d934</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>coordinateFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a7bbc827d06b06a8b67a86165da66634b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::GravityCompensationHelper</name>
    <filename>classiDynTree_1_1GravityCompensationHelper.html</filename>
    <member kind="function">
      <type></type>
      <name>GravityCompensationHelper</name>
      <anchorfile>classiDynTree_1_1GravityCompensationHelper.html</anchorfile>
      <anchor>abe9eec30b6254c5e31aa753599548c54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GravityCompensationHelper</name>
      <anchorfile>classiDynTree_1_1GravityCompensationHelper.html</anchorfile>
      <anchor>a24f682469783b3c8d45d6ebbad86c35a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadModel</name>
      <anchorfile>classiDynTree_1_1GravityCompensationHelper.html</anchorfile>
      <anchor>ad1eb9a519a13ec91f51ec8e0f854c1ef</anchor>
      <arglist>(const iDynTree::Model &amp;_model, const std::string dynamicBase)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateKinematicsFromProperAcceleration</name>
      <anchorfile>classiDynTree_1_1GravityCompensationHelper.html</anchorfile>
      <anchor>a463e3469b51d8ed052f968046bb28a57</anchor>
      <arglist>(const iDynTree::JointPosDoubleArray &amp;jointPos, const iDynTree::FrameIndex &amp;floatingFrame, const iDynTree::Vector3 &amp;properClassicalLinearAcceleration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateKinematicsFromGravity</name>
      <anchorfile>classiDynTree_1_1GravityCompensationHelper.html</anchorfile>
      <anchor>a43e80215c956c765e241b5165ad6ee37</anchor>
      <arglist>(const iDynTree::JointPosDoubleArray &amp;jointPos, const iDynTree::FrameIndex &amp;floatingFrame, const iDynTree::Vector3 &amp;gravity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getGravityCompensationTorques</name>
      <anchorfile>classiDynTree_1_1GravityCompensationHelper.html</anchorfile>
      <anchor>a5d6fa165303efe2a4078cb663661066f</anchor>
      <arglist>(iDynTree::JointDOFsDoubleArray &amp;jointTrqs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::GyroscopeSensor::GyroscopePrivateAttributes</name>
    <filename>structiDynTree_1_1GyroscopeSensor_1_1GyroscopePrivateAttributes.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structiDynTree_1_1GyroscopeSensor_1_1GyroscopePrivateAttributes.html</anchorfile>
      <anchor>ae7a852a847f9083b04dc9c21756773f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform</type>
      <name>link_H_sensor</name>
      <anchorfile>structiDynTree_1_1GyroscopeSensor_1_1GyroscopePrivateAttributes.html</anchorfile>
      <anchor>a56c54a0ab7cc5287246a545c6131c6c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>parent_link_index</name>
      <anchorfile>structiDynTree_1_1GyroscopeSensor_1_1GyroscopePrivateAttributes.html</anchorfile>
      <anchor>a9ff15d6fd7913d100c9efbed41f3624c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>parent_link_name</name>
      <anchorfile>structiDynTree_1_1GyroscopeSensor_1_1GyroscopePrivateAttributes.html</anchorfile>
      <anchor>a561b363bcf9053fb8f08f41945011e89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::GyroscopeSensor</name>
    <filename>classiDynTree_1_1GyroscopeSensor.html</filename>
    <base>iDynTree::LinkSensor</base>
    <class kind="struct">iDynTree::GyroscopeSensor::GyroscopePrivateAttributes</class>
    <member kind="function">
      <type></type>
      <name>GyroscopeSensor</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensor.html</anchorfile>
      <anchor>aa5fa67c8fecb5127180692f512dce994</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GyroscopeSensor</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensor.html</anchorfile>
      <anchor>aeb3a9d504f9809fd1d3f9796cc17820b</anchor>
      <arglist>(const GyroscopeSensor &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>GyroscopeSensor &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensor.html</anchorfile>
      <anchor>af3d093397204ab7d4c4fcd59327c5804</anchor>
      <arglist>(const GyroscopeSensor &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GyroscopeSensor</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensor.html</anchorfile>
      <anchor>ada26647aea1033f8c772d25c006da269</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setName</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensor.html</anchorfile>
      <anchor>a056d2caa535815b23a6b8732180d7c8e</anchor>
      <arglist>(const std::string &amp;_name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setLinkSensorTransform</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensor.html</anchorfile>
      <anchor>ae0e36ae99719844f4553cfa2e5782902</anchor>
      <arglist>(const iDynTree::Transform &amp;link_H_sensor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setParentLink</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensor.html</anchorfile>
      <anchor>a221b7c3ebb5d1915ab13cf14b7a496c9</anchor>
      <arglist>(const std::string &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setParentLinkIndex</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensor.html</anchorfile>
      <anchor>ab0e964fe971d4e569e5a6cae3fd2cd5c</anchor>
      <arglist>(const LinkIndex &amp;parent_index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensor.html</anchorfile>
      <anchor>a752a648315e33507e9d4ac7f76c5377e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SensorType</type>
      <name>getSensorType</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensor.html</anchorfile>
      <anchor>a162084c8f8d22edf2c21b822c50f325a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParentLink</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensor.html</anchorfile>
      <anchor>a8d610e5ce1ab010dd1aa3710b32e4bc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinkIndex</type>
      <name>getParentLinkIndex</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensor.html</anchorfile>
      <anchor>a5aacbe3a66640b3ce644cfded2ca67a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>getLinkSensorTransform</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensor.html</anchorfile>
      <anchor>a36450e27fe86b188ec0f1a002444bcf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensor.html</anchorfile>
      <anchor>a29f2d548c97f8a945a0dd79647249f43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Sensor *</type>
      <name>clone</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensor.html</anchorfile>
      <anchor>a29e4c8b48f02c547f22865647f3d61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateIndices</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensor.html</anchorfile>
      <anchor>af9fba9009f28b235bc9ebaae469b6f4a</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateIndeces</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensor.html</anchorfile>
      <anchor>a584fda9e2aa621cb7c5ea9ccd7e77383</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::AngVelocity</type>
      <name>predictMeasurement</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensor.html</anchorfile>
      <anchor>a0e6d7d8b2395445dc73b3f74f39bdbcd</anchor>
      <arglist>(const iDynTree::Twist &amp;linkVel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1LinkSensor.html</anchorfile>
      <anchor>ab715a5a2deca41ecb920133b075f7c58</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::GyroscopeSensorHelper</name>
    <filename>classiDynTree_1_1GyroscopeSensorHelper.html</filename>
    <base>iDynTree::SensorHelper</base>
    <member kind="function">
      <type></type>
      <name>GyroscopeSensorHelper</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensorHelper.html</anchorfile>
      <anchor>aa53aa5f8e18d4d3434b6ad1e510dd53d</anchor>
      <arglist>(std::shared_ptr&lt; const SensorElement::SensorInfo &gt; sensorInfo)</arglist>
    </member>
    <member kind="function">
      <type>Sensor *</type>
      <name>generateSensor</name>
      <anchorfile>classiDynTree_1_1GyroscopeSensorHelper.html</anchorfile>
      <anchor>ae73e47eb09d7d752ab6fb40b34bef443</anchor>
      <arglist>(const Model &amp;model) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; const SensorElement::SensorInfo &gt;</type>
      <name>m_sensorInfo</name>
      <anchorfile>classiDynTree_1_1SensorHelper.html</anchorfile>
      <anchor>ac726e84fbbcc59662ab2bf0c531b1270</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::HessianBlocksMap</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1HessianBlocksMap.html</filename>
    <member kind="function">
      <type></type>
      <name>HessianBlocksMap</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1HessianBlocksMap.html</anchorfile>
      <anchor>a1c448c8cb402a615d0a373b1f0bfbb0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1HessianBlocksMap.html</anchorfile>
      <anchor>a8cf79dee08d8ce00342b7acb2c187f38</anchor>
      <arglist>(size_t row, size_t col)</arglist>
    </member>
    <member kind="function">
      <type>SparsityStructure &amp;</type>
      <name>blockSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1HessianBlocksMap.html</anchorfile>
      <anchor>a7a4bb1fe46a9759c4e5850427500a62f</anchor>
      <arglist>(size_t row, size_t col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFullSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1HessianBlocksMap.html</anchorfile>
      <anchor>a994d99a6c1fa951d03bb1c13e4869def</anchor>
      <arglist>(SparsityStructure &amp;sparsity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1HessianBlocksMap.html</anchorfile>
      <anchor>a10ae1e40e6737c3301eb24d589cb4845</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1HessianBlocksMap.html</anchorfile>
      <anchor>abc1c017cae5090347fd150db81d030ba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::IAttitudeEstimator</name>
    <filename>classiDynTree_1_1IAttitudeEstimator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IAttitudeEstimator</name>
      <anchorfile>classiDynTree_1_1IAttitudeEstimator.html</anchorfile>
      <anchor>a9538a2c53c84b6ac5ec0abeacea9626b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>updateFilterWithMeasurements</name>
      <anchorfile>classiDynTree_1_1IAttitudeEstimator.html</anchorfile>
      <anchor>a9c251ac717cbcfeb75a39fffd5a9b185</anchor>
      <arglist>(const iDynTree::LinearAccelerometerMeasurements &amp;linAccMeas, const iDynTree::GyroscopeMeasurements &amp;gyroMeas)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>updateFilterWithMeasurements</name>
      <anchorfile>classiDynTree_1_1IAttitudeEstimator.html</anchorfile>
      <anchor>a7121acf85b46be0edb9231588c579013</anchor>
      <arglist>(const iDynTree::LinearAccelerometerMeasurements &amp;linAccMeas, const iDynTree::GyroscopeMeasurements &amp;gyroMeas, const iDynTree::MagnetometerMeasurements &amp;magMeas)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>propagateStates</name>
      <anchorfile>classiDynTree_1_1IAttitudeEstimator.html</anchorfile>
      <anchor>a6cc4ea7bacb721c67890ceb250857e71</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getOrientationEstimateAsRotationMatrix</name>
      <anchorfile>classiDynTree_1_1IAttitudeEstimator.html</anchorfile>
      <anchor>a3fd8541c4ede713177058251aae24717</anchor>
      <arglist>(iDynTree::Rotation &amp;rot)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getOrientationEstimateAsQuaternion</name>
      <anchorfile>classiDynTree_1_1IAttitudeEstimator.html</anchorfile>
      <anchor>a72f94711e28d7173869f41492d6ac364</anchor>
      <arglist>(iDynTree::UnitQuaternion &amp;q)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getOrientationEstimateAsRPY</name>
      <anchorfile>classiDynTree_1_1IAttitudeEstimator.html</anchorfile>
      <anchor>add5b1c7109a232bcb3da976792f72a6f</anchor>
      <arglist>(iDynTree::RPY &amp;rpy)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>getInternalStateSize</name>
      <anchorfile>classiDynTree_1_1IAttitudeEstimator.html</anchorfile>
      <anchor>a7234eb151268d99d90dbe691a6bf3a46</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getInternalState</name>
      <anchorfile>classiDynTree_1_1IAttitudeEstimator.html</anchorfile>
      <anchor>a0360685bed94e086224b1126116dca04</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;stateBuffer) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getDefaultInternalInitialState</name>
      <anchorfile>classiDynTree_1_1IAttitudeEstimator.html</anchorfile>
      <anchor>a86554ddcfc70601b05ad7cd997851983</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;stateBuffer) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setInternalState</name>
      <anchorfile>classiDynTree_1_1IAttitudeEstimator.html</anchorfile>
      <anchor>a4277465fc6cacfa0fa0ccd1d1c863954</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;stateBuffer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setInternalStateInitialOrientation</name>
      <anchorfile>classiDynTree_1_1IAttitudeEstimator.html</anchorfile>
      <anchor>a8ca76def98fa0bd37975788dc7e1c0c5</anchor>
      <arglist>(const iDynTree::Span&lt; double &gt; &amp;orientationBuffer)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KDL::CoDyCo::Regressors::IBatchDynamicDataset</name>
    <filename>classKDL_1_1CoDyCo_1_1Regressors_1_1IBatchDynamicDataset.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IBatchDynamicDataset</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1IBatchDynamicDataset.html</anchorfile>
      <anchor>ab4e1ae8c5c248b49f2832210bda1a8c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNrOfSamples</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1IBatchDynamicDataset.html</anchorfile>
      <anchor>a59127c7dfd71a93b0412790430eefbf8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getSample</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1IBatchDynamicDataset.html</anchorfile>
      <anchor>ae8b860189979523ff03e00853534249c</anchor>
      <arglist>(const int sample_nr, DynamicSample &amp;sample) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ICamera</name>
    <filename>classiDynTree_1_1ICamera.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~ICamera</name>
      <anchorfile>classiDynTree_1_1ICamera.html</anchorfile>
      <anchor>af883001cf6a2091dae2e35dab779fd91</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classiDynTree_1_1ICamera.html</anchorfile>
      <anchor>a1a253a1e5244c6626f97bd39cc8db538</anchor>
      <arglist>(const iDynTree::Position &amp;cameraPos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTarget</name>
      <anchorfile>classiDynTree_1_1ICamera.html</anchorfile>
      <anchor>a2e794876aeb9c6a2dfbf943b6ce264ae</anchor>
      <arglist>(const iDynTree::Position &amp;cameraPos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setUpVector</name>
      <anchorfile>classiDynTree_1_1ICamera.html</anchorfile>
      <anchor>a265930a8fb324692f7775228ed61f041</anchor>
      <arglist>(const Direction &amp;upVector)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::iDynTreeLinkAndFrame</name>
    <filename>classiDynTree_1_1iDynTreeLinkAndFrame.html</filename>
    <member kind="variable">
      <type>LinkIndex</type>
      <name>link_index</name>
      <anchorfile>classiDynTree_1_1iDynTreeLinkAndFrame.html</anchorfile>
      <anchor>a2c23480ed17c07aaf5f4dc4d69a60b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FrameIndex</type>
      <name>frame_index</name>
      <anchorfile>classiDynTree_1_1iDynTreeLinkAndFrame.html</anchorfile>
      <anchor>a9952f75031a1b943a7313cbbacf84547</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::IEnvironment</name>
    <filename>classiDynTree_1_1IEnvironment.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~IEnvironment</name>
      <anchorfile>classiDynTree_1_1IEnvironment.html</anchorfile>
      <anchor>adc695562b8531bb7022c738ad275d411</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getElements</name>
      <anchorfile>classiDynTree_1_1IEnvironment.html</anchorfile>
      <anchor>a9eab024267277ef34b72162a9078279b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setElementVisibility</name>
      <anchorfile>classiDynTree_1_1IEnvironment.html</anchorfile>
      <anchor>a72dc9003e4a04055b609f460b7d9933f</anchor>
      <arglist>(const std::string elementKey, bool isVisible)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBackgroundColor</name>
      <anchorfile>classiDynTree_1_1IEnvironment.html</anchorfile>
      <anchor>ab9f9324ea401ffd927ffd68edb02f83c</anchor>
      <arglist>(const ColorViz &amp;backgroundColor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setAmbientLight</name>
      <anchorfile>classiDynTree_1_1IEnvironment.html</anchorfile>
      <anchor>a917b00f49bb0e40624f0205c345c321b</anchor>
      <arglist>(const ColorViz &amp;ambientLight)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getLights</name>
      <anchorfile>classiDynTree_1_1IEnvironment.html</anchorfile>
      <anchor>ab946ada0d5467ab34a274166a4c4c7d7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>addLight</name>
      <anchorfile>classiDynTree_1_1IEnvironment.html</anchorfile>
      <anchor>ac5a5c9b4cef69340d8605ae19070ee1b</anchor>
      <arglist>(const std::string &amp;lightName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ILight &amp;</type>
      <name>lightViz</name>
      <anchorfile>classiDynTree_1_1IEnvironment.html</anchorfile>
      <anchor>a092a848d34d6d9a302ca82c2ec4e5945</anchor>
      <arglist>(const std::string &amp;lightName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>removeLight</name>
      <anchorfile>classiDynTree_1_1IEnvironment.html</anchorfile>
      <anchor>a1521913a2962b4e47ed33547c6f33965</anchor>
      <arglist>(const std::string &amp;lightName)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::IJetsVisualization</name>
    <filename>classiDynTree_1_1IJetsVisualization.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~IJetsVisualization</name>
      <anchorfile>classiDynTree_1_1IJetsVisualization.html</anchorfile>
      <anchor>ad790d46b4d5e22e35a020c5b107b2b7c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setJetsFrames</name>
      <anchorfile>classiDynTree_1_1IJetsVisualization.html</anchorfile>
      <anchor>a564022ab25087667da7492d1e6e93d69</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;jetsFrames)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>getNrOfJets</name>
      <anchorfile>classiDynTree_1_1IJetsVisualization.html</anchorfile>
      <anchor>a8de5e560eb90bc9fe3f20a8eb24fd2fa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Direction</type>
      <name>getJetDirection</name>
      <anchorfile>classiDynTree_1_1IJetsVisualization.html</anchorfile>
      <anchor>a0b2356c320266c2566c449956bf644de</anchor>
      <arglist>(const int jetIndex) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setJetDirection</name>
      <anchorfile>classiDynTree_1_1IJetsVisualization.html</anchorfile>
      <anchor>a2a1ac3d77f35e9fd79ddbddd7b1b29ac</anchor>
      <arglist>(const int jetIndex, const Direction &amp;jetDirection)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setJetColor</name>
      <anchorfile>classiDynTree_1_1IJetsVisualization.html</anchorfile>
      <anchor>ad78993849e33e33935774736e1f5904c</anchor>
      <arglist>(const int jetIndex, const ColorViz &amp;jetColor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setJetsDimensions</name>
      <anchorfile>classiDynTree_1_1IJetsVisualization.html</anchorfile>
      <anchor>aae1281372be9cc3d335ff796dbcda829</anchor>
      <arglist>(const double &amp;minRadius, const double &amp;maxRadius, const double &amp;maxLenght)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setJetsIntensity</name>
      <anchorfile>classiDynTree_1_1IJetsVisualization.html</anchorfile>
      <anchor>a826b623bcedb5e79bcb97b17c1a39372</anchor>
      <arglist>(const VectorDynSize &amp;jetsIntensity)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::IJoint</name>
    <filename>classiDynTree_1_1IJoint.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~IJoint</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a10aa60db6b35bf3b734747060094154e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IJoint *</type>
      <name>clone</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a021ac00a8b2e9e519f930baad1bc1fa2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getNrOfPosCoords</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a149ddcf05f6328fdd3ecbe38a0fca4a0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getNrOfDOFs</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a83027b41a495e097b8cf534059516440</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LinkIndex</type>
      <name>getFirstAttachedLink</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>abe3efda09a0c3d94c021891de447aaa8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LinkIndex</type>
      <name>getSecondAttachedLink</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a1c55168bcc2dbd7b1fd58737a6bb46d8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Transform</type>
      <name>getRestTransform</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a7b6fb4c82687601810f3696e9605f1e0</anchor>
      <arglist>(const LinkIndex child, const LinkIndex parent) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Transform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a2b0c23cad4da4e748ecdaf009805f767</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const LinkIndex child, const LinkIndex parent) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TransformDerivative</type>
      <name>getTransformDerivative</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a0dd24dad1882bc1df35a1832275fbfbb</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const LinkIndex child, const LinkIndex parent, const int posCoord_i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SpatialMotionVector</type>
      <name>getMotionSubspaceVector</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a3a89b6fd2358c8435e7f794d3857045f</anchor>
      <arglist>(int dof_i, const LinkIndex child, const LinkIndex parent) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeChildPosVelAcc</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>aa41dbb76816e2621d6924ca052b07881</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const VectorDynSize &amp;jntAcc, LinkPositions &amp;linkPositions, LinkVelArray &amp;linkVels, LinkAccArray &amp;linkAccs, const LinkIndex child, const LinkIndex parent) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeChildVelAcc</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a6d0853757008a1db34d41da9276df81e</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const VectorDynSize &amp;jntAcc, LinkVelArray &amp;linkVels, LinkAccArray &amp;linkAccs, const LinkIndex child, const LinkIndex parent) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeChildVel</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a70c9055aafb46f65fe767664c873625e</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, LinkVelArray &amp;linkVels, const LinkIndex child, const LinkIndex parent) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeChildAcc</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a65509300297221192cb46189b2a473d1</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const LinkVelArray &amp;linkVels, const VectorDynSize &amp;jntAcc, LinkAccArray &amp;linkAccs, const LinkIndex child, const LinkIndex parent) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeChildBiasAcc</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a3c16a316f95e25ad0af2768cb4c991a3</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const LinkVelArray &amp;linkVels, LinkAccArray &amp;linkBiasAccs, const LinkIndex child, const LinkIndex parent) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeJointTorque</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a495a50c9623710812f49cf6258ecb68e</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const Wrench &amp;internalWrench, const LinkIndex linkThatAppliesWrench, const LinkIndex linkOnWhichWrenchIsApplied, VectorDynSize &amp;jntTorques) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setIndex</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>ac0d964dac9538e66a922b1ae50e7b662</anchor>
      <arglist>(JointIndex &amp;_index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual JointIndex</type>
      <name>getIndex</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a2accdcd6fbf7e222a3c7c6b99130934e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPosCoordsOffset</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a6c80be1fe40e5a71cc56c4fbe625535f</anchor>
      <arglist>(const size_t _index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>getPosCoordsOffset</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>afc71b67f79c9bbdd8f2925ee08ca0323</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDOFsOffset</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>af65fc0f65b8367404848bc41ea87347c</anchor>
      <arglist>(const size_t _index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>getDOFsOffset</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a64aa264a72088da07844f25176a25bee</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setAttachedLinks</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>aafd1101e91ea337a451d62f0160a819c</anchor>
      <arglist>(const LinkIndex link1, const LinkIndex link2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRestTransform</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a770aadc1a6e13bce3af213707fcf2d84</anchor>
      <arglist>(const Transform &amp;link1_X_link2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasPosLimits</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>af4badbd5891621e847a61d767cffd25e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>enablePosLimits</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a4f0f02e57295ad4b0ec94fe19fc3e0c0</anchor>
      <arglist>(const bool enable)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getPosLimits</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>ab734574da90b6d2ae24169ea180a081b</anchor>
      <arglist>(const size_t _index, double &amp;min, double &amp;max) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMinPosLimit</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a46dbe9dec3ef79f6d5662269f6fe8f65</anchor>
      <arglist>(const size_t _index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMaxPosLimit</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a047913be4f7bdeb35d785e4ad71d5395</anchor>
      <arglist>(const size_t _index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setPosLimits</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a63c57d91c3d80a610671f04fcbdd22ff</anchor>
      <arglist>(const size_t _index, double &amp;min, double &amp;max)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setAttachedLinks</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>aafd1101e91ea337a451d62f0160a819c</anchor>
      <arglist>(const LinkIndex link1, const LinkIndex link2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRestTransform</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a770aadc1a6e13bce3af213707fcf2d84</anchor>
      <arglist>(const Transform &amp;link1_X_link2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasPosLimits</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>af4badbd5891621e847a61d767cffd25e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>enablePosLimits</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a4f0f02e57295ad4b0ec94fe19fc3e0c0</anchor>
      <arglist>(const bool enable)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getPosLimits</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>ab734574da90b6d2ae24169ea180a081b</anchor>
      <arglist>(const size_t _index, double &amp;min, double &amp;max) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMinPosLimit</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a46dbe9dec3ef79f6d5662269f6fe8f65</anchor>
      <arglist>(const size_t _index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMaxPosLimit</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a047913be4f7bdeb35d785e4ad71d5395</anchor>
      <arglist>(const size_t _index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setPosLimits</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a63c57d91c3d80a610671f04fcbdd22ff</anchor>
      <arglist>(const size_t _index, double &amp;min, double &amp;max)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::iKinLimbImported</name>
    <filename>classiDynTree_1_1iKinLimbImported.html</filename>
    <member kind="function">
      <type></type>
      <name>iKinLimbImported</name>
      <anchorfile>classiDynTree_1_1iKinLimbImported.html</anchorfile>
      <anchor>a1ddb6cd3ab0129374cc29ddaa0820e84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~iKinLimbImported</name>
      <anchorfile>classiDynTree_1_1iKinLimbImported.html</anchorfile>
      <anchor>a9b2de9e21aa8ef978d19a72a910df2ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromModel</name>
      <anchorfile>classiDynTree_1_1iKinLimbImported.html</anchorfile>
      <anchor>abac4ec18c88cc235078afb933d55ec30</anchor>
      <arglist>(const Model &amp;model, const std::string &amp;baseFrame, const std::string &amp;distalFrame)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromDHChain</name>
      <anchorfile>classiDynTree_1_1iKinLimbImported.html</anchorfile>
      <anchor>a6f9556ef95fec1cf115c08eadbcc4910</anchor>
      <arglist>(const DHChain &amp;dhChain)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ILight</name>
    <filename>classiDynTree_1_1ILight.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~ILight</name>
      <anchorfile>classiDynTree_1_1ILight.html</anchorfile>
      <anchor>ada6d0932d2ae3729b032ed9b5200ece6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classiDynTree_1_1ILight.html</anchorfile>
      <anchor>a02bc591f676443c5f4819b2e7b4e0052</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classiDynTree_1_1ILight.html</anchorfile>
      <anchor>a3e4d47366695389be0c404989aeefe9a</anchor>
      <arglist>(const LightType type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LightType</type>
      <name>getType</name>
      <anchorfile>classiDynTree_1_1ILight.html</anchorfile>
      <anchor>a3961e631d5d488f6186ad526e56a6484</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classiDynTree_1_1ILight.html</anchorfile>
      <anchor>a2fc31019584faf778feeca251c53e532</anchor>
      <arglist>(const iDynTree::Position &amp;cameraPos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iDynTree::Position</type>
      <name>getPosition</name>
      <anchorfile>classiDynTree_1_1ILight.html</anchorfile>
      <anchor>a8cfd7f00d979aef04e491ad96052b6a8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDirection</name>
      <anchorfile>classiDynTree_1_1ILight.html</anchorfile>
      <anchor>a79ad79bcb170f0832d2797c0f9b4dab4</anchor>
      <arglist>(const Direction &amp;lightDirection)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Direction</type>
      <name>getDirection</name>
      <anchorfile>classiDynTree_1_1ILight.html</anchorfile>
      <anchor>aa527fd62b167d7521076619bf6a1ebd8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setAmbientColor</name>
      <anchorfile>classiDynTree_1_1ILight.html</anchorfile>
      <anchor>a58ff9a230c6a871b0cb5bf78c15ab0e8</anchor>
      <arglist>(const ColorViz &amp;ambientColor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ColorViz</type>
      <name>getAmbientColor</name>
      <anchorfile>classiDynTree_1_1ILight.html</anchorfile>
      <anchor>a40f048da7681b93d29e2ff20658e66e0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setSpecularColor</name>
      <anchorfile>classiDynTree_1_1ILight.html</anchorfile>
      <anchor>a2f9c33f94d5c606b5dbbacaa9507e950</anchor>
      <arglist>(const ColorViz &amp;ambientColor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ColorViz</type>
      <name>getSpecularColor</name>
      <anchorfile>classiDynTree_1_1ILight.html</anchorfile>
      <anchor>a6aa174b0fbd96c011880bdf2fa137737</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDiffuseColor</name>
      <anchorfile>classiDynTree_1_1ILight.html</anchorfile>
      <anchor>a0992a9767b6e8834c97de5125639e27f</anchor>
      <arglist>(const ColorViz &amp;ambientColor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ColorViz</type>
      <name>getDiffuseColor</name>
      <anchorfile>classiDynTree_1_1ILight.html</anchorfile>
      <anchor>a0b173883888a9e197d118615af387610</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::IModelVisualization</name>
    <filename>classiDynTree_1_1IModelVisualization.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~IModelVisualization</name>
      <anchorfile>classiDynTree_1_1IModelVisualization.html</anchorfile>
      <anchor>a30b9126e3d854c657013e7af4b8a6084</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setPositions</name>
      <anchorfile>classiDynTree_1_1IModelVisualization.html</anchorfile>
      <anchor>ad69716975b88d3fc3faaab805a1a1cce</anchor>
      <arglist>(const Transform &amp;world_H_base, const VectorDynSize &amp;jointPos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setLinkPositions</name>
      <anchorfile>classiDynTree_1_1IModelVisualization.html</anchorfile>
      <anchor>ac4d2070b8add278cbc30f0e6a0948f9a</anchor>
      <arglist>(const LinkPositions &amp;linkPos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Model &amp;</type>
      <name>model</name>
      <anchorfile>classiDynTree_1_1IModelVisualization.html</anchorfile>
      <anchor>a416adb24480ac485047155ab3a053f24</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getInstanceName</name>
      <anchorfile>classiDynTree_1_1IModelVisualization.html</anchorfile>
      <anchor>a4f9c29aa7d950ac3e6eeb8ddacc3f420</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setModelVisibility</name>
      <anchorfile>classiDynTree_1_1IModelVisualization.html</anchorfile>
      <anchor>a0417a81f8bc5cd5e9f817d55cc144b5f</anchor>
      <arglist>(const bool isVisible)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setModelColor</name>
      <anchorfile>classiDynTree_1_1IModelVisualization.html</anchorfile>
      <anchor>ab76d9b8e6720e724a4dc3a77c15f01c6</anchor>
      <arglist>(const ColorViz &amp;modelColor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetModelColor</name>
      <anchorfile>classiDynTree_1_1IModelVisualization.html</anchorfile>
      <anchor>aae4fd91e3244e38cc00da2460e24d058</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setLinkColor</name>
      <anchorfile>classiDynTree_1_1IModelVisualization.html</anchorfile>
      <anchor>abe6388fc1ac461069a69f434606104ae</anchor>
      <arglist>(const LinkIndex &amp;linkIndex, const ColorViz &amp;linkColor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>resetLinkColor</name>
      <anchorfile>classiDynTree_1_1IModelVisualization.html</anchorfile>
      <anchor>a17fc5c0d21dbd2480e28afda70955804</anchor>
      <arglist>(const LinkIndex &amp;linkIndex)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getLinkNames</name>
      <anchorfile>classiDynTree_1_1IModelVisualization.html</anchorfile>
      <anchor>a4d216f8ba410a9a827b6e5495d1fa441</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setLinkVisibility</name>
      <anchorfile>classiDynTree_1_1IModelVisualization.html</anchorfile>
      <anchor>a86dcccc124cafe7280578d9f66dd13fd</anchor>
      <arglist>(const std::string &amp;linkName, bool isVisible)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getFeatures</name>
      <anchorfile>classiDynTree_1_1IModelVisualization.html</anchorfile>
      <anchor>afc4739fc4e8cd0629b0d8a9b8fbe1e95</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setFeatureVisibility</name>
      <anchorfile>classiDynTree_1_1IModelVisualization.html</anchorfile>
      <anchor>ae3a6d78785994edae56c168668932843</anchor>
      <arglist>(const std::string &amp;elementKey, bool isVisible)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IJetsVisualization &amp;</type>
      <name>jets</name>
      <anchorfile>classiDynTree_1_1IModelVisualization.html</anchorfile>
      <anchor>ad4a127d71ac358022d31669375eccb55</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Transform</type>
      <name>getWorldModelTransform</name>
      <anchorfile>classiDynTree_1_1IModelVisualization.html</anchorfile>
      <anchor>a7784653772549e8f732cadf59236f563</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Transform</type>
      <name>getWorldLinkTransform</name>
      <anchorfile>classiDynTree_1_1IModelVisualization.html</anchorfile>
      <anchor>a7130962b2f7f44cd8d76dbbabb0d8acf</anchor>
      <arglist>(const LinkIndex &amp;linkIndex)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::integrators::ImplicitTrapezoidal</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ImplicitTrapezoidal.html</filename>
    <base>iDynTree::optimalcontrol::integrators::FixedStepIntegrator</base>
    <member kind="function">
      <type></type>
      <name>ImplicitTrapezoidal</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ImplicitTrapezoidal.html</anchorfile>
      <anchor>a8b7bba12a73be0c21c626bd47f2ea34a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitTrapezoidal</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ImplicitTrapezoidal.html</anchorfile>
      <anchor>a706eaae151b094d5d3e58080e9b91bdb</anchor>
      <arglist>(const std::shared_ptr&lt; iDynTree::optimalcontrol::DynamicalSystem &gt; dynamicalSystem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImplicitTrapezoidal</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ImplicitTrapezoidal.html</anchorfile>
      <anchor>a0691be9dc9a0ad8991850c6c5d892f03</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCollocationConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ImplicitTrapezoidal.html</anchorfile>
      <anchor>a310c72bcea0d2f780d108faa4ce944ef</anchor>
      <arglist>(double time, const std::vector&lt; VectorDynSize &gt; &amp;collocationPoints, const std::vector&lt; VectorDynSize &gt; &amp;controlInputs, double dT, VectorDynSize &amp;constraintValue) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCollocationConstraintJacobian</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ImplicitTrapezoidal.html</anchorfile>
      <anchor>a0e158be64ec06b8bbab9ebeafe26ba6c</anchor>
      <arglist>(double time, const std::vector&lt; VectorDynSize &gt; &amp;collocationPoints, const std::vector&lt; VectorDynSize &gt; &amp;controlInputs, double dT, std::vector&lt; MatrixDynSize &gt; &amp;stateJacobianValues, std::vector&lt; MatrixDynSize &gt; &amp;controlJacobianValues) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintJacobianStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ImplicitTrapezoidal.html</anchorfile>
      <anchor>a2cb3c8fbbcf59f70a49a1290ba527fe9</anchor>
      <arglist>(std::vector&lt; SparsityStructure &gt; &amp;stateJacobianSparsity) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintJacobianControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ImplicitTrapezoidal.html</anchorfile>
      <anchor>a73e677383eba4179756675f29c6cfa69</anchor>
      <arglist>(std::vector&lt; SparsityStructure &gt; &amp;controlJacobianSparsity) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCollocationConstraintSecondDerivatives</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ImplicitTrapezoidal.html</anchorfile>
      <anchor>a95b51812ee80520e0b8a62dd18722d70</anchor>
      <arglist>(double time, const std::vector&lt; VectorDynSize &gt; &amp;collocationPoints, const std::vector&lt; VectorDynSize &gt; &amp;controlInputs, double dT, const VectorDynSize &amp;lambda, CollocationHessianMap &amp;stateSecondDerivative, CollocationHessianMap &amp;controlSecondDerivative, CollocationHessianMap &amp;stateControlSecondDerivative) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintSecondDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ImplicitTrapezoidal.html</anchorfile>
      <anchor>afcfba8beb79b47af5772e476a091f4ee</anchor>
      <arglist>(CollocationHessianSparsityMap &amp;stateDerivativeSparsity) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintSecondDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ImplicitTrapezoidal.html</anchorfile>
      <anchor>ade31c6fb5ed77daf209b743b07be6d1d</anchor>
      <arglist>(CollocationHessianSparsityMap &amp;controlDerivativeSparsity) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintSecondDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1ImplicitTrapezoidal.html</anchorfile>
      <anchor>a8f59cef1a17cb6ae53ec2bc3b4d58d7f</anchor>
      <arglist>(CollocationHessianSparsityMap &amp;stateControlDerivativeSparsity) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>integrate</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1FixedStepIntegrator.html</anchorfile>
      <anchor>a647bc31b7c8d037ae5df8b66518bf0e0</anchor>
      <arglist>(double initialTime, double finalTime) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setMaximumStepSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a6e2b9052aa9b0638ce7d2f8347b4fe00</anchor>
      <arglist>(const double dT)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maximumStepSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a0d39d3023f056364a01963b7520a7c21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a72bf5f94da63280de3c2b3223cd251e6</anchor>
      <arglist>(const std::shared_ptr&lt; iDynTree::optimalcontrol::DynamicalSystem &gt; dynamicalSystem)</arglist>
    </member>
    <member kind="function">
      <type>const std::weak_ptr&lt; DynamicalSystem &gt;</type>
      <name>dynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a00cae12a44e212fac9a71fd2d07d8caf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getSolution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a661760c48a95a73d6061743a7e988c4b</anchor>
      <arglist>(double time, VectorDynSize &amp;solution) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; SolutionElement &gt; &amp;</type>
      <name>getFullSolution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>ab5b22916d2b6e31314d3dd8955a574d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearSolution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>aa0aac8f0c4e34d345c05960591468d73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntegratorInfo &amp;</type>
      <name>info</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a18959a33019837571480eea082a4bdb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>interpolatePoints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>ad5b95d324ad148603d09aedcb52860ce</anchor>
      <arglist>(const std::vector&lt; SolutionElement &gt;::const_iterator &amp;first, const std::vector&lt; SolutionElement &gt;::const_iterator &amp;second, double time, VectorDynSize &amp;outputPoint) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_dTmax</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a371179a8cb3e4b4a03a3a0d90d2e6cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; DynamicalSystem &gt;</type>
      <name>m_dynamicalSystem_ptr</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>aa9eb4f3c3a4da99f1ce27b28154e4bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SolutionElement &gt;</type>
      <name>m_solution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a25b9c2215f3bbf7940214925e3a55ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; IntegratorInfoData &gt;</type>
      <name>m_infoData</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a91cc593e13d13305e81b3e7fc5ae6276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntegratorInfo</type>
      <name>m_info</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a3b03ff054e91a4142240dea337524fa1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::IndexRange</name>
    <filename>structiDynTree_1_1IndexRange.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>structiDynTree_1_1IndexRange.html</anchorfile>
      <anchor>a1aab0a47e16b1282e907838558cdc512</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IndexRange</type>
      <name>InvalidRange</name>
      <anchorfile>structiDynTree_1_1IndexRange.html</anchorfile>
      <anchor>aab18021d809aea102a81b49fa1f5854c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::ptrdiff_t</type>
      <name>offset</name>
      <anchorfile>structiDynTree_1_1IndexRange.html</anchorfile>
      <anchor>afad5350e0cba2d8dbc38ecc30a74eb61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::ptrdiff_t</type>
      <name>size</name>
      <anchorfile>structiDynTree_1_1IndexRange.html</anchorfile>
      <anchor>a2d8b0e8ce529b462041191553ad7886a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::IndexSelector</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1IndexSelector.html</filename>
    <base>iDynTree::optimalcontrol::Selector</base>
    <member kind="function">
      <type></type>
      <name>IndexSelector</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1IndexSelector.html</anchorfile>
      <anchor>a6881efa7c737d4fcfc9229bbe7028c1f</anchor>
      <arglist>(const IndexRange &amp;selectedRange, unsigned int totalSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IndexSelector</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1IndexSelector.html</anchorfile>
      <anchor>aa49ebdb721a105c7b758ea723cf68efe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VectorDynSize &amp;</type>
      <name>select</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1IndexSelector.html</anchorfile>
      <anchor>a2324d9b8f10506f98851c36936f64808</anchor>
      <arglist>(const VectorDynSize &amp;fullVector) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MatrixDynSize &amp;</type>
      <name>asSelectorMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>a22e514feed601d1e5d6d46cd2a522b83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparsityStructure &amp;</type>
      <name>sparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>a67898193aac90f6eefb5ca7d52540372</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>ab517313f7436046c4da463cc5a4e9175</anchor>
      <arglist>(const SparsityStructure &amp;sparsity)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>a3e3363a41fed3bb2cbb4218300c35216</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorDynSize</type>
      <name>m_selected</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>a0ad2e3912792c51e813e18fd8cb74480</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MatrixDynSize</type>
      <name>m_selectionMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>ae879af967abc75d5b958ca0da7aa8412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparsityStructure</type>
      <name>m_correspondingHessianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>a944ac90f2e752be02169981ecd526cfe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::InertialElement</name>
    <filename>classiDynTree_1_1InertialElement.html</filename>
    <base>iDynTree::XMLElement</base>
    <member kind="function">
      <type></type>
      <name>InertialElement</name>
      <anchorfile>classiDynTree_1_1InertialElement.html</anchorfile>
      <anchor>a75919a0f3285a96e38bc6ae519966215</anchor>
      <arglist>(iDynTree::Link &amp;link)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; iDynTree::XMLElement &gt;</type>
      <name>childElementForName</name>
      <anchorfile>classiDynTree_1_1InertialElement.html</anchorfile>
      <anchor>a55e0c2545f50bc7219aad6e9a90ebc5f</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>exitElementScope</name>
      <anchorfile>classiDynTree_1_1InertialElement.html</anchorfile>
      <anchor>a58a63b6e40f8f8b09621d95322df904d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ab40851b7629a74107f2183ca36e412e4</anchor>
      <arglist>(std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a16759fb450635662dced0eb2ace0228b</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChildHasBeenParsedCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a69171cc4b5c552b97f44375029356a2e</anchor>
      <arglist>(std::function&lt; void(std::shared_ptr&lt; XMLElement &gt;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt;</type>
      <name>attributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2a182ac17f5e644b113a67e02c3595e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; void()&gt;</type>
      <name>exitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a04ea33b2a4ebf84647fb6d38e24ba0e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a7129fb1e69a5bc819872e65d3965296d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; XMLElement &gt; &gt;</type>
      <name>children</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2f51748fc6eed4724e86dc5e52ebd5ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt; &gt;</type>
      <name>attributes</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a27347aca070a5dfc250077b6cc3e3748</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>childHasBeenParsed</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ac92ce9b144b27970e09f6f9dff77f251</anchor>
      <arglist>(std::shared_ptr&lt; XMLElement &gt; parsedChild)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setAttributes</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a9dc312559f13e9d78d10ddc2242ac27d</anchor>
      <arglist>(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;attributes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsedCharacters</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a949bcf8e3496896d2b6d7d6da72870a7</anchor>
      <arglist>(const std::string &amp;characters)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParsedTextContent</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>abebc95353394912e187ad70e6078fcdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a3d8e1b737e614b35e3df0a4f76ac645b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::integrators::Integrator</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</filename>
    <member kind="function">
      <type></type>
      <name>Integrator</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a06482af463ae25bd99ab513ca1bd8cb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Integrator</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a2b692b4e55ba221411c7ab685d85afeb</anchor>
      <arglist>(const std::shared_ptr&lt; iDynTree::optimalcontrol::DynamicalSystem &gt; dynamicalSystem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Integrator</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>aa3887eac25d4dd53962204d0503c8e06</anchor>
      <arglist>(const Integrator &amp;other)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Integrator</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a983d6a923b8f20f40208ca411b089a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>integrate</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>ab95d5885f287e7364630a277d7fe8c56</anchor>
      <arglist>(double initialTime, double finalTime)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setMaximumStepSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a6e2b9052aa9b0638ce7d2f8347b4fe00</anchor>
      <arglist>(const double dT)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maximumStepSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a0d39d3023f056364a01963b7520a7c21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a72bf5f94da63280de3c2b3223cd251e6</anchor>
      <arglist>(const std::shared_ptr&lt; iDynTree::optimalcontrol::DynamicalSystem &gt; dynamicalSystem)</arglist>
    </member>
    <member kind="function">
      <type>const std::weak_ptr&lt; DynamicalSystem &gt;</type>
      <name>dynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a00cae12a44e212fac9a71fd2d07d8caf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getSolution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a661760c48a95a73d6061743a7e988c4b</anchor>
      <arglist>(double time, VectorDynSize &amp;solution) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; SolutionElement &gt; &amp;</type>
      <name>getFullSolution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>ab5b22916d2b6e31314d3dd8955a574d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearSolution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>aa0aac8f0c4e34d345c05960591468d73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCollocationConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a12e7200b4cf89eeca101c94de758b3bb</anchor>
      <arglist>(double time, const std::vector&lt; VectorDynSize &gt; &amp;collocationPoints, const std::vector&lt; VectorDynSize &gt; &amp;controlInputs, double dT, VectorDynSize &amp;constraintValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCollocationConstraintJacobian</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>ae44f7ecb211132d6280df85e23378a05</anchor>
      <arglist>(double time, const std::vector&lt; VectorDynSize &gt; &amp;collocationPoints, const std::vector&lt; VectorDynSize &gt; &amp;controlInputs, double dT, std::vector&lt; MatrixDynSize &gt; &amp;stateJacobianValues, std::vector&lt; MatrixDynSize &gt; &amp;controlJacobianValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintJacobianStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>aab4d320903f06565e0fbecbbae934f0f</anchor>
      <arglist>(std::vector&lt; SparsityStructure &gt; &amp;stateJacobianSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintJacobianControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a97950a2b3f0f491f75109ff0739dc0f9</anchor>
      <arglist>(std::vector&lt; SparsityStructure &gt; &amp;controlJacobianSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCollocationConstraintSecondDerivatives</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>aebc2c1544ef18998b7701205549f2cd7</anchor>
      <arglist>(double time, const std::vector&lt; VectorDynSize &gt; &amp;collocationPoints, const std::vector&lt; VectorDynSize &gt; &amp;controlInputs, double dT, const VectorDynSize &amp;lambda, CollocationHessianMap &amp;stateSecondDerivative, CollocationHessianMap &amp;controlSecondDerivative, CollocationHessianMap &amp;stateControlSecondDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintSecondDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a6a8e264a12ba28ef1973d0616e5ac144</anchor>
      <arglist>(CollocationHessianSparsityMap &amp;stateDerivativeSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintSecondDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a77cb08d2a9451f828508e19c25a9991e</anchor>
      <arglist>(CollocationHessianSparsityMap &amp;controlDerivativeSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintSecondDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>acefec19f5d879d9720df1f3a8c1b8186</anchor>
      <arglist>(CollocationHessianSparsityMap &amp;stateControlDerivativeSparsity)</arglist>
    </member>
    <member kind="function">
      <type>const IntegratorInfo &amp;</type>
      <name>info</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a18959a33019837571480eea082a4bdb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>interpolatePoints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>ad5b95d324ad148603d09aedcb52860ce</anchor>
      <arglist>(const std::vector&lt; SolutionElement &gt;::const_iterator &amp;first, const std::vector&lt; SolutionElement &gt;::const_iterator &amp;second, double time, VectorDynSize &amp;outputPoint) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>allocateBuffers</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a2c69c4bd45522641ebf505a0d2dc99b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_dTmax</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a371179a8cb3e4b4a03a3a0d90d2e6cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; DynamicalSystem &gt;</type>
      <name>m_dynamicalSystem_ptr</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>aa9eb4f3c3a4da99f1ce27b28154e4bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SolutionElement &gt;</type>
      <name>m_solution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a25b9c2215f3bbf7940214925e3a55ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; IntegratorInfoData &gt;</type>
      <name>m_infoData</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a91cc593e13d13305e81b3e7fc5ae6276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntegratorInfo</type>
      <name>m_info</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a3b03ff054e91a4142240dea337524fa1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::integrators::IntegratorInfo</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1integrators_1_1IntegratorInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>IntegratorInfo</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1IntegratorInfo.html</anchorfile>
      <anchor>a51533f58b0ecae44da0d11b64979d60b</anchor>
      <arglist>(std::shared_ptr&lt; IntegratorInfoData &gt; data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntegratorInfo</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1IntegratorInfo.html</anchorfile>
      <anchor>a9dff1c42b97ca0622940ae695f36be87</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntegratorInfo</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1IntegratorInfo.html</anchorfile>
      <anchor>a4b5adc8a0fe5a40302fb83835a3aaa32</anchor>
      <arglist>(const IntegratorInfo &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1IntegratorInfo.html</anchorfile>
      <anchor>a27e05ecc9ca5964150fe59066a1e131e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExplicit</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1IntegratorInfo.html</anchorfile>
      <anchor>a09f6bc112ba387fa190f7498a3c63d72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfStages</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1IntegratorInfo.html</anchorfile>
      <anchor>a70ae076e088402bb95511dfb9e36944c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::integrators::IntegratorInfoData</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1integrators_1_1IntegratorInfoData.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1IntegratorInfoData.html</anchorfile>
      <anchor>a3fa24f62a71726fd3b234e97c80d30d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isExplicit</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1IntegratorInfoData.html</anchorfile>
      <anchor>a1dbc7d308a1eb00ee212b595b86b2bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>numberOfStages</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1IntegratorInfoData.html</anchorfile>
      <anchor>a025a203d3f50ee91db6876e8c23e6c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IntegratorInfoData</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1IntegratorInfoData.html</anchorfile>
      <anchor>a247184bd5e9844443627527c38b036b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Integrator</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1IntegratorInfoData.html</anchorfile>
      <anchor>ace5bb0fe4232b9b0ced67ff743994e71</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::InverseKinematics</name>
    <filename>classiDynTree_1_1InverseKinematics.html</filename>
    <member kind="function">
      <type></type>
      <name>InverseKinematics</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a2c7549b37f43c5fdf07cac67aaf0ca87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InverseKinematics</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a0d9e4d4db2a590dad2f6b530b159cd06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadModelFromFile</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>ac3e893981cbfa2afc88a231d1cace9a4</anchor>
      <arglist>(const std::string &amp;filename, const std::vector&lt; std::string &gt; &amp;consideredJoints=std::vector&lt; std::string &gt;(), const std::string &amp;filetype=&quot;urdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setModel</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>abb9706235b5fe16f951731ba285582ae</anchor>
      <arglist>(const iDynTree::Model &amp;model, const std::vector&lt; std::string &gt; &amp;consideredJoints=std::vector&lt; std::string &gt;())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setJointLimits</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>aa6e7d22dbc79871a62a0ba4c6e79fb97</anchor>
      <arglist>(std::vector&lt; std::pair&lt; double, double &gt; &gt; &amp;jointLimits)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getJointLimits</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a1ad4371be984af63072d7f7ffa1f79ca</anchor>
      <arglist>(std::vector&lt; std::pair&lt; double, double &gt; &gt; &amp;jointLimits)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearProblem</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a1d54045ad46403179e3cd3c076802978</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFloatingBaseOnFrameNamed</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a238847f4a1308b661cdf14ac4d10caf7</anchor>
      <arglist>(const std::string &amp;floatingBaseFrameName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRobotConfiguration</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a37dda0ba095c33f702c52fee2312d628</anchor>
      <arglist>(const iDynTree::Transform &amp;baseConfiguration, const iDynTree::VectorDynSize &amp;jointConfiguration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setCurrentRobotConfiguration</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a4ed57acc6905dcaeb4596c46ab6d7a47</anchor>
      <arglist>(const iDynTree::Transform &amp;baseConfiguration, const iDynTree::VectorDynSize &amp;jointConfiguration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setJointConfiguration</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a321cd9fba3a93857acbf81ee7ce89d6f</anchor>
      <arglist>(const std::string &amp;jointName, const double jointConfiguration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotationParametrization</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a1f3be372eb31516aeb39e3e0a6ae8724</anchor>
      <arglist>(enum InverseKinematicsRotationParametrization parametrization)</arglist>
    </member>
    <member kind="function">
      <type>enum InverseKinematicsRotationParametrization</type>
      <name>rotationParametrization</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a16f3902ff47fbafeb219c2e22529857d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDesiredJointConfiguration</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>aff9003fa17de9f6467b127bc2809dd10</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;desiredJointConfiguration, double weight=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDesiredFullJointsConfiguration</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a30597bf9cef5da3d0c30118a1c132a2c</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;desiredJointConfiguration, double weight=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDesiredFullJointsConfiguration</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a50c9eede82cbe551388baceed52240ee</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;desiredJointConfiguration, const iDynTree::VectorDynSize &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDesiredReducedJointConfiguration</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>af22154b11fa87fbb0be902f85e4a4a37</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;desiredJointConfiguration, double weight=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDesiredReducedJointConfiguration</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>ae084dff57455232ec11cfe81f9888eda</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;desiredJointConfiguration, const iDynTree::VectorDynSize &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInitialCondition</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a4e61084a8305a1d089add9bff5a632ea</anchor>
      <arglist>(const iDynTree::Transform *baseTransform, const iDynTree::VectorDynSize *initialCondition)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFullJointsInitialCondition</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a79edd849ba6eb8d0b549cad3c9c00106</anchor>
      <arglist>(const iDynTree::Transform *baseTransform, const iDynTree::VectorDynSize *initialCondition)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setReducedInitialCondition</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>af16eec79ccbccf5a180d46e874712e53</anchor>
      <arglist>(const iDynTree::Transform *baseTransform, const iDynTree::VectorDynSize *initialCondition)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solve</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>af4d51059431c6fed8e83983379e143d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPoseForFrame</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>af672ccd4e2c30ac0ebbff58146ded4a9</anchor>
      <arglist>(const std::string &amp;frameName, iDynTree::Transform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>const Model &amp;</type>
      <name>model</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a6dce3f3bfd9f50334386ba1470c3f53f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Model &amp;</type>
      <name>fullModel</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a1a6ef09da0cb4ddb68261529a45f3f2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Model &amp;</type>
      <name>reducedModel</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a880e07ce1aea19321ecdaaaa8dcb0a84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCOMTarget</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a176c4c0e2471a8af391e7b156b04a2b0</anchor>
      <arglist>(iDynTree::Position &amp;desiredPosition, double weight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCOMAsConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a557041738a620f4ce2ef433083b9b3a0</anchor>
      <arglist>(bool asConstraint=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCOMAsConstraintTolerance</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>ab2776f60ee744d261552c5685bec170f</anchor>
      <arglist>(double tolerance=1e-8)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCOMAConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>acc2d97dd6ed312e557fbee2a5d91e313</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCOMTargetActive</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a20284b4e939d67add4a1a90bba06dc0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deactivateCOMTarget</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>ae834df2d99d5332143bb3ab617ea54e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCOMConstraintProjectionDirection</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a9a77ce138803d1db8f2db9f1927034de</anchor>
      <arglist>(iDynTree::Vector3 direction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxIterations</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>abd8b70a018553ec30f0998092ea28c62</anchor>
      <arglist>(const int max_iter)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxIterations</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a2e1534f0883aa48bbd7396fb03ab9cc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxCPUTime</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a94fbd05f09b0fa2d7f98af110992dd02</anchor>
      <arglist>(const double max_cpu_time)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxCPUTime</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a7022f8652423611388707ad40ca71205</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCostTolerance</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a972eaa443d246d15a411b8b0c5e70a62</anchor>
      <arglist>(const double tol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>costTolerance</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a902ce28213d60568f68456511f57493e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstraintsTolerance</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a963881a6913d92c4a224b68af44918fb</anchor>
      <arglist>(const double constr_tol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>constraintsTolerance</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a431451fac26b849ab7b9157170926461</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbosity</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a7fd58eaeec333ffe4a8b1cf68f48199a</anchor>
      <arglist>(const unsigned int verbose)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>linearSolverName</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a79c65c3b6ecb3b1de2cf84b319dbcca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearSolverName</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>af45198b610d4f871a7fd0ed8b5b66846</anchor>
      <arglist>(const std::string &amp;solverName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFrameConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a7e721cd49fb9d2910dab79677a3febc0</anchor>
      <arglist>(const std::string &amp;frameName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFrameConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>ad32732917055324e9e43b665f10d6d89</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Transform &amp;constraintValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFramePositionConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a8247e588e7c6a6caf37a52345c58a2a3</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Position &amp;constraintValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFramePositionConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a08094142e67312af1c8dc6d43fcc5c54</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Transform &amp;constraintValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFrameRotationConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a2581274da87dbf2b9cf8a8d1c34184fb</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Rotation &amp;constraintValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFrameRotationConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a053a41c48598e472cfc5acb69a707810</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Transform &amp;constraintValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>activateFrameConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a2e2da211d3d7091ad07a0b384b3ff48d</anchor>
      <arglist>(const std::string &amp;frameName, const Transform &amp;newConstraintValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deactivateFrameConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a71611b4b312177be7c3682164742304a</anchor>
      <arglist>(const std::string &amp;frameName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFrameConstraintActive</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a762635dbe437ce96d4e5e597267be87d</anchor>
      <arglist>(const std::string &amp;frameName) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addCenterOfMassProjectionConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>af42335e61bf9fcb4fb62a7d48904e517</anchor>
      <arglist>(const std::string &amp;firstSupportFrame, const Polygon &amp;firstSupportPolygon, const iDynTree::Direction xAxisOfPlaneInWorld, const iDynTree::Direction yAxisOfPlaneInWorld, const iDynTree::Position originOfPlaneInWorld=iDynTree::Position::Zero())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addCenterOfMassProjectionConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a9bdeb6bdba32b5b98f8942bd73bdf70c</anchor>
      <arglist>(const std::string &amp;firstSupportFrame, const Polygon &amp;firstSupportPolygon, const std::string &amp;secondSupportFrame, const Polygon &amp;secondSupportPolygon, const iDynTree::Direction xAxisOfPlaneInWorld, const iDynTree::Direction yAxisOfPlaneInWorld, const iDynTree::Position originOfPlaneInWorld=iDynTree::Position::Zero())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addCenterOfMassProjectionConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a5b7509e262a0293039b0ca99daf6344d</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;supportFrames, const std::vector&lt; Polygon &gt; &amp;supportPolygons, const iDynTree::Direction xAxisOfPlaneInWorld, const iDynTree::Direction yAxisOfPlaneInWorld, const iDynTree::Position originOfPlaneInWorld)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCenterOfMassProjectionMargin</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>ab430e2a8abbea4b7b02fc7535109ad9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getCenterOfMassProjectConstraintConvexHull</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a30e3692826f3c14bc9d0948285451bfa</anchor>
      <arglist>(Polygon2D &amp;convexHull)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addTarget</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>af97c2d5f44b64f7e422e70d20c0d49c9</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Transform &amp;targetValue, const double positionWeight=1.0, const double rotationWeight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addPositionTarget</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a9f9571f744198e189b3635cf18b01fa6</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Position &amp;targetValue, const double positionWeight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addPositionTarget</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a43517efef7345effef2c64ed792293d6</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Transform &amp;targetValue, const double positionWeight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRotationTarget</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>aed8c88ba1c622755f8f6060d7c23f1b0</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Rotation &amp;targetValue, const double rotationWeight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRotationTarget</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>aef054698a036960b0cd9c4201553adee</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Transform &amp;targetValue, const double rotationWeight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateTarget</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>afc04477ad6b4db5fe0ed87eaec33a366</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Transform &amp;targetValue, const double positionWeight=-1.0, const double rotationWeight=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updatePositionTarget</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a242d903b37077336e8a7401390968e6c</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Position &amp;targetValue, const double positionWeight=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateRotationTarget</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a39d99a353d47eae1b831969affc69a38</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Rotation &amp;targetValue, const double rotationWeight=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultTargetResolutionMode</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>ac55e7751070535950a098125d6064d46</anchor>
      <arglist>(enum iDynTree::InverseKinematicsTreatTargetAsConstraint mode)</arglist>
    </member>
    <member kind="function">
      <type>enum iDynTree::InverseKinematicsTreatTargetAsConstraint</type>
      <name>defaultTargetResolutionMode</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>ada2c44f94a48893d064e90c3400e593d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTargetResolutionMode</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a40c0473418948bdaeb1b002ff167e550</anchor>
      <arglist>(const std::string &amp;targetName, enum InverseKinematicsTreatTargetAsConstraint mode)</arglist>
    </member>
    <member kind="function">
      <type>enum InverseKinematicsTreatTargetAsConstraint</type>
      <name>targetResolutionMode</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>ae5dff5d4891a60e0aeb2c8c66c25c43a</anchor>
      <arglist>(const std::string &amp;frameName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSolution</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>aa5251d7fd8b862b7b69278bbaf41e5b8</anchor>
      <arglist>(iDynTree::Transform &amp;baseTransformSolution, iDynTree::VectorDynSize &amp;shapeSolution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFullJointsSolution</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a82b937b35239f7b262391961f4c448ea</anchor>
      <arglist>(iDynTree::Transform &amp;baseTransformSolution, iDynTree::VectorDynSize &amp;shapeSolution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getReducedSolution</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a0fe2c9cd84677f6dfd83fdc31e6e39e6</anchor>
      <arglist>(iDynTree::Transform &amp;baseTransformSolution, iDynTree::VectorDynSize &amp;shapeSolution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxIterations</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>abd8b70a018553ec30f0998092ea28c62</anchor>
      <arglist>(const int max_iter)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxIterations</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a2e1534f0883aa48bbd7396fb03ab9cc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxCPUTime</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a94fbd05f09b0fa2d7f98af110992dd02</anchor>
      <arglist>(const double max_cpu_time)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxCPUTime</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a7022f8652423611388707ad40ca71205</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCostTolerance</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a972eaa443d246d15a411b8b0c5e70a62</anchor>
      <arglist>(const double tol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>costTolerance</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a902ce28213d60568f68456511f57493e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstraintsTolerance</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a963881a6913d92c4a224b68af44918fb</anchor>
      <arglist>(const double constr_tol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>constraintsTolerance</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a431451fac26b849ab7b9157170926461</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbosity</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a7fd58eaeec333ffe4a8b1cf68f48199a</anchor>
      <arglist>(const unsigned int verbose)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>linearSolverName</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a79c65c3b6ecb3b1de2cf84b319dbcca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearSolverName</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>af45198b610d4f871a7fd0ed8b5b66846</anchor>
      <arglist>(const std::string &amp;solverName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFrameConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a7e721cd49fb9d2910dab79677a3febc0</anchor>
      <arglist>(const std::string &amp;frameName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFrameConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>ad32732917055324e9e43b665f10d6d89</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Transform &amp;constraintValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFramePositionConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a8247e588e7c6a6caf37a52345c58a2a3</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Position &amp;constraintValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFramePositionConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a08094142e67312af1c8dc6d43fcc5c54</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Transform &amp;constraintValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFrameRotationConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a2581274da87dbf2b9cf8a8d1c34184fb</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Rotation &amp;constraintValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFrameRotationConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a053a41c48598e472cfc5acb69a707810</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Transform &amp;constraintValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>activateFrameConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a2e2da211d3d7091ad07a0b384b3ff48d</anchor>
      <arglist>(const std::string &amp;frameName, const Transform &amp;newConstraintValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deactivateFrameConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a71611b4b312177be7c3682164742304a</anchor>
      <arglist>(const std::string &amp;frameName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFrameConstraintActive</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a762635dbe437ce96d4e5e597267be87d</anchor>
      <arglist>(const std::string &amp;frameName) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addCenterOfMassProjectionConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>af42335e61bf9fcb4fb62a7d48904e517</anchor>
      <arglist>(const std::string &amp;firstSupportFrame, const Polygon &amp;firstSupportPolygon, const iDynTree::Direction xAxisOfPlaneInWorld, const iDynTree::Direction yAxisOfPlaneInWorld, const iDynTree::Position originOfPlaneInWorld=iDynTree::Position::Zero())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addCenterOfMassProjectionConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a9bdeb6bdba32b5b98f8942bd73bdf70c</anchor>
      <arglist>(const std::string &amp;firstSupportFrame, const Polygon &amp;firstSupportPolygon, const std::string &amp;secondSupportFrame, const Polygon &amp;secondSupportPolygon, const iDynTree::Direction xAxisOfPlaneInWorld, const iDynTree::Direction yAxisOfPlaneInWorld, const iDynTree::Position originOfPlaneInWorld=iDynTree::Position::Zero())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addCenterOfMassProjectionConstraint</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a5b7509e262a0293039b0ca99daf6344d</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;supportFrames, const std::vector&lt; Polygon &gt; &amp;supportPolygons, const iDynTree::Direction xAxisOfPlaneInWorld, const iDynTree::Direction yAxisOfPlaneInWorld, const iDynTree::Position originOfPlaneInWorld)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCenterOfMassProjectionMargin</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>ab430e2a8abbea4b7b02fc7535109ad9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getCenterOfMassProjectConstraintConvexHull</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a30e3692826f3c14bc9d0948285451bfa</anchor>
      <arglist>(Polygon2D &amp;convexHull)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addTarget</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>af97c2d5f44b64f7e422e70d20c0d49c9</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Transform &amp;targetValue, const double positionWeight=1.0, const double rotationWeight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addPositionTarget</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a9f9571f744198e189b3635cf18b01fa6</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Position &amp;targetValue, const double positionWeight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addPositionTarget</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a43517efef7345effef2c64ed792293d6</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Transform &amp;targetValue, const double positionWeight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRotationTarget</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>aed8c88ba1c622755f8f6060d7c23f1b0</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Rotation &amp;targetValue, const double rotationWeight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRotationTarget</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>aef054698a036960b0cd9c4201553adee</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Transform &amp;targetValue, const double rotationWeight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateTarget</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>afc04477ad6b4db5fe0ed87eaec33a366</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Transform &amp;targetValue, const double positionWeight=-1.0, const double rotationWeight=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updatePositionTarget</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a242d903b37077336e8a7401390968e6c</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Position &amp;targetValue, const double positionWeight=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateRotationTarget</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a39d99a353d47eae1b831969affc69a38</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Rotation &amp;targetValue, const double rotationWeight=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultTargetResolutionMode</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>ac55e7751070535950a098125d6064d46</anchor>
      <arglist>(enum iDynTree::InverseKinematicsTreatTargetAsConstraint mode)</arglist>
    </member>
    <member kind="function">
      <type>enum iDynTree::InverseKinematicsTreatTargetAsConstraint</type>
      <name>defaultTargetResolutionMode</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>ada2c44f94a48893d064e90c3400e593d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTargetResolutionMode</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a40c0473418948bdaeb1b002ff167e550</anchor>
      <arglist>(const std::string &amp;targetName, enum InverseKinematicsTreatTargetAsConstraint mode)</arglist>
    </member>
    <member kind="function">
      <type>enum InverseKinematicsTreatTargetAsConstraint</type>
      <name>targetResolutionMode</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>ae5dff5d4891a60e0aeb2c8c66c25c43a</anchor>
      <arglist>(const std::string &amp;frameName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSolution</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>aa5251d7fd8b862b7b69278bbaf41e5b8</anchor>
      <arglist>(iDynTree::Transform &amp;baseTransformSolution, iDynTree::VectorDynSize &amp;shapeSolution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFullJointsSolution</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a82b937b35239f7b262391961f4c448ea</anchor>
      <arglist>(iDynTree::Transform &amp;baseTransformSolution, iDynTree::VectorDynSize &amp;shapeSolution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getReducedSolution</name>
      <anchorfile>classiDynTree_1_1InverseKinematics.html</anchorfile>
      <anchor>a0fe2c9cd84677f6dfd83fdc31e6e39e6</anchor>
      <arglist>(iDynTree::Transform &amp;baseTransformSolution, iDynTree::VectorDynSize &amp;shapeSolution)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>internal::kinematics::InverseKinematicsData</name>
    <filename>classinternal_1_1kinematics_1_1InverseKinematicsData.html</filename>
    <member kind="function">
      <type>void</type>
      <name>updateRobotConfiguration</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a72400e2d3d8b1599d8f5cc0782a2ef6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareForOptimization</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>aae291af11b60f27d604ebe65de01531d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeProblemSizeAndResizeBuffers</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>ab753f3bd6f02221c18f34d8fa3f4656c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configureCenterOfMassProjectionConstraint</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a9e48974fb8f66b5bad0c711050e17ba0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InverseKinematicsData</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>aad369db9c76d864b74e07d458f347687</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setModel</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a4024cf4ac217ef5026669d42a2941fdb</anchor>
      <arglist>(const iDynTree::Model &amp;model, const std::vector&lt; std::string &gt; &amp;consideredJoints=std::vector&lt; std::string &gt;())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setJointLimits</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>afd414dae2211bf7ce1422dd6ce3d363a</anchor>
      <arglist>(std::vector&lt; std::pair&lt; double, double &gt; &gt; &amp;jointLimits)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getJointLimits</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>aab5189ec5428a2f06d2bd159aca76c8f</anchor>
      <arglist>(std::vector&lt; std::pair&lt; double, double &gt; &gt; &amp;jointLimits)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearProblem</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>af233d4272bccaf07f8bb18a601409312</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFrameConstraint</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a6c744c6b526f138c1144e9339cc55663</anchor>
      <arglist>(const internal::kinematics::TransformConstraint &amp;frameTransformConstraint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addTarget</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a35cf37e77215dd3b862f977a2dee6e05</anchor>
      <arglist>(const internal::kinematics::TransformConstraint &amp;frameTransform)</arglist>
    </member>
    <member kind="function">
      <type>TransformMap::iterator</type>
      <name>getTargetRefIfItExists</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a8ebb124ee9beb562dbc38e9648e7186d</anchor>
      <arglist>(const std::string targetFrameName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatePositionTarget</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a0c39acd186e7fb5f5c722540477b2a4a</anchor>
      <arglist>(TransformMap::iterator target, iDynTree::Position newPos, double newPosWeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRotationTarget</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a35b4a679bf622ac22edb71b01af50805</anchor>
      <arglist>(TransformMap::iterator target, iDynTree::Rotation newRot, double newRotWeight)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRobotConfiguration</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a1775720a85f826243379718218e8d53e</anchor>
      <arglist>(const iDynTree::Transform &amp;baseConfiguration, const iDynTree::VectorDynSize &amp;jointConfiguration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setJointConfiguration</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a8de8a8968ae6a9f79db1a97f5e34b529</anchor>
      <arglist>(const std::string &amp;jointName, const double jointConfiguration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotationParametrization</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a0cacbe18891573e85909ad4f8529a8a7</anchor>
      <arglist>(enum iDynTree::InverseKinematicsRotationParametrization parametrization)</arglist>
    </member>
    <member kind="function">
      <type>enum iDynTree::InverseKinematicsRotationParametrization</type>
      <name>rotationParametrization</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>aa8f65f9250c8a39ae91cf01bf28a40ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultTargetResolutionMode</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a68221784c17bc058ab124c0b0e3bb255</anchor>
      <arglist>(enum iDynTree::InverseKinematicsTreatTargetAsConstraint mode)</arglist>
    </member>
    <member kind="function">
      <type>enum iDynTree::InverseKinematicsTreatTargetAsConstraint</type>
      <name>defaultTargetResolutionMode</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a6c929ce2e94a2edfe1ea6393d2c77e0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetResolutionMode</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>aa9604e8cabf70ec1756c26f0584f9f50</anchor>
      <arglist>(TransformMap::iterator target, enum iDynTree::InverseKinematicsTreatTargetAsConstraint mode)</arglist>
    </member>
    <member kind="function">
      <type>enum iDynTree::InverseKinematicsTreatTargetAsConstraint</type>
      <name>targetResolutionMode</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>ad91ba72d38ca2329922b419a8fd506ac</anchor>
      <arglist>(TransformMap::iterator target) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveProblem</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>abf797e16ca56cefd1fc2bc649c7bc466</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::KinDynComputations &amp;</type>
      <name>dynamics</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a609b7464eadfda0e9d2a19f6cafc684e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoMTarget</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a18dc512e72d0edb7a641b461d412c80b</anchor>
      <arglist>(iDynTree::Position &amp;desiredPosition, double weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoMasConstraint</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a8ba499d6a8da51f087c2d3878217433b</anchor>
      <arglist>(bool asConstraint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCoMaConstraint</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a70d398a424a4c79ddb55922369e27d5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoMasConstraintTolerance</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>aacbe9650fd690849c7bcf68180ed9087</anchor>
      <arglist>(double TOL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCoMTargetActive</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a0d53088c887338434c5bc3c6dbacc002</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoMTargetInactive</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>aa0472bed5ec2d61dbcfce0d1c3d75373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>ad2c703e246c5b907ae5a14b87663d53d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Position</type>
      <name>desiredPosition</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a58ce0860edb833e14febda610033b18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>weight</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a307f0d0ec5fe9ba5eb1ae5f52964a7a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isConstraint</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>aba3c5703d491c180d01cadca1268ac45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>constraintTolerance</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a55ede29a25cf408ec8f466547277c0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>jointsConfiguration</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>ac6135b19b9e24243aa7ccc00ada69d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Transform</type>
      <name>basePose</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a4c1131f2ada255f618fe73539c883625</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>jointsVelocity</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a0a4751be8bec6a774b20e8b18e27aa36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Twist</type>
      <name>baseTwist</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a360f4630747b3002f968ae75cf86878d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Vector3</type>
      <name>worldGravity</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a9dbae09b4a9023cdd1fefe40029e1766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; bool &gt;</type>
      <name>fixedVariables</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a97cad77853f7e239528bde2569109fac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; int, int &gt;</type>
      <name>modelJointsToOptimisedJoints</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a551bf67bcc74fea5ec409ab90466fd42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Model</type>
      <name>reducedModel</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a2d70e60d20f8ba389e011c9604743161</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_problemInitialized</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a60936bb71ca4e3ea53ca44e96fcceaeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_warmStartEnabled</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>ae8710ffb11c91a94f1360721b28a5adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>m_numberOfOptimisationVariables</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a90341920f5d29195751eb0931a981322</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>m_numberOfOptimisationConstraints</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a6b5567abc4924be678b1dc3e56fe4701</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Ipopt::SmartPtr&lt; Ipopt::IpoptApplication &gt;</type>
      <name>m_solver</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a2dca851484e008c10320a02d7d0cade9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Ipopt::SmartPtr&lt; internal::kinematics::InverseKinematicsNLP &gt;</type>
      <name>m_nlpProblem</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>aad4430aa77416246314c5d41ee4988ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::KinDynComputations</type>
      <name>m_dynamics</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>acbc9211347dfeee1bdc82e5140411f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::pair&lt; double, double &gt; &gt;</type>
      <name>m_jointLimits</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a87c413903a500a5319abde355740b446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct internal::kinematics::InverseKinematicsData::@3</type>
      <name>m_state</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a5748b2b0f84fb59c9373fde20f2a74c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>m_dofs</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>ae446a497e865ef158f32710de466ee65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct internal::kinematics::InverseKinematicsData::@4</type>
      <name>m_reducedVariablesInfo</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>ae4cf18dee4bb212a17c71f3a3b9ca9fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum iDynTree::InverseKinematicsRotationParametrization</type>
      <name>m_rotationParametrization</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a4295e14928ac5b8c84ec92b56bfbdf51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TransformMap</type>
      <name>m_constraints</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>ae37acd832ddc894dbcbf6e0a7b888139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TransformMap</type>
      <name>m_targets</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a7bedc79c4659da0b1fc90b082adaf1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::ConvexHullProjectionConstraint</type>
      <name>m_comHullConstraint</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a534f2742aad51078cf6e2b73bf6bc870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Vector3</type>
      <name>m_comHullConstraint_projDirection</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a0ef3c95f7ce0571c33697bcd521672bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; iDynTree::FrameIndex &gt;</type>
      <name>m_comHullConstraint_supportFramesIndeces</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a1d19407e8046ab52dbc34452c2934536</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; iDynTree::Polygon &gt;</type>
      <name>m_comHullConstraint_supportPolygons</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>accffb6a1b2c7d84372b3816ef1fd6938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Direction</type>
      <name>m_comHullConstraint_xAxisOfPlaneInWorld</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a0e1f2fa42cee1d5ee1c694db3e62c7b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Direction</type>
      <name>m_comHullConstraint_yAxisOfPlaneInWorld</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a4132256ebe3a580e7bb1eda9abf33ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Position</type>
      <name>m_comHullConstraint_originOfPlaneInWorld</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a99641ebada8f16c9936bddd5af0b612d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>m_preferredJointsConfiguration</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>afd3c21e52af07cbe5eed2975f4ea1542</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>m_preferredJointsWeight</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>ace62864b8c7c036cb75e6f3596f49273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_areBaseInitialConditionsSet</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a9ad38c44a5a093e42cb9c5ebc63e5a6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InverseKinematicsInitialConditionType</type>
      <name>m_areJointsInitialConditionsSet</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>ab79288cfd4969f3cc6a41fcb48adde48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Transform</type>
      <name>m_baseInitialCondition</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a1728f63ac6b45c2d6a3f73c8c4d3cae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>m_jointInitialConditions</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>aba4b5878a101f3caa80bc054526b5864</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Transform</type>
      <name>m_baseResults</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a117727f00b1f90953223075c919c3a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>m_jointsResults</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a7adbbeff41e6897970f7630c7ec91822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>m_constraintMultipliers</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a558eb1949d06bae51c90b897f50ab0c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>m_lowerBoundMultipliers</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a7f5e2fa6e81d9fe3a3b9da4ce4a72bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>m_upperBoundMultipliers</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>aae45e2f08dd38410d10fd73430596b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_maxIter</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a378edafd34d7a45c086703785556ed1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_maxCpuTime</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>aea43ac497817357c6413a69102235e16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_tol</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a618a99cb734358131863f013698e6f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_constrTol</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a12d5cf9bda5ea843e13d7e02b7657477</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_verbosityLevel</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a80715d198159de4560e4675f284dca24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_solverName</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a9014bd8584d52f9d12e5d46b3702f505</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>InverseKinematicsNLP</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a3e938099323665b10a2f6adf3ff1af1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>iDynTree::InverseKinematics</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a2e7cf7577fbe42e01f4f1b0a29738859</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::KinDynComputations</type>
      <name>m_dynamics</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>acbc9211347dfeee1bdc82e5140411f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::pair&lt; double, double &gt; &gt;</type>
      <name>m_jointLimits</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a87c413903a500a5319abde355740b446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct internal::kinematics::InverseKinematicsData::@3</type>
      <name>m_state</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a5748b2b0f84fb59c9373fde20f2a74c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>m_dofs</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>ae446a497e865ef158f32710de466ee65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct internal::kinematics::InverseKinematicsData::@4</type>
      <name>m_reducedVariablesInfo</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>ae4cf18dee4bb212a17c71f3a3b9ca9fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum iDynTree::InverseKinematicsRotationParametrization</type>
      <name>m_rotationParametrization</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a4295e14928ac5b8c84ec92b56bfbdf51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TransformMap</type>
      <name>m_constraints</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>ae37acd832ddc894dbcbf6e0a7b888139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TransformMap</type>
      <name>m_targets</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a7bedc79c4659da0b1fc90b082adaf1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::ConvexHullProjectionConstraint</type>
      <name>m_comHullConstraint</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a534f2742aad51078cf6e2b73bf6bc870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Vector3</type>
      <name>m_comHullConstraint_projDirection</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a0ef3c95f7ce0571c33697bcd521672bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; iDynTree::FrameIndex &gt;</type>
      <name>m_comHullConstraint_supportFramesIndeces</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a1d19407e8046ab52dbc34452c2934536</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; iDynTree::Polygon &gt;</type>
      <name>m_comHullConstraint_supportPolygons</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>accffb6a1b2c7d84372b3816ef1fd6938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Direction</type>
      <name>m_comHullConstraint_xAxisOfPlaneInWorld</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a0e1f2fa42cee1d5ee1c694db3e62c7b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Direction</type>
      <name>m_comHullConstraint_yAxisOfPlaneInWorld</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a4132256ebe3a580e7bb1eda9abf33ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Position</type>
      <name>m_comHullConstraint_originOfPlaneInWorld</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a99641ebada8f16c9936bddd5af0b612d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>m_preferredJointsConfiguration</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>afd3c21e52af07cbe5eed2975f4ea1542</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>m_preferredJointsWeight</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>ace62864b8c7c036cb75e6f3596f49273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_areBaseInitialConditionsSet</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a9ad38c44a5a093e42cb9c5ebc63e5a6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InverseKinematicsInitialConditionType</type>
      <name>m_areJointsInitialConditionsSet</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>ab79288cfd4969f3cc6a41fcb48adde48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Transform</type>
      <name>m_baseInitialCondition</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a1728f63ac6b45c2d6a3f73c8c4d3cae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>m_jointInitialConditions</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>aba4b5878a101f3caa80bc054526b5864</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Transform</type>
      <name>m_baseResults</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a117727f00b1f90953223075c919c3a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>m_jointsResults</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a7adbbeff41e6897970f7630c7ec91822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>m_constraintMultipliers</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a558eb1949d06bae51c90b897f50ab0c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>m_lowerBoundMultipliers</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a7f5e2fa6e81d9fe3a3b9da4ce4a72bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>m_upperBoundMultipliers</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>aae45e2f08dd38410d10fd73430596b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_maxIter</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a378edafd34d7a45c086703785556ed1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_maxCpuTime</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>aea43ac497817357c6413a69102235e16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_tol</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a618a99cb734358131863f013698e6f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_constrTol</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a12d5cf9bda5ea843e13d7e02b7657477</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_verbosityLevel</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a80715d198159de4560e4675f284dca24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_solverName</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsData.html</anchorfile>
      <anchor>a9014bd8584d52f9d12e5d46b3702f505</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>internal::kinematics::InverseKinematicsNLP</name>
    <filename>classinternal_1_1kinematics_1_1InverseKinematicsNLP.html</filename>
    <member kind="function">
      <type></type>
      <name>InverseKinematicsNLP</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsNLP.html</anchorfile>
      <anchor>a66b4b7e061e263c77ed3b3522387873f</anchor>
      <arglist>(InverseKinematicsData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InverseKinematicsNLP</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsNLP.html</anchorfile>
      <anchor>aef6bb98ef77d15b8e07e7329a050acda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeInternalData</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsNLP.html</anchorfile>
      <anchor>a5101116fc4a577ac8a1fc3170e4cbaac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_nlp_info</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsNLP.html</anchorfile>
      <anchor>a21821db1562ab30d881428cc0c5d5098</anchor>
      <arglist>(Ipopt::Index &amp;n, Ipopt::Index &amp;m, Ipopt::Index &amp;nnz_jac_g, Ipopt::Index &amp;nnz_h_lag, IndexStyleEnum &amp;index_style)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_bounds_info</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsNLP.html</anchorfile>
      <anchor>a829c957b9ec760834ee88a281bdc4b41</anchor>
      <arglist>(Ipopt::Index n, Ipopt::Number *x_l, Ipopt::Number *x_u, Ipopt::Index m, Ipopt::Number *g_l, Ipopt::Number *g_u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_starting_point</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsNLP.html</anchorfile>
      <anchor>aeacc2af26f122cdd42c50b14110bd0c4</anchor>
      <arglist>(Ipopt::Index n, bool init_x, Ipopt::Number *x, bool init_z, Ipopt::Number *z_L, Ipopt::Number *z_U, Ipopt::Index m, bool init_lambda, Ipopt::Number *lambda)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>eval_f</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsNLP.html</anchorfile>
      <anchor>ad79df9616d544bbe13ec4b1131be9ac4</anchor>
      <arglist>(Ipopt::Index n, const Ipopt::Number *x, bool new_x, Ipopt::Number &amp;obj_value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>eval_grad_f</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsNLP.html</anchorfile>
      <anchor>a3952ff96b7b1308de50c5c228715a51c</anchor>
      <arglist>(Ipopt::Index n, const Ipopt::Number *x, bool new_x, Ipopt::Number *grad_f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>eval_g</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsNLP.html</anchorfile>
      <anchor>a82f273297f1204f0a29beebf715b9e16</anchor>
      <arglist>(Ipopt::Index n, const Ipopt::Number *x, bool new_x, Ipopt::Index m, Ipopt::Number *g)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>eval_jac_g</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsNLP.html</anchorfile>
      <anchor>aa53c79708bbce9f5728d9b67f13faf3c</anchor>
      <arglist>(Ipopt::Index n, const Ipopt::Number *x, bool new_x, Ipopt::Index m, Ipopt::Index nele_jac, Ipopt::Index *iRow, Ipopt::Index *jCol, Ipopt::Number *values)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>eval_h</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsNLP.html</anchorfile>
      <anchor>a45493ea2e04fbc335d39fef277d4a5f6</anchor>
      <arglist>(Ipopt::Index n, const Ipopt::Number *x, bool new_x, Ipopt::Number obj_factor, Ipopt::Index m, const Ipopt::Number *lambda, bool new_lambda, Ipopt::Index nele_hess, Ipopt::Index *iRow, Ipopt::Index *jCol, Ipopt::Number *values)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize_solution</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsNLP.html</anchorfile>
      <anchor>a2fcf3f955b707eff33f452761c22a4c0</anchor>
      <arglist>(Ipopt::SolverReturn status, Ipopt::Index n, const Ipopt::Number *x, const Ipopt::Number *z_L, const Ipopt::Number *z_U, Ipopt::Index m, const Ipopt::Number *g, const Ipopt::Number *lambda, Ipopt::Number obj_value, const Ipopt::IpoptData *ip_data, Ipopt::IpoptCalculatedQuantities *ip_cq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Ipopt::Index</type>
      <name>get_number_of_nonlinear_variables</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsNLP.html</anchorfile>
      <anchor>aac80c8de2bfa1ee2ad7bedd2bf2bdd09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_list_of_nonlinear_variables</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsNLP.html</anchorfile>
      <anchor>ad24bc8a14990bce2496480d8e5349b44</anchor>
      <arglist>(Ipopt::Index num_nonlin_vars, Ipopt::Index *pos_nonlin_vars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>intermediate_callback</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsNLP.html</anchorfile>
      <anchor>ac5724fcbb5e0abdd6bc818bf3f39c4d1</anchor>
      <arglist>(Ipopt::AlgorithmMode mode, Ipopt::Index iter, Ipopt::Number obj_value, Ipopt::Number inf_pr, Ipopt::Number inf_du, Ipopt::Number mu, Ipopt::Number d_norm, Ipopt::Number regularization_size, Ipopt::Number alpha_du, Ipopt::Number alpha_pr, Ipopt::Index ls_trials, const Ipopt::IpoptData *ip_data, Ipopt::IpoptCalculatedQuantities *ip_cq)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDerivatives</name>
      <anchorfile>classinternal_1_1kinematics_1_1InverseKinematicsNLP.html</anchorfile>
      <anchor>a9913323824e6cb6d8545b00f4073ca10</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;derivativePoint, int frameIndex, double epsilon, double tolerance, int parametrization)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KDL::CoDyCo::Regressors::IOnlineDynamicDataset</name>
    <filename>classKDL_1_1CoDyCo_1_1Regressors_1_1IOnlineDynamicDataset.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IOnlineDynamicDataset</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1IOnlineDynamicDataset.html</anchorfile>
      <anchor>a0e68d8e9544f3f8f315ae14627cef5e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getNewSample</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1IOnlineDynamicDataset.html</anchorfile>
      <anchor>a26a50eed36f930ef3301e1f86effa00a</anchor>
      <arglist>(DynamicSample &amp;sample)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isNewSampleAvailable</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1IOnlineDynamicDataset.html</anchorfile>
      <anchor>a50e2e64cd2adc22596dd93d7e546e66e</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimization::IpoptInterface</name>
    <filename>classiDynTree_1_1optimization_1_1IpoptInterface.html</filename>
    <base>iDynTree::optimization::Optimizer</base>
    <class kind="class">iDynTree::optimization::IpoptInterface::IpoptInterfaceImplementation</class>
    <member kind="function">
      <type></type>
      <name>IpoptInterface</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>afc28b4d7c9e2482ece5963e8a453432b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IpoptInterface</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>ac5141d4d0cc1750b5530b5b3b87a5c3b</anchor>
      <arglist>(const IpoptInterface &amp;other)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IpoptInterface</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>a50a0bde66c53d0f71143af633a262a19</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAvailable</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>a91f4b97eeae1f285d6c15cff00ab5b47</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setProblem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>a4234df6e37f068fad90e017da9b4d4e7</anchor>
      <arglist>(std::shared_ptr&lt; OptimizationProblem &gt; problem) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>solve</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>a5c5e6e405b1605134e1c62e17f53c621</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getPrimalVariables</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>ab88ba9440f4f11c057b0514bc7d539ff</anchor>
      <arglist>(VectorDynSize &amp;primalVariables) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getDualVariables</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>a6aa9534d0b4d0ff842961a4ebe5e6b90</anchor>
      <arglist>(VectorDynSize &amp;constraintsMultipliers, VectorDynSize &amp;lowerBoundsMultipliers, VectorDynSize &amp;upperBoundsMultipliers) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getOptimalCost</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>a041566e6b520b48e0f9cae1a54a15338</anchor>
      <arglist>(double &amp;optimalCost) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getOptimalConstraintsValues</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>a05e0c9f599ccfd2e80a973d0e796e1a3</anchor>
      <arglist>(VectorDynSize &amp;constraintsValues) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>minusInfinity</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>a20c8f4821c9166e1ce8e7f5cd73349a8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>plusInfinity</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>a8fb216655106afd95163924b82fc842b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useApproximatedHessians</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>aeb6dcdd584ba6f46ca39a34b9b3d3a0b</anchor>
      <arglist>(bool useApproximatedHessian=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setIpoptOption</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>a3395ca96ab34dc9fc645bcdabb2ca21b</anchor>
      <arglist>(const std::string &amp;tag, const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setIpoptOption</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>a4f2e4f994a9d83ef63e609607699ff2d</anchor>
      <arglist>(const std::string &amp;tag, double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setIpoptOption</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>afafe9474523cfbb132e5128cd575147c</anchor>
      <arglist>(const std::string &amp;tag, int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIpoptOption</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>af7878eb1face2a4f900b3e5590c39375</anchor>
      <arglist>(const std::string &amp;tag, std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIpoptOption</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>aa8d717a8662c0bbc8c7d4afa92121f31</anchor>
      <arglist>(const std::string &amp;tag, double &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIpoptOption</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface.html</anchorfile>
      <anchor>a6b4243557c1c55f140ca1cb7056019b0</anchor>
      <arglist>(const std::string &amp;tag, int &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::weak_ptr&lt; OptimizationProblem &gt;</type>
      <name>problem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>a6836c50c97f711451f5c0f011a2efddb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; OptimizationProblem &gt;</type>
      <name>m_problem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>ae3b9609d905cbbf3c3336c9350e94106</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimization::IpoptInterface::IpoptInterfaceImplementation</name>
    <filename>classiDynTree_1_1optimization_1_1IpoptInterface_1_1IpoptInterfaceImplementation.html</filename>
    <member kind="function">
      <type></type>
      <name>IpoptInterfaceImplementation</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface_1_1IpoptInterfaceImplementation.html</anchorfile>
      <anchor>a5899cd3288dfe3a32831ab473363d045</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>possibleReOptimize</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface_1_1IpoptInterfaceImplementation.html</anchorfile>
      <anchor>a684527c320b6667dc7c8ed0fb3d901e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Ipopt::SmartPtr&lt; NLPImplementation &gt;</type>
      <name>nlpPointer</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface_1_1IpoptInterfaceImplementation.html</anchorfile>
      <anchor>a6eec9fe733f5cbb9df9e0f21859d5d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Ipopt::SmartPtr&lt; Ipopt::IpoptApplication &gt;</type>
      <name>loader</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface_1_1IpoptInterfaceImplementation.html</anchorfile>
      <anchor>a7bd810990fc5879bc8a75487eaa2507f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>previousNumberOfVariables</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface_1_1IpoptInterfaceImplementation.html</anchorfile>
      <anchor>a9dae82d85b241ae2cb9f4eea953601c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>previousNumberOfConstraints</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface_1_1IpoptInterfaceImplementation.html</anchorfile>
      <anchor>a7320dc05349b6a32458b427ff7ce71a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>previousJacobianNonZeros</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface_1_1IpoptInterfaceImplementation.html</anchorfile>
      <anchor>a852066747da00a66f033011aef8ff72f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>previousHessianNonZeros</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface_1_1IpoptInterfaceImplementation.html</anchorfile>
      <anchor>aca1df4bc82d6de9413c938fa055bd1e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useApproximatedHessian</name>
      <anchorfile>classiDynTree_1_1optimization_1_1IpoptInterface_1_1IpoptInterfaceImplementation.html</anchorfile>
      <anchor>a1ce649f24fb59cb3330f908022adb9cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::details::is_allowed_element_type_conversion</name>
    <filename>structiDynTree_1_1details_1_1is__allowed__element__type__conversion.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>iDynTree::details::is_allowed_extent_conversion</name>
    <filename>structiDynTree_1_1details_1_1is__allowed__extent__conversion.html</filename>
    <templarg>From</templarg>
    <templarg>To</templarg>
  </compound>
  <compound kind="struct">
    <name>internal::kinematics::is_matrixfixsize</name>
    <filename>structinternal_1_1kinematics_1_1is__matrixfixsize.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>internal::kinematics::is_matrixfixsize&lt; iDynTree::MatrixFixSize&lt; row, col &gt; &gt;</name>
    <filename>structinternal_1_1kinematics_1_1is__matrixfixsize_3_01iDynTree_1_1MatrixFixSize_3_01row_00_01col_01_4_01_4.html</filename>
    <templarg>row</templarg>
    <templarg>col</templarg>
  </compound>
  <compound kind="struct">
    <name>cmdline::detail::is_same</name>
    <filename>structcmdline_1_1detail_1_1is__same.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structcmdline_1_1detail_1_1is__same.html</anchorfile>
      <anchor>aee0ed17263370d2446766f79c85c0f43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cmdline::detail::is_same&lt; T, T &gt;</name>
    <filename>structcmdline_1_1detail_1_1is__same_3_01T_00_01T_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structcmdline_1_1detail_1_1is__same_3_01T_00_01T_01_4.html</anchorfile>
      <anchor>a5640f6fc005b679b1e051f7e050205e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::details::is_span</name>
    <filename>structiDynTree_1_1details_1_1is__span.html</filename>
    <templarg></templarg>
    <base>is_span_oracle&lt; std::remove_cv_t&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>iDynTree::details::is_span_oracle</name>
    <filename>structiDynTree_1_1details_1_1is__span__oracle.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>iDynTree::details::is_span_oracle&lt; iDynTree::Span&lt; ElementType, Extent &gt; &gt;</name>
    <filename>structiDynTree_1_1details_1_1is__span__oracle_3_01iDynTree_1_1Span_3_01ElementType_00_01Extent_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Extent</templarg>
  </compound>
  <compound kind="class">
    <name>is_span_oracle&lt; std::remove_cv_t&lt; T &gt; &gt;</name>
    <filename>structiDynTree_1_1details_1_1is__span__oracle.html</filename>
  </compound>
  <compound kind="struct">
    <name>iDynTree::details::is_std_array</name>
    <filename>structiDynTree_1_1details_1_1is__std__array.html</filename>
    <templarg></templarg>
    <base>is_std_array_oracle&lt; std::remove_cv_t&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>iDynTree::details::is_std_array_oracle</name>
    <filename>structiDynTree_1_1details_1_1is__std__array__oracle.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>iDynTree::details::is_std_array_oracle&lt; std::array&lt; ElementType, Extent &gt; &gt;</name>
    <filename>structiDynTree_1_1details_1_1is__std__array__oracle_3_01std_1_1array_3_01ElementType_00_01Extent_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Extent</templarg>
  </compound>
  <compound kind="class">
    <name>is_std_array_oracle&lt; std::remove_cv_t&lt; T &gt; &gt;</name>
    <filename>structiDynTree_1_1details_1_1is__std__array__oracle.html</filename>
  </compound>
  <compound kind="class">
    <name>iDynTree::SparseMatrix::Iterator</name>
    <filename>classiDynTree_1_1SparseMatrix_1_1Iterator.html</filename>
    <class kind="class">iDynTree::SparseMatrix::Iterator::TripletRef</class>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1Iterator.html</anchorfile>
      <anchor>a116a4c928ec90f022493f19d8aa51b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iDynTree::SparseMatrix&lt; ordering &gt;::Iterator::TripletRef</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1Iterator.html</anchorfile>
      <anchor>a771a56e49407184b3625b07912dbbbbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1Iterator.html</anchorfile>
      <anchor>a137ace02de6dda2267e1e7043c65ea41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1Iterator.html</anchorfile>
      <anchor>a876c832e5902093b6b4d3ca6da8f4257</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::output_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1Iterator.html</anchorfile>
      <anchor>a5d15979d6978775e75f8da86869e9fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1Iterator.html</anchorfile>
      <anchor>a4a3f7f5187273fe2a81701c351352bdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>operator++</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1Iterator.html</anchorfile>
      <anchor>a0b694e01110e836aa3a5b67bb13f0fed</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1Iterator.html</anchorfile>
      <anchor>acd35f8327e10724fc97fd990be570f32</anchor>
      <arglist>(const Iterator &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1Iterator.html</anchorfile>
      <anchor>a45d0ea23aaee93e0e5a686811c24a738</anchor>
      <arglist>(const ConstIterator &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1Iterator.html</anchorfile>
      <anchor>a57d01398150390afd4c8e91d49f6ea13</anchor>
      <arglist>(const Iterator &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1Iterator.html</anchorfile>
      <anchor>a60b60be40293122adcc4ff224d016ae6</anchor>
      <arglist>(const ConstIterator &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1Iterator.html</anchorfile>
      <anchor>a8396d05122dd9d1ed6e9658f43e2919d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1Iterator.html</anchorfile>
      <anchor>a650f85b720f9a996f7c511947f3873c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1Iterator.html</anchorfile>
      <anchor>aab6c5403229cec2e99c4fc9a6400c381</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SensorsList::Iterator</name>
    <filename>classiDynTree_1_1SensorsList_1_1Iterator.html</filename>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1Iterator.html</anchorfile>
      <anchor>acd63c8936ef18a499d255dea8dfb02e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sensor *</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1Iterator.html</anchorfile>
      <anchor>a4cb639ed4277dbbb72e8e914716c56e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1Iterator.html</anchorfile>
      <anchor>aaaaafbaefb6d558c7ff69d941cf23799</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1Iterator.html</anchorfile>
      <anchor>a27b608e2970953bb33aaa36e41b93bfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::input_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1Iterator.html</anchorfile>
      <anchor>a7b70cbed3d3e8e5b7c9acc40de52c909</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1Iterator.html</anchorfile>
      <anchor>a676a2224816f967f9d10232da334358e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>operator++</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1Iterator.html</anchorfile>
      <anchor>acaae046840751e2a55a545ad1366052d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1Iterator.html</anchorfile>
      <anchor>a57b83b715355792198bd7b8faf970c18</anchor>
      <arglist>(const Iterator &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1Iterator.html</anchorfile>
      <anchor>a5defbc9d74da6789ac023f9b20e2079e</anchor>
      <arglist>(const ConstIterator &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1Iterator.html</anchorfile>
      <anchor>ac7fee212ad4f34a78e932e24e3ef0192</anchor>
      <arglist>(const Iterator &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1Iterator.html</anchorfile>
      <anchor>a374fb73ce7f4872b38cad2535a68b517</anchor>
      <arglist>(const ConstIterator &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1Iterator.html</anchorfile>
      <anchor>a2aea814c43fca4cc663abc8e5860e553</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1Iterator.html</anchorfile>
      <anchor>abfa761de2a19cf38c5b0df0d7b3864f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1Iterator.html</anchorfile>
      <anchor>a34845ec0b987f9cad52fa8690ac5125f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SensorsList</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1Iterator.html</anchorfile>
      <anchor>a51c57a31c0c18c18341920b6346dc830</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::IVectorsVisualization</name>
    <filename>classiDynTree_1_1IVectorsVisualization.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~IVectorsVisualization</name>
      <anchorfile>classiDynTree_1_1IVectorsVisualization.html</anchorfile>
      <anchor>a95150d434d5c609f844898f42776a6ea</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>addVector</name>
      <anchorfile>classiDynTree_1_1IVectorsVisualization.html</anchorfile>
      <anchor>add49aba200c78c11f67a7dea08476326</anchor>
      <arglist>(const Position &amp;origin, const Direction &amp;direction, double modulus)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>addVector</name>
      <anchorfile>classiDynTree_1_1IVectorsVisualization.html</anchorfile>
      <anchor>ac09f7374d877e8ded950f659542fb811</anchor>
      <arglist>(const Position &amp;origin, const Vector3 &amp;components)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>getNrOfVectors</name>
      <anchorfile>classiDynTree_1_1IVectorsVisualization.html</anchorfile>
      <anchor>a71d2f9cafe7dc0e15698d115a442f779</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getVector</name>
      <anchorfile>classiDynTree_1_1IVectorsVisualization.html</anchorfile>
      <anchor>a513d13c35619c80714c5f2fd987a5bc7</anchor>
      <arglist>(size_t vectorIndex, Position &amp;currentOrigin, Direction &amp;currentDirection, double &amp;currentModulus) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getVector</name>
      <anchorfile>classiDynTree_1_1IVectorsVisualization.html</anchorfile>
      <anchor>afb3836f141f9779146bd98896e7eff34</anchor>
      <arglist>(size_t vectorIndex, Position &amp;currentOrigin, Vector3 &amp;components) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>updateVector</name>
      <anchorfile>classiDynTree_1_1IVectorsVisualization.html</anchorfile>
      <anchor>a250b6e9d834891e9ab152cc0490cde56</anchor>
      <arglist>(size_t vectorIndex, const Position &amp;origin, const Direction &amp;direction, double modulus)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>updateVector</name>
      <anchorfile>classiDynTree_1_1IVectorsVisualization.html</anchorfile>
      <anchor>aad3c01c4d7ec9817d7328e3158a28c51</anchor>
      <arglist>(size_t vectorIndex, const Position &amp;origin, const Vector3 &amp;components)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setVectorColor</name>
      <anchorfile>classiDynTree_1_1IVectorsVisualization.html</anchorfile>
      <anchor>a3a84596b129fbb0755fe64629cf5b414</anchor>
      <arglist>(size_t vectorIndex, const ColorViz &amp;vectorColor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setVectorsAspect</name>
      <anchorfile>classiDynTree_1_1IVectorsVisualization.html</anchorfile>
      <anchor>a7eab12835526d138fbd89df44176e329</anchor>
      <arglist>(double zeroModulusRadius, double modulusMultiplier, double heightScale)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::JetsVisualization</name>
    <filename>classiDynTree_1_1JetsVisualization.html</filename>
    <base>iDynTree::IJetsVisualization</base>
    <member kind="function">
      <type></type>
      <name>JetsVisualization</name>
      <anchorfile>classiDynTree_1_1JetsVisualization.html</anchorfile>
      <anchor>a75f28fbed666b41ff2f83886024bc470</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classiDynTree_1_1JetsVisualization.html</anchorfile>
      <anchor>ae096f6a7a056fbdea68f25e992e106fd</anchor>
      <arglist>(irr::scene::ISceneManager *smgr, ModelVisualization *modelViz, std::vector&lt; irr::scene::ISceneNode *&gt; *framesNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JetsVisualization</name>
      <anchorfile>classiDynTree_1_1JetsVisualization.html</anchorfile>
      <anchor>a164b23f26605a03498f4410ec4c35268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setJetsFrames</name>
      <anchorfile>classiDynTree_1_1JetsVisualization.html</anchorfile>
      <anchor>a7340934781727e1b8d461482dfde8c76</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;jetsFrames)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getNrOfJets</name>
      <anchorfile>classiDynTree_1_1JetsVisualization.html</anchorfile>
      <anchor>a3f1db4f770dfc4103caa6ee7c51e313b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Direction</type>
      <name>getJetDirection</name>
      <anchorfile>classiDynTree_1_1JetsVisualization.html</anchorfile>
      <anchor>aa8a1f5f4685c68666fe1088626825305</anchor>
      <arglist>(const int jetIndex) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setJetDirection</name>
      <anchorfile>classiDynTree_1_1JetsVisualization.html</anchorfile>
      <anchor>ab0a999964dfd4e458b1e7188ea16902a</anchor>
      <arglist>(const int jetIndex, const Direction &amp;jetDirection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setJetColor</name>
      <anchorfile>classiDynTree_1_1JetsVisualization.html</anchorfile>
      <anchor>a156cda60952896b9123ccc1946222402</anchor>
      <arglist>(const int jetIndex, const ColorViz &amp;jetColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setJetsDimensions</name>
      <anchorfile>classiDynTree_1_1JetsVisualization.html</anchorfile>
      <anchor>ae33eac745d9baa59a662cce759ed3388</anchor>
      <arglist>(const double &amp;minRadius, const double &amp;maxRadius, const double &amp;maxLenght)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setJetsIntensity</name>
      <anchorfile>classiDynTree_1_1JetsVisualization.html</anchorfile>
      <anchor>a7c6a2f93c5110dcf62cc894442923d96</anchor>
      <arglist>(const VectorDynSize &amp;jetsIntensity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::JointDOFsDoubleArray</name>
    <filename>classiDynTree_1_1JointDOFsDoubleArray.html</filename>
    <base>iDynTree::VectorDynSize</base>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a0bfc17c328f9cbb2a63b501edb09cc6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a3ea2fb7a1554fed00d992b005b6c661a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a4ade79723371cd1b3b3d7bbdf17d9e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>afa55464b73d97865bb3c070a3fa53b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointDOFsDoubleArray</name>
      <anchorfile>classiDynTree_1_1JointDOFsDoubleArray.html</anchorfile>
      <anchor>a4f09c2e27f1de6be7a25c0867b0f2af5</anchor>
      <arglist>(unsigned int nrOfDOFs=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointDOFsDoubleArray</name>
      <anchorfile>classiDynTree_1_1JointDOFsDoubleArray.html</anchorfile>
      <anchor>ad7958cfaaf7c23a2e1ec0133f5be3109</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1JointDOFsDoubleArray.html</anchorfile>
      <anchor>ad140928fb54fff35c5be297a3be2fcc9</anchor>
      <arglist>(unsigned int nrOfDOFs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1JointDOFsDoubleArray.html</anchorfile>
      <anchor>a788595cebd4af5791674c4f4b506f82e</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1JointDOFsDoubleArray.html</anchorfile>
      <anchor>a634466c96b990921ee045b50d269acb0</anchor>
      <arglist>(const iDynTree::Model &amp;model) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JointDOFsDoubleArray</name>
      <anchorfile>classiDynTree_1_1JointDOFsDoubleArray.html</anchorfile>
      <anchor>af32950db5c4fedbd963cdc7e7a2fb982</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a3f79e2f73308baf60b5dd01cce2adccb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ae89128b2aa30a63d30286e89f599672f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ad264c9a85bf7adbd308627b0e719d65f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a8686d610d4561c14d61674589f01504a</anchor>
      <arglist>(const unsigned int newCapacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>adb3205ed58008a5d54c9cd84b155d6e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>adb08f82f775b84bd0e0f8964b5c42dc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBuffer</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a1f435e6b594f64f058059df2e63434f8</anchor>
      <arglist>(double *buf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a6b2272000a38902034f260bed6ebf72f</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a1ecdfb8aac18f58044f9f07bbd5361b6</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a279bf38d182b1e8b184ec0c778ff25ba</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a6d76c5a49c6316be7c509a3d5b18b572</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a26db894130286e61d308b8e31e746929</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>aa04a369bac2d9cd48918f27fffe64322</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a2a8ee12197ac411e775b320cc09d43c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ae4f23d980b16dac5b100ec8eaa37f848</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>af1d48bf5aac5f4cf8c87e3ac161d2523</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>changeCapacityAndCopyData</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>abc961e3e048e7202d5d9712777c7a0a4</anchor>
      <arglist>(const unsigned int _newCapacity)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a5b4afa8d10714a7343f53d5a6c4ddecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_size</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ab11875d43023b752e38453c8f3ef8b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_capacity</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ad9c51ce2b2797b7ae7bec622812aec75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a6b2272000a38902034f260bed6ebf72f</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a1ecdfb8aac18f58044f9f07bbd5361b6</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a279bf38d182b1e8b184ec0c778ff25ba</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a6d76c5a49c6316be7c509a3d5b18b572</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a26db894130286e61d308b8e31e746929</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>aa04a369bac2d9cd48918f27fffe64322</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a2a8ee12197ac411e775b320cc09d43c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a0bfc17c328f9cbb2a63b501edb09cc6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a3ea2fb7a1554fed00d992b005b6c661a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a4ade79723371cd1b3b3d7bbdf17d9e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>afa55464b73d97865bb3c070a3fa53b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ae4f23d980b16dac5b100ec8eaa37f848</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>af1d48bf5aac5f4cf8c87e3ac161d2523</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::JointElement</name>
    <filename>classiDynTree_1_1JointElement.html</filename>
    <base>iDynTree::XMLElement</base>
    <class kind="struct">iDynTree::JointElement::JointInfo</class>
    <member kind="function">
      <type></type>
      <name>JointElement</name>
      <anchorfile>classiDynTree_1_1JointElement.html</anchorfile>
      <anchor>a71610159d5c52264e323143081ef9c0a</anchor>
      <arglist>(std::unordered_map&lt; std::string, JointElement::JointInfo &gt; &amp;joints, std::unordered_map&lt; std::string, JointElement::JointInfo &gt; &amp;fixedJoints)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAttributes</name>
      <anchorfile>classiDynTree_1_1JointElement.html</anchorfile>
      <anchor>a48e357fff5a0e1fb9899792b4192960d</anchor>
      <arglist>(const std::unordered_map&lt; std::string, std::shared_ptr&lt; XMLAttribute &gt;&gt; &amp;attributes) override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; XMLElement &gt;</type>
      <name>childElementForName</name>
      <anchorfile>classiDynTree_1_1JointElement.html</anchorfile>
      <anchor>afe04208a176932586c77ad5201ed5bf9</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>exitElementScope</name>
      <anchorfile>classiDynTree_1_1JointElement.html</anchorfile>
      <anchor>a533db964a71b47fa47eb22ec8cee0b3a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ab40851b7629a74107f2183ca36e412e4</anchor>
      <arglist>(std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a16759fb450635662dced0eb2ace0228b</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChildHasBeenParsedCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a69171cc4b5c552b97f44375029356a2e</anchor>
      <arglist>(std::function&lt; void(std::shared_ptr&lt; XMLElement &gt;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt;</type>
      <name>attributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2a182ac17f5e644b113a67e02c3595e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; void()&gt;</type>
      <name>exitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a04ea33b2a4ebf84647fb6d38e24ba0e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a7129fb1e69a5bc819872e65d3965296d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; XMLElement &gt; &gt;</type>
      <name>children</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2f51748fc6eed4724e86dc5e52ebd5ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt; &gt;</type>
      <name>attributes</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a27347aca070a5dfc250077b6cc3e3748</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>childHasBeenParsed</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ac92ce9b144b27970e09f6f9dff77f251</anchor>
      <arglist>(std::shared_ptr&lt; XMLElement &gt; parsedChild)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setAttributes</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a9dc312559f13e9d78d10ddc2242ac27d</anchor>
      <arglist>(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;attributes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsedCharacters</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a949bcf8e3496896d2b6d7d6da72870a7</anchor>
      <arglist>(const std::string &amp;characters)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParsedTextContent</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>abebc95353394912e187ad70e6078fcdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a3d8e1b737e614b35e3df0a4f76ac645b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::JointElement::JointInfo</name>
    <filename>structiDynTree_1_1JointElement_1_1JointInfo.html</filename>
    <member kind="variable">
      <type>std::shared_ptr&lt; IJoint &gt;</type>
      <name>joint</name>
      <anchorfile>structiDynTree_1_1JointElement_1_1JointInfo.html</anchorfile>
      <anchor>abdef7db922e065f44be965be7c2abb90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Axis</type>
      <name>axis</name>
      <anchorfile>structiDynTree_1_1JointElement_1_1JointInfo.html</anchorfile>
      <anchor>adfd0d29071e4d58fd7f7a16931e61984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>parentLinkName</name>
      <anchorfile>structiDynTree_1_1JointElement_1_1JointInfo.html</anchorfile>
      <anchor>a9cf00a788a755396d038e6a689dfabdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>childLinkName</name>
      <anchorfile>structiDynTree_1_1JointElement_1_1JointInfo.html</anchorfile>
      <anchor>ab5f290de2faa0b6c57fe348a1221abe0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::JointPosDoubleArray</name>
    <filename>classiDynTree_1_1JointPosDoubleArray.html</filename>
    <base>iDynTree::VectorDynSize</base>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a0bfc17c328f9cbb2a63b501edb09cc6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a3ea2fb7a1554fed00d992b005b6c661a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a4ade79723371cd1b3b3d7bbdf17d9e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>afa55464b73d97865bb3c070a3fa53b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointPosDoubleArray</name>
      <anchorfile>classiDynTree_1_1JointPosDoubleArray.html</anchorfile>
      <anchor>abd918d8072aa8da7307638a94128add7</anchor>
      <arglist>(unsigned int nrOfDOFs=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointPosDoubleArray</name>
      <anchorfile>classiDynTree_1_1JointPosDoubleArray.html</anchorfile>
      <anchor>a2207e3341616d0bf392aa93de89de1e2</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1JointPosDoubleArray.html</anchorfile>
      <anchor>a787f0756cdd35ca32e8039031d1fc469</anchor>
      <arglist>(unsigned int nrOfDOFs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1JointPosDoubleArray.html</anchorfile>
      <anchor>a61439b6f58feac5dca9b2062c2cc1457</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1JointPosDoubleArray.html</anchorfile>
      <anchor>a78911c1ffd581937c6017ef74b6bbe0f</anchor>
      <arglist>(const iDynTree::Model &amp;model) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JointPosDoubleArray</name>
      <anchorfile>classiDynTree_1_1JointPosDoubleArray.html</anchorfile>
      <anchor>a6927f9ed20083812efd426e917e1643f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a3f79e2f73308baf60b5dd01cce2adccb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ae89128b2aa30a63d30286e89f599672f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ad264c9a85bf7adbd308627b0e719d65f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a8686d610d4561c14d61674589f01504a</anchor>
      <arglist>(const unsigned int newCapacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>adb3205ed58008a5d54c9cd84b155d6e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>adb08f82f775b84bd0e0f8964b5c42dc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBuffer</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a1f435e6b594f64f058059df2e63434f8</anchor>
      <arglist>(double *buf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a6b2272000a38902034f260bed6ebf72f</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a1ecdfb8aac18f58044f9f07bbd5361b6</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a279bf38d182b1e8b184ec0c778ff25ba</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a6d76c5a49c6316be7c509a3d5b18b572</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a26db894130286e61d308b8e31e746929</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>aa04a369bac2d9cd48918f27fffe64322</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a2a8ee12197ac411e775b320cc09d43c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ae4f23d980b16dac5b100ec8eaa37f848</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>af1d48bf5aac5f4cf8c87e3ac161d2523</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>changeCapacityAndCopyData</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>abc961e3e048e7202d5d9712777c7a0a4</anchor>
      <arglist>(const unsigned int _newCapacity)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a5b4afa8d10714a7343f53d5a6c4ddecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_size</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ab11875d43023b752e38453c8f3ef8b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_capacity</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ad9c51ce2b2797b7ae7bec622812aec75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a6b2272000a38902034f260bed6ebf72f</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a1ecdfb8aac18f58044f9f07bbd5361b6</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a279bf38d182b1e8b184ec0c778ff25ba</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a6d76c5a49c6316be7c509a3d5b18b572</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a26db894130286e61d308b8e31e746929</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>aa04a369bac2d9cd48918f27fffe64322</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a2a8ee12197ac411e775b320cc09d43c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a0bfc17c328f9cbb2a63b501edb09cc6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a3ea2fb7a1554fed00d992b005b6c661a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a4ade79723371cd1b3b3d7bbdf17d9e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>afa55464b73d97865bb3c070a3fa53b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ae4f23d980b16dac5b100ec8eaa37f848</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>af1d48bf5aac5f4cf8c87e3ac161d2523</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::JointSensor</name>
    <filename>classiDynTree_1_1JointSensor.html</filename>
    <base>iDynTree::Sensor</base>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~JointSensor</name>
      <anchorfile>classiDynTree_1_1JointSensor.html</anchorfile>
      <anchor>ae8b95913e3a3cef12b6a0fc273aafce9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getParentJoint</name>
      <anchorfile>classiDynTree_1_1JointSensor.html</anchorfile>
      <anchor>a977c869c83855c1373687ef937ff32c4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getParentJointIndex</name>
      <anchorfile>classiDynTree_1_1JointSensor.html</anchorfile>
      <anchor>a4f17aa11edae7e3de37f4e4f86bff2a9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setParentJoint</name>
      <anchorfile>classiDynTree_1_1JointSensor.html</anchorfile>
      <anchor>a132037b450bd1e276d123066560de435</anchor>
      <arglist>(const std::string &amp;parentJointName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setParentJointIndex</name>
      <anchorfile>classiDynTree_1_1JointSensor.html</anchorfile>
      <anchor>a9a2c6d46db99a63cee3a5bd1b7306227</anchor>
      <arglist>(const int &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1JointSensor.html</anchorfile>
      <anchor>a66db330971a8de5fb7bb4503508a44fe</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>a4a62adb1d4c1e4bedca8762783ab0468</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SensorType</type>
      <name>getSensorType</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>a6dd712921c150fddd33217694feb3652</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>ace89679ad53fd11326ec00dc82ebd925</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setName</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>a40cafcac5f0c1567e44d53c775641818</anchor>
      <arglist>(const std::string &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Sensor *</type>
      <name>clone</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>a6428f5534e54c607bc5e773073c6c50e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>updateIndices</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>ae91fc5a5922a99815b0cdc9de9f1ac88</anchor>
      <arglist>(const Model &amp;model)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>updateIndeces</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>af70d378d9a03ea209587a3a9b86b4061</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointStateSubscriber</name>
    <filename>classJointStateSubscriber.html</filename>
    <member kind="function">
      <type></type>
      <name>JointStateSubscriber</name>
      <anchorfile>classJointStateSubscriber.html</anchorfile>
      <anchor>a538643abd929d49216aced2f1e4d3f34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classJointStateSubscriber.html</anchorfile>
      <anchor>a8145664446c3d5727cddcd1750614ba1</anchor>
      <arglist>(YARPRobotStatePublisherModule *module)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onRead</name>
      <anchorfile>classJointStateSubscriber.html</anchorfile>
      <anchor>a0c24e1717b85a78e7caeef38ea322ba8</anchor>
      <arglist>(yarp::rosmsg::sensor_msgs::JointState &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::KinDynComputations</name>
    <filename>classiDynTree_1_1KinDynComputations.html</filename>
    <class kind="struct">iDynTree::KinDynComputations::KinDynComputationsPrivateAttributes</class>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfDegreesOfFreedom</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>aaf27395b392c1651654bf61d0107287c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfDegreeOfFreedom</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ace7894188401ccfeb50fc0fd5146b810</anchor>
      <arglist>(int dof_index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDescriptionOfDegreesOfFreedom</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a13eee94c29946fb4fd18c1abad76a1d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfLinks</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ac2f26f2439d05a037905959055552e42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfFrames</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a79b55ab2338ec73bf5175fd475f819b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getFloatingBase</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a4b090dbfb91d4d9e8c98814778ec5abc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFloatingBase</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a76b26b97933c562c11e88ab3f50bc06b</anchor>
      <arglist>(const std::string &amp;floatingBaseName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KinDynComputations</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ae5a13daafda43dd17c1def2441a1bba3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KinDynComputations</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a39b92f7c3feeb36e376aa1b9657306a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadRobotModel</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a7bdd14859e449649042bd7e385472c31</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadRobotModelFromFile</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ae191acaae5f420e35f35b1d41d3edc32</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;filetype=&quot;urdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadRobotModelFromString</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a5e87a4fd9bbe3160aa9248870a733a34</anchor>
      <arglist>(const std::string &amp;modelString, const std::string &amp;filetype=&quot;urdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>af5af27e0e4abc79c254f71d3bc0ce11c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFrameVelocityRepresentation</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>adf6af09df5e4d22c516fcbb59bbdd37c</anchor>
      <arglist>(const FrameVelocityRepresentation frameVelRepr) const</arglist>
    </member>
    <member kind="function">
      <type>FrameVelocityRepresentation</type>
      <name>getFrameVelocityRepresentation</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a4de3c793ac2cb9f2e4e06cce68b45d0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Model &amp;</type>
      <name>model</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a36eda06a1a8aaf30d427e091db09e1d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Model &amp;</type>
      <name>getRobotModel</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a9ce824b898ed0988641c4e28072980d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRelativeJacobianSparsityPattern</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a9c1ca970b8cf2f90c3ad3199b4534fec</anchor>
      <arglist>(const iDynTree::FrameIndex refFrameIndex, const iDynTree::FrameIndex frameIndex, iDynTree::MatrixDynSize &amp;outJacobianPattern) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFrameFreeFloatingJacobianSparsityPattern</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>aff41a13a18c7b716ba0273440a6b96b7</anchor>
      <arglist>(const FrameIndex frameIndex, iDynTree::MatrixDynSize &amp;outJacobianPattern) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setJointPos</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a55c2232d8d0069af6a3e80d0f901be02</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRobotState</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a2e499491547624639c1765216e0d1f38</anchor>
      <arglist>(const iDynTree::Transform &amp;world_T_base, const iDynTree::VectorDynSize &amp;s, const iDynTree::Twist &amp;base_velocity, const iDynTree::VectorDynSize &amp;s_dot, const iDynTree::Vector3 &amp;world_gravity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRobotState</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>adee49677666e96c5d4253e919a7a1fa4</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;s, const iDynTree::VectorDynSize &amp;s_dot, const iDynTree::Vector3 &amp;world_gravity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRobotState</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a24f941538023d1ed481839cf83274833</anchor>
      <arglist>(iDynTree::Transform &amp;world_T_base, iDynTree::VectorDynSize &amp;s, iDynTree::Twist &amp;base_velocity, iDynTree::VectorDynSize &amp;s_dot, iDynTree::Vector3 &amp;world_gravity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRobotState</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a78398ff7a6a6726c1fd06e75fe2f32ed</anchor>
      <arglist>(iDynTree::VectorDynSize &amp;s, iDynTree::VectorDynSize &amp;s_dot, iDynTree::Vector3 &amp;world_gravity)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Transform</type>
      <name>getWorldBaseTransform</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>aaf67131f018787d468a046b819b98153</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Twist</type>
      <name>getBaseTwist</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>afa34be8324e197545d9aacb617518957</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getJointPos</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a3154c238fcccc126e56d95e40e2fd832</anchor>
      <arglist>(iDynTree::VectorDynSize &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getJointVel</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a8dc16158dc1e36ebbb75cc8423b9f681</anchor>
      <arglist>(iDynTree::VectorDynSize &amp;dq)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getModelVel</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a8b69d1cbd83f031a8237015f5d8a9fe3</anchor>
      <arglist>(iDynTree::VectorDynSize &amp;nu)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFrameIndex</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a19d27b90072389664c33941f51a52c70</anchor>
      <arglist>(const std::string &amp;frameName) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getFrameName</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ad7d6d737d0bda18efbfa216dbf6b3063</anchor>
      <arglist>(const iDynTree::FrameIndex frameIndex) const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Transform</type>
      <name>getWorldTransform</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ac71f8e4aaa16c99bcf2f8347005b8def</anchor>
      <arglist>(const iDynTree::FrameIndex frameIndex)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Transform</type>
      <name>getWorldTransform</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a236cb03f10e4b63e05c7a2607b28c798</anchor>
      <arglist>(std::string frameName)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Transform</type>
      <name>getRelativeTransform</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ae9f6e6896de67e035b3fc079a8938065</anchor>
      <arglist>(const iDynTree::FrameIndex refFrameIndex, const iDynTree::FrameIndex frameIndex)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Transform</type>
      <name>getRelativeTransformExplicit</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>af35ca9a0b82e0481a477ae8717c10ff2</anchor>
      <arglist>(const iDynTree::FrameIndex refFrameOriginIndex, const iDynTree::FrameIndex refFrameOrientationIndex, const iDynTree::FrameIndex frameOriginIndex, const iDynTree::FrameIndex frameOrientationIndex)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Transform</type>
      <name>getRelativeTransform</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ac3ecbeac1dcc2e24a5838e77635fceb5</anchor>
      <arglist>(const std::string &amp;refFrameName, const std::string &amp;frameName)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Twist</type>
      <name>getFrameVel</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>aea16ad7159ce0b16bdcfa516ce5fdb01</anchor>
      <arglist>(const std::string &amp;frameName)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Twist</type>
      <name>getFrameVel</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a9b23fc2024f7ba9589d2a37ec979ac87</anchor>
      <arglist>(const FrameIndex frameIdx)</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>getFrameAcc</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ae41acdeb26c2cc2b5d93f35c2dc0f3ce</anchor>
      <arglist>(const std::string &amp;frameName, const Vector6 &amp;baseAcc, const VectorDynSize &amp;s_ddot)</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>getFrameAcc</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a543031fbdf0de765c40b4a47e7d8ef38</anchor>
      <arglist>(const FrameIndex frameIdx, const Vector6 &amp;baseAcc, const VectorDynSize &amp;s_ddot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFrameFreeFloatingJacobian</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a27ae295bad4b1a53f7b26dc454edd52b</anchor>
      <arglist>(const std::string &amp;frameName, iDynTree::MatrixDynSize &amp;outJacobian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFrameFreeFloatingJacobian</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ae189be17f94340a7c39c4f4fb525dc78</anchor>
      <arglist>(const FrameIndex frameIndex, iDynTree::MatrixDynSize &amp;outJacobian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRelativeJacobian</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a394d5696059c00b5d2d7692e19333364</anchor>
      <arglist>(const iDynTree::FrameIndex refFrameIndex, const iDynTree::FrameIndex frameIndex, iDynTree::MatrixDynSize &amp;outJacobian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRelativeJacobianExplicit</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ad45015bd388547de9f694144c28f9316</anchor>
      <arglist>(const iDynTree::FrameIndex refFrameIndex, const iDynTree::FrameIndex frameIndex, const iDynTree::FrameIndex expressedOriginFrameIndex, const iDynTree::FrameIndex expressedOrientationFrameIndex, iDynTree::MatrixDynSize &amp;outJacobian)</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>getFrameBiasAcc</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a81f83749d1b0d4a7c68cfea82ef0491c</anchor>
      <arglist>(const FrameIndex frameIdx)</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>getFrameBiasAcc</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>afa27f56b8951ecf8a3dd6edc34bd6482</anchor>
      <arglist>(const std::string &amp;frameName)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Position</type>
      <name>getCenterOfMassPosition</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a56f9da747a7ac415b1bbfb23d0b8a6d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Vector3</type>
      <name>getCenterOfMassVelocity</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a34f26fac990790f72f0b230cd1c70707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getCenterOfMassJacobian</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ac320cbe545e36b4d00c0f63f528e578b</anchor>
      <arglist>(MatrixDynSize &amp;comJacobian)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>getCenterOfMassBiasAcc</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a72b9d5992f44b1edca55d3067e6935fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Twist</type>
      <name>getAverageVelocity</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a9149e7d3dc280e3fd777998c465c9016</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAverageVelocityJacobian</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ad072dff147fe9cd88a09e687d7aad746</anchor>
      <arglist>(MatrixDynSize &amp;avgVelocityJacobian)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Twist</type>
      <name>getCentroidalAverageVelocity</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a34bbffb6ebad16f6bf980493fdf329ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getCentroidalAverageVelocityJacobian</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a8b6ff477fc86c5c4135ccb9359709877</anchor>
      <arglist>(MatrixDynSize &amp;centroidalAvgVelocityJacobian)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SpatialMomentum</type>
      <name>getLinearAngularMomentum</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ad0399a36b1167706f317ce1e861c2ca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLinearAngularMomentumJacobian</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a25056bf8ed51001c1fdb3a730f44d425</anchor>
      <arglist>(MatrixDynSize &amp;linAngMomentumJacobian)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SpatialMomentum</type>
      <name>getCentroidalTotalMomentum</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a841789cb471c094591c298c47c1181db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFreeFloatingMassMatrix</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a8103b966509c9ef696d76b9e1221b16a</anchor>
      <arglist>(MatrixDynSize &amp;freeFloatingMassMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inverseDynamics</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a60870f0f43c035fc63527ad42394f963</anchor>
      <arglist>(const Vector6 &amp;baseAcc, const VectorDynSize &amp;s_ddot, const LinkNetExternalWrenches &amp;linkExtForces, FreeFloatingGeneralizedTorques &amp;baseForceAndJointTorques)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>generalizedBiasForces</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a36e267abacd5773178bae3c2b6c26faa</anchor>
      <arglist>(FreeFloatingGeneralizedTorques &amp;generalizedBiasForces)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>generalizedGravityForces</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a9033e15503c5befbd0d5107038ac37f9</anchor>
      <arglist>(FreeFloatingGeneralizedTorques &amp;generalizedGravityForces)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>generalizedExternalForces</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a5a30a1e975f9510ef1b8fa605d0c6c03</anchor>
      <arglist>(const LinkNetExternalWrenches &amp;linkExtForces, FreeFloatingGeneralizedTorques &amp;generalizedExternalForces)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inverseDynamicsInertialParametersRegressor</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a2945d5222c617680fc262ae01dca0f23</anchor>
      <arglist>(const Vector6 &amp;baseAcc, const VectorDynSize &amp;s_ddot, MatrixDynSize &amp;baseForceAndJointTorquesRegressor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KinDynComputations</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ae5a13daafda43dd17c1def2441a1bba3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KinDynComputations</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a39b92f7c3feeb36e376aa1b9657306a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadRobotModel</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a7bdd14859e449649042bd7e385472c31</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadRobotModelFromFile</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ae191acaae5f420e35f35b1d41d3edc32</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;filetype=&quot;urdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadRobotModelFromString</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a5e87a4fd9bbe3160aa9248870a733a34</anchor>
      <arglist>(const std::string &amp;modelString, const std::string &amp;filetype=&quot;urdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>af5af27e0e4abc79c254f71d3bc0ce11c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFrameVelocityRepresentation</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>adf6af09df5e4d22c516fcbb59bbdd37c</anchor>
      <arglist>(const FrameVelocityRepresentation frameVelRepr) const</arglist>
    </member>
    <member kind="function">
      <type>FrameVelocityRepresentation</type>
      <name>getFrameVelocityRepresentation</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a4de3c793ac2cb9f2e4e06cce68b45d0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Model &amp;</type>
      <name>model</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a36eda06a1a8aaf30d427e091db09e1d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Model &amp;</type>
      <name>getRobotModel</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a9ce824b898ed0988641c4e28072980d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRelativeJacobianSparsityPattern</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a9c1ca970b8cf2f90c3ad3199b4534fec</anchor>
      <arglist>(const iDynTree::FrameIndex refFrameIndex, const iDynTree::FrameIndex frameIndex, iDynTree::MatrixDynSize &amp;outJacobianPattern) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFrameFreeFloatingJacobianSparsityPattern</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>aff41a13a18c7b716ba0273440a6b96b7</anchor>
      <arglist>(const FrameIndex frameIndex, iDynTree::MatrixDynSize &amp;outJacobianPattern) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setJointPos</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a55c2232d8d0069af6a3e80d0f901be02</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRobotState</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a2e499491547624639c1765216e0d1f38</anchor>
      <arglist>(const iDynTree::Transform &amp;world_T_base, const iDynTree::VectorDynSize &amp;s, const iDynTree::Twist &amp;base_velocity, const iDynTree::VectorDynSize &amp;s_dot, const iDynTree::Vector3 &amp;world_gravity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRobotState</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>adee49677666e96c5d4253e919a7a1fa4</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;s, const iDynTree::VectorDynSize &amp;s_dot, const iDynTree::Vector3 &amp;world_gravity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRobotState</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a24f941538023d1ed481839cf83274833</anchor>
      <arglist>(iDynTree::Transform &amp;world_T_base, iDynTree::VectorDynSize &amp;s, iDynTree::Twist &amp;base_velocity, iDynTree::VectorDynSize &amp;s_dot, iDynTree::Vector3 &amp;world_gravity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRobotState</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a78398ff7a6a6726c1fd06e75fe2f32ed</anchor>
      <arglist>(iDynTree::VectorDynSize &amp;s, iDynTree::VectorDynSize &amp;s_dot, iDynTree::Vector3 &amp;world_gravity)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Transform</type>
      <name>getWorldBaseTransform</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>aaf67131f018787d468a046b819b98153</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Twist</type>
      <name>getBaseTwist</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>afa34be8324e197545d9aacb617518957</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getJointPos</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a3154c238fcccc126e56d95e40e2fd832</anchor>
      <arglist>(iDynTree::VectorDynSize &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getJointVel</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a8dc16158dc1e36ebbb75cc8423b9f681</anchor>
      <arglist>(iDynTree::VectorDynSize &amp;dq)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getModelVel</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a8b69d1cbd83f031a8237015f5d8a9fe3</anchor>
      <arglist>(iDynTree::VectorDynSize &amp;nu)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFrameIndex</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a19d27b90072389664c33941f51a52c70</anchor>
      <arglist>(const std::string &amp;frameName) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getFrameName</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ad7d6d737d0bda18efbfa216dbf6b3063</anchor>
      <arglist>(const iDynTree::FrameIndex frameIndex) const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Transform</type>
      <name>getWorldTransform</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ac71f8e4aaa16c99bcf2f8347005b8def</anchor>
      <arglist>(const iDynTree::FrameIndex frameIndex)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Transform</type>
      <name>getWorldTransform</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a236cb03f10e4b63e05c7a2607b28c798</anchor>
      <arglist>(std::string frameName)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Transform</type>
      <name>getRelativeTransform</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ae9f6e6896de67e035b3fc079a8938065</anchor>
      <arglist>(const iDynTree::FrameIndex refFrameIndex, const iDynTree::FrameIndex frameIndex)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Transform</type>
      <name>getRelativeTransformExplicit</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>af35ca9a0b82e0481a477ae8717c10ff2</anchor>
      <arglist>(const iDynTree::FrameIndex refFrameOriginIndex, const iDynTree::FrameIndex refFrameOrientationIndex, const iDynTree::FrameIndex frameOriginIndex, const iDynTree::FrameIndex frameOrientationIndex)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Transform</type>
      <name>getRelativeTransform</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ac3ecbeac1dcc2e24a5838e77635fceb5</anchor>
      <arglist>(const std::string &amp;refFrameName, const std::string &amp;frameName)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Twist</type>
      <name>getFrameVel</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>aea16ad7159ce0b16bdcfa516ce5fdb01</anchor>
      <arglist>(const std::string &amp;frameName)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Twist</type>
      <name>getFrameVel</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a9b23fc2024f7ba9589d2a37ec979ac87</anchor>
      <arglist>(const FrameIndex frameIdx)</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>getFrameAcc</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ae41acdeb26c2cc2b5d93f35c2dc0f3ce</anchor>
      <arglist>(const std::string &amp;frameName, const Vector6 &amp;baseAcc, const VectorDynSize &amp;s_ddot)</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>getFrameAcc</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a543031fbdf0de765c40b4a47e7d8ef38</anchor>
      <arglist>(const FrameIndex frameIdx, const Vector6 &amp;baseAcc, const VectorDynSize &amp;s_ddot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFrameFreeFloatingJacobian</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a27ae295bad4b1a53f7b26dc454edd52b</anchor>
      <arglist>(const std::string &amp;frameName, iDynTree::MatrixDynSize &amp;outJacobian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFrameFreeFloatingJacobian</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ae189be17f94340a7c39c4f4fb525dc78</anchor>
      <arglist>(const FrameIndex frameIndex, iDynTree::MatrixDynSize &amp;outJacobian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRelativeJacobian</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a394d5696059c00b5d2d7692e19333364</anchor>
      <arglist>(const iDynTree::FrameIndex refFrameIndex, const iDynTree::FrameIndex frameIndex, iDynTree::MatrixDynSize &amp;outJacobian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRelativeJacobianExplicit</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ad45015bd388547de9f694144c28f9316</anchor>
      <arglist>(const iDynTree::FrameIndex refFrameIndex, const iDynTree::FrameIndex frameIndex, const iDynTree::FrameIndex expressedOriginFrameIndex, const iDynTree::FrameIndex expressedOrientationFrameIndex, iDynTree::MatrixDynSize &amp;outJacobian)</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>getFrameBiasAcc</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a81f83749d1b0d4a7c68cfea82ef0491c</anchor>
      <arglist>(const FrameIndex frameIdx)</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>getFrameBiasAcc</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>afa27f56b8951ecf8a3dd6edc34bd6482</anchor>
      <arglist>(const std::string &amp;frameName)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Position</type>
      <name>getCenterOfMassPosition</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a56f9da747a7ac415b1bbfb23d0b8a6d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Vector3</type>
      <name>getCenterOfMassVelocity</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a34f26fac990790f72f0b230cd1c70707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getCenterOfMassJacobian</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ac320cbe545e36b4d00c0f63f528e578b</anchor>
      <arglist>(MatrixDynSize &amp;comJacobian)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>getCenterOfMassBiasAcc</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a72b9d5992f44b1edca55d3067e6935fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Twist</type>
      <name>getAverageVelocity</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a9149e7d3dc280e3fd777998c465c9016</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAverageVelocityJacobian</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ad072dff147fe9cd88a09e687d7aad746</anchor>
      <arglist>(MatrixDynSize &amp;avgVelocityJacobian)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Twist</type>
      <name>getCentroidalAverageVelocity</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a34bbffb6ebad16f6bf980493fdf329ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getCentroidalAverageVelocityJacobian</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a8b6ff477fc86c5c4135ccb9359709877</anchor>
      <arglist>(MatrixDynSize &amp;centroidalAvgVelocityJacobian)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SpatialMomentum</type>
      <name>getLinearAngularMomentum</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>ad0399a36b1167706f317ce1e861c2ca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLinearAngularMomentumJacobian</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a25056bf8ed51001c1fdb3a730f44d425</anchor>
      <arglist>(MatrixDynSize &amp;linAngMomentumJacobian)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SpatialMomentum</type>
      <name>getCentroidalTotalMomentum</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a841789cb471c094591c298c47c1181db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFreeFloatingMassMatrix</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a8103b966509c9ef696d76b9e1221b16a</anchor>
      <arglist>(MatrixDynSize &amp;freeFloatingMassMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inverseDynamics</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a60870f0f43c035fc63527ad42394f963</anchor>
      <arglist>(const Vector6 &amp;baseAcc, const VectorDynSize &amp;s_ddot, const LinkNetExternalWrenches &amp;linkExtForces, FreeFloatingGeneralizedTorques &amp;baseForceAndJointTorques)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>generalizedBiasForces</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a36e267abacd5773178bae3c2b6c26faa</anchor>
      <arglist>(FreeFloatingGeneralizedTorques &amp;generalizedBiasForces)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>generalizedGravityForces</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a9033e15503c5befbd0d5107038ac37f9</anchor>
      <arglist>(FreeFloatingGeneralizedTorques &amp;generalizedGravityForces)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>generalizedExternalForces</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a5a30a1e975f9510ef1b8fa605d0c6c03</anchor>
      <arglist>(const LinkNetExternalWrenches &amp;linkExtForces, FreeFloatingGeneralizedTorques &amp;generalizedExternalForces)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inverseDynamicsInertialParametersRegressor</name>
      <anchorfile>classiDynTree_1_1KinDynComputations.html</anchorfile>
      <anchor>a2945d5222c617680fc262ae01dca0f23</anchor>
      <arglist>(const Vector6 &amp;baseAcc, const VectorDynSize &amp;s_ddot, MatrixDynSize &amp;baseForceAndJointTorquesRegressor)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::KinDynComputations::KinDynComputationsPrivateAttributes</name>
    <filename>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</filename>
    <member kind="function">
      <type>const SpatialInertia &amp;</type>
      <name>getRobotLockedInertia</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a3721d5cb0e3520b1d65544942a97ef3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processOnRightSideMatrixExpectingBodyFixedModelVelocity</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a9871960c71cb87218e0777958d99ec10</anchor>
      <arglist>(MatrixDynSize &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processOnLeftSideBodyFixedBaseMomentumJacobian</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>aff2c4def0d1eff1cca60c2473596daba</anchor>
      <arglist>(MatrixDynSize &amp;jac)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processOnLeftSideBodyFixedAvgVelocityJacobian</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>af37d32229e0b231f22bd233584ae9bb9</anchor>
      <arglist>(MatrixDynSize &amp;jac)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processOnLeftSideBodyFixedCentroidalAvgVelocityJacobian</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a7ed91f2e1cc6c16a3f1879dd13edaf0c</anchor>
      <arglist>(MatrixDynSize &amp;jac, const FrameVelocityRepresentation &amp;leftSideRepresentation)</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>fromBodyFixedToUsedRepresentation</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a1d28ec8fe5de7cc4866e6c222ea6938f</anchor>
      <arglist>(const Wrench &amp;wrenchInBodyFixed, const Transform &amp;inertial_X_link)</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>fromUsedRepresentationToBodyFixed</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>acbf676cf7009a731b65b287519a05640</anchor>
      <arglist>(const Wrench &amp;wrenchInUsedRepresentation, const Transform &amp;inertial_X_link)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KinDynComputationsPrivateAttributes</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a8856f0c7d281f1065a1501520a3c3c82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_isModelValid</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a9b1de0a3fd2025495724824643ff9a05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FrameVelocityRepresentation</type>
      <name>m_frameVelRepr</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>af5fc758d81cf4902926277428fd996ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Model</type>
      <name>m_robot_model</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a913d7fe8376c52b007fe3d961d6c70d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Traversal</type>
      <name>m_traversal</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>aa2ddca54f49e96a44bd0ec279a5a8594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::LinkTraversalsCache</type>
      <name>m_traversalCache</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a4f6b3b179f41c3717c36b698fe8337ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::FreeFloatingPos</type>
      <name>m_pos</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>ab0cdeceb417b732828419ef0f3128d05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::FreeFloatingVel</type>
      <name>m_vel</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a181fae549e09847e18231104fb2f7598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Vector3</type>
      <name>m_gravityAcc</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a5cd58e3bdcb4b1c958e0b5c067db3873</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Vector3</type>
      <name>m_gravityAccInBaseLinkFrame</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a09abef455248e27ba1d46af48e019a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_isFwdKinematicsUpdated</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>acf97999a530de94b528237d8e7fe5517</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::LinkPositions</type>
      <name>m_linkPos</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a79cece79efa95907cf1eca8d4f9c862b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::LinkVelArray</type>
      <name>m_linkVel</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a7e1500a5f585ca37c8442911d10f130b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_isRawMassMatrixUpdated</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a4f27cd2c9cd5f98532677113552dac5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkCompositeRigidBodyInertias</type>
      <name>m_linkCRBIs</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a618c1a4a4125ea1b3d9f31879afc9ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FreeFloatingMassMatrix</type>
      <name>m_rawMassMatrix</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>aa03c45acb8560640169df8b96646ec1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SpatialMomentum</type>
      <name>m_totalMomentum</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a3b1622bbfe3f311cf8f1a1b1cfec4d41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixDynSize</type>
      <name>m_jacBuffer</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>adc2f21d52bc5b1dfc2d8a169deee84e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_areBiasAccelerationsUpdated</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a102e5362c45a05d145ffa3b714dd3e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SpatialAcc</type>
      <name>m_baseBiasAcc</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a6c2706b4f15f74f421a6a929ebe8fa13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkAccArray</type>
      <name>m_linkBiasAcc</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>ac240b4853ca62ce743571a4660741c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SpatialAcc</type>
      <name>m_baseAcc</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a2e514e42912066c41a78616d8f9c6fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FreeFloatingAcc</type>
      <name>m_generalizedAccs</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>ac1c42525bf95d1d073d0a5d917f76134</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkAccArray</type>
      <name>m_linkAccs</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a9cf0ff5b95e9322614317896a014d9b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SpatialAcc</type>
      <name>m_invDynBaseAcc</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a68aa8e87e6cbccf3d6d93aa105fc6bb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FreeFloatingAcc</type>
      <name>m_invDynGeneralizedProperAccs</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a81ac17cee2b4defae92590ca24a6a3ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkProperAccArray</type>
      <name>m_invDynLinkProperAccs</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a6e45db0552fc2bce82bc01562335f3ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkNetExternalWrenches</type>
      <name>m_invDynNetExtWrenches</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>af2ad6a286b871dcfb73ebd783e771020</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkInternalWrenches</type>
      <name>m_invDynInternalWrenches</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a0c1fff970437d88d9cd6a4cc5cc87a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FreeFloatingVel</type>
      <name>m_invDynZeroVel</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>af6c4fadafea06b3b5d385456b4dafbec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkVelArray</type>
      <name>m_invDynZeroLinkVel</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a60dbb96d2cc46552f25aecd57f29d6af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkAccArray</type>
      <name>m_invDynZeroLinkProperAcc</name>
      <anchorfile>structiDynTree_1_1KinDynComputations_1_1KinDynComputationsPrivateAttributes.html</anchorfile>
      <anchor>a7023ab4df637a6eb5590050d596ece15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::L2NormCost</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</filename>
    <base>iDynTree::optimalcontrol::Cost</base>
    <class kind="class">iDynTree::optimalcontrol::L2NormCost::L2NormCostImplementation</class>
    <member kind="function">
      <type></type>
      <name>L2NormCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>a129cc600b320501343ddb583e25149b3</anchor>
      <arglist>(const std::string &amp;name, unsigned int stateDimension, unsigned int controlDimension)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2NormCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>a4a596f8df129f4972905d25782df29aa</anchor>
      <arglist>(const std::string &amp;name, const MatrixDynSize &amp;stateSelector, const MatrixDynSize &amp;controlSelector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2NormCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>a827513852904995430db8b99bc7febb6</anchor>
      <arglist>(const std::string &amp;name, const IndexRange &amp;stateSelector, unsigned int totalStateDimension, const IndexRange &amp;controlSelector, unsigned int totalControlDimension)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2NormCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>ad897190eb9467a68c28de85128588550</anchor>
      <arglist>(const L2NormCost &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~L2NormCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>ae6dfb58aaf066a2a3365e0df355aa117</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateWeight</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>a58f5478e3342aed232a87841678308fb</anchor>
      <arglist>(const MatrixDynSize &amp;stateWeights)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateWeight</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>a2dba183b88f4839c919770425c6fdcd7</anchor>
      <arglist>(const VectorDynSize &amp;stateWeights)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateDesiredPoint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>ae96ca55b2de34d54df735ca217653d89</anchor>
      <arglist>(const VectorDynSize &amp;desiredPoint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateDesiredTrajectory</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>a757e141da2f2cb07a21da1f2590ad61e</anchor>
      <arglist>(std::shared_ptr&lt; TimeVaryingVector &gt; stateDesiredTrajectory)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlWeight</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>a49d38bf02747c1389b5caf507574a686</anchor>
      <arglist>(const MatrixDynSize &amp;controlWeights)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlWeight</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>a0744764fd4805b658691eccd9010f2b5</anchor>
      <arglist>(const VectorDynSize &amp;controlWeights)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlDesiredPoint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>ab8e1fe588d944b161c1f0f537476faae</anchor>
      <arglist>(const VectorDynSize &amp;desiredPoint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlDesiredTrajectory</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>a350103a7b08ce9018cacc4ee85ce740b</anchor>
      <arglist>(std::shared_ptr&lt; TimeVaryingVector &gt; controlDesiredTrajectory)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updatStateSelector</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>acd78337156f1e67fd4186ec44819d29e</anchor>
      <arglist>(const MatrixDynSize &amp;stateSelector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updatControlSelector</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>acdd749180561fae6ceb63aa609bd5e22</anchor>
      <arglist>(const MatrixDynSize &amp;controlSelector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costEvaluation</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>a9d50dda627b36e627b84dc4d83fb686a</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, double &amp;costValue) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costFirstPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>a72f69b6349ed2823712fd918f141884d</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;, iDynTree::VectorDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costFirstPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>a6e7b22b45693771b2328fd80fafa2242</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;, const iDynTree::VectorDynSize &amp;control, iDynTree::VectorDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>abeeecc2330176e0491da9fe4cd675ae5</anchor>
      <arglist>(double, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;, iDynTree::MatrixDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>a9f1f6480fb5393df0cfdefc436c24e30</anchor>
      <arglist>(double, const iDynTree::VectorDynSize &amp;, const iDynTree::VectorDynSize &amp;control, iDynTree::MatrixDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTStateControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>ae0289074474f2f2d1bb7ca5d8f573a41</anchor>
      <arglist>(double, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::MatrixDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>a41ffabe4c9a44e8b42a1c6dab54811df</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>ab4f2bfb9baddee7c53a32ff070c48137</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateControlSparsity) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost.html</anchorfile>
      <anchor>ae90d7ffa590fad2f5df45d4374a66794</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity) final</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Cost.html</anchorfile>
      <anchor>ab75a1c3759901f6cd1dc3543481d06c9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::L2NormCost::L2NormCostImplementation</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1L2NormCost_1_1L2NormCostImplementation.html</filename>
    <member kind="variable">
      <type>CostAttributes</type>
      <name>stateCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost_1_1L2NormCostImplementation.html</anchorfile>
      <anchor>a13d3db90ed9d64f3802796f5418aa315</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CostAttributes</type>
      <name>controlCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1L2NormCost_1_1L2NormCostImplementation.html</anchorfile>
      <anchor>a536f2d79c5e0690ff0cf723e0ba14891</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cmdline::detail::lexical_cast_t</name>
    <filename>classcmdline_1_1detail_1_1lexical__cast__t.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Same</templarg>
    <member kind="function" static="yes">
      <type>static Target</type>
      <name>cast</name>
      <anchorfile>classcmdline_1_1detail_1_1lexical__cast__t.html</anchorfile>
      <anchor>a533dd7d81255f684abba07d6c1545b1b</anchor>
      <arglist>(const Source &amp;arg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cmdline::detail::lexical_cast_t&lt; std::string, Source, false &gt;</name>
    <filename>classcmdline_1_1detail_1_1lexical__cast__t_3_01std_1_1string_00_01Source_00_01false_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>cast</name>
      <anchorfile>classcmdline_1_1detail_1_1lexical__cast__t_3_01std_1_1string_00_01Source_00_01false_01_4.html</anchorfile>
      <anchor>af57126abfc4a633919bb63f1425fd69d</anchor>
      <arglist>(const Source &amp;arg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cmdline::detail::lexical_cast_t&lt; Target, Source, true &gt;</name>
    <filename>classcmdline_1_1detail_1_1lexical__cast__t_3_01Target_00_01Source_00_01true_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static Target</type>
      <name>cast</name>
      <anchorfile>classcmdline_1_1detail_1_1lexical__cast__t_3_01Target_00_01Source_00_01true_01_4.html</anchorfile>
      <anchor>a424e3e47b97dde835cdcc3d290618fc5</anchor>
      <arglist>(const Source &amp;arg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cmdline::detail::lexical_cast_t&lt; Target, std::string, false &gt;</name>
    <filename>classcmdline_1_1detail_1_1lexical__cast__t_3_01Target_00_01std_1_1string_00_01false_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static Target</type>
      <name>cast</name>
      <anchorfile>classcmdline_1_1detail_1_1lexical__cast__t_3_01Target_00_01std_1_1string_00_01false_01_4.html</anchorfile>
      <anchor>a8612edb07ba3ba15be8615dcacbf58e3</anchor>
      <arglist>(const std::string &amp;arg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Light</name>
    <filename>classiDynTree_1_1Light.html</filename>
    <base>iDynTree::ILight</base>
    <member kind="function">
      <type></type>
      <name>Light</name>
      <anchorfile>classiDynTree_1_1Light.html</anchorfile>
      <anchor>a3e8f6ac883151634188d7ad69996cfe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Light</name>
      <anchorfile>classiDynTree_1_1Light.html</anchorfile>
      <anchor>a7e5661d6b66fbdafb43ce2915a4753a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLight</name>
      <anchorfile>classiDynTree_1_1Light.html</anchorfile>
      <anchor>a03983c7ff07b13579c990d1d1797e2da</anchor>
      <arglist>(const std::string name, irr::scene::ILightSceneNode *lightSceneNode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLight</name>
      <anchorfile>classiDynTree_1_1Light.html</anchorfile>
      <anchor>abf3d77f5d083ae23014773bc32f1b47a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classiDynTree_1_1Light.html</anchorfile>
      <anchor>a86eec98a24867014ca78b7ad0cc7e9b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classiDynTree_1_1Light.html</anchorfile>
      <anchor>a576becbfef0d70a6f63abd7f50098a03</anchor>
      <arglist>(const LightType type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LightType</type>
      <name>getType</name>
      <anchorfile>classiDynTree_1_1Light.html</anchorfile>
      <anchor>aeb963080e79aacb8dbd8dc6f801d1e6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classiDynTree_1_1Light.html</anchorfile>
      <anchor>a59000a2421be74c950d68f6078a10e16</anchor>
      <arglist>(const iDynTree::Position &amp;cameraPos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iDynTree::Position</type>
      <name>getPosition</name>
      <anchorfile>classiDynTree_1_1Light.html</anchorfile>
      <anchor>a0bb02f258e2f54373d21fcc096637128</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDirection</name>
      <anchorfile>classiDynTree_1_1Light.html</anchorfile>
      <anchor>ab6c1be07e1b664dc50bdab37a29a6cd1</anchor>
      <arglist>(const Direction &amp;lightDirection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Direction</type>
      <name>getDirection</name>
      <anchorfile>classiDynTree_1_1Light.html</anchorfile>
      <anchor>a04e51c9b343584bf4c3eafb59346b0ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAmbientColor</name>
      <anchorfile>classiDynTree_1_1Light.html</anchorfile>
      <anchor>a67e5d255949da19a230fff9d9236fc38</anchor>
      <arglist>(const ColorViz &amp;ambientColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ColorViz</type>
      <name>getAmbientColor</name>
      <anchorfile>classiDynTree_1_1Light.html</anchorfile>
      <anchor>a25f2ca0686f44e4fb3b59f2938bb08e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSpecularColor</name>
      <anchorfile>classiDynTree_1_1Light.html</anchorfile>
      <anchor>abefee738117b015681b159a68beaa0fb</anchor>
      <arglist>(const ColorViz &amp;ambientColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ColorViz</type>
      <name>getSpecularColor</name>
      <anchorfile>classiDynTree_1_1Light.html</anchorfile>
      <anchor>af9987c830fc2f590a5082a44f6181c1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDiffuseColor</name>
      <anchorfile>classiDynTree_1_1Light.html</anchorfile>
      <anchor>afd0ef27b392a84139c57cbca3117ef42</anchor>
      <arglist>(const ColorViz &amp;ambientColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ColorViz</type>
      <name>getDiffuseColor</name>
      <anchorfile>classiDynTree_1_1Light.html</anchorfile>
      <anchor>ab1f01dbaeef10526cc0053c667b92d30</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::LinearConstraint</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</filename>
    <base>iDynTree::optimalcontrol::Constraint</base>
    <class kind="class">iDynTree::optimalcontrol::LinearConstraint::LinearConstraintImplementation</class>
    <member kind="function">
      <type></type>
      <name>LinearConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</anchorfile>
      <anchor>a5238901b13b5bf5484b526e4ce727d49</anchor>
      <arglist>(size_t size, const std::string name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</anchorfile>
      <anchor>a7bf3bcd6529073e24c5f7886b50b1e47</anchor>
      <arglist>(size_t size, const std::string name, const SparsityStructure &amp;stateSparsity, const SparsityStructure &amp;controlSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</anchorfile>
      <anchor>ae743de0f67a0976997e48b189693c625</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateConstraintMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</anchorfile>
      <anchor>ad7b55df7d1120ab2c1c8b854894933cb</anchor>
      <arglist>(const MatrixDynSize &amp;constraintMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlConstraintMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</anchorfile>
      <anchor>a97636ee49fcd639404f7ba3d5d0e06b7</anchor>
      <arglist>(const MatrixDynSize &amp;constraintMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateConstraintMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</anchorfile>
      <anchor>a507d1dc0e3f9505cf06aa7da163133cd</anchor>
      <arglist>(std::shared_ptr&lt; TimeVaryingMatrix &gt; constraintMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlConstraintMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</anchorfile>
      <anchor>aaf7235110d9aa561c2cff6d12f860c56</anchor>
      <arglist>(std::shared_ptr&lt; TimeVaryingMatrix &gt; constraintMatrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</anchorfile>
      <anchor>a17c0d4f42ebf51ec4920f13b322164ac</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, VectorDynSize &amp;constraint) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintJacobianWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</anchorfile>
      <anchor>a4b549894cf3bf4f0ca39341a38818652</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, MatrixDynSize &amp;jacobian) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintJacobianWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</anchorfile>
      <anchor>a70d5f6e3cef56eccb4860da0cec05a64</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, MatrixDynSize &amp;jacobian) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintJacobianWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</anchorfile>
      <anchor>ab5b921c25bc7ddb45a1e6e662f086835</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintJacobianWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</anchorfile>
      <anchor>abb6ba3b28dd3176c16b576b938c0d941</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintSecondPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</anchorfile>
      <anchor>a902821f9895679947a76865205722d01</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, const VectorDynSize &amp;lambda, MatrixDynSize &amp;hessian) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintSecondPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</anchorfile>
      <anchor>a5c1148e59ab8e4a80af5596719779630</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, const VectorDynSize &amp;lambda, MatrixDynSize &amp;hessian) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintSecondPartialDerivativeWRTStateControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</anchorfile>
      <anchor>ac1311ad25da73b9727c374fc5705ea60</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, const VectorDynSize &amp;lambda, MatrixDynSize &amp;hessian) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintSecondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</anchorfile>
      <anchor>aa911e9b067559f0fd7f57f27610ff97b</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintSecondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</anchorfile>
      <anchor>a00dc8d904ec0a624c0b57863c609924a</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateControlSparsity) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constraintSecondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint.html</anchorfile>
      <anchor>ac3e827b670cb0c60774341228f67a9fb</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity) final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>constraintSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a1df753c970a78df754d6ca54943dea93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a89ecaf57ab310fc62a6ea624c1dbd439</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setLowerBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a3e3f580470ce860c9964d6e24b3ded5d</anchor>
      <arglist>(const VectorDynSize &amp;lowerBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLowerBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a9322706b7f88baa02e4924097605827b</anchor>
      <arglist>(VectorDynSize &amp;lowerBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setUpperBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a2b1b9fb5134c4d2e7bc52f20a9963173</anchor>
      <arglist>(const VectorDynSize &amp;upperBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUpperBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a41d21a8cfc855439a2601650e9c130ba</anchor>
      <arglist>(VectorDynSize &amp;upperBound)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFeasiblePoint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a52b67723a11898155b75a782e4f0205a</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>expectedStateSpaceSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a0e3bceea30a60cc17f2eeb083f935776</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>expectedControlSpaceSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a90f0559327c2024aeae9637bde1cf007</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorDynSize</type>
      <name>m_lowerBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>ac485074ba8861bae196497dbf6256761</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorDynSize</type>
      <name>m_upperBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a14742944fcb6cb9011b728dad5a688f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_isLowerBounded</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a5805024ea2d6064d0ce0c263cae83c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_isUpperBounded</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Constraint.html</anchorfile>
      <anchor>a39b0f7fd8ff9ead00ce7010f7fc81896</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::LinearConstraint::LinearConstraintImplementation</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1LinearConstraint_1_1LinearConstraintImplementation.html</filename>
    <member kind="function">
      <type></type>
      <name>LinearConstraintImplementation</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint_1_1LinearConstraintImplementation.html</anchorfile>
      <anchor>afcb756ea56842e7f4e9b7a76ba8f8d6d</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>constrainsState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint_1_1LinearConstraintImplementation.html</anchorfile>
      <anchor>ae751901337760437c15d5f7f1fba7979</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>constrainsControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint_1_1LinearConstraintImplementation.html</anchorfile>
      <anchor>a7a280f0c189318b959ad5aa8a062f59e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; TimeVaryingMatrix &gt;</type>
      <name>stateConstraintMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint_1_1LinearConstraintImplementation.html</anchorfile>
      <anchor>a63740a83ba1bf7dfee5df5ca1e0ee89d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; TimeVaryingMatrix &gt;</type>
      <name>controlConstraintMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint_1_1LinearConstraintImplementation.html</anchorfile>
      <anchor>a5172ef3500b8d7972c53e032e94db33a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>stateConstraintsBuffer</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint_1_1LinearConstraintImplementation.html</anchorfile>
      <anchor>ad307d9c6a7cd4b738af850d8d98c39e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>controlConstraintsBuffer</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint_1_1LinearConstraintImplementation.html</anchorfile>
      <anchor>a280d6ec2054922c42f8c92bc1c73664f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint_1_1LinearConstraintImplementation.html</anchorfile>
      <anchor>a925253fadd2ef4f86f3365a0070d7f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint_1_1LinearConstraintImplementation.html</anchorfile>
      <anchor>ad799a66179c29a59b95b6b99c88cd94d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>stateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint_1_1LinearConstraintImplementation.html</anchorfile>
      <anchor>aa0c63a493af1caa04dd8b36d23b1419d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>controlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearConstraint_1_1LinearConstraintImplementation.html</anchorfile>
      <anchor>a0cda4039fc8fe04406c51dbcf55b0ebd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::LinearCost</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1LinearCost.html</filename>
    <base>iDynTree::optimalcontrol::QuadraticLikeCost</base>
    <member kind="function">
      <type></type>
      <name>LinearCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearCost.html</anchorfile>
      <anchor>ad3cbd8d7ecff0a531e40331f2dd75bf6</anchor>
      <arglist>(const std::string &amp;costName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LinearCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearCost.html</anchorfile>
      <anchor>a079b0daa1ebe819d5347ee192492365f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearCost.html</anchorfile>
      <anchor>abaa2005da7ca4ec420ea50a52dcd38a3</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;stateGradient)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearCost.html</anchorfile>
      <anchor>a01c7f1d295e40e5e928202492eb4138f</anchor>
      <arglist>(std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingVector &gt; timeVaryingStateGradient)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearCost.html</anchorfile>
      <anchor>a674bdbe0a9903a130c234512d00653dc</anchor>
      <arglist>(const iDynTree::VectorDynSize &amp;controlGradient)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearCost.html</anchorfile>
      <anchor>a222e952bddafb95a5facc3c80fb2c049</anchor>
      <arglist>(std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingVector &gt; timeVaryingControlGradient)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setCostBias</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearCost.html</anchorfile>
      <anchor>a927c791d758f2d81289573702a9a209d</anchor>
      <arglist>(double stateCostBias, double controlCostBias)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setCostBias</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearCost.html</anchorfile>
      <anchor>a4477191cc6fd2d2ecb325feded5d3692</anchor>
      <arglist>(std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingDouble &gt; timeVaryingStateCostBias, std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingDouble &gt; timeVaryingControlCostBias)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costEvaluation</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>ae1726e0a4c497e0dc23c5c1bdc352863</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, double &amp;costValue) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costFirstPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>adba80cb374b9480383565e3b401219f4</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::VectorDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costFirstPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a47cce0b64dbbba8e0eac180f0dd19e20</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::VectorDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>accb30d2b375cd93bbf7776d2d63d2100</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::MatrixDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a58ee2cada051e2fd8c642bec6b7d827a</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::MatrixDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTStateControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>ab298698138c89514de25695c40b4bed6</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::MatrixDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a58b8694736f26fb6a6cc3843759c8831</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a155ce5315d859f994510ba47adad0ef1</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateControlSparsity) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a6f758bc67249991beddf14886bd646d4</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity) final</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Cost.html</anchorfile>
      <anchor>ab75a1c3759901f6cd1dc3543481d06c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingMatrix &gt;</type>
      <name>m_timeVaryingStateHessian</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>abf8b22918021ba6ff7743575d30138c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingVector &gt;</type>
      <name>m_timeVaryingStateGradient</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>abedf340f114e51dacd483fd73f373fe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingDouble &gt;</type>
      <name>m_timeVaryingStateCostBias</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a416877725e0df7d52ef0f599b39db143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingMatrix &gt;</type>
      <name>m_timeVaryingControlHessian</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a41bc5547c17cf3b7490ea15361fc0de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingVector &gt;</type>
      <name>m_timeVaryingControlGradient</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a9269110e23af528aae7b78aad054d0c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingDouble &gt;</type>
      <name>m_timeVaryingControlCostBias</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a379ea8c1910865e1ad109cc46ad8bfb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_hasSecondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>ae9c9fd426f107159f3e5354fd3f0562e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_hasSecondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>aeb28846afd2fe3f4373b646d49fbba97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_hasSecondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>ae00c9061c568494f23b858ad05a0ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparsityStructure</type>
      <name>m_secondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a917cfae65e537e496290046a44d7ca94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparsityStructure</type>
      <name>m_secondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a55d298ac7b70590ad7e9122a21c03b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparsityStructure</type>
      <name>m_secondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>aa329727f0449dd78cc65248c5ee2f7ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::LinearForceVector3</name>
    <filename>classiDynTree_1_1LinearForceVector3.html</filename>
    <base>ForceVector3&lt; LinearForceVector3 &gt;</base>
    <member kind="typedef">
      <type>MotionForce_traits&lt; LinearForceVector3 &gt;::SemanticsType</type>
      <name>SemanticsType</name>
      <anchorfile>classiDynTree_1_1LinearForceVector3.html</anchorfile>
      <anchor>afdc6a7b75127e6e2854f75d9430de8eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearForceVector3</name>
      <anchorfile>classiDynTree_1_1LinearForceVector3.html</anchorfile>
      <anchor>ac1cd5e13e01c4ced50881d4ca5559e6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearForceVector3</name>
      <anchorfile>classiDynTree_1_1LinearForceVector3.html</anchorfile>
      <anchor>a5ae8b2cc4a127b69749475d8c173a718</anchor>
      <arglist>(const double x, const double y, const double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearForceVector3</name>
      <anchorfile>classiDynTree_1_1LinearForceVector3.html</anchorfile>
      <anchor>a9bd554e2e538384439ec0afe55574d55</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearForceVector3</name>
      <anchorfile>classiDynTree_1_1LinearForceVector3.html</anchorfile>
      <anchor>a3919afc8342259ca906ff44ca97339da</anchor>
      <arglist>(const LinearForceVector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearForceVector3</name>
      <anchorfile>classiDynTree_1_1LinearForceVector3.html</anchorfile>
      <anchor>a1fa7ea8c109d6ab2ca39a77eadc1d3ac</anchor>
      <arglist>(const Vector3 &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::LinearForceVector3Semantics</name>
    <filename>classiDynTree_1_1LinearForceVector3Semantics.html</filename>
    <base>ForceVector3Semantics&lt; LinearForceVector3Semantics &gt;</base>
    <member kind="function">
      <type></type>
      <name>LinearForceVector3Semantics</name>
      <anchorfile>classiDynTree_1_1LinearForceVector3Semantics.html</anchorfile>
      <anchor>acbfc83253ddde2affddf7e431ac0bf87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearForceVector3Semantics</name>
      <anchorfile>classiDynTree_1_1LinearForceVector3Semantics.html</anchorfile>
      <anchor>a32421839191974b95342cb96a68a373c</anchor>
      <arglist>(int _body, int _refBody, int _coordinateFrame)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearForceVector3Semantics</name>
      <anchorfile>classiDynTree_1_1LinearForceVector3Semantics.html</anchorfile>
      <anchor>a90257b39410217a25187a8be10727fc2</anchor>
      <arglist>(const LinearForceVector3Semantics &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>ad58b79754fa8eb7419cff86e5f6b76c5</anchor>
      <arglist>(const ForceVector3Semantics &amp;op1, const ForceVector3Semantics &amp;op2, ForceVector3Semantics &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1ForceVector3Semantics.html</anchorfile>
      <anchor>a86b5db61b28c45d33e329ea266b41122</anchor>
      <arglist>(const ForceVector3Semantics &amp;op, ForceVector3Semantics &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::LinearMotionVector3</name>
    <filename>classiDynTree_1_1LinearMotionVector3.html</filename>
    <base>MotionVector3&lt; LinearMotionVector3 &gt;</base>
    <member kind="typedef">
      <type>MotionForce_traits&lt; LinearMotionVector3 &gt;::SemanticsType</type>
      <name>SemanticsType</name>
      <anchorfile>classiDynTree_1_1LinearMotionVector3.html</anchorfile>
      <anchor>ab815a99703680189f76b1cad859b30ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, LinearMotionVector3 &gt;::Type</type>
      <name>MotionCrossLinM</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>aaed41f551e18d2629dd79bbd8cd8120b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, AngularMotionVector3 &gt;::Type</type>
      <name>MotionCrossAngM</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a0a3372200f0037ba3dd0188bd8c6e5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, LinearForceVector3 &gt;::Type</type>
      <name>MotionCrossLinF</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a63d0eec936e8c873068f754320ec9151</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, AngularForceVector3 &gt;::Type</type>
      <name>MotionCrossAngF</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>af8d2135ab33e05e53b58b01dae91e617</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearMotionVector3</name>
      <anchorfile>classiDynTree_1_1LinearMotionVector3.html</anchorfile>
      <anchor>aef5a6484d2f02f1acb27397e54773072</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearMotionVector3</name>
      <anchorfile>classiDynTree_1_1LinearMotionVector3.html</anchorfile>
      <anchor>aa5b2bc7b4ad0f96596962a9865dccf43</anchor>
      <arglist>(const double x, const double y, const double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearMotionVector3</name>
      <anchorfile>classiDynTree_1_1LinearMotionVector3.html</anchorfile>
      <anchor>a46f0d76ba98b864657534933372171d3</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearMotionVector3</name>
      <anchorfile>classiDynTree_1_1LinearMotionVector3.html</anchorfile>
      <anchor>ae5c51dcf4e82525f40bd6d0bdd5f73e5</anchor>
      <arglist>(const LinearMotionVector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearMotionVector3</name>
      <anchorfile>classiDynTree_1_1LinearMotionVector3.html</anchorfile>
      <anchor>ab407250b661a21e2decaa27cb600405c</anchor>
      <arglist>(const Vector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const LinearMotionVector3</type>
      <name>changePoint</name>
      <anchorfile>classiDynTree_1_1LinearMotionVector3.html</anchorfile>
      <anchor>a742262d87322e2050293d2911fd72dd3</anchor>
      <arglist>(const Position &amp;newPoint, const AngularMotionVector3 &amp;otherAngular) const</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossLinM</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a5cac47f80f5e61e9b8ab3a877d961a37</anchor>
      <arglist>(const LinearMotionVector3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossAngM</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>af7b437b08fd688a52caefeee8e575620</anchor>
      <arglist>(const AngularMotionVector3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossLinF</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a6c2656ec0a2dd9855548372c509d9903</anchor>
      <arglist>(const LinearForceVector3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossAngF</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>ab036ecc2db2593cb9e44e748e11ef789</anchor>
      <arglist>(const AngularForceVector3 &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::LinearMotionVector3Semantics</name>
    <filename>classiDynTree_1_1LinearMotionVector3Semantics.html</filename>
    <base>GeomVector3Semantics&lt; LinearMotionVector3Semantics &gt;</base>
    <member kind="function">
      <type></type>
      <name>LinearMotionVector3Semantics</name>
      <anchorfile>classiDynTree_1_1LinearMotionVector3Semantics.html</anchorfile>
      <anchor>ac8d0d5bbcc36cecfd6193939b9f827ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearMotionVector3Semantics</name>
      <anchorfile>classiDynTree_1_1LinearMotionVector3Semantics.html</anchorfile>
      <anchor>a8aaebd3c9b4533475d7d1365e280ef6b</anchor>
      <arglist>(int _point, int _body, int _refBody, int _coordinateFrame)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearMotionVector3Semantics</name>
      <anchorfile>classiDynTree_1_1LinearMotionVector3Semantics.html</anchorfile>
      <anchor>a9deb01b650b43d30b187ba981216ad02</anchor>
      <arglist>(const LinearMotionVector3Semantics &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changePoint</name>
      <anchorfile>classiDynTree_1_1LinearMotionVector3Semantics.html</anchorfile>
      <anchor>a9cc7605eb1daed9f2dcf095821040222</anchor>
      <arglist>(const PositionSemantics &amp;newPoint, const AngularMotionVector3Semantics &amp;otherAngular, LinearMotionVector3Semantics &amp;resultLinear) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToUnknown</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>abd883af03b4203fd00ea1cf4f504cfc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a4f0bb7a25a966f92f8cf19494088e4e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRefBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a3e57319bb4392cb63a6077e8180e28d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoordinateFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a32b5b64c6e34938ad1521732331bc474</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnknown</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>ab1430528dd300c1cb4d507918680e779</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a0017f085753fd7da90d7e7a4e4625fbf</anchor>
      <arglist>(const RotationSemantics &amp;newCoordFrame, MotionForceSemanticsT &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>aa99906ab81a042e55b654b37ef24d620</anchor>
      <arglist>(const typename DualMotionForceSemanticsT&lt; MotionForceSemanticsT &gt;::Type &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1LinearMotionVector3Semantics.html</anchorfile>
      <anchor>af43896c40cc673a68b78651385f3d9b0</anchor>
      <arglist>(const LinearMotionVector3Semantics &amp;op1, const LinearMotionVector3Semantics &amp;op2, LinearMotionVector3Semantics &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a7060b666780b2024ee6ed4a2dac8991d</anchor>
      <arglist>(const MotionForceSemanticsT &amp;op1, const MotionForceSemanticsT &amp;op2, MotionForceSemanticsT &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>ac03fa8a55e563b79cfc2b752318ed55e</anchor>
      <arglist>(const MotionForceSemanticsT &amp;op, MotionForceSemanticsT &amp;result)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>point</name>
      <anchorfile>classiDynTree_1_1LinearMotionVector3Semantics.html</anchorfile>
      <anchor>a58c03aa37bf59855b8f4089585ec9d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>body</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a41d8bb8a198ce9d9e6b1790f98cfeaa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>refBody</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a3394a4c417154821e37c11e95ce1d934</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>coordinateFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3Semantics.html</anchorfile>
      <anchor>a7bbc827d06b06a8b67a86165da66634b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::LinearMPC</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1LinearMPC.html</filename>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::LinearSystem</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</filename>
    <base>iDynTree::optimalcontrol::DynamicalSystem</base>
    <class kind="class">iDynTree::optimalcontrol::LinearSystem::LinearSystemPimpl</class>
    <member kind="function">
      <type></type>
      <name>LinearSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>a2c0727b1b7067ad0042880a2c21021fd</anchor>
      <arglist>(size_t stateSize, size_t controlSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>a3437f9e6234fc7a698d4d4a590ec419b</anchor>
      <arglist>(size_t stateSize, size_t controlSize, const iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity, const iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>a29645196589d2a947368e65c851c50bb</anchor>
      <arglist>(const LinearSystem &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LinearSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>a79af515c739a47f2c0b7ba77d2131b5e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>a1d874018df76571d25f2cf5b510c4467</anchor>
      <arglist>(const iDynTree::MatrixDynSize &amp;stateMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>a36b039c6b817db400f277cfa3230802b</anchor>
      <arglist>(const iDynTree::MatrixDynSize &amp;controlMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>a8909f5f3adbe11fa54c379760b417c7a</anchor>
      <arglist>(std::shared_ptr&lt; TimeVaryingMatrix &gt; stateMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>a3fa5cbf4e9a3fa25db27edeef20ca4de</anchor>
      <arglist>(std::shared_ptr&lt; TimeVaryingMatrix &gt; controlMatrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamics</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>a677cbfd25193c8008bb3611ba437bee3</anchor>
      <arglist>(const VectorDynSize &amp;state, double time, VectorDynSize &amp;stateDynamics) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsStateFirstDerivative</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>ac7116dc1d8a4b14cca1c193c9c2915d1</anchor>
      <arglist>(const VectorDynSize &amp;state, double time, MatrixDynSize &amp;dynamicsDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsControlFirstDerivative</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>a36f734c63eb80a4ccdb7d0724c42f328</anchor>
      <arglist>(const VectorDynSize &amp;state, double time, MatrixDynSize &amp;dynamicsDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsStateFirstDerivativeSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>a0d4595317dc3b89da6931a6f8fe4b100</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsControlFirstDerivativeSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>a29861f9debef88e5920b054dcb0897cc</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>acc25a7320b7478c3a6dff9f93d0877f7</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;lambda, iDynTree::MatrixDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>a256610e2a89d1263e3142a4cb5936623</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;lambda, iDynTree::MatrixDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTStateControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>a29d7cc59a10b5f5171564d0156a6c1f8</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;lambda, iDynTree::MatrixDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>a5f0bcfa36f93e01a1bb41a2a2f1b106d</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>a0218620999ee04d4f520db40e7e6f8fb</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateControlSparsity) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem.html</anchorfile>
      <anchor>ac246d0f193f99412444e4ed084cd0f64</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity) final</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>stateSpaceSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a1fdc25cc07f3bc2d02ac0cc2c74e8abc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>controlSpaceSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ae9048969fa6bb586f08332aa279ac01a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setControlInput</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a1d4cfff710d3a77308992878408ca87b</anchor>
      <arglist>(const VectorDynSize &amp;control)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VectorDynSize &amp;</type>
      <name>controlInput</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ac130f0cfaa6a5843fdbcb944493b7951</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>controlInput</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a165aa744348a711a192333374a5b938b</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VectorDynSize &amp;</type>
      <name>initialState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ae62cb69e88b5598944dffd5c9f8336b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>initialState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a91ba05fa8d7fd40b9336f33130ec48ed</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setInitialState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>abb552b6be02127013c69f1106ad09497</anchor>
      <arglist>(const VectorDynSize &amp;state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::LinearSystem::LinearSystemPimpl</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1LinearSystem_1_1LinearSystemPimpl.html</filename>
    <member kind="variable">
      <type>std::shared_ptr&lt; TimeVaryingMatrix &gt;</type>
      <name>stateMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem_1_1LinearSystemPimpl.html</anchorfile>
      <anchor>a862d4b758fbb61ba4cea4280c3e156a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; TimeVaryingMatrix &gt;</type>
      <name>controlMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem_1_1LinearSystemPimpl.html</anchorfile>
      <anchor>a91b937dc9f5053d25d985c0a69336981</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>stateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem_1_1LinearSystemPimpl.html</anchorfile>
      <anchor>af8d4916df471ff3078db4edad3568bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>controlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem_1_1LinearSystemPimpl.html</anchorfile>
      <anchor>a842a75983d2a0803e36533bd08c1e259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem_1_1LinearSystemPimpl.html</anchorfile>
      <anchor>a6e3a22d4f2ce20770b41bee4ff3936e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1LinearSystem_1_1LinearSystemPimpl.html</anchorfile>
      <anchor>a151d26fc075e4c40deb0c156cc9c88af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Link</name>
    <filename>classiDynTree_1_1Link.html</filename>
    <member kind="function">
      <type></type>
      <name>Link</name>
      <anchorfile>classiDynTree_1_1Link.html</anchorfile>
      <anchor>a19dcc0fa4d7a40b052980f0583e43c8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia &amp;</type>
      <name>inertia</name>
      <anchorfile>classiDynTree_1_1Link.html</anchorfile>
      <anchor>a5aaffd50b0912b0bf1f5d225ea472877</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SpatialInertia &amp;</type>
      <name>inertia</name>
      <anchorfile>classiDynTree_1_1Link.html</anchorfile>
      <anchor>aaab019f42d3abd7eeaed46a523c578b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInertia</name>
      <anchorfile>classiDynTree_1_1Link.html</anchorfile>
      <anchor>ae229f60dd8e8c7d3eb42c244c9620f90</anchor>
      <arglist>(SpatialInertia &amp;_inertia)</arglist>
    </member>
    <member kind="function">
      <type>const SpatialInertia &amp;</type>
      <name>getInertia</name>
      <anchorfile>classiDynTree_1_1Link.html</anchorfile>
      <anchor>a2a7372378d72c0968d0f0024ced8641d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndex</name>
      <anchorfile>classiDynTree_1_1Link.html</anchorfile>
      <anchor>ac85aab728b2a369cf169a642dbd1fdca</anchor>
      <arglist>(LinkIndex &amp;_index)</arglist>
    </member>
    <member kind="function">
      <type>LinkIndex</type>
      <name>getIndex</name>
      <anchorfile>classiDynTree_1_1Link.html</anchorfile>
      <anchor>a50d8196029ce8e674a2fd57cca75d078</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::LinkAccArray</name>
    <filename>classiDynTree_1_1LinkAccArray.html</filename>
    <member kind="function">
      <type></type>
      <name>LinkAccArray</name>
      <anchorfile>classiDynTree_1_1LinkAccArray.html</anchorfile>
      <anchor>a5c7041ead86eff3fb9f8668917710725</anchor>
      <arglist>(unsigned int nrOfLinks=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkAccArray</name>
      <anchorfile>classiDynTree_1_1LinkAccArray.html</anchorfile>
      <anchor>a37aab6df89ab4d80bc5ccc3f10702b50</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1LinkAccArray.html</anchorfile>
      <anchor>aadead64483c262ef666540ceb486a3c2</anchor>
      <arglist>(unsigned int nrOfLinks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1LinkAccArray.html</anchorfile>
      <anchor>a186a11d1c6b96beb9bd9648dcd7c82ff</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1LinkAccArray.html</anchorfile>
      <anchor>a4b266d1b395d205f35cf0fd2ecadc20b</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SpatialAcc &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1LinkAccArray.html</anchorfile>
      <anchor>ae9a0cad711dfab6240e92dda3e9e538a</anchor>
      <arglist>(const LinkIndex link)</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::SpatialAcc &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1LinkAccArray.html</anchorfile>
      <anchor>add96ec92738d49786357baf49b9ddd00</anchor>
      <arglist>(const LinkIndex link) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfLinks</name>
      <anchorfile>classiDynTree_1_1LinkAccArray.html</anchorfile>
      <anchor>a391c829ad84d7c3428d2d238bd111d03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1LinkAccArray.html</anchorfile>
      <anchor>a77ec45c0a886cc4928a02791cd0ef28c</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LinkAccArray</name>
      <anchorfile>classiDynTree_1_1LinkAccArray.html</anchorfile>
      <anchor>a71fc9b738f2fb6629ea71fe281397614</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::LinkArticulatedBodyInertias</name>
    <filename>classiDynTree_1_1LinkArticulatedBodyInertias.html</filename>
    <member kind="function">
      <type></type>
      <name>LinkArticulatedBodyInertias</name>
      <anchorfile>classiDynTree_1_1LinkArticulatedBodyInertias.html</anchorfile>
      <anchor>a428a2b812aab6c4183b028b739d213de</anchor>
      <arglist>(unsigned int nrOfLinks=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkArticulatedBodyInertias</name>
      <anchorfile>classiDynTree_1_1LinkArticulatedBodyInertias.html</anchorfile>
      <anchor>a7c50ce787727d41f0a3b7fc1ee6c05f3</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1LinkArticulatedBodyInertias.html</anchorfile>
      <anchor>a49f4ff52b7b68528852211887f9745bd</anchor>
      <arglist>(unsigned int nrOfLinks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1LinkArticulatedBodyInertias.html</anchorfile>
      <anchor>a89527b228df647498781e21c7b594f12</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1LinkArticulatedBodyInertias.html</anchorfile>
      <anchor>aee25540e696e97515780de19b9ad368f</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::ArticulatedBodyInertia &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1LinkArticulatedBodyInertias.html</anchorfile>
      <anchor>a3a0e71e5b7e2f95bdb4b6dd65fe79221</anchor>
      <arglist>(const LinkIndex link)</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::ArticulatedBodyInertia &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1LinkArticulatedBodyInertias.html</anchorfile>
      <anchor>a00beb120126f4e4b52cdaa0d7e473c92</anchor>
      <arglist>(const LinkIndex link) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LinkArticulatedBodyInertias</name>
      <anchorfile>classiDynTree_1_1LinkArticulatedBodyInertias.html</anchorfile>
      <anchor>a76c89f6bcbb1afe3175e7306b542d980</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::LinkContactWrenches</name>
    <filename>classiDynTree_1_1LinkContactWrenches.html</filename>
    <member kind="function">
      <type></type>
      <name>LinkContactWrenches</name>
      <anchorfile>classiDynTree_1_1LinkContactWrenches.html</anchorfile>
      <anchor>ae9c79fa86d7b73edc9dead1e9738083c</anchor>
      <arglist>(unsigned int nrOfLinks=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkContactWrenches</name>
      <anchorfile>classiDynTree_1_1LinkContactWrenches.html</anchorfile>
      <anchor>a0516116ada91381967e333d5e6cc908b</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1LinkContactWrenches.html</anchorfile>
      <anchor>a126a2f7d58a8ef0026dcd8b513d69db3</anchor>
      <arglist>(unsigned int nrOfLinks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1LinkContactWrenches.html</anchorfile>
      <anchor>a6c2ffb02bbc0db3d742d38eb5321def3</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfContactsForLink</name>
      <anchorfile>classiDynTree_1_1LinkContactWrenches.html</anchorfile>
      <anchor>a90dc46c5c87c617a17fdc56fa81fc7b8</anchor>
      <arglist>(const LinkIndex linkIndex) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNrOfContactsForLink</name>
      <anchorfile>classiDynTree_1_1LinkContactWrenches.html</anchorfile>
      <anchor>a1a3f966de005610435707f3ee8c5f18c</anchor>
      <arglist>(const LinkIndex linkIndex, const size_t nrOfContacts)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfLinks</name>
      <anchorfile>classiDynTree_1_1LinkContactWrenches.html</anchorfile>
      <anchor>a64a542c1c49ae2a22455ff5a3793d043</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ContactWrench &amp;</type>
      <name>contactWrench</name>
      <anchorfile>classiDynTree_1_1LinkContactWrenches.html</anchorfile>
      <anchor>ab0468e3c9efa1cd67b7cef4e34add0ea</anchor>
      <arglist>(const LinkIndex linkIndex, const size_t contactIndex)</arglist>
    </member>
    <member kind="function">
      <type>const ContactWrench &amp;</type>
      <name>contactWrench</name>
      <anchorfile>classiDynTree_1_1LinkContactWrenches.html</anchorfile>
      <anchor>a8aaf024e165bb7d6ce90d18a2c3b852d</anchor>
      <arglist>(const LinkIndex linkIndex, const size_t contactIndex) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeNetWrenches</name>
      <anchorfile>classiDynTree_1_1LinkContactWrenches.html</anchorfile>
      <anchor>af2fa68582633a61f84a0865baba0a22b</anchor>
      <arglist>(LinkNetExternalWrenches &amp;netWrenches) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1LinkContactWrenches.html</anchorfile>
      <anchor>a4277c1b8738d1b6bdf5620bdf9d6d850</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::LinkElement</name>
    <filename>classiDynTree_1_1LinkElement.html</filename>
    <base>iDynTree::XMLElement</base>
    <member kind="function">
      <type></type>
      <name>LinkElement</name>
      <anchorfile>classiDynTree_1_1LinkElement.html</anchorfile>
      <anchor>a74155e22f782b39e1f356d9bf4610ea2</anchor>
      <arglist>(iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>linkName</name>
      <anchorfile>classiDynTree_1_1LinkElement.html</anchorfile>
      <anchor>a78e18670b76b1886d0a10d6386ee2abd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; VisualElement::VisualInfo &gt; &amp;</type>
      <name>visuals</name>
      <anchorfile>classiDynTree_1_1LinkElement.html</anchorfile>
      <anchor>af587dcda2875fc6077fe0a89d34a1e0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; VisualElement::VisualInfo &gt; &amp;</type>
      <name>collisions</name>
      <anchorfile>classiDynTree_1_1LinkElement.html</anchorfile>
      <anchor>ac5d2a9eb4a4829c556c6d763cc5d7917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exitElementScope</name>
      <anchorfile>classiDynTree_1_1LinkElement.html</anchorfile>
      <anchor>aed8591a7d1c2a43fa4671cf3d28df1b6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAttributes</name>
      <anchorfile>classiDynTree_1_1LinkElement.html</anchorfile>
      <anchor>a69e757ba5c3e6949b847ecff39e84c07</anchor>
      <arglist>(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;attributes) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>childHasBeenParsed</name>
      <anchorfile>classiDynTree_1_1LinkElement.html</anchorfile>
      <anchor>a93a63088eacd944a772bc7a60e3928ec</anchor>
      <arglist>(std::shared_ptr&lt; iDynTree::XMLElement &gt; child) override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; iDynTree::XMLElement &gt;</type>
      <name>childElementForName</name>
      <anchorfile>classiDynTree_1_1LinkElement.html</anchorfile>
      <anchor>a86567df29420bc4e2eefb877a144830e</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ab40851b7629a74107f2183ca36e412e4</anchor>
      <arglist>(std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a16759fb450635662dced0eb2ace0228b</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChildHasBeenParsedCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a69171cc4b5c552b97f44375029356a2e</anchor>
      <arglist>(std::function&lt; void(std::shared_ptr&lt; XMLElement &gt;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt;</type>
      <name>attributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2a182ac17f5e644b113a67e02c3595e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; void()&gt;</type>
      <name>exitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a04ea33b2a4ebf84647fb6d38e24ba0e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a7129fb1e69a5bc819872e65d3965296d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; XMLElement &gt; &gt;</type>
      <name>children</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2f51748fc6eed4724e86dc5e52ebd5ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt; &gt;</type>
      <name>attributes</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a27347aca070a5dfc250077b6cc3e3748</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>childHasBeenParsed</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ac92ce9b144b27970e09f6f9dff77f251</anchor>
      <arglist>(std::shared_ptr&lt; XMLElement &gt; parsedChild)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsedCharacters</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a949bcf8e3496896d2b6d7d6da72870a7</anchor>
      <arglist>(const std::string &amp;characters)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParsedTextContent</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>abebc95353394912e187ad70e6078fcdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a3d8e1b737e614b35e3df0a4f76ac645b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::LinkInertias</name>
    <filename>classiDynTree_1_1LinkInertias.html</filename>
    <member kind="function">
      <type></type>
      <name>LinkInertias</name>
      <anchorfile>classiDynTree_1_1LinkInertias.html</anchorfile>
      <anchor>a034ecf0e7943f7c08cc4ec2217296b24</anchor>
      <arglist>(unsigned int nrOfLinks=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkInertias</name>
      <anchorfile>classiDynTree_1_1LinkInertias.html</anchorfile>
      <anchor>a60cd6e5520ade85b41e266eb3fa0f152</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1LinkInertias.html</anchorfile>
      <anchor>a1783ad9c631bbc9ba9cd04dcfd8432e8</anchor>
      <arglist>(unsigned int nrOfLinks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1LinkInertias.html</anchorfile>
      <anchor>aae5a016b1e4a4fbbe64456b49eabf90a</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1LinkInertias.html</anchorfile>
      <anchor>ad8155acbfd65b19d7c373f55e19cc4ed</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SpatialInertia &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1LinkInertias.html</anchorfile>
      <anchor>ac84c47892c882ea9ef97ac2fe5dd9183</anchor>
      <arglist>(const LinkIndex link)</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::SpatialInertia &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1LinkInertias.html</anchorfile>
      <anchor>a28468e4fcbaa9bd412372c8ff1bc80f1</anchor>
      <arglist>(const LinkIndex link) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LinkInertias</name>
      <anchorfile>classiDynTree_1_1LinkInertias.html</anchorfile>
      <anchor>a829547f0c196567d213789ff44b34288</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::LinkPositions</name>
    <filename>classiDynTree_1_1LinkPositions.html</filename>
    <member kind="function">
      <type></type>
      <name>LinkPositions</name>
      <anchorfile>classiDynTree_1_1LinkPositions.html</anchorfile>
      <anchor>ab45d954472a9b2f8a9e43e6e8a9e2efd</anchor>
      <arglist>(unsigned int nrOfLinks=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkPositions</name>
      <anchorfile>classiDynTree_1_1LinkPositions.html</anchorfile>
      <anchor>adddcfd14514bf0291ca2da74b32e64bf</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1LinkPositions.html</anchorfile>
      <anchor>add0edb55622221669a7ebe7e71253782</anchor>
      <arglist>(unsigned int nrOfLinks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1LinkPositions.html</anchorfile>
      <anchor>a0de7132a04d7e5ab09cf6550020a5c52</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1LinkPositions.html</anchorfile>
      <anchor>a947b7f210de62f5b33e30cbae81d217d</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfLinks</name>
      <anchorfile>classiDynTree_1_1LinkPositions.html</anchorfile>
      <anchor>a7e19bd0bea206810ddc587d508447106</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Transform &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1LinkPositions.html</anchorfile>
      <anchor>a6cc253da93e1202e72c5e10f77261652</anchor>
      <arglist>(const LinkIndex link)</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::Transform &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1LinkPositions.html</anchorfile>
      <anchor>aa718e39be47e12000da0a2ebf4eba515</anchor>
      <arglist>(const LinkIndex link) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1LinkPositions.html</anchorfile>
      <anchor>a137a28e8ed47b61f6295440fb71ad080</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LinkPositions</name>
      <anchorfile>classiDynTree_1_1LinkPositions.html</anchorfile>
      <anchor>a853a7a1289b72f22c279eb6f8733163f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::LinkSensor</name>
    <filename>classiDynTree_1_1LinkSensor.html</filename>
    <base>iDynTree::Sensor</base>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~LinkSensor</name>
      <anchorfile>classiDynTree_1_1LinkSensor.html</anchorfile>
      <anchor>aa89b9206b6f5ff24ccd37cd673f9ff15</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getParentLink</name>
      <anchorfile>classiDynTree_1_1LinkSensor.html</anchorfile>
      <anchor>a4d664e0bb40e93c9c966f286a5205ed6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LinkIndex</type>
      <name>getParentLinkIndex</name>
      <anchorfile>classiDynTree_1_1LinkSensor.html</anchorfile>
      <anchor>a45fc4c098204d10e64c4c82ae58ddd2c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Transform</type>
      <name>getLinkSensorTransform</name>
      <anchorfile>classiDynTree_1_1LinkSensor.html</anchorfile>
      <anchor>ad5cb2901457ca5e0dedee1a6230ac858</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setParentLink</name>
      <anchorfile>classiDynTree_1_1LinkSensor.html</anchorfile>
      <anchor>a9420746600b52d524f2c6fde5023147d</anchor>
      <arglist>(const std::string &amp;parentLinkName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setParentLinkIndex</name>
      <anchorfile>classiDynTree_1_1LinkSensor.html</anchorfile>
      <anchor>aec8002495ae7ca62e3e8b516c55e5a0c</anchor>
      <arglist>(const LinkIndex &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setLinkSensorTransform</name>
      <anchorfile>classiDynTree_1_1LinkSensor.html</anchorfile>
      <anchor>a716a29b8598842583ac5c92903a978f5</anchor>
      <arglist>(const iDynTree::Transform &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1LinkSensor.html</anchorfile>
      <anchor>ab715a5a2deca41ecb920133b075f7c58</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>a4a62adb1d4c1e4bedca8762783ab0468</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SensorType</type>
      <name>getSensorType</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>a6dd712921c150fddd33217694feb3652</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>ace89679ad53fd11326ec00dc82ebd925</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setName</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>a40cafcac5f0c1567e44d53c775641818</anchor>
      <arglist>(const std::string &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Sensor *</type>
      <name>clone</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>a6428f5534e54c607bc5e773073c6c50e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>updateIndices</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>ae91fc5a5922a99815b0cdc9de9f1ac88</anchor>
      <arglist>(const Model &amp;model)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>updateIndeces</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>af70d378d9a03ea209587a3a9b86b4061</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::LinkTraversalsCache</name>
    <filename>classiDynTree_1_1LinkTraversalsCache.html</filename>
    <member kind="function">
      <type></type>
      <name>LinkTraversalsCache</name>
      <anchorfile>classiDynTree_1_1LinkTraversalsCache.html</anchorfile>
      <anchor>ae978ab8498e4ffcacad8e0ecba45689f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LinkTraversalsCache</name>
      <anchorfile>classiDynTree_1_1LinkTraversalsCache.html</anchorfile>
      <anchor>aac83b2dea2a31b8066c5a25c4945f02a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1LinkTraversalsCache.html</anchorfile>
      <anchor>a26383ef1b495477b0a6b074c9d420fb3</anchor>
      <arglist>(unsigned int nrOfLinks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1LinkTraversalsCache.html</anchorfile>
      <anchor>af75c2b1b4dd62e24dcf0abb5666b5f94</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>Traversal &amp;</type>
      <name>getTraversalWithLinkAsBase</name>
      <anchorfile>classiDynTree_1_1LinkTraversalsCache.html</anchorfile>
      <anchor>a89abd64dd20f9329b7e1113244ea3d47</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::LinkIndex linkIdx)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::LinkUnknownWrenchContacts</name>
    <filename>classiDynTree_1_1LinkUnknownWrenchContacts.html</filename>
    <member kind="function">
      <type></type>
      <name>LinkUnknownWrenchContacts</name>
      <anchorfile>classiDynTree_1_1LinkUnknownWrenchContacts.html</anchorfile>
      <anchor>a87a99a9299dd8228c474485dd2762acf</anchor>
      <arglist>(unsigned int nrOfLinks=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkUnknownWrenchContacts</name>
      <anchorfile>classiDynTree_1_1LinkUnknownWrenchContacts.html</anchorfile>
      <anchor>aa2eb8f43a372a3b3968a9489194d827a</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classiDynTree_1_1LinkUnknownWrenchContacts.html</anchorfile>
      <anchor>ac2721f47e70d9363f649127fb6df2d36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1LinkUnknownWrenchContacts.html</anchorfile>
      <anchor>acdcac2a19937332a6fb9ac3c9046e8c6</anchor>
      <arglist>(unsigned int nrOfLinks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1LinkUnknownWrenchContacts.html</anchorfile>
      <anchor>a8c5cec82f622f985e85a85b739ab5206</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfContactsForLink</name>
      <anchorfile>classiDynTree_1_1LinkUnknownWrenchContacts.html</anchorfile>
      <anchor>ab02f3154578691dcae5dc469926e0716</anchor>
      <arglist>(const LinkIndex linkIndex) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNrOfContactsForLink</name>
      <anchorfile>classiDynTree_1_1LinkUnknownWrenchContacts.html</anchorfile>
      <anchor>abeaeeee221e5ad4e8a173b5ceaba35a3</anchor>
      <arglist>(const LinkIndex linkIndex, const size_t nrOfContacts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNewContactForLink</name>
      <anchorfile>classiDynTree_1_1LinkUnknownWrenchContacts.html</anchorfile>
      <anchor>ab859d42bfa350fd0d4763e426458c4c4</anchor>
      <arglist>(const LinkIndex linkIndex, const UnknownWrenchContact &amp;newContact)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addNewContactInFrame</name>
      <anchorfile>classiDynTree_1_1LinkUnknownWrenchContacts.html</anchorfile>
      <anchor>aaeb2aa68012fde9f8e398f2fb461072a</anchor>
      <arglist>(const Model &amp;model, const FrameIndex frameIndex, const UnknownWrenchContact &amp;newContact)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addNewUnknownFullWrenchInFrameOrigin</name>
      <anchorfile>classiDynTree_1_1LinkUnknownWrenchContacts.html</anchorfile>
      <anchor>a9b361ddaa6343b7a0db5481434e3edcf</anchor>
      <arglist>(const Model &amp;model, const FrameIndex frameIndex)</arglist>
    </member>
    <member kind="function">
      <type>UnknownWrenchContact &amp;</type>
      <name>contactWrench</name>
      <anchorfile>classiDynTree_1_1LinkUnknownWrenchContacts.html</anchorfile>
      <anchor>ad028fd124d282c79334908721d90101a</anchor>
      <arglist>(const LinkIndex linkIndex, const size_t contactIndex)</arglist>
    </member>
    <member kind="function">
      <type>const UnknownWrenchContact &amp;</type>
      <name>contactWrench</name>
      <anchorfile>classiDynTree_1_1LinkUnknownWrenchContacts.html</anchorfile>
      <anchor>abd5fb5d2f6ee5e51151bdcdbf708f57f</anchor>
      <arglist>(const LinkIndex linkIndex, const size_t contactIndex) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1LinkUnknownWrenchContacts.html</anchorfile>
      <anchor>ab0f8855d902a74c2e2a5d7dcf0494ba2</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::LinkVelArray</name>
    <filename>classiDynTree_1_1LinkVelArray.html</filename>
    <member kind="function">
      <type></type>
      <name>LinkVelArray</name>
      <anchorfile>classiDynTree_1_1LinkVelArray.html</anchorfile>
      <anchor>a6eff07622dbd96fe6a2a0b2b57bdddf9</anchor>
      <arglist>(unsigned int nrOfLinks=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkVelArray</name>
      <anchorfile>classiDynTree_1_1LinkVelArray.html</anchorfile>
      <anchor>a0db6ceb850404992e14c5daadad3ffab</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1LinkVelArray.html</anchorfile>
      <anchor>a6cd4f56e044364ef2065b930756ac10c</anchor>
      <arglist>(unsigned int nrOfLinks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1LinkVelArray.html</anchorfile>
      <anchor>ab9358f093e8458e97521221f4edab7ac</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1LinkVelArray.html</anchorfile>
      <anchor>a2a62e408e4665d049379464f3bebeaba</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfLinks</name>
      <anchorfile>classiDynTree_1_1LinkVelArray.html</anchorfile>
      <anchor>ab32fa35c3ca57e45e0e553911b3072cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Twist &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1LinkVelArray.html</anchorfile>
      <anchor>a52f28aa9dccbd78f33301d509144f03f</anchor>
      <arglist>(const LinkIndex link)</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::Twist &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1LinkVelArray.html</anchorfile>
      <anchor>a6fb4885d23975ce94ea88f931a230d91</anchor>
      <arglist>(const LinkIndex link) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1LinkVelArray.html</anchorfile>
      <anchor>a8eb786acdf9b3ff813544882390900fa</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LinkVelArray</name>
      <anchorfile>classiDynTree_1_1LinkVelArray.html</anchorfile>
      <anchor>a7da01de306537be381a8304d3ade011d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::LinkWrenches</name>
    <filename>classiDynTree_1_1LinkWrenches.html</filename>
    <member kind="function">
      <type></type>
      <name>LinkWrenches</name>
      <anchorfile>classiDynTree_1_1LinkWrenches.html</anchorfile>
      <anchor>abba042f76eebb5da95b2cf13723a1b30</anchor>
      <arglist>(unsigned int nrOfLinks=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkWrenches</name>
      <anchorfile>classiDynTree_1_1LinkWrenches.html</anchorfile>
      <anchor>aee6e5ba77e931866ae075a5ce4375894</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1LinkWrenches.html</anchorfile>
      <anchor>a181e3b41ea17d87244a15c128f93e762</anchor>
      <arglist>(unsigned int nrOfLinks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1LinkWrenches.html</anchorfile>
      <anchor>a26256673c3fcf477288fb2e8282af8e0</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1LinkWrenches.html</anchorfile>
      <anchor>a08cc512f023f204ac15cb4838c240faa</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfLinks</name>
      <anchorfile>classiDynTree_1_1LinkWrenches.html</anchorfile>
      <anchor>ab0f166bd81c570277f51fe1a50d9e114</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Wrench &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1LinkWrenches.html</anchorfile>
      <anchor>a53daa760b65fd405f3200ac013cddfb4</anchor>
      <arglist>(const LinkIndex link)</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::Wrench &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1LinkWrenches.html</anchorfile>
      <anchor>a268b8b75d82abc06d4a14c88bfd82112</anchor>
      <arglist>(const LinkIndex link) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1LinkWrenches.html</anchorfile>
      <anchor>a0d308fcf519f4e5122108bb4ca4ac779</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1LinkWrenches.html</anchorfile>
      <anchor>a47bc3d85d4e5d3dc9e89f1a763d3a28d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LinkWrenches</name>
      <anchorfile>classiDynTree_1_1LinkWrenches.html</anchorfile>
      <anchor>ab12b1696db02585a9ef573530d7fb3fd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::MaterialElement</name>
    <filename>classiDynTree_1_1MaterialElement.html</filename>
    <base>iDynTree::XMLElement</base>
    <class kind="struct">iDynTree::MaterialElement::MaterialInfo</class>
    <member kind="function">
      <type></type>
      <name>MaterialElement</name>
      <anchorfile>classiDynTree_1_1MaterialElement.html</anchorfile>
      <anchor>a3977b40f5c35c3fac5daa366535a9655</anchor>
      <arglist>(std::shared_ptr&lt; MaterialInfo &gt; materialInfo)</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; MaterialInfo &gt;</type>
      <name>materialInfo</name>
      <anchorfile>classiDynTree_1_1MaterialElement.html</anchorfile>
      <anchor>ab9532a451faeb4921dd05441a607fdc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAttributes</name>
      <anchorfile>classiDynTree_1_1MaterialElement.html</anchorfile>
      <anchor>a562850e48a98db643e05148e4cf21248</anchor>
      <arglist>(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;attributes) override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; XMLElement &gt;</type>
      <name>childElementForName</name>
      <anchorfile>classiDynTree_1_1MaterialElement.html</anchorfile>
      <anchor>a80d909a802a12919c054a672ba2019d0</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ab40851b7629a74107f2183ca36e412e4</anchor>
      <arglist>(std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a16759fb450635662dced0eb2ace0228b</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChildHasBeenParsedCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a69171cc4b5c552b97f44375029356a2e</anchor>
      <arglist>(std::function&lt; void(std::shared_ptr&lt; XMLElement &gt;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt;</type>
      <name>attributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2a182ac17f5e644b113a67e02c3595e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; void()&gt;</type>
      <name>exitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a04ea33b2a4ebf84647fb6d38e24ba0e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a7129fb1e69a5bc819872e65d3965296d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; XMLElement &gt; &gt;</type>
      <name>children</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2f51748fc6eed4724e86dc5e52ebd5ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt; &gt;</type>
      <name>attributes</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a27347aca070a5dfc250077b6cc3e3748</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>exitElementScope</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a66d20512ef5debea77d1919835dbda1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>childHasBeenParsed</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ac92ce9b144b27970e09f6f9dff77f251</anchor>
      <arglist>(std::shared_ptr&lt; XMLElement &gt; parsedChild)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsedCharacters</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a949bcf8e3496896d2b6d7d6da72870a7</anchor>
      <arglist>(const std::string &amp;characters)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParsedTextContent</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>abebc95353394912e187ad70e6078fcdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a3d8e1b737e614b35e3df0a4f76ac645b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::MaterialElement::MaterialInfo</name>
    <filename>structiDynTree_1_1MaterialElement_1_1MaterialInfo.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>m_name</name>
      <anchorfile>structiDynTree_1_1MaterialElement_1_1MaterialInfo.html</anchorfile>
      <anchor>a65b5dc3819d768bc7257e4dd65a7e1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_textureFilename</name>
      <anchorfile>structiDynTree_1_1MaterialElement_1_1MaterialInfo.html</anchorfile>
      <anchor>a0e165d9fcb65f08fbb401a7ac573341c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; iDynTree::Vector4 &gt;</type>
      <name>m_rgba</name>
      <anchorfile>structiDynTree_1_1MaterialElement_1_1MaterialInfo.html</anchorfile>
      <anchor>a09fb33ac40fdf6ca3991f426fb0589c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::MatrixDynSize</name>
    <filename>classiDynTree_1_1MatrixDynSize.html</filename>
    <member kind="function">
      <type></type>
      <name>MatrixDynSize</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a062017b1f0958fa8d18edd822ad7018f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixDynSize</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a3bcf357566dc6701fb6f7bcebf0e96e0</anchor>
      <arglist>(unsigned int _rows, unsigned int _cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixDynSize</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a71543ae865b75ade4cabb6246ebf6f5f</anchor>
      <arglist>(const double *in_data, const unsigned int in_rows, const unsigned int in_cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixDynSize</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a280957c0323a79009ccee5708668ca5c</anchor>
      <arglist>(const MatrixDynSize &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MatrixDynSize &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a2f73b49d686f1c0c5179392e79079d3f</anchor>
      <arglist>(const MatrixDynSize &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixDynSize</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a91c2881a6786820018f7ed4aaedf1c37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a3b50de2905cdcb1607bd8c33cb74f82f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae8065fef7f00140e0dadd753d3ffee9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a071eb4583b2bd16399cf4bb460e15db0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a9f5604c4e5ae10793383ad9826f3c0c0</anchor>
      <arglist>(const unsigned int _newRows, const unsigned int _newCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a23e474c7161903c18be88d8fac2b4137</anchor>
      <arglist>(const size_t _newCapacity)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aacda29701a42c3943a781b9876500daf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ad5c3a0b1b9ce8c691194c652adf95a5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRowMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aa8af99c672e6a7e188115d2a8144a1c7</anchor>
      <arglist>(double *rowMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillColMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ab11629d6f89ef3d4051867e44abdf76e</anchor>
      <arglist>(double *colMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aa21d33ae39633c077e70c4c31c3e2314</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a901b96fd92d32b2057ea300867fc3028</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a16eee1ed872f339030829be673d59cca</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a46dc64f565e24e95a521523ff1266c97</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a270a9502870b8e4377d2077798f46539</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a20d1b70f6bdc0d4235c86eb1ade4b4d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a77e45ef11c7624ed8b7e150ebd041825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae86eb69f39997bd181971d9bd5f56950</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a80eba7978bcce15f4146f815c557f1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_rows</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae518ef4c4cd7014e6f504c89e2ab68e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_cols</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a07447be5c0420a1c297e605dffbc938b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_capacity</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a0a0c9e92f78c8d8e6676da367c83bba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aa21d33ae39633c077e70c4c31c3e2314</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a901b96fd92d32b2057ea300867fc3028</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a16eee1ed872f339030829be673d59cca</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a46dc64f565e24e95a521523ff1266c97</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a270a9502870b8e4377d2077798f46539</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a20d1b70f6bdc0d4235c86eb1ade4b4d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a77e45ef11c7624ed8b7e150ebd041825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae86eb69f39997bd181971d9bd5f56950</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatrixElement</name>
    <filename>classMatrixElement.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classMatrixElement.html</anchorfile>
      <anchor>ad2b2624abb323ca926f531d72c63d66a</anchor>
      <arglist>(const MatrixElement &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lowerTriangularCompare</name>
      <anchorfile>classMatrixElement.html</anchorfile>
      <anchor>a44aaabbb8e978da176851c48ae3027f2</anchor>
      <arglist>(const MatrixElement &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>row</name>
      <anchorfile>classMatrixElement.html</anchorfile>
      <anchor>af6f37085cb771a34709bd98bea557ada</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>col</name>
      <anchorfile>classMatrixElement.html</anchorfile>
      <anchor>aa72c3c428993fa2d0bf2576ea7e15f93</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::MatrixFixSize</name>
    <filename>classiDynTree_1_1MatrixFixSize.html</filename>
    <templarg>nRows</templarg>
    <templarg>nCols</templarg>
    <member kind="function">
      <type></type>
      <name>MatrixFixSize</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a5a0f188608c558f9865c068ff219fbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixFixSize</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a5aaf0b2636ea1f877ec540384990d434</anchor>
      <arglist>(const double *in_data, const unsigned int in_rows, const unsigned int in_cols)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>afa9fff22a34eb198785d87ffe161488f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aa4afb9030800a8424afd9a8bb36d8972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a26bd376a8f4cfa044ff366a22f1aab6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRowMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a6da0a936d351418e0dcb4d67f3d0abbc</anchor>
      <arglist>(double *rowMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillColMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a58750c21e5e8c31c54c3eed7dd2309b6</anchor>
      <arglist>(double *colMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aab67a981ed6a31503d0aca8b4589d6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a1323e690b88b1abe04bd838db6546637</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a8e916f4550fec92847dab198695299a1</anchor>
      <arglist>[nRows *nCols]</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aab67a981ed6a31503d0aca8b4589d6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a1323e690b88b1abe04bd838db6546637</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatrixFixSize&lt; 2, 3 &gt;</name>
    <filename>classiDynTree_1_1MatrixFixSize.html</filename>
    <member kind="function">
      <type></type>
      <name>MatrixFixSize</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a5a0f188608c558f9865c068ff219fbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixFixSize</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a5aaf0b2636ea1f877ec540384990d434</anchor>
      <arglist>(const double *in_data, const unsigned int in_rows, const unsigned int in_cols)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>afa9fff22a34eb198785d87ffe161488f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aa4afb9030800a8424afd9a8bb36d8972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a26bd376a8f4cfa044ff366a22f1aab6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRowMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a6da0a936d351418e0dcb4d67f3d0abbc</anchor>
      <arglist>(double *rowMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillColMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a58750c21e5e8c31c54c3eed7dd2309b6</anchor>
      <arglist>(double *colMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aab67a981ed6a31503d0aca8b4589d6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a1323e690b88b1abe04bd838db6546637</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a8e916f4550fec92847dab198695299a1</anchor>
      <arglist>[nRows *nCols]</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aab67a981ed6a31503d0aca8b4589d6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a1323e690b88b1abe04bd838db6546637</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatrixFixSize&lt; 3, 3 &gt;</name>
    <filename>classiDynTree_1_1MatrixFixSize.html</filename>
    <member kind="function">
      <type></type>
      <name>MatrixFixSize</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a5a0f188608c558f9865c068ff219fbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixFixSize</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a5aaf0b2636ea1f877ec540384990d434</anchor>
      <arglist>(const double *in_data, const unsigned int in_rows, const unsigned int in_cols)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>afa9fff22a34eb198785d87ffe161488f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aa4afb9030800a8424afd9a8bb36d8972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a26bd376a8f4cfa044ff366a22f1aab6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRowMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a6da0a936d351418e0dcb4d67f3d0abbc</anchor>
      <arglist>(double *rowMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillColMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a58750c21e5e8c31c54c3eed7dd2309b6</anchor>
      <arglist>(double *colMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aab67a981ed6a31503d0aca8b4589d6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a1323e690b88b1abe04bd838db6546637</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a8e916f4550fec92847dab198695299a1</anchor>
      <arglist>[nRows *nCols]</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aab67a981ed6a31503d0aca8b4589d6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a1323e690b88b1abe04bd838db6546637</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatrixFixSize&lt; 3, 4 &gt;</name>
    <filename>classiDynTree_1_1MatrixFixSize.html</filename>
    <member kind="function">
      <type></type>
      <name>MatrixFixSize</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a5a0f188608c558f9865c068ff219fbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixFixSize</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a5aaf0b2636ea1f877ec540384990d434</anchor>
      <arglist>(const double *in_data, const unsigned int in_rows, const unsigned int in_cols)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>afa9fff22a34eb198785d87ffe161488f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aa4afb9030800a8424afd9a8bb36d8972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a26bd376a8f4cfa044ff366a22f1aab6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRowMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a6da0a936d351418e0dcb4d67f3d0abbc</anchor>
      <arglist>(double *rowMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillColMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a58750c21e5e8c31c54c3eed7dd2309b6</anchor>
      <arglist>(double *colMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aab67a981ed6a31503d0aca8b4589d6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a1323e690b88b1abe04bd838db6546637</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a8e916f4550fec92847dab198695299a1</anchor>
      <arglist>[nRows *nCols]</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aab67a981ed6a31503d0aca8b4589d6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a1323e690b88b1abe04bd838db6546637</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatrixFixSize&lt; 4, 3 &gt;</name>
    <filename>classiDynTree_1_1MatrixFixSize.html</filename>
    <member kind="function">
      <type></type>
      <name>MatrixFixSize</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a5a0f188608c558f9865c068ff219fbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixFixSize</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a5aaf0b2636ea1f877ec540384990d434</anchor>
      <arglist>(const double *in_data, const unsigned int in_rows, const unsigned int in_cols)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>afa9fff22a34eb198785d87ffe161488f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aa4afb9030800a8424afd9a8bb36d8972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a26bd376a8f4cfa044ff366a22f1aab6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRowMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a6da0a936d351418e0dcb4d67f3d0abbc</anchor>
      <arglist>(double *rowMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillColMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a58750c21e5e8c31c54c3eed7dd2309b6</anchor>
      <arglist>(double *colMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aab67a981ed6a31503d0aca8b4589d6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a1323e690b88b1abe04bd838db6546637</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a8e916f4550fec92847dab198695299a1</anchor>
      <arglist>[nRows *nCols]</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aab67a981ed6a31503d0aca8b4589d6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a1323e690b88b1abe04bd838db6546637</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatrixFixSize&lt; 4, 4 &gt;</name>
    <filename>classiDynTree_1_1MatrixFixSize.html</filename>
    <member kind="function">
      <type></type>
      <name>MatrixFixSize</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a5a0f188608c558f9865c068ff219fbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixFixSize</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a5aaf0b2636ea1f877ec540384990d434</anchor>
      <arglist>(const double *in_data, const unsigned int in_rows, const unsigned int in_cols)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>afa9fff22a34eb198785d87ffe161488f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aa4afb9030800a8424afd9a8bb36d8972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a26bd376a8f4cfa044ff366a22f1aab6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRowMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a6da0a936d351418e0dcb4d67f3d0abbc</anchor>
      <arglist>(double *rowMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillColMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a58750c21e5e8c31c54c3eed7dd2309b6</anchor>
      <arglist>(double *colMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aab67a981ed6a31503d0aca8b4589d6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a1323e690b88b1abe04bd838db6546637</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a8e916f4550fec92847dab198695299a1</anchor>
      <arglist>[nRows *nCols]</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aab67a981ed6a31503d0aca8b4589d6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a1323e690b88b1abe04bd838db6546637</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::MatrixSelector</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1MatrixSelector.html</filename>
    <base>iDynTree::optimalcontrol::Selector</base>
    <member kind="function">
      <type></type>
      <name>MatrixSelector</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MatrixSelector.html</anchorfile>
      <anchor>ada5e8ccfa5c51963b4225906bcd605f2</anchor>
      <arglist>(const MatrixDynSize &amp;selectorMatrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MatrixSelector</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MatrixSelector.html</anchorfile>
      <anchor>aebef503b040d8225d88843e84a34e807</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VectorDynSize &amp;</type>
      <name>select</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MatrixSelector.html</anchorfile>
      <anchor>afc7145391d1257a4947b9f40e9308dd5</anchor>
      <arglist>(const VectorDynSize &amp;fullVector) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MatrixDynSize &amp;</type>
      <name>asSelectorMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>a22e514feed601d1e5d6d46cd2a522b83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparsityStructure &amp;</type>
      <name>sparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>a67898193aac90f6eefb5ca7d52540372</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>ab517313f7436046c4da463cc5a4e9175</anchor>
      <arglist>(const SparsityStructure &amp;sparsity)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>a3e3363a41fed3bb2cbb4218300c35216</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorDynSize</type>
      <name>m_selected</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>a0ad2e3912792c51e813e18fd8cb74480</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MatrixDynSize</type>
      <name>m_selectionMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>ae879af967abc75d5b958ca0da7aa8412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparsityStructure</type>
      <name>m_correspondingHessianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>a944ac90f2e752be02169981ecd526cfe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::optimalcontrol::MeshPoint</name>
    <filename>structiDynTree_1_1optimalcontrol_1_1MeshPoint.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>time</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1MeshPoint.html</anchorfile>
      <anchor>ade655fe61c3ceeb1feec19d2f40115b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MeshPointType</type>
      <name>type</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1MeshPoint.html</anchorfile>
      <anchor>abdc80079b93c3270f7b390454862e172</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MeshPointOrigin</type>
      <name>origin</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1MeshPoint.html</anchorfile>
      <anchor>ac20440a7f5d84a8f7a560ad94cb7f5ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>controlIndex</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1MeshPoint.html</anchorfile>
      <anchor>a88d9e1830b22ef783025d65bfa5464b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>previousControlIndex</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1MeshPoint.html</anchorfile>
      <anchor>a12e981f213866fe100da5c500e056f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>stateIndex</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1MeshPoint.html</anchorfile>
      <anchor>aae8bde9e1c961f07f952e2b1d135e70e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::MeshPointOrigin</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</filename>
    <member kind="function">
      <type></type>
      <name>MeshPointOrigin</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</anchorfile>
      <anchor>ad74a4d354c291914497b5038c5f78aba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshPointOrigin</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</anchorfile>
      <anchor>aeb099eac9daf14c9c46879f6a859170a</anchor>
      <arglist>(const std::string &amp;name, int priority, const std::string &amp;description)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</anchorfile>
      <anchor>a6fa0e85e27026d39b6aa4c25a94cd024</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</anchorfile>
      <anchor>ac753a7bfd3577395794a8b25c5920925</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</anchorfile>
      <anchor>a6d5b84c106961c7f28deb465393facd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</anchorfile>
      <anchor>a20bf48c812b2136fd13d888f868da7e4</anchor>
      <arglist>(const MeshPointOrigin &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</anchorfile>
      <anchor>a93ae72d4d837b6c2bda6aa9918e6d4bd</anchor>
      <arglist>(const MeshPointOrigin &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</anchorfile>
      <anchor>a963c505275f3da208079287272e27d1d</anchor>
      <arglist>(const MeshPointOrigin &amp;rhs) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MeshPointOrigin</type>
      <name>FirstPoint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</anchorfile>
      <anchor>a1f3811805c3956541bcfa086b0863e18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MeshPointOrigin</type>
      <name>LastPoint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</anchorfile>
      <anchor>a9112390d94757192f8be4820ae9f2565</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MeshPointOrigin</type>
      <name>Control</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</anchorfile>
      <anchor>a314a5fa8da29af83411c0ae5af4d0aa8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MeshPointOrigin</type>
      <name>CompensateLongPeriod</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</anchorfile>
      <anchor>ae15e1a00192d8ee57e7b52d60709dbd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MeshPointOrigin</type>
      <name>UserControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</anchorfile>
      <anchor>a3f1a984f1bbb25d50dac66673340a423</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MeshPointOrigin</type>
      <name>UserState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</anchorfile>
      <anchor>af894c6dbb71bcdc501679d09e0cd157f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MeshPointOrigin</type>
      <name>Instant</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</anchorfile>
      <anchor>aa29dea6e45bb2435fda72cd5937553ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MeshPointOrigin</type>
      <name>FillVariables</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</anchorfile>
      <anchor>ac5fd3142fddcd9417f879e5864e56db0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MeshPointOrigin</type>
      <name>TimeRange</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</anchorfile>
      <anchor>acb4a4da5efb0831c89314c034422c1d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MeshPointOrigin</type>
      <name>Ignored</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MeshPointOrigin.html</anchorfile>
      <anchor>a7a20dc775764d0d60d7535dce5782bb4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Model</name>
    <filename>classiDynTree_1_1Model.html</filename>
    <member kind="function">
      <type></type>
      <name>Model</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a0c58c94f8c55be9f63d31f04f174cf0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Model</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a96e83863f4c01d3ef034dd9ebd85bf5e</anchor>
      <arglist>(const Model &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Model &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a98c66b855c928ec9b88f1af53d25b538</anchor>
      <arglist>(const Model &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Model</type>
      <name>copy</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>ae5291043dfff013ca1a1d4270285a974</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Model</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a5ca7d222a730b1473bb83f417b82ee97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfLinks</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>aca270a902d0b0328c0d8afb1727d2154</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getLinkName</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>aac86147dd37cd977de054e55635cd718</anchor>
      <arglist>(const LinkIndex linkIndex) const</arglist>
    </member>
    <member kind="function">
      <type>LinkIndex</type>
      <name>getLinkIndex</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>ae9557eba54c8845eb69c79259299fddb</anchor>
      <arglist>(const std::string &amp;linkName) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidLinkIndex</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>aa5d6b472a34f852a7e3671e41f7e90e8</anchor>
      <arglist>(const LinkIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>LinkPtr</type>
      <name>getLink</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>acc9c57e2cd25d93f764e01eb1d50afd6</anchor>
      <arglist>(const LinkIndex linkIndex)</arglist>
    </member>
    <member kind="function">
      <type>LinkConstPtr</type>
      <name>getLink</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a0f8567a23ec79ebb0668a27f55efa341</anchor>
      <arglist>(const LinkIndex linkIndex) const</arglist>
    </member>
    <member kind="function">
      <type>LinkIndex</type>
      <name>addLink</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a217617e53c6a0d0efb237ba3556fe8b6</anchor>
      <arglist>(const std::string &amp;name, const Link &amp;link)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfJoints</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>ab69c340d5fde147645854c880fbded18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getJointName</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a276aca07d27ee16dd9f53afb9e46f730</anchor>
      <arglist>(const JointIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalMass</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a36a23bd3f7e2740f721b87c6b2d89464</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JointIndex</type>
      <name>getJointIndex</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a9e586e10ab288a30401b767c160181e9</anchor>
      <arglist>(const std::string &amp;jointName) const</arglist>
    </member>
    <member kind="function">
      <type>IJointPtr</type>
      <name>getJoint</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>acea94041a2289f4acf5ec3577502618d</anchor>
      <arglist>(const JointIndex index)</arglist>
    </member>
    <member kind="function">
      <type>IJointConstPtr</type>
      <name>getJoint</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a052e624e2def13190df7813245f4c735</anchor>
      <arglist>(const JointIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidJointIndex</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a9a149aed5e8a9b933a8e6c4c4a715f78</anchor>
      <arglist>(const JointIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinkNameUsed</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a21bdfccdb54557700c4babc278d52323</anchor>
      <arglist>(const std::string linkName) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isJointNameUsed</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a3a7a786baeeae8a5f3c08aca06d5ab35</anchor>
      <arglist>(const std::string jointName) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFrameNameUsed</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a6da12797ce7fd9bc747a6192e1a8632d</anchor>
      <arglist>(const std::string frameName) const</arglist>
    </member>
    <member kind="function">
      <type>JointIndex</type>
      <name>addJoint</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>aaead8cb8c5367589131a877ea121c573</anchor>
      <arglist>(const std::string &amp;jointName, IJointConstPtr joint)</arglist>
    </member>
    <member kind="function">
      <type>JointIndex</type>
      <name>addJoint</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a6b550b42785b54510ea704dbaa4f47c6</anchor>
      <arglist>(const std::string &amp;link1, const std::string &amp;link2, const std::string &amp;jointName, IJointConstPtr joint)</arglist>
    </member>
    <member kind="function">
      <type>JointIndex</type>
      <name>addJointAndLink</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a764763adb198032da5bdfcfc5f6a0748</anchor>
      <arglist>(const std::string &amp;existingLink, const std::string &amp;jointName, IJointConstPtr joint, const std::string &amp;newLinkName, Link &amp;newLink)</arglist>
    </member>
    <member kind="function">
      <type>JointIndex</type>
      <name>insertLinkToExistingJointAndAddJointForDisplacedLink</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a4d1a4e182102ae3c29c97fd2245f4497</anchor>
      <arglist>(const std::string &amp;existingJoint, const std::string &amp;unmovableLink, const Transform &amp;_unmovableLink_X_newLink, const std::string &amp;jointName, IJointConstPtr joint, const std::string &amp;newLinkName, Link &amp;newLink)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfPosCoords</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a14bde5abaf794aa4160f09ba50c64c2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfDOFs</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>aca35ec05d4b7358b38df769deb0513a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfFrames</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>ace5ed1d2735cda051cdd50f9e46c4dd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addAdditionalFrameToLink</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>ab67ec3bb2074412c1002befff50e2f57</anchor>
      <arglist>(const std::string &amp;linkName, const std::string &amp;frameName, iDynTree::Transform link_H_frame)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getFrameName</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a9aaf343086bebc57ec349061d3b24956</anchor>
      <arglist>(const FrameIndex frameIndex) const</arglist>
    </member>
    <member kind="function">
      <type>FrameIndex</type>
      <name>getFrameIndex</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>af64e0e775f931371f0bfb5544adb7375</anchor>
      <arglist>(const std::string &amp;frameName) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidFrameIndex</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>ada72d786e1453f211a7d79f4dc0de8df</anchor>
      <arglist>(const FrameIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>getFrameTransform</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>ad3e8276d1ec7e275aadeb75c1add80b6</anchor>
      <arglist>(const FrameIndex frameIndex) const</arglist>
    </member>
    <member kind="function">
      <type>LinkIndex</type>
      <name>getFrameLink</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a64e8453f19a7c6f4e9dd0d9063062854</anchor>
      <arglist>(const FrameIndex frameIndex) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLinkAdditionalFrames</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>aa10729a2d397c325b1c5b130ec2e36e6</anchor>
      <arglist>(const LinkIndex lnkIndex, std::vector&lt; FrameIndex &gt; &amp;frameIndeces) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfNeighbors</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a7f1740784d873282ad0f0a5da9a56ddf</anchor>
      <arglist>(const LinkIndex link) const</arglist>
    </member>
    <member kind="function">
      <type>Neighbor</type>
      <name>getNeighbor</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>ab5ab577f364a9592ee074a71bbafeb9b</anchor>
      <arglist>(const LinkIndex link, unsigned int neighborIndex) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDefaultBaseLink</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a9e9f250f80cd292f5d9009aad2689ffa</anchor>
      <arglist>(const LinkIndex linkIndex)</arglist>
    </member>
    <member kind="function">
      <type>LinkIndex</type>
      <name>getDefaultBaseLink</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a1a8dc1c97b99ffc51dbf93ecff20e8c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeFullTreeTraversal</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a72469e19312e70ae804a90953989a009</anchor>
      <arglist>(Traversal &amp;traversal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeFullTreeTraversal</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a72909f545efbc21f9b2097cd20716e5f</anchor>
      <arglist>(Traversal &amp;traversal, const LinkIndex traversalBase) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getInertialParameters</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a2c283e000a2d6a5e86770d8616b7e18b</anchor>
      <arglist>(VectorDynSize &amp;modelInertialParams) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateInertialParameters</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a629860714a6975c091a90c9586bad57e</anchor>
      <arglist>(const VectorDynSize &amp;modelInertialParams)</arglist>
    </member>
    <member kind="function">
      <type>ModelSolidShapes &amp;</type>
      <name>visualSolidShapes</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>ae04166621f26041dacc660454d4bda9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ModelSolidShapes &amp;</type>
      <name>visualSolidShapes</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>ada2fc86ef7a8c3059431d73c6ccd6aa3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ModelSolidShapes &amp;</type>
      <name>collisionSolidShapes</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>ae1d240cf37d9f68da18d7de2f0457a01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ModelSolidShapes &amp;</type>
      <name>collisionSolidShapes</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a2547d738b4aaf928e1b762cc4c20654e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1Model.html</anchorfile>
      <anchor>a0691a75a1750e3973431c41929ea7da4</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ModelCalibrationHelper</name>
    <filename>classiDynTree_1_1ModelCalibrationHelper.html</filename>
    <class kind="class">iDynTree::ModelCalibrationHelper::ModelCalibrationHelperPimpl</class>
    <member kind="function">
      <type>bool</type>
      <name>loadModelFromString</name>
      <anchorfile>classiDynTree_1_1ModelCalibrationHelper.html</anchorfile>
      <anchor>a374a9140cd2d14f17ea40f43a5f8f35c</anchor>
      <arglist>(const std::string &amp;modelString, const std::string &amp;filetype=&quot;urdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadModelFromFile</name>
      <anchorfile>classiDynTree_1_1ModelCalibrationHelper.html</anchorfile>
      <anchor>a22e1119ec00b5a9c3c80ff3e74b35366</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;filetype=&quot;urdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateModelInertialParametersToString</name>
      <anchorfile>classiDynTree_1_1ModelCalibrationHelper.html</anchorfile>
      <anchor>a583dcf51ec22f9d6a875103a6c4e8f76</anchor>
      <arglist>(std::string &amp;modelString, const iDynTree::VectorDynSize &amp;inertialParams, const std::string filetype=&quot;urdf&quot;, const iDynTree::ModelExporterOptions options=iDynTree::ModelExporterOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateModelInertialParametersToFile</name>
      <anchorfile>classiDynTree_1_1ModelCalibrationHelper.html</anchorfile>
      <anchor>ad3ab40b088a598f6da9b259222b28bb1</anchor>
      <arglist>(const std::string &amp;filename, const iDynTree::VectorDynSize &amp;inertialParams, const std::string filetype=&quot;urdf&quot;, const iDynTree::ModelExporterOptions options=iDynTree::ModelExporterOptions())</arglist>
    </member>
    <member kind="function">
      <type>const Model &amp;</type>
      <name>model</name>
      <anchorfile>classiDynTree_1_1ModelCalibrationHelper.html</anchorfile>
      <anchor>abe35ae1551636d60cc2c522c37aaebbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SensorsList &amp;</type>
      <name>sensors</name>
      <anchorfile>classiDynTree_1_1ModelCalibrationHelper.html</anchorfile>
      <anchor>a506b6dfe4472e12e50823ac442e82f53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1ModelCalibrationHelper.html</anchorfile>
      <anchor>a884bd9c1a6b009191ccb34d1b374fe00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelCalibrationHelper</name>
      <anchorfile>classiDynTree_1_1ModelCalibrationHelper.html</anchorfile>
      <anchor>a1ee092e0ff7d45fac63d6d8ccdf56aa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ModelCalibrationHelper</name>
      <anchorfile>classiDynTree_1_1ModelCalibrationHelper.html</anchorfile>
      <anchor>af6c2bcc1b30c17feb10fd76bde44317e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelCalibrationHelper</name>
      <anchorfile>classiDynTree_1_1ModelCalibrationHelper.html</anchorfile>
      <anchor>a1ee092e0ff7d45fac63d6d8ccdf56aa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ModelCalibrationHelper</name>
      <anchorfile>classiDynTree_1_1ModelCalibrationHelper.html</anchorfile>
      <anchor>af6c2bcc1b30c17feb10fd76bde44317e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ModelCalibrationHelper::ModelCalibrationHelperPimpl</name>
    <filename>classiDynTree_1_1ModelCalibrationHelper_1_1ModelCalibrationHelperPimpl.html</filename>
    <member kind="function">
      <type></type>
      <name>ModelCalibrationHelperPimpl</name>
      <anchorfile>classiDynTree_1_1ModelCalibrationHelper_1_1ModelCalibrationHelperPimpl.html</anchorfile>
      <anchor>aacbfd368b6eecf44ff8b5e6608124951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ModelLoader</type>
      <name>modelLoader</name>
      <anchorfile>classiDynTree_1_1ModelCalibrationHelper_1_1ModelCalibrationHelperPimpl.html</anchorfile>
      <anchor>a7750b86bf281bfa9e33b0bd007f0c86a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ModelExporter</type>
      <name>modelExporter</name>
      <anchorfile>classiDynTree_1_1ModelCalibrationHelper_1_1ModelCalibrationHelperPimpl.html</anchorfile>
      <anchor>a4e396ac41a34cf4a8827b263875ab35b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ModelExporter</name>
    <filename>classiDynTree_1_1ModelExporter.html</filename>
    <class kind="class">iDynTree::ModelExporter::Pimpl</class>
    <member kind="function">
      <type></type>
      <name>ModelExporter</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>afb8051cba34b2e3e60d0b375c0e790bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ModelExporter</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>a0797985ef2e2cebb8bf25c0c0e4ed18b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ModelExporterOptions &amp;</type>
      <name>exportingOptions</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>a548268ccd03e0b2b76527c2e7ba843db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExportingOptions</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>aa7babe5fc2794ed01d3ba46c4a0ae041</anchor>
      <arglist>(const ModelExporterOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>a9fb6599971ddb3e6b081321952818042</anchor>
      <arglist>(const Model &amp;model, const SensorsList &amp;sensors=SensorsList(), const ModelExporterOptions options=ModelExporterOptions())</arglist>
    </member>
    <member kind="function">
      <type>const Model &amp;</type>
      <name>model</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>a995fd474b2b2e980053d15f37d824bbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SensorsList &amp;</type>
      <name>sensors</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>a47a29c17a367a44584914c44eccf0342</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>abcbf9a179e9f6a2da5c2fc59ea2c83e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportModelToString</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>ab5523d12f0411456625313c8e51f8d8b</anchor>
      <arglist>(std::string &amp;modelString, const std::string filetype=&quot;urdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportModelToFile</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>ad528cdb40626b05dabd44ada1f322692</anchor>
      <arglist>(const std::string &amp;filename, const std::string filetype=&quot;urdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelExporter</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>afb8051cba34b2e3e60d0b375c0e790bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ModelExporter</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>a0797985ef2e2cebb8bf25c0c0e4ed18b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ModelExporterOptions &amp;</type>
      <name>exportingOptions</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>a548268ccd03e0b2b76527c2e7ba843db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExportingOptions</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>aa7babe5fc2794ed01d3ba46c4a0ae041</anchor>
      <arglist>(const ModelExporterOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>a9fb6599971ddb3e6b081321952818042</anchor>
      <arglist>(const Model &amp;model, const SensorsList &amp;sensors=SensorsList(), const ModelExporterOptions options=ModelExporterOptions())</arglist>
    </member>
    <member kind="function">
      <type>const Model &amp;</type>
      <name>model</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>a995fd474b2b2e980053d15f37d824bbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SensorsList &amp;</type>
      <name>sensors</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>a47a29c17a367a44584914c44eccf0342</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>abcbf9a179e9f6a2da5c2fc59ea2c83e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportModelToString</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>ab5523d12f0411456625313c8e51f8d8b</anchor>
      <arglist>(std::string &amp;modelString, const std::string filetype=&quot;urdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportModelToFile</name>
      <anchorfile>classiDynTree_1_1ModelExporter.html</anchorfile>
      <anchor>ad528cdb40626b05dabd44ada1f322692</anchor>
      <arglist>(const std::string &amp;filename, const std::string filetype=&quot;urdf&quot;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ModelExporterOptions</name>
    <filename>classiDynTree_1_1ModelExporterOptions.html</filename>
    <member kind="function">
      <type></type>
      <name>ModelExporterOptions</name>
      <anchorfile>classiDynTree_1_1ModelExporterOptions.html</anchorfile>
      <anchor>a5c7580ca273c3bc9c1311e9e4e5aff3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>baseLink</name>
      <anchorfile>classiDynTree_1_1ModelExporterOptions.html</anchorfile>
      <anchor>af9ebe6e5ba3d83f9f8bf82a793161e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>exportFirstBaseLinkAdditionalFrameAsFakeURDFBase</name>
      <anchorfile>classiDynTree_1_1ModelExporterOptions.html</anchorfile>
      <anchor>a776c8f98ae5c58e038e3a1962f9fd318</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ModelLoader</name>
    <filename>classiDynTree_1_1ModelLoader.html</filename>
    <class kind="class">iDynTree::ModelLoader::ModelLoaderPimpl</class>
    <member kind="function">
      <type></type>
      <name>ModelLoader</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>a17284e5e46f1f2ff2d3d74a32442d362</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ModelLoader</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>a6e6be84f2b3a2009d22949e4b7520de2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ModelParserOptions &amp;</type>
      <name>parsingOptions</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>a06b3f010e33466f0487a756ffaddcced</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParsingOptions</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>a1a6f86c7cc5964554458ead6242796a9</anchor>
      <arglist>(const ModelParserOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadModelFromString</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>a44b074a70bd585aecffa44a2329c99b0</anchor>
      <arglist>(const std::string &amp;modelString, const std::string &amp;filetype=&quot;urdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadModelFromFile</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>a4731f7a0967a0f88b9ee760027f42c28</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;filetype=&quot;urdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadReducedModelFromFullModel</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>aa1d105cc4c13bc5c6fd90cc6f8224085</anchor>
      <arglist>(const Model &amp;fullModel, const std::vector&lt; std::string &gt; &amp;consideredJoints, const std::string filetype=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadReducedModelFromString</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>af6391e49caad7c349a1f007abb4ec2d4</anchor>
      <arglist>(const std::string modelString, const std::vector&lt; std::string &gt; &amp;consideredJoints, const std::string filetype=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadReducedModelFromFile</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>ab846e7becb8c98998cb2b05749a95ade</anchor>
      <arglist>(const std::string filename, const std::vector&lt; std::string &gt; &amp;consideredJoints, const std::string filetype=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const Model &amp;</type>
      <name>model</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>a77884b3b47640fd6ac41522f21bfec00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SensorsList &amp;</type>
      <name>sensors</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>a2309e25659036b106fba41a7d035b04e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>a6b78cb43b48ab1b377b5c907f9918077</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelLoader</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>a17284e5e46f1f2ff2d3d74a32442d362</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ModelLoader</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>a6e6be84f2b3a2009d22949e4b7520de2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ModelParserOptions &amp;</type>
      <name>parsingOptions</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>a06b3f010e33466f0487a756ffaddcced</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParsingOptions</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>a1a6f86c7cc5964554458ead6242796a9</anchor>
      <arglist>(const ModelParserOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadModelFromString</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>a44b074a70bd585aecffa44a2329c99b0</anchor>
      <arglist>(const std::string &amp;modelString, const std::string &amp;filetype=&quot;urdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadModelFromFile</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>a4731f7a0967a0f88b9ee760027f42c28</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;filetype=&quot;urdf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadReducedModelFromFullModel</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>aa1d105cc4c13bc5c6fd90cc6f8224085</anchor>
      <arglist>(const Model &amp;fullModel, const std::vector&lt; std::string &gt; &amp;consideredJoints, const std::string filetype=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadReducedModelFromString</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>af6391e49caad7c349a1f007abb4ec2d4</anchor>
      <arglist>(const std::string modelString, const std::vector&lt; std::string &gt; &amp;consideredJoints, const std::string filetype=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadReducedModelFromFile</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>ab846e7becb8c98998cb2b05749a95ade</anchor>
      <arglist>(const std::string filename, const std::vector&lt; std::string &gt; &amp;consideredJoints, const std::string filetype=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const Model &amp;</type>
      <name>model</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>a77884b3b47640fd6ac41522f21bfec00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SensorsList &amp;</type>
      <name>sensors</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>a2309e25659036b106fba41a7d035b04e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1ModelLoader.html</anchorfile>
      <anchor>a6b78cb43b48ab1b377b5c907f9918077</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ModelLoader::ModelLoaderPimpl</name>
    <filename>classiDynTree_1_1ModelLoader_1_1ModelLoaderPimpl.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>setModelAndSensors</name>
      <anchorfile>classiDynTree_1_1ModelLoader_1_1ModelLoaderPimpl.html</anchorfile>
      <anchor>a3af35a8ebef9f313cfcea97e9eec9a5d</anchor>
      <arglist>(const Model &amp;_model, const SensorsList &amp;_sensors)</arglist>
    </member>
    <member kind="variable">
      <type>Model</type>
      <name>m_model</name>
      <anchorfile>classiDynTree_1_1ModelLoader_1_1ModelLoaderPimpl.html</anchorfile>
      <anchor>ab942b9127822c8a3cf4272cd17aae83c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SensorsList</type>
      <name>m_sensors</name>
      <anchorfile>classiDynTree_1_1ModelLoader_1_1ModelLoaderPimpl.html</anchorfile>
      <anchor>aafe15ab8a41750c5fb82e5a78adef178</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_isModelValid</name>
      <anchorfile>classiDynTree_1_1ModelLoader_1_1ModelLoaderPimpl.html</anchorfile>
      <anchor>acbd58fe2e5e96345e9070553a78eff20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ModelParserOptions</type>
      <name>m_options</name>
      <anchorfile>classiDynTree_1_1ModelLoader_1_1ModelLoaderPimpl.html</anchorfile>
      <anchor>ab66a5bb9a048e1337c1f2ab679770e3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::ModelParserOptions</name>
    <filename>structiDynTree_1_1ModelParserOptions.html</filename>
    <member kind="function">
      <type></type>
      <name>ModelParserOptions</name>
      <anchorfile>structiDynTree_1_1ModelParserOptions.html</anchorfile>
      <anchor>aace65fc753b0bc44d5a88f8de61a0276</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>addSensorFramesAsAdditionalFrames</name>
      <anchorfile>structiDynTree_1_1ModelParserOptions.html</anchorfile>
      <anchor>acca6da96631f8577cc259f939872d156</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>originalFilename</name>
      <anchorfile>structiDynTree_1_1ModelParserOptions.html</anchorfile>
      <anchor>a7bbd5bfdb0a83af64bcc10e955714bc4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ModelSolidShapes</name>
    <filename>classiDynTree_1_1ModelSolidShapes.html</filename>
    <member kind="function">
      <type></type>
      <name>ModelSolidShapes</name>
      <anchorfile>classiDynTree_1_1ModelSolidShapes.html</anchorfile>
      <anchor>a812c4331ff427738bcac0e7d0d299070</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelSolidShapes</name>
      <anchorfile>classiDynTree_1_1ModelSolidShapes.html</anchorfile>
      <anchor>af329dc903c53b61882664a7b7a504b34</anchor>
      <arglist>(const ModelSolidShapes &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ModelSolidShapes &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1ModelSolidShapes.html</anchorfile>
      <anchor>ad8079a560fc596d90704aec72bddc076</anchor>
      <arglist>(const ModelSolidShapes &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classiDynTree_1_1ModelSolidShapes.html</anchorfile>
      <anchor>a521f88e8304f6987beb3286ba68ceb24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ModelSolidShapes</name>
      <anchorfile>classiDynTree_1_1ModelSolidShapes.html</anchorfile>
      <anchor>a0315cbe40fa35ce0a39c50be63514466</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1ModelSolidShapes.html</anchorfile>
      <anchor>ad5f8e55f2dfcd4d5570c8e83547beebf</anchor>
      <arglist>(size_t nrOfLinks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1ModelSolidShapes.html</anchorfile>
      <anchor>a11d296032db72a30bc003cc8488d461a</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1ModelSolidShapes.html</anchorfile>
      <anchor>a02a27efc03b06425e5985ae57a498361</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; SolidShape * &gt; &gt;</type>
      <name>linkSolidShapes</name>
      <anchorfile>classiDynTree_1_1ModelSolidShapes.html</anchorfile>
      <anchor>a060e1a95aa3ab52d945ad5b07ff342ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ModelVisualization</name>
    <filename>classiDynTree_1_1ModelVisualization.html</filename>
    <base>iDynTree::IModelVisualization</base>
    <class kind="struct">iDynTree::ModelVisualization::ModelVisualizationPimpl</class>
    <member kind="function">
      <type></type>
      <name>ModelVisualization</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>a388ef126a404702f08c1fcc2eb4f8a3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ModelVisualization</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>a89b805448c5fa1ad365e6069ceadd749</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>a57437f06ce1662117a1c53eafa12256b</anchor>
      <arglist>(const Model &amp;model, const std::string instanceName, irr::scene::ISceneManager *sceneManager)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>ac328ece5c776ab37077b788df5ba8e86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setPositions</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>a85aef702f222a1794a3eea50356ce518</anchor>
      <arglist>(const Transform &amp;world_H_base, const VectorDynSize &amp;jointPos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setLinkPositions</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>ac3f9061a6a203965714e449621eca0b9</anchor>
      <arglist>(const LinkPositions &amp;linkPos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Model &amp;</type>
      <name>model</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>ab33930af9c68dcc3ae2ee6a8ff5fde77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getInstanceName</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>ae8a62070c5741cebf6a5843dea93fc59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setModelVisibility</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>a66c310c583c64ac26f1fcdbd4ca710e4</anchor>
      <arglist>(const bool isVisible)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setModelColor</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>a576a7281757cfc06a7336c63696fe03f</anchor>
      <arglist>(const ColorViz &amp;modelColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetModelColor</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>a15e01255d33a16c46165d1a12b8ba91d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setLinkColor</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>ad4371f8991952ce7b91a8268cb8b8531</anchor>
      <arglist>(const LinkIndex &amp;linkIndex, const ColorViz &amp;linkColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>resetLinkColor</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>a0881435227a65d26ca9ca36e495cb755</anchor>
      <arglist>(const LinkIndex &amp;linkIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getLinkNames</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>a73d51a3ebdd25d7ebc51b8776a9de0b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setLinkVisibility</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>a9278ef17d39f10442491c1dff16d4848</anchor>
      <arglist>(const std::string &amp;linkName, bool isVisible)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getFeatures</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>adcad5260b65457bd1960262184a9baeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setFeatureVisibility</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>addad3d684d7389c51b4644b5d8d8684c</anchor>
      <arglist>(const std::string &amp;elementKey, bool isVisible)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWireframeVisibility</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>ae776e7e4523bec5a079976ba84eea5dc</anchor>
      <arglist>(bool isVisible)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransparent</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>ae54af8f52ab8f7f79cd7b3b05e1ec398</anchor>
      <arglist>(bool isTransparent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IJetsVisualization &amp;</type>
      <name>jets</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>a3db574d67780963ff7d297145be89df5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Transform</type>
      <name>getWorldModelTransform</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>a25334858f5a3d4c75a7bd851cc162329</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Transform</type>
      <name>getWorldLinkTransform</name>
      <anchorfile>classiDynTree_1_1ModelVisualization.html</anchorfile>
      <anchor>af5c63587c63ffa1b4b2ee4a9a108dd1f</anchor>
      <arglist>(const LinkIndex &amp;linkIndex)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::ModelVisualization::ModelVisualizationPimpl</name>
    <filename>structiDynTree_1_1ModelVisualization_1_1ModelVisualizationPimpl.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addModelGeometriesToSceneManager</name>
      <anchorfile>structiDynTree_1_1ModelVisualization_1_1ModelVisualizationPimpl.html</anchorfile>
      <anchor>aebcbc4c517f72eade0ab6ab45c70ca67</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::ModelSolidShapes &amp;modelGeom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLinkPositions</name>
      <anchorfile>structiDynTree_1_1ModelVisualization_1_1ModelVisualizationPimpl.html</anchorfile>
      <anchor>ac653c7145beb71a58abd46e24a73088f</anchor>
      <arglist>(const iDynTree::LinkPositions &amp;world_H_link)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelVisualizationPimpl</name>
      <anchorfile>structiDynTree_1_1ModelVisualization_1_1ModelVisualizationPimpl.html</anchorfile>
      <anchor>ae18fb1acd778e634d28d795cad8a3795</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_instanceName</name>
      <anchorfile>structiDynTree_1_1ModelVisualization_1_1ModelVisualizationPimpl.html</anchorfile>
      <anchor>a28adc9676371ca9697746c58a5a69258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_isValid</name>
      <anchorfile>structiDynTree_1_1ModelVisualization_1_1ModelVisualizationPimpl.html</anchorfile>
      <anchor>ae380218449867530da084ccf21ec98f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Model</type>
      <name>m_model</name>
      <anchorfile>structiDynTree_1_1ModelVisualization_1_1ModelVisualizationPimpl.html</anchorfile>
      <anchor>a6894c0e204308b81c4dfbcb78afbe675</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Traversal</type>
      <name>m_traversal</name>
      <anchorfile>structiDynTree_1_1ModelVisualization_1_1ModelVisualizationPimpl.html</anchorfile>
      <anchor>ac9b791e97661896c568ab48664161520</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkPositions</type>
      <name>m_fwdKinBuffer</name>
      <anchorfile>structiDynTree_1_1ModelVisualization_1_1ModelVisualizationPimpl.html</anchorfile>
      <anchor>afc0716750b68123268cc057910064938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>irr::scene::ISceneNode *</type>
      <name>modelNode</name>
      <anchorfile>structiDynTree_1_1ModelVisualization_1_1ModelVisualizationPimpl.html</anchorfile>
      <anchor>aa2b0340d13716c1a59fd3ebe2ab18b53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; irr::scene::ISceneNode * &gt;</type>
      <name>linkNodes</name>
      <anchorfile>structiDynTree_1_1ModelVisualization_1_1ModelVisualizationPimpl.html</anchorfile>
      <anchor>a9e6002b2b77261557923eb95fe8ba1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; irr::scene::ISceneNode * &gt;</type>
      <name>frameNodes</name>
      <anchorfile>structiDynTree_1_1ModelVisualization_1_1ModelVisualizationPimpl.html</anchorfile>
      <anchor>ac4ebdbf5ea71cf48b7752cc63f0a8f8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; irr::scene::ISceneNode * &gt;</type>
      <name>linkFramesNodes</name>
      <anchorfile>structiDynTree_1_1ModelVisualization_1_1ModelVisualizationPimpl.html</anchorfile>
      <anchor>a6561466d9207f26eb4a95d7a2b1f4f6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; irr::scene::ISceneNode * &gt; &gt;</type>
      <name>geomNodes</name>
      <anchorfile>structiDynTree_1_1ModelVisualization_1_1ModelVisualizationPimpl.html</anchorfile>
      <anchor>ae058853e4023dc2a3e02f44a745efc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; std::vector&lt; irr::video::SMaterial &gt; &gt; &gt;</type>
      <name>geomNodesNotTransparentMaterialCache</name>
      <anchorfile>structiDynTree_1_1ModelVisualization_1_1ModelVisualizationPimpl.html</anchorfile>
      <anchor>a57e8fd0d7b4cccc31fee178ed890f509</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>irr::scene::ISceneManager *</type>
      <name>m_irrSmgr</name>
      <anchorfile>structiDynTree_1_1ModelVisualization_1_1ModelVisualizationPimpl.html</anchorfile>
      <anchor>ac6db99c7698d947c17adb3fd02989282</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JetsVisualization</type>
      <name>m_jets</name>
      <anchorfile>structiDynTree_1_1ModelVisualization_1_1ModelVisualizationPimpl.html</anchorfile>
      <anchor>aaa0d20a40fd9ff9d18ae9549640d13df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::MomentumFreeFloatingJacobian</name>
    <filename>classiDynTree_1_1MomentumFreeFloatingJacobian.html</filename>
    <base>iDynTree::MatrixDynSize</base>
    <member kind="function">
      <type></type>
      <name>MomentumFreeFloatingJacobian</name>
      <anchorfile>classiDynTree_1_1MomentumFreeFloatingJacobian.html</anchorfile>
      <anchor>a7c5bb5cc57527076b7f2bf0d057566bb</anchor>
      <arglist>(size_t nrOfDofs=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MomentumFreeFloatingJacobian</name>
      <anchorfile>classiDynTree_1_1MomentumFreeFloatingJacobian.html</anchorfile>
      <anchor>a64fba070cabc3eded9f31bcf94e0b33d</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1MomentumFreeFloatingJacobian.html</anchorfile>
      <anchor>a258565af397ffe1a0a0c201877f40034</anchor>
      <arglist>(const iDynTree::Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1MomentumFreeFloatingJacobian.html</anchorfile>
      <anchor>a32410cfd480b29996786784a980419aa</anchor>
      <arglist>(const iDynTree::Model &amp;model) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MomentumFreeFloatingJacobian</name>
      <anchorfile>classiDynTree_1_1MomentumFreeFloatingJacobian.html</anchorfile>
      <anchor>aaaec164712b6438aadda54deed729db2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a3b50de2905cdcb1607bd8c33cb74f82f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae8065fef7f00140e0dadd753d3ffee9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a071eb4583b2bd16399cf4bb460e15db0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a9f5604c4e5ae10793383ad9826f3c0c0</anchor>
      <arglist>(const unsigned int _newRows, const unsigned int _newCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a23e474c7161903c18be88d8fac2b4137</anchor>
      <arglist>(const size_t _newCapacity)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aacda29701a42c3943a781b9876500daf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ad5c3a0b1b9ce8c691194c652adf95a5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRowMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aa8af99c672e6a7e188115d2a8144a1c7</anchor>
      <arglist>(double *rowMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillColMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ab11629d6f89ef3d4051867e44abdf76e</anchor>
      <arglist>(double *colMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aa21d33ae39633c077e70c4c31c3e2314</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a901b96fd92d32b2057ea300867fc3028</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a16eee1ed872f339030829be673d59cca</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a46dc64f565e24e95a521523ff1266c97</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a270a9502870b8e4377d2077798f46539</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a20d1b70f6bdc0d4235c86eb1ade4b4d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a77e45ef11c7624ed8b7e150ebd041825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae86eb69f39997bd181971d9bd5f56950</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a80eba7978bcce15f4146f815c557f1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_rows</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae518ef4c4cd7014e6f504c89e2ab68e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_cols</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a07447be5c0420a1c297e605dffbc938b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_capacity</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a0a0c9e92f78c8d8e6676da367c83bba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>aa21d33ae39633c077e70c4c31c3e2314</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a901b96fd92d32b2057ea300867fc3028</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a16eee1ed872f339030829be673d59cca</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a46dc64f565e24e95a521523ff1266c97</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a270a9502870b8e4377d2077798f46539</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a20d1b70f6bdc0d4235c86eb1ade4b4d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>a77e45ef11c7624ed8b7e150ebd041825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixDynSize.html</anchorfile>
      <anchor>ae86eb69f39997bd181971d9bd5f56950</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::MotionDerivativeOf</name>
    <filename>structiDynTree_1_1MotionDerivativeOf.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>iDynTree::MotionDerivativeOf&lt; AngularMotionVector3, MotionForce2deriveT &gt;</name>
    <filename>structiDynTree_1_1MotionDerivativeOf_3_01AngularMotionVector3_00_01MotionForce2deriveT_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>MotionForce_traits&lt; MotionForce2deriveT &gt;::DerivByAngularMotion</type>
      <name>Type</name>
      <anchorfile>structiDynTree_1_1MotionDerivativeOf_3_01AngularMotionVector3_00_01MotionForce2deriveT_01_4.html</anchorfile>
      <anchor>afa646dbc1a517516eb94c3873070bfa2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::MotionDerivativeOf&lt; LinearMotionVector3, MotionForce2deriveT &gt;</name>
    <filename>structiDynTree_1_1MotionDerivativeOf_3_01LinearMotionVector3_00_01MotionForce2deriveT_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>MotionForce_traits&lt; MotionForce2deriveT &gt;::DerivByLinearMotion</type>
      <name>Type</name>
      <anchorfile>structiDynTree_1_1MotionDerivativeOf_3_01LinearMotionVector3_00_01MotionForce2deriveT_01_4.html</anchorfile>
      <anchor>add2196d83ce7f586670c8ed98b99d53c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::MotionForce_traits</name>
    <filename>classiDynTree_1_1MotionForce__traits.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>iDynTree::MotionForce_traits&lt; AngularForceVector3 &gt;</name>
    <filename>classiDynTree_1_1MotionForce__traits_3_01AngularForceVector3_01_4.html</filename>
    <member kind="typedef">
      <type>AngularForceVector3</type>
      <name>Type</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01AngularForceVector3_01_4.html</anchorfile>
      <anchor>ac78a929770d887435fd7938c981fffbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularMotionVector3</type>
      <name>DualSpace</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01AngularForceVector3_01_4.html</anchorfile>
      <anchor>a6ef9ca853bc862ed0a81012054b8a87d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularForceVector3Semantics</type>
      <name>SemanticsType</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01AngularForceVector3_01_4.html</anchorfile>
      <anchor>a0e83544b66884bc17593d67e2a239980</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearForceVector3</type>
      <name>DerivByLinearMotion</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01AngularForceVector3_01_4.html</anchorfile>
      <anchor>adc3548c3df17a9265ea5ed3d0bbd5c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularForceVector3</type>
      <name>DerivByAngularMotion</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01AngularForceVector3_01_4.html</anchorfile>
      <anchor>a049548ab1e7704841c39abc28bf34411</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::MotionForce_traits&lt; AngularMotionVector3 &gt;</name>
    <filename>classiDynTree_1_1MotionForce__traits_3_01AngularMotionVector3_01_4.html</filename>
    <member kind="typedef">
      <type>AngularMotionVector3</type>
      <name>Type</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01AngularMotionVector3_01_4.html</anchorfile>
      <anchor>a3875ecb805f2b3bf96c48f21507cc0df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularForceVector3</type>
      <name>DualSpace</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01AngularMotionVector3_01_4.html</anchorfile>
      <anchor>ab4286eb30a5d8108d192ffd57a44d0b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularMotionVector3Semantics</type>
      <name>SemanticsType</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01AngularMotionVector3_01_4.html</anchorfile>
      <anchor>ad4e04e90d599fdc7c3cc8e4d2a6d43a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearMotionVector3</type>
      <name>DerivByLinearMotion</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01AngularMotionVector3_01_4.html</anchorfile>
      <anchor>afddbc41f9ccf6c327fafcdfb666869be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularMotionVector3</type>
      <name>DerivByAngularMotion</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01AngularMotionVector3_01_4.html</anchorfile>
      <anchor>ace0b941e96b2299d913011c36a1c58d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::MotionForce_traits&lt; LinearForceVector3 &gt;</name>
    <filename>classiDynTree_1_1MotionForce__traits_3_01LinearForceVector3_01_4.html</filename>
    <member kind="typedef">
      <type>LinearForceVector3</type>
      <name>Type</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01LinearForceVector3_01_4.html</anchorfile>
      <anchor>abe0ec643a300fbd01171d43fe90fec64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearMotionVector3</type>
      <name>DualSpace</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01LinearForceVector3_01_4.html</anchorfile>
      <anchor>a2a0467d41820c1a1030dcad547abe01d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearForceVector3Semantics</type>
      <name>SemanticsType</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01LinearForceVector3_01_4.html</anchorfile>
      <anchor>a84e2c9cd9b8b356706bd5f8aaaad2397</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularForceVector3</type>
      <name>DerivByLinearMotion</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01LinearForceVector3_01_4.html</anchorfile>
      <anchor>ab9085148e3e15b8403333fbf99afe9eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearForceVector3</type>
      <name>DerivByAngularMotion</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01LinearForceVector3_01_4.html</anchorfile>
      <anchor>ab6eb2dc42ac1521d9a5fee631b7c4b78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::MotionForce_traits&lt; LinearMotionVector3 &gt;</name>
    <filename>classiDynTree_1_1MotionForce__traits_3_01LinearMotionVector3_01_4.html</filename>
    <member kind="typedef">
      <type>LinearMotionVector3</type>
      <name>Type</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01LinearMotionVector3_01_4.html</anchorfile>
      <anchor>a31ff0a64e4e2eb90e305331ca8feed4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearForceVector3</type>
      <name>DualSpace</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01LinearMotionVector3_01_4.html</anchorfile>
      <anchor>a9275bf914a2b20226342c432ada336f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearMotionVector3Semantics</type>
      <name>SemanticsType</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01LinearMotionVector3_01_4.html</anchorfile>
      <anchor>aeec9ff13f38f28bf11703f859c7bf281</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularMotionVector3</type>
      <name>DerivByLinearMotion</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01LinearMotionVector3_01_4.html</anchorfile>
      <anchor>ae444494e67ca4aa8262dfd3797564bfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearMotionVector3</type>
      <name>DerivByAngularMotion</name>
      <anchorfile>classiDynTree_1_1MotionForce__traits_3_01LinearMotionVector3_01_4.html</anchorfile>
      <anchor>a0dd8bcc7b13f9754f137a301778955fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::MotionVector3</name>
    <filename>classiDynTree_1_1MotionVector3.html</filename>
    <base>GeomVector3&lt; MotionT &gt;</base>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, LinearMotionVector3 &gt;::Type</type>
      <name>MotionCrossLinM</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>aaed41f551e18d2629dd79bbd8cd8120b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, AngularMotionVector3 &gt;::Type</type>
      <name>MotionCrossAngM</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a0a3372200f0037ba3dd0188bd8c6e5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, LinearForceVector3 &gt;::Type</type>
      <name>MotionCrossLinF</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a63d0eec936e8c873068f754320ec9151</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, AngularForceVector3 &gt;::Type</type>
      <name>MotionCrossAngF</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>af8d2135ab33e05e53b58b01dae91e617</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotionForce_traits&lt; MotionForceT &gt;::SemanticsType</type>
      <name>MotionForceSemanticsT</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a6d2271c71f2ad4a8cac88a437bfed491</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeomVector3&lt; MotionForceT &gt;</type>
      <name>MotionForceTbase</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a473da581f6541cc39d684ea0026ac838</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotionVector3</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a68e8e3d5668f98feb071f27e6b10e34e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotionVector3</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a37f95622a463b514d69a8d7617930c70</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotionVector3</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a8218222c065e766afbd2a0454f6ea7d0</anchor>
      <arglist>(const MotionVector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossLinM</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a5cac47f80f5e61e9b8ab3a877d961a37</anchor>
      <arglist>(const LinearMotionVector3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossAngM</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>af7b437b08fd688a52caefeee8e575620</anchor>
      <arglist>(const AngularMotionVector3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossLinF</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a6c2656ec0a2dd9855548372c509d9903</anchor>
      <arglist>(const LinearForceVector3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossAngF</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>ab036ecc2db2593cb9e44e748e11ef789</anchor>
      <arglist>(const AngularForceVector3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const MotionForceSemanticsT &amp;</type>
      <name>getSemantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a4cd796475bc41481fbbb1ae179eb8548</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSemantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a7c3f39fe68a340bce3c792720daf2204</anchor>
      <arglist>(MotionForceSemanticsT &amp;_semantics)</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>abda6982b38e6d4069af4577aab8deb62</anchor>
      <arglist>(const Rotation &amp;newCoordFrame) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a28806b83d896ddbf851a5998726318d4</anchor>
      <arglist>(const typename MotionForce_traits&lt; MotionForceT &gt;::DualSpace &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a5459b2c1dd902b3e59331bfc37a2907c</anchor>
      <arglist>(const MotionForceT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>aab92d8d49cafbb94d6ced67ffc514910</anchor>
      <arglist>(const MotionForceT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionForceT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a1543f5d4b5740cab90c8f7136a787609</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MotionForceT</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>ac0615723d52e3ba20ff5c3b5c27637c5</anchor>
      <arglist>(const MotionForceTbase &amp;op1, const MotionForceT &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MotionForceT</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a9d22bfb36281ecbb7e979ab886cdd2da</anchor>
      <arglist>(const MotionForceTbase &amp;op)</arglist>
    </member>
    <member kind="variable">
      <type>MotionForceSemanticsT</type>
      <name>semantics</name>
      <anchorfile>classiDynTree_1_1GeomVector3.html</anchorfile>
      <anchor>a23b0961458c4a91fa2a3f3c1b19f6daf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MotionVector3&lt; AngularMotionVector3 &gt;</name>
    <filename>classiDynTree_1_1MotionVector3.html</filename>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, LinearMotionVector3 &gt;::Type</type>
      <name>MotionCrossLinM</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>aaed41f551e18d2629dd79bbd8cd8120b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, AngularMotionVector3 &gt;::Type</type>
      <name>MotionCrossAngM</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a0a3372200f0037ba3dd0188bd8c6e5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, LinearForceVector3 &gt;::Type</type>
      <name>MotionCrossLinF</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a63d0eec936e8c873068f754320ec9151</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, AngularForceVector3 &gt;::Type</type>
      <name>MotionCrossAngF</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>af8d2135ab33e05e53b58b01dae91e617</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotionVector3</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a68e8e3d5668f98feb071f27e6b10e34e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotionVector3</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a37f95622a463b514d69a8d7617930c70</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotionVector3</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a8218222c065e766afbd2a0454f6ea7d0</anchor>
      <arglist>(const MotionVector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossLinM</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a5cac47f80f5e61e9b8ab3a877d961a37</anchor>
      <arglist>(const LinearMotionVector3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossAngM</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>af7b437b08fd688a52caefeee8e575620</anchor>
      <arglist>(const AngularMotionVector3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossLinF</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a6c2656ec0a2dd9855548372c509d9903</anchor>
      <arglist>(const LinearForceVector3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossAngF</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>ab036ecc2db2593cb9e44e748e11ef789</anchor>
      <arglist>(const AngularForceVector3 &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MotionVector3&lt; LinearMotionVector3 &gt;</name>
    <filename>classiDynTree_1_1MotionVector3.html</filename>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, LinearMotionVector3 &gt;::Type</type>
      <name>MotionCrossLinM</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>aaed41f551e18d2629dd79bbd8cd8120b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, AngularMotionVector3 &gt;::Type</type>
      <name>MotionCrossAngM</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a0a3372200f0037ba3dd0188bd8c6e5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, LinearForceVector3 &gt;::Type</type>
      <name>MotionCrossLinF</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a63d0eec936e8c873068f754320ec9151</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotionDerivativeOf&lt; MotionT, AngularForceVector3 &gt;::Type</type>
      <name>MotionCrossAngF</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>af8d2135ab33e05e53b58b01dae91e617</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotionVector3</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a68e8e3d5668f98feb071f27e6b10e34e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotionVector3</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a37f95622a463b514d69a8d7617930c70</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotionVector3</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a8218222c065e766afbd2a0454f6ea7d0</anchor>
      <arglist>(const MotionVector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossLinM</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a5cac47f80f5e61e9b8ab3a877d961a37</anchor>
      <arglist>(const LinearMotionVector3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossAngM</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>af7b437b08fd688a52caefeee8e575620</anchor>
      <arglist>(const AngularMotionVector3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossLinF</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>a6c2656ec0a2dd9855548372c509d9903</anchor>
      <arglist>(const LinearForceVector3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MotionCrossAngF</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1MotionVector3.html</anchorfile>
      <anchor>ab036ecc2db2593cb9e44e748e11ef789</anchor>
      <arglist>(const AngularForceVector3 &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::MovableJointImpl</name>
    <filename>classiDynTree_1_1MovableJointImpl.html</filename>
    <templarg>nrOfPosCoords</templarg>
    <templarg>nrOfDOFs</templarg>
    <base>iDynTree::IJoint</base>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~MovableJointImpl</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a723d226cd4e943ac3a2b5b69a3b1c833</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNrOfPosCoords</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a045d13488a7d6481fcf2db951655922a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNrOfDOFs</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>af9d78ba6c319f68f16f9ff9ef58fd124</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIndex</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a4b1807b06b92f64c41502c17b8ecd5a6</anchor>
      <arglist>(JointIndex &amp;_index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual JointIndex</type>
      <name>getIndex</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a717d5ccedc215f53b75e918229d98bab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosCoordsOffset</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>afbbbe860f34622d4d8ae1d938fd65b98</anchor>
      <arglist>(const size_t _offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getPosCoordsOffset</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a599c535eb4fced80019a72e126752a0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDOFsOffset</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>aa9cb6e7141a84e23c7d7fca9c900c6bc</anchor>
      <arglist>(const size_t _offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getDOFsOffset</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a593be2dc005f1580c341bc723ed36b5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IJoint *</type>
      <name>clone</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a021ac00a8b2e9e519f930baad1bc1fa2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LinkIndex</type>
      <name>getFirstAttachedLink</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>abe3efda09a0c3d94c021891de447aaa8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LinkIndex</type>
      <name>getSecondAttachedLink</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a1c55168bcc2dbd7b1fd58737a6bb46d8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Transform</type>
      <name>getRestTransform</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a7b6fb4c82687601810f3696e9605f1e0</anchor>
      <arglist>(const LinkIndex child, const LinkIndex parent) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Transform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a2b0c23cad4da4e748ecdaf009805f767</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const LinkIndex child, const LinkIndex parent) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TransformDerivative</type>
      <name>getTransformDerivative</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a0dd24dad1882bc1df35a1832275fbfbb</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const LinkIndex child, const LinkIndex parent, const int posCoord_i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SpatialMotionVector</type>
      <name>getMotionSubspaceVector</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a3a89b6fd2358c8435e7f794d3857045f</anchor>
      <arglist>(int dof_i, const LinkIndex child, const LinkIndex parent) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeChildPosVelAcc</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>aa41dbb76816e2621d6924ca052b07881</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const VectorDynSize &amp;jntAcc, LinkPositions &amp;linkPositions, LinkVelArray &amp;linkVels, LinkAccArray &amp;linkAccs, const LinkIndex child, const LinkIndex parent) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeChildVelAcc</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a6d0853757008a1db34d41da9276df81e</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const VectorDynSize &amp;jntAcc, LinkVelArray &amp;linkVels, LinkAccArray &amp;linkAccs, const LinkIndex child, const LinkIndex parent) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeChildVel</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a70c9055aafb46f65fe767664c873625e</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, LinkVelArray &amp;linkVels, const LinkIndex child, const LinkIndex parent) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeChildAcc</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a65509300297221192cb46189b2a473d1</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const LinkVelArray &amp;linkVels, const VectorDynSize &amp;jntAcc, LinkAccArray &amp;linkAccs, const LinkIndex child, const LinkIndex parent) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeChildBiasAcc</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a3c16a316f95e25ad0af2768cb4c991a3</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const LinkVelArray &amp;linkVels, LinkAccArray &amp;linkBiasAccs, const LinkIndex child, const LinkIndex parent) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeJointTorque</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a495a50c9623710812f49cf6258ecb68e</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const Wrench &amp;internalWrench, const LinkIndex linkThatAppliesWrench, const LinkIndex linkOnWhichWrenchIsApplied, VectorDynSize &amp;jntTorques) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setAttachedLinks</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>aafd1101e91ea337a451d62f0160a819c</anchor>
      <arglist>(const LinkIndex link1, const LinkIndex link2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRestTransform</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a770aadc1a6e13bce3af213707fcf2d84</anchor>
      <arglist>(const Transform &amp;link1_X_link2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasPosLimits</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>af4badbd5891621e847a61d767cffd25e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>enablePosLimits</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a4f0f02e57295ad4b0ec94fe19fc3e0c0</anchor>
      <arglist>(const bool enable)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getPosLimits</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>ab734574da90b6d2ae24169ea180a081b</anchor>
      <arglist>(const size_t _index, double &amp;min, double &amp;max) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMinPosLimit</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a46dbe9dec3ef79f6d5662269f6fe8f65</anchor>
      <arglist>(const size_t _index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMaxPosLimit</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a047913be4f7bdeb35d785e4ad71d5395</anchor>
      <arglist>(const size_t _index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setPosLimits</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a63c57d91c3d80a610671f04fcbdd22ff</anchor>
      <arglist>(const size_t _index, double &amp;min, double &amp;max)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointIndex</type>
      <name>m_index</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a872555afe6bfd9b14fb6bbea08968003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_posCoordsOffset</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a6332b3582ec526f58f719a90d2d00c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_DOFsOffset</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a425f5ae5cc08edee16740d4b8a793360</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setAttachedLinks</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>aafd1101e91ea337a451d62f0160a819c</anchor>
      <arglist>(const LinkIndex link1, const LinkIndex link2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRestTransform</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a770aadc1a6e13bce3af213707fcf2d84</anchor>
      <arglist>(const Transform &amp;link1_X_link2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasPosLimits</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>af4badbd5891621e847a61d767cffd25e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>enablePosLimits</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a4f0f02e57295ad4b0ec94fe19fc3e0c0</anchor>
      <arglist>(const bool enable)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getPosLimits</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>ab734574da90b6d2ae24169ea180a081b</anchor>
      <arglist>(const size_t _index, double &amp;min, double &amp;max) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMinPosLimit</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a46dbe9dec3ef79f6d5662269f6fe8f65</anchor>
      <arglist>(const size_t _index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMaxPosLimit</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a047913be4f7bdeb35d785e4ad71d5395</anchor>
      <arglist>(const size_t _index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setPosLimits</name>
      <anchorfile>classiDynTree_1_1IJoint.html</anchorfile>
      <anchor>a63c57d91c3d80a610671f04fcbdd22ff</anchor>
      <arglist>(const size_t _index, double &amp;min, double &amp;max)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::MPC</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1MPC.html</filename>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::MultiBodySystem</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1MultiBodySystem.html</filename>
    <base>iDynTree::optimalcontrol::DynamicalSystem</base>
    <member kind="function">
      <type></type>
      <name>MultiBodySystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultiBodySystem.html</anchorfile>
      <anchor>ad359b8ee85ead4e31da86d09595ad082</anchor>
      <arglist>(const iDynTree::Model &amp;)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>stateSpaceSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a1fdc25cc07f3bc2d02ac0cc2c74e8abc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>controlSpaceSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ae9048969fa6bb586f08332aa279ac01a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>dynamics</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>aa10bd35bc49f5dfaea48ffeecf945312</anchor>
      <arglist>(const VectorDynSize &amp;state, double time, VectorDynSize &amp;stateDynamics)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setControlInput</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a1d4cfff710d3a77308992878408ca87b</anchor>
      <arglist>(const VectorDynSize &amp;control)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VectorDynSize &amp;</type>
      <name>controlInput</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ac130f0cfaa6a5843fdbcb944493b7951</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>controlInput</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a165aa744348a711a192333374a5b938b</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const VectorDynSize &amp;</type>
      <name>initialState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ae62cb69e88b5598944dffd5c9f8336b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>initialState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a91ba05fa8d7fd40b9336f33130ec48ed</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setInitialState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>abb552b6be02127013c69f1106ad09497</anchor>
      <arglist>(const VectorDynSize &amp;state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsStateFirstDerivative</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ae954adda9b54889d67dee596570f9ace</anchor>
      <arglist>(const VectorDynSize &amp;state, double time, MatrixDynSize &amp;dynamicsDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsControlFirstDerivative</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ae12972299e8e49ba5957d0acb90ca2c2</anchor>
      <arglist>(const VectorDynSize &amp;state, double time, MatrixDynSize &amp;dynamicsDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsStateFirstDerivativeSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>accd838dc2907a169e22c70c694011175</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsControlFirstDerivativeSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a643ace9059ca3fa31cd05037a1531fa3</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a2eb5bc925c0c9b44daf3430972cdefb4</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;lambda, iDynTree::MatrixDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>a4337e4f4965ca5ddfe86ecc25e200da9</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;lambda, iDynTree::MatrixDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTStateControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ad92bf817f57da0b2d6752022bc31a20d</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;lambda, iDynTree::MatrixDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ab843117494f9eaa4b11b380bb3eb6737</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>ab43abf8cf7f671213184e811e815b10f</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateControlSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dynamicsSecondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1DynamicalSystem.html</anchorfile>
      <anchor>aa75c7d3cf8bf63b622bc6b83d392a100</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::MultipleShootingSolver</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</filename>
    <base>iDynTree::optimalcontrol::OptimalControlSolver</base>
    <class kind="class">iDynTree::optimalcontrol::MultipleShootingSolver::MultipleShootingTranscription</class>
    <member kind="function">
      <type></type>
      <name>MultipleShootingSolver</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>a9461caf45d7470768693e97873894147</anchor>
      <arglist>(const std::shared_ptr&lt; OptimalControlProblem &gt; &amp;ocProblem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultipleShootingSolver</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>a94138f63d63f2f163ec13c71e36fe0ae</anchor>
      <arglist>(const MultipleShootingSolver &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStepSizeBounds</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>aeb670ccc7f2a7c147748b1af1be8aac2</anchor>
      <arglist>(double minStepSize, double maxStepsize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setIntegrator</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>a25f163f5cb789f211cb91a045b8ab8a8</anchor>
      <arglist>(const std::shared_ptr&lt; Integrator &gt; integrationMethod)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlPeriod</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>a84aa978d5a2592f2e20beb7636ec8299</anchor>
      <arglist>(double period)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAdditionalStateMeshPoints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>aae570a93425d8ab3a300d833fb95faad</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;stateMeshes)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAdditionalControlMeshPoints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>a1a684e6a7e61aeb2e9ff3b5b20282993</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;controlMeshes)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setOptimizer</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>acbd8b7b6842006c5e3b6b61c1ab34b2b</anchor>
      <arglist>(std::shared_ptr&lt; optimization::Optimizer &gt; optimizer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInitialState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>a6caaeb1375c71114ce4457684b12976f</anchor>
      <arglist>(const VectorDynSize &amp;initialState)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setGuesses</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>adfd907c9a95cb2cf47452ab80db6cb77</anchor>
      <arglist>(std::shared_ptr&lt; optimalcontrol::TimeVaryingVector &gt; stateGuesses, std::shared_ptr&lt; optimalcontrol::TimeVaryingVector &gt; controlGuesses)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTimings</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>a12110a13caf859e10a02fae98912f4c0</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;stateEvaluations, std::vector&lt; double &gt; &amp;controlEvaluations)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPossibleTimings</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>a76809e064e4e4b3fdb5a9633a174ada8</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;stateEvaluations, std::vector&lt; double &gt; &amp;controlEvaluations)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>solve</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>a9c3eb1c280959acb6c828d6800037103</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSolution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>afc73c7ee29cbefd15de8cc9fd209334e</anchor>
      <arglist>(std::vector&lt; VectorDynSize &gt; &amp;states, std::vector&lt; VectorDynSize &gt; &amp;controls)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTranscription</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>a5e473d16af12540b41df4bfb05533303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraintsHessianRegularization</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>a7717669f31a22bddcbf3784f22fcc2a7</anchor>
      <arglist>(double regularization)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableConstraintsHessianRegularization</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>ac5430c0b118c9f6f3e1dc5a284ed32a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCostsHessianRegularization</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>acf10bef2a044d880ae9bfd1fcbf8fcd7</anchor>
      <arglist>(double regularization)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableCostsHessianRegularization</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver.html</anchorfile>
      <anchor>adaad8f8eab76a7b91d2ff38cc8b4eac8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::MultipleShootingSolver::MultipleShootingTranscription</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</filename>
    <base>iDynTree::optimization::OptimizationProblem</base>
    <member kind="function">
      <type></type>
      <name>MultipleShootingTranscription</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>a1b0b30bf7432de116779b3f4dade787d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultipleShootingTranscription</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>aa099f83b10c8827307d2c637b31738e3</anchor>
      <arglist>(const std::shared_ptr&lt; OptimalControlProblem &gt; problem, const std::shared_ptr&lt; Integrator &gt; integrationMethod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultipleShootingTranscription</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>a01891161195a01c7c2aefb9b7853e0b4</anchor>
      <arglist>(const MultipleShootingTranscription &amp;other)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultipleShootingTranscription</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>a47ed9d286479b86abfb06be71ccc09a5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>prepare</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>acf96891afb2f67de97360292b6052fb9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>a33f97b42130978cd561c30f615f44987</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>numberOfVariables</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>aa7268c6a9f2766247c0b892f5e250d56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>numberOfConstraints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>a02b7df40f1dfdfdc2a3991ee891047e6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getConstraintsBounds</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>afa94f6dcd77de67d9e4dbe72a8199c1d</anchor>
      <arglist>(VectorDynSize &amp;constraintsLowerBounds, VectorDynSize &amp;constraintsUpperBounds) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getVariablesUpperBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>aac132baeccdeef4b07700ce9ac866777</anchor>
      <arglist>(VectorDynSize &amp;variablesUpperBound) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getVariablesLowerBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>ad540045fa810e59036a7d38c421c7ebd</anchor>
      <arglist>(VectorDynSize &amp;variablesLowerBound) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getConstraintsJacobianInfo</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>a984886235513d56c21a8a3472b6f1a77</anchor>
      <arglist>(std::vector&lt; size_t &gt; &amp;nonZeroElementRows, std::vector&lt; size_t &gt; &amp;nonZeroElementColumns) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getHessianInfo</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>a9fd550040b11533d60e020aefb872bbb</anchor>
      <arglist>(std::vector&lt; size_t &gt; &amp;nonZeroElementRows, std::vector&lt; size_t &gt; &amp;nonZeroElementColumns) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getGuess</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>abdb72cc9519ba4d773111c9a0d4d3c00</anchor>
      <arglist>(VectorDynSize &amp;guess) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setVariables</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>aace85f7b606db8b0fc317488a34f362e</anchor>
      <arglist>(const VectorDynSize &amp;variables) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCostFunction</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>a35dcee70d9a650c6a3edc0cc1d0490fd</anchor>
      <arglist>(double &amp;costValue) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCostGradient</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>affe0958d070c6f78e3d986685fcd791e</anchor>
      <arglist>(VectorDynSize &amp;gradient) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCostHessian</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>ab2902308f2678883197257a954764b6a</anchor>
      <arglist>(MatrixDynSize &amp;hessian) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateConstraints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>a421a66074d8c74d0879d947e4af811bb</anchor>
      <arglist>(VectorDynSize &amp;constraints) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateConstraintsJacobian</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>ad12d3e69de9feec23a91636df5957b7a</anchor>
      <arglist>(MatrixDynSize &amp;jacobian) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateConstraintsHessian</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>a7372277e58152b95255688c1b4bc8633</anchor>
      <arglist>(const VectorDynSize &amp;constraintsMultipliers, MatrixDynSize &amp;hessian) override</arglist>
    </member>
    <member kind="function">
      <type>const OptimizationProblemInfo &amp;</type>
      <name>info</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>a81fe567b6393857d59d1ec0f99a6d0d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; OptimizationProblemInfoData &gt;</type>
      <name>m_infoData</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>ac9dd97aa1515607651ff4f78b823d5da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OptimizationProblemInfo</type>
      <name>m_info</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>a38ea0b9e4f8d97c8fd55ef04addfad4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MultipleShootingSolver</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1MultipleShootingSolver_1_1MultipleShootingTranscription.html</anchorfile>
      <anchor>a08a06e2ff7ebffd459199dd460598908</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::Neighbor</name>
    <filename>structiDynTree_1_1Neighbor.html</filename>
    <member kind="variable">
      <type>LinkIndex</type>
      <name>neighborLink</name>
      <anchorfile>structiDynTree_1_1Neighbor.html</anchorfile>
      <anchor>af598faae51121c98f4731c705f7d9359</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JointIndex</type>
      <name>neighborJoint</name>
      <anchorfile>structiDynTree_1_1Neighbor.html</anchorfile>
      <anchor>a89630624e755423ef2d82cab0912303d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimization::NLPImplementation</name>
    <filename>classiDynTree_1_1optimization_1_1NLPImplementation.html</filename>
    <member kind="function">
      <type></type>
      <name>NLPImplementation</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>acde6a163c789ba87ddcff21f2d37e643</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NLPImplementation</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a9b9f4c1c08b62e61fa95654d07904eca</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_nlp_info</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>ad529ad2cf9503a7bbae0804cea708add</anchor>
      <arglist>(Ipopt::Index &amp;n, Ipopt::Index &amp;m, Ipopt::Index &amp;nnz_jac_g, Ipopt::Index &amp;nnz_h_lag, IndexStyleEnum &amp;index_style) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_bounds_info</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>afc3049968cb52604e23cdf93568c632a</anchor>
      <arglist>(Ipopt::Index n, Ipopt::Number *x_l, Ipopt::Number *x_u, Ipopt::Index m, Ipopt::Number *g_l, Ipopt::Number *g_u) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_starting_point</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>ab99f519af4d758f41f7480bf9137bee6</anchor>
      <arglist>(Ipopt::Index n, bool init_x, Ipopt::Number *x, bool init_z, Ipopt::Number *z_L, Ipopt::Number *z_U, Ipopt::Index m, bool init_lambda, Ipopt::Number *lambda) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>eval_f</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a4c3e4b7278577896e3d3046721c45e1c</anchor>
      <arglist>(Ipopt::Index n, const Ipopt::Number *x, bool new_x, Ipopt::Number &amp;obj_value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>eval_grad_f</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a37a4a9ebef0fa806b21908df5e1b4324</anchor>
      <arglist>(Ipopt::Index n, const Ipopt::Number *x, bool new_x, Ipopt::Number *grad_f) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>eval_g</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a885ca02c9faf11626c261823b7858c9a</anchor>
      <arglist>(Ipopt::Index n, const Ipopt::Number *x, bool new_x, Ipopt::Index m, Ipopt::Number *g) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>eval_jac_g</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a2647b1887f546e6cc92f65c6c44be3f4</anchor>
      <arglist>(Ipopt::Index n, const Ipopt::Number *x, bool new_x, Ipopt::Index m, Ipopt::Index nele_jac, Ipopt::Index *iRow, Ipopt::Index *jCol, Ipopt::Number *values) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>eval_h</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a71bca17406744ff5cb130eb6b9a92a1c</anchor>
      <arglist>(Ipopt::Index n, const Ipopt::Number *x, bool new_x, Ipopt::Number obj_factor, Ipopt::Index m, const Ipopt::Number *lambda, bool new_lambda, Ipopt::Index nele_hess, Ipopt::Index *iRow, Ipopt::Index *jCol, Ipopt::Number *values) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize_solution</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a2e70b76e604f216ed10046d8bccb9b20</anchor>
      <arglist>(Ipopt::SolverReturn status, Ipopt::Index n, const Ipopt::Number *x, const Ipopt::Number *z_L, const Ipopt::Number *z_U, Ipopt::Index m, const Ipopt::Number *g, const Ipopt::Number *lambda, Ipopt::Number obj_value, const Ipopt::IpoptData *ip_data, Ipopt::IpoptCalculatedQuantities *ip_cq) override</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>numberOfVariables</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a19d4605672fb9aef2b29cbe6ad3820af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>numberOfConstraints</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a972a12f2870441711492ac4682a6efff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_t &gt;</type>
      <name>constraintsJacNNZRows</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a3df4436b884807fc6961273ef44ccee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_t &gt;</type>
      <name>constraintsJacNNZCols</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a34a0e50d644e381990cb0dead58a61b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_t &gt;</type>
      <name>inputHessianNNZRows</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a862ae3e969fea2d8c751bc22432864be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_t &gt;</type>
      <name>inputHessianNNZCols</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a7939cce99113094e0d7edf1160ab6d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_t &gt;</type>
      <name>lowerTriangularHessianNNZRows</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a73f08c3975f1da2706feaaafb247a1ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_t &gt;</type>
      <name>lowerTriangularHessianNNZCols</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a0beb65cf82f253248bcfa82779fa1483</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; OptimizationProblem &gt;</type>
      <name>problem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a8cb4d70c1732412753a76b11a25b6b78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minusInfinity</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>ac993c6d0d7dce78c745fb6aa360c1bf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>plusInfinity</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>af297a416f43c3cb9fda49d4f8c0603dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>solution</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a7f8f99effd6ddc439b75c6d7022d1ed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>initialGuess</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a76e9fabb4bd15c423be9968e5f0b9fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>initialGuessSet</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>aa8fb156200be31c9852601c132aa7bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>exitCode</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a88f90548195772d484d9bfe84747921f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>optimalCostValue</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a35949d1c33949d88640de57d17db47df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>optimalConstraintsValue</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>abeabe497cd360de52bffdfdb974a91ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>lowerBoundMultipliers</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>aab0fb101221cc4b299c9a04e2fbba9d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>upperBoundMultipliers</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a6bb6d94e8356c7cc3409264c231583a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>constraintMultipliers</name>
      <anchorfile>classiDynTree_1_1optimization_1_1NLPImplementation.html</anchorfile>
      <anchor>a3a1900b1de6eebd748705ba7f16fff5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::optimalcontrol::NonZero</name>
    <filename>structiDynTree_1_1optimalcontrol_1_1NonZero.html</filename>
    <member kind="variable">
      <type>size_t</type>
      <name>row</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1NonZero.html</anchorfile>
      <anchor>ac9b89eb6ae228935b94ba08e6a961b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>col</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1NonZero.html</anchorfile>
      <anchor>a4b6cc2101249912a4557b45ba0c91404</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObserverThread</name>
    <filename>classObserverThread.html</filename>
    <member kind="function">
      <type></type>
      <name>ObserverThread</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>adc4b4528d70acef32adb7c20cafeb1e2</anchor>
      <arglist>(yarp::os::ResourceFinder &amp;config, int period)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a8bfc521c5977bfd16be73d6bfeb9661a</anchor>
      <arglist>(yarp::os::ResourceFinder &amp;config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ObserverThread</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a990dc3bd0d51e3819ada28606b588a0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>threadInit</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a3fb73c984f5f77c2d76c417ca7bb7fd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>threadRelease</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a99ed18b78cb22d100bed05a112b5eb04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a706eeb847f127cdf6c1b9bcd8934dea5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a630067097a000468ccf53d1ba3394a25</anchor>
      <arglist>(QPainter *qpainter, int widthInPixels, int heightInPixels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawPolygon</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a32cca2e87ea272bf819444e2aed74f0b</anchor>
      <arglist>(QPainter *qpainter, iDynTree::Polygon &amp;polygon)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>yarp::dev::PolyDriver</type>
      <name>m_wholeBodyDevice</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a6f10ca48c6ed64b0a90266f594499ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>yarp::dev::IEncoders *</type>
      <name>m_iencs</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a37796c9a53d7e074b82c28eeb2b123d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>yarp::dev::IPositionDirect *</type>
      <name>m_iposdir</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a0dcbe6aadd23df400646c3208ab23f59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iDynTree::KinDynComputations</type>
      <name>m_kinDyn</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a48897dbaf2920981a18ef820a7e872fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>yarp::sig::Vector</type>
      <name>m_measuredEncodersInDeg</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a5888e7988c70d628e81d2e6c0d9b9dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>yarp::sig::Vector</type>
      <name>m_desiredJointPositionsInDeg</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a966e77e2664f119bec8a6ef2a919776e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_primarySole</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>ad21fd7b440a5b204f27043e289deed17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_secondarySole</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a88c3faee0b53fac318290f6f946b29e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_skip_pressure</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a7d4052ebfddacd54febe108089ce4516</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>yarp::dev::PolyDriver</type>
      <name>m_primarySolePressure</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a07aea9176976803654b4c5e941d64233</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>yarp::dev::IAnalogSensor *</type>
      <name>m_primaryPressureAnalog</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a2f542c2e0a42c96499f4d12584167e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>yarp::dev::PolyDriver</type>
      <name>m_secondarySolePressure</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>aac012eddef57f3ac1966ba3e512330fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>yarp::dev::IAnalogSensor *</type>
      <name>m_secondaryPressureAnalog</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>ad5ec9caf95779dfea80bd61f3a6b7d88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; iDynTree::Position &gt;</type>
      <name>m_primaryPressurePadsInPrimarySole</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>adda2e83993ee4e514b94691ae1b1760c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; iDynTree::Position &gt;</type>
      <name>m_secondaryPressurePadsInSecondarySole</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a8cec0fad6edf6eff0188ec5154128828</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>yarp::sig::Vector</type>
      <name>m_measuredPressurePrimarySoleInN</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a8673f1be590828e17445cbf0f5a60d90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>yarp::sig::Vector</type>
      <name>m_measuredPressureSecondarySoleInN</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a8dc0178135f0ec75f815369080a8ec9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>yarp::os::BufferedPort&lt; yarp::os::Bottle &gt;</type>
      <name>skin_port</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>aa5b4b9eb50a4fdda3033a94f01990e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_skip_gravity</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a46a314cd849f89fb117f83a758bfcb93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>yarp::os::BufferedPort&lt; yarp::sig::Vector &gt;</type>
      <name>m_imuPort</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a97a0818e58b397dfa655e9aa631df3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_imuFrameName</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>ac0fe988dc3141d755b57487783f3cee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_remoteImuPortName</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a7a29852f9751e835ddaf95aa03da28b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_localImuPortName</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a2de83149cbc1832192c4a6fd08a9740b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iDynTree::Direction</type>
      <name>m_gravityDirection</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>ade05d344d701c7b28697c032351ff436</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iCub::ctrl::FirstOrderLowPassFilter *</type>
      <name>filtIMUGravity</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>ab610f644550c9f5425f16068c1238f63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>yarp::os::Semaphore</type>
      <name>mutex</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a585731e811a511031c150709139ab933</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sensorsNum</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>ae400d5897ef57a1fcfef697734ba6d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mbSimpleDraw</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a8bd71401b55f5bb59fb69b4074a02cd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>yarp::os::Mutex</type>
      <name>m_mutex</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a012fe091341ec257b2e4ca19693b1677</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iDynTree::Position</type>
      <name>m_comInPrimarySole</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a8fdd3ba613503208cf3bec980ff9d684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iDynTree::Position</type>
      <name>m_desiredComInPrimarySole</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>abfbcf155cd7206e36b0412759792bde4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iDynTree::Position</type>
      <name>m_primaryCopInPrimarySole</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>aacf04a043772353cd3f5acdeb94361b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iDynTree::Position</type>
      <name>m_secondaryCopInPrimarySole</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a4d05f76dd84e0ce493ed1c4f3e1de99b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iDynTree::Position</type>
      <name>m_totalCopInPrimarySole</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a4ee7098657bb6a3ce13f7b2473561669</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iDynTree::Transform</type>
      <name>m_primarySole_X_secondarySole</name>
      <anchorfile>classObserverThread.html</anchorfile>
      <anchor>a06b785d2c1f7a4b6f6a0e5d73751c62e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cmdline::oneof_reader</name>
    <filename>structcmdline_1_1oneof__reader.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structcmdline_1_1oneof__reader.html</anchorfile>
      <anchor>a08342ad57fe7eae76ccdbe6af6cc572f</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structcmdline_1_1oneof__reader.html</anchorfile>
      <anchor>af1101d86b057fae4f0dbc5bef1fb7d8c</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::OptimalControlProblem</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</filename>
    <class kind="class">iDynTree::optimalcontrol::OptimalControlProblem::OptimalControlProblemPimpl</class>
    <member kind="function">
      <type></type>
      <name>OptimalControlProblem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a8f8f15343f3681e867a3a1497815b3a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OptimalControlProblem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>ab893e61ce2643b91ef84ea56eb458dc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimalControlProblem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a4ee4e74a855091b473d495d501edc577</anchor>
      <arglist>(const OptimalControlProblem &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTimeHorizon</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a001558d92e820f77f324d95adc4e295b</anchor>
      <arglist>(double startingTime, double finalTime)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>initialTime</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>aa15ec20794c4ea3013ce9dbbf3880085</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>finalTime</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a28351bbdaed708d43d44b35eaa25170b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDynamicalSystemConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a4ebb1c541eda6f7364e35097ec8c9ce1</anchor>
      <arglist>(std::shared_ptr&lt; DynamicalSystem &gt; dynamicalSystem)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDynamicalSystemConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>adce0d7996ccf286f9f476f5a72312aa6</anchor>
      <arglist>(std::shared_ptr&lt; LinearSystem &gt; linearSystem)</arglist>
    </member>
    <member kind="function">
      <type>const std::weak_ptr&lt; DynamicalSystem &gt;</type>
      <name>dynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a4592eb73a3423af90f27ce16d4d0abf3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>systemIsLinear</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a5bdd83fa1e43b80cff9c8e609d6a6392</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGroupOfConstraints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a4fb55f0a9072eb927cd6a99b76c6c1db</anchor>
      <arglist>(std::shared_ptr&lt; ConstraintsGroup &gt; groupOfConstraints)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeGroupOfConstraints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a9aa7f91a2d44558234dbe443b9a783bd</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addContraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a5546741896743b7941725fe1a8bc34f2</anchor>
      <arglist>(std::shared_ptr&lt; Constraint &gt; newConstraint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>abec32a6da80771a87f082632507565bb</anchor>
      <arglist>(std::shared_ptr&lt; Constraint &gt; newConstraint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>abc67b1841b787b3d98f5e62fa7ed5d0e</anchor>
      <arglist>(std::shared_ptr&lt; LinearConstraint &gt; newConstraint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a82e394516abf28fcd9bfbfc64bafc2a4</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>countConstraints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a71bc6150196bc0aa9e0da36daee324de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>countLinearConstraints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a5b659927f50eee911468564c1fe40682</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getConstraintsDimension</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>ad52580e616f7cd8045fc8827a7c21da0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt;</type>
      <name>listConstraints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>ac4fe803cf2c4327627b46e58fb603446</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt;</type>
      <name>listGroups</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>aac1f20fae0a8ce4137a408ae21cf37bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; TimeRange &gt; &amp;</type>
      <name>getConstraintsTimeRanges</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a04c21f4a7900acc01c9f6b1cf0f05c41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; size_t &gt; &amp;</type>
      <name>getLinearConstraintsIndeces</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>acfc46c35a0081dda206751d036f8ac5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addMayerTerm</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a02489128e1ec78197e2d43368e98ebc5</anchor>
      <arglist>(double weight, std::shared_ptr&lt; Cost &gt; cost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addMayerTerm</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>af84f8268d7d9860caacbc7a2af9cfa01</anchor>
      <arglist>(double weight, std::shared_ptr&lt; QuadraticCost &gt; quadraticCost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addMayerTerm</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>afcacbdc9117f238009e661a74a53e6d6</anchor>
      <arglist>(double weight, std::shared_ptr&lt; L2NormCost &gt; quadraticCost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addMayerTerm</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a3acc6f9b97f6aa0db5e8ef27f83a393b</anchor>
      <arglist>(double weight, std::shared_ptr&lt; LinearCost &gt; linearCost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addLagrangeTerm</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a11680230dfa111e50aecd797e7ccbacc</anchor>
      <arglist>(double weight, std::shared_ptr&lt; Cost &gt; cost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addLagrangeTerm</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>aa60ac41b7e1066ea85c01edcc92b7cc5</anchor>
      <arglist>(double weight, std::shared_ptr&lt; QuadraticCost &gt; quadraticCost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addLagrangeTerm</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>aed61cf010d71423e7043b4a5c1f2d4d4</anchor>
      <arglist>(double weight, std::shared_ptr&lt; L2NormCost &gt; quadraticCost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addLagrangeTerm</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a80980ee78870f5182dea05097faa976d</anchor>
      <arglist>(double weight, std::shared_ptr&lt; LinearCost &gt; linearCost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addLagrangeTerm</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>acb5ce06342ae5477f0f50794f25d87e6</anchor>
      <arglist>(double weight, double startingTime, double finalTime, std::shared_ptr&lt; Cost &gt; cost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addLagrangeTerm</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a5d50f819307f5309b406cfb7efb69278</anchor>
      <arglist>(double weight, double startingTime, double finalTime, std::shared_ptr&lt; QuadraticCost &gt; quadraticCost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addLagrangeTerm</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a3f7146524e7dfdcae397ad544340b5f3</anchor>
      <arglist>(double weight, double startingTime, double finalTime, std::shared_ptr&lt; L2NormCost &gt; quadraticCost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addLagrangeTerm</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a0b886f55d1276dc14a9f0d075a0204d0</anchor>
      <arglist>(double weight, double startingTime, double finalTime, std::shared_ptr&lt; LinearCost &gt; linearCost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addLagrangeTerm</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a1cf49b1f74baed80c24ccca603d9a7f4</anchor>
      <arglist>(double weight, const TimeRange &amp;timeRange, std::shared_ptr&lt; Cost &gt; cost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addLagrangeTerm</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>abd1a53e2e446fd99c2f42c572f8001fb</anchor>
      <arglist>(double weight, const TimeRange &amp;timeRange, std::shared_ptr&lt; QuadraticCost &gt; quadraticCost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addLagrangeTerm</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a51b0a2f25e397361dd0ada69fed36558</anchor>
      <arglist>(double weight, const TimeRange &amp;timeRange, std::shared_ptr&lt; L2NormCost &gt; quadraticCost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addLagrangeTerm</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>adb0be63de26009c97f52fc211c5416f1</anchor>
      <arglist>(double weight, const TimeRange &amp;timeRange, std::shared_ptr&lt; LinearCost &gt; linearCost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateCostTimeRange</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>afe915042aac68470ec2b49e7807eb927</anchor>
      <arglist>(const std::string &amp;name, double newStartingTime, double newEndTime)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateCostTimeRange</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>ab73d563078b2d1230964c9d2cf62989b</anchor>
      <arglist>(const std::string &amp;name, const TimeRange &amp;newTimeRange)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>ad24c7064f34f42765f8e3f9553f5d410</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; TimeRange &gt; &amp;</type>
      <name>getCostsTimeRanges</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a7cea10c6e787b6b3677b7dfd15ac0462</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOnlyLinearCosts</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a994d66b1eec693a8a24a3f72f137938e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOnlyQuadraticCosts</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a35b485d624d04d19b8165a667abc60ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateLowerBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a8342782855251e0adc53e6ec51eaa383</anchor>
      <arglist>(const VectorDynSize &amp;minState)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateLowerBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>ad5ef909b3c40da1a8e7d148c63282557</anchor>
      <arglist>(std::shared_ptr&lt; TimeVaryingVector &gt; minState)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateUpperBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a01ad1c96b355b8a6f2155f95e0655f74</anchor>
      <arglist>(const VectorDynSize &amp;maxState)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateUpperBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a9c890c6f113a18dbb3dcf10b8bd8f3eb</anchor>
      <arglist>(std::shared_ptr&lt; TimeVaryingVector &gt; maxState)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlLowerBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a5921ec35c8c3b9bcd3da38dc85a9acd4</anchor>
      <arglist>(const VectorDynSize &amp;minControl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlLowerBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a48308ee8e0c37adb24d002b39a755505</anchor>
      <arglist>(std::shared_ptr&lt; TimeVaryingVector &gt; minControl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlUpperBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>ab12d5ae29f35eb2e4a97492d338306a2</anchor>
      <arglist>(const VectorDynSize &amp;maxControl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlUpperBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>aae545865e2ef845b988e82d61fdd2f4f</anchor>
      <arglist>(std::shared_ptr&lt; TimeVaryingVector &gt; maxControl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateBoxConstraints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>afd55bb59616f578b1f68773e48970f76</anchor>
      <arglist>(const VectorDynSize &amp;minState, const VectorDynSize &amp;maxState)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateBoxConstraints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>afbeffc43fa67ec4edda8b3ad2fd79c21</anchor>
      <arglist>(std::shared_ptr&lt; TimeVaryingVector &gt; minState, std::shared_ptr&lt; TimeVaryingVector &gt; maxState)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlBoxConstraints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>ad80b4e1dcac6906c40ee7964cc92c613</anchor>
      <arglist>(const VectorDynSize &amp;minControl, const VectorDynSize &amp;maxControl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlBoxConstraints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>ab4476ace7e3d6d5f227060d3bd5137aa</anchor>
      <arglist>(std::shared_ptr&lt; TimeVaryingVector &gt; minControl, std::shared_ptr&lt; TimeVaryingVector &gt; maxControl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getStateLowerBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>ae9879491c00b326931e9b38924990af4</anchor>
      <arglist>(double time, VectorDynSize &amp;minState)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getStateUpperBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a484613f00a345eb1d0ec5b78be0b51ff</anchor>
      <arglist>(double time, VectorDynSize &amp;maxState)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getControlLowerBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a2083c2b8144b48fa4efd4963cce73dac</anchor>
      <arglist>(double time, VectorDynSize &amp;minControl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getControlUpperBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a431f5188c049fa001905bfda44f74b6d</anchor>
      <arglist>(double time, VectorDynSize &amp;maxControl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>costsEvaluation</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a67a0dbc68632df087c09d11c583dd728</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, double &amp;costValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>costsFirstPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a6ac1abdd182daa78fe95dedce3f0dba0</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, VectorDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>costsFirstPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>ab57ca1ba2664007eb8e5b1df590ba9d3</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, VectorDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>costsSecondPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>ac410977ec50668f2fa9babb1cca5fda4</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, MatrixDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>costsSecondPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a767b7a3a667d27bfc79342f0458a1914</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, MatrixDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>costsSecondPartialDerivativeWRTStateControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>aa50d615775a44abeec5a368b3dc50178</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, MatrixDynSize &amp;partialDerivative)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>costsSecondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>ad4352f3855072d9cc5fbb2ae8f4db32b</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>costsSecondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a1b594b44422066f9e155a58cad8e559f</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>costsSecondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>abb27fe98321728fdd710795bdac4d8c6</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateControlSparsity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintsEvaluation</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a49ad293fdbe023d2e3c231912719172e</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, VectorDynSize &amp;constraintsValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getConstraintsUpperBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a9a2820cf7cd04c5df801a3c0ffbe157e</anchor>
      <arglist>(double time, double infinity, VectorDynSize &amp;upperBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getConstraintsLowerBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a636190efda17f40cd93ecef6da26d219</anchor>
      <arglist>(double time, double infinity, VectorDynSize &amp;lowerBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasiblePoint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a33a8c1a0347b981c256f0f5cdc22d416</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintsJacobianWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a31ae236e57f7180a1a3541479eca3d2d</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, MatrixDynSize &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintsJacobianWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a3f34c659174b4e78e4f6b8e82d08f77a</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, MatrixDynSize &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintsJacobianWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a7ce26aebe71c9b7673346b13933e88ca</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintsJacobianWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a10eb66200e440411848151168ebb2383</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintsSecondPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a0c7c2ec358f224dbfe3b58c4be810fac</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, const VectorDynSize &amp;lambda, MatrixDynSize &amp;hessian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintsSecondPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>ac35ace5bf40273c3af665af009e30d4b</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, const VectorDynSize &amp;lambda, MatrixDynSize &amp;hessian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintsSecondPartialDerivativeWRTStateControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>ade15d4ad045d7d00d598fcc5ab6b902a</anchor>
      <arglist>(double time, const VectorDynSize &amp;state, const VectorDynSize &amp;control, const VectorDynSize &amp;lambda, MatrixDynSize &amp;hessian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintsSecondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>ad14203a9175f6a98edd9f207d6f49774</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintsSecondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>a111482e45422e7eeaf7a98c175c0d7c6</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constraintsSecondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem.html</anchorfile>
      <anchor>abc9a594a838f6da6e0bf4fcf232e19cb</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateControlSparsity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::OptimalControlProblem::OptimalControlProblemPimpl</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>addCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>a6eaad5a344c8497e0bc11601d8d9af73</anchor>
      <arglist>(double weight, const TimeRange &amp;timeRange, std::shared_ptr&lt; Cost &gt; cost, bool isLinear, bool isQuadratic, const std::string &amp;methodName)</arglist>
    </member>
    <member kind="variable">
      <type>TimeRange</type>
      <name>horizon</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>a972452fe81b58985f5a798bb3c203e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; DynamicalSystem &gt;</type>
      <name>dynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>a1fd97acb31fb9d4033952e0bb23c3f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstraintsGroupsMap</type>
      <name>constraintsGroups</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>a36ce71c49cb14b5eb733a48507576ba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CostsMap</type>
      <name>costs</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>ad40e652c92890e83994f29c69bf51c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>stateLowerBounded</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>ac23eeef2e0736c26417e5713c2921b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>stateUpperBounded</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>a9c2d6c978e6f2d7511b3779dc875f16a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>controlLowerBounded</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>a5e14398d2159be29bd63db0da83d3223</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>controlUpperBounded</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>adf14cc024faa55dd8c3ea372ad156702</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingVector &gt;</type>
      <name>stateLowerBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>a29367e58b750a0922c947b8a1007af61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingVector &gt;</type>
      <name>stateUpperBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>a6b68194f2da4eb84c9f99296e4792319</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingVector &gt;</type>
      <name>controlLowerBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>aca75b1ad4ef02757d8aa40d7614c400b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingVector &gt;</type>
      <name>controlUpperBound</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>add3a628b976980cef61215d44d89eca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>stateJacobianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>ac2935fff5d7f4f8804c5cba382886692</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>controlJacobianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>ac2795c4d7c2bf0f510140b73c1ff26be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>constraintsStateHessianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>a1105c4c44e2eb9d031ba660bdf7f7df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>constraintsControlHessianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>a18c533d4efa3564f24806b2462726c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>constraintsMixedHessianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>a8d0d39fb43816c90ce540cad8af17bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>costsStateHessianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>abdb8c7c210a41c78b17a97181aada48b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>costsControlHessianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>a0eba6e4861abf946515767662f6e64c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>costsMixedHessianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>abb07f38646870f514c1eee7cb5b5a6f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>mayerCostnames</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>a7bacf8a747325f3aed326a3f6f49eb65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TimeRange &gt;</type>
      <name>constraintsTimeRanges</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>a803dda6a01cef19e8f4cba06cd541785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TimeRange &gt;</type>
      <name>costTimeRanges</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>af2c8b19cfabe8069940debf58595bf0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_t &gt;</type>
      <name>linearConstraintIndeces</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>adb458cd35a9d1d725ee39050cc510e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>systemIsLinear</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlProblem_1_1OptimalControlProblemPimpl.html</anchorfile>
      <anchor>afaaf1c54248fc99f0f93734b7aa58d06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::OptimalControlSolver</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1OptimalControlSolver.html</filename>
    <member kind="function">
      <type></type>
      <name>OptimalControlSolver</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlSolver.html</anchorfile>
      <anchor>a09fb40c47a84272706113ef950af2e54</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimalControlSolver</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlSolver.html</anchorfile>
      <anchor>a9fde83bee85fc95ed04f167faec8f5b2</anchor>
      <arglist>(const std::shared_ptr&lt; OptimalControlProblem &gt; ocProblem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OptimalControlSolver</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlSolver.html</anchorfile>
      <anchor>aba2c4b93f78b9f6db45c68d08b075f51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>solve</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1OptimalControlSolver.html</anchorfile>
      <anchor>a03967acc8076478746703bc3582b4f3f</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimization::OptimizationProblem</name>
    <filename>classiDynTree_1_1optimization_1_1OptimizationProblem.html</filename>
    <member kind="function">
      <type></type>
      <name>OptimizationProblem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>af56519678cb24ed412417636fae17953</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OptimizationProblem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>af4d69f03ea575ef0324c7e49d253d134</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>prepare</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>a4c499e4c8e75906d8389c5b5b754d563</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>af069c2974a3af7426eca560f9dded547</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>numberOfVariables</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>a22f029aa5c80de956fbccec5211e65f6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>numberOfConstraints</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>a12de3560b93b479eaafea1b916a850a8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getConstraintsBounds</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>a8e7ad321202f67427e4a9c85566b25e8</anchor>
      <arglist>(VectorDynSize &amp;constraintsLowerBounds, VectorDynSize &amp;constraintsUpperBounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getVariablesUpperBound</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>a13c0339ff00fe9d11ae077477e1a6e68</anchor>
      <arglist>(VectorDynSize &amp;variablesUpperBound)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getVariablesLowerBound</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>aa09192e833a8b58750770fe96803506e</anchor>
      <arglist>(VectorDynSize &amp;variablesLowerBound)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getConstraintsJacobianInfo</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>a14313fdb9bedfd3618302dd7093ef789</anchor>
      <arglist>(std::vector&lt; size_t &gt; &amp;nonZeroElementRows, std::vector&lt; size_t &gt; &amp;nonZeroElementColumns)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getHessianInfo</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>afb0d842602cc3df2a80b266b74b74ad8</anchor>
      <arglist>(std::vector&lt; size_t &gt; &amp;nonZeroElementRows, std::vector&lt; size_t &gt; &amp;nonZeroElementColumns)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getGuess</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>adf40d3a48ecb1d4d5ed9719c5fdd6a42</anchor>
      <arglist>(VectorDynSize &amp;guess)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setVariables</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>a7cc9dc6a091dac0aa72278ceb686fd91</anchor>
      <arglist>(const VectorDynSize &amp;variables)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCostFunction</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>a3d210d468b57f23478e14420f35e677d</anchor>
      <arglist>(double &amp;costValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCostGradient</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>a693ae81b245761c663be6e50b90f6fe8</anchor>
      <arglist>(VectorDynSize &amp;gradient)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCostHessian</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>a55b98c8a17f50d945485002f40813497</anchor>
      <arglist>(MatrixDynSize &amp;hessian)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateConstraints</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>a32c7133a6ec3e7fe6da22ac9cb1aa562</anchor>
      <arglist>(VectorDynSize &amp;constraints)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateConstraintsJacobian</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>a36a865973b043e70563cb647c3de484a</anchor>
      <arglist>(MatrixDynSize &amp;jacobian)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateConstraintsHessian</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>ad215b5673806e656abb6f13f44d67234</anchor>
      <arglist>(const VectorDynSize &amp;constraintsMultipliers, MatrixDynSize &amp;hessian)</arglist>
    </member>
    <member kind="function">
      <type>const OptimizationProblemInfo &amp;</type>
      <name>info</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>a81fe567b6393857d59d1ec0f99a6d0d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; OptimizationProblemInfoData &gt;</type>
      <name>m_infoData</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>ac9dd97aa1515607651ff4f78b823d5da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OptimizationProblemInfo</type>
      <name>m_info</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblem.html</anchorfile>
      <anchor>a38ea0b9e4f8d97c8fd55ef04addfad4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimization::OptimizationProblemInfo</name>
    <filename>classiDynTree_1_1optimization_1_1OptimizationProblemInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>OptimizationProblemInfo</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfo.html</anchorfile>
      <anchor>a1ee3914e8cf6e63d2d7534ead8f33661</anchor>
      <arglist>(std::shared_ptr&lt; OptimizationProblemInfoData &gt; data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimizationProblemInfo</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfo.html</anchorfile>
      <anchor>a171939b84a2d70892a4d08594b3bdd25</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimizationProblemInfo</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfo.html</anchorfile>
      <anchor>ae97c3bc302bb0dace5ddb128bbff1cb6</anchor>
      <arglist>(const OptimizationProblemInfo &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLinearConstraints</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfo.html</anchorfile>
      <anchor>a25cbea0758f0bef437ed38b5a737be1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNonLinearConstraints</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfo.html</anchorfile>
      <anchor>aa506b682bc43707324352b820ce57d10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>costIsLinear</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfo.html</anchorfile>
      <anchor>ad00d6ded2c25cb08f85415fd923b11d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>costIsQuadratic</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfo.html</anchorfile>
      <anchor>a39a9d027984958096f297b96a1b4f45f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>costIsNonLinear</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfo.html</anchorfile>
      <anchor>a49337ee241bdd763596b91d497e333e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSparseConstraintJacobian</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfo.html</anchorfile>
      <anchor>a493519e80848f076a4f1c99ac07321c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSparseHessian</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfo.html</anchorfile>
      <anchor>aa91a3afea8b4a95903c40878a49d1a3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hessianIsProvided</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfo.html</anchorfile>
      <anchor>afe9b1a57f3b7ff07228c875590db5789</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimization::OptimizationProblemInfoData</name>
    <filename>classiDynTree_1_1optimization_1_1OptimizationProblemInfoData.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>hasLinearConstraints</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfoData.html</anchorfile>
      <anchor>acd438413b0b134e0545ec3047219246c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasNonLinearConstraints</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfoData.html</anchorfile>
      <anchor>ab4f6418f1ffe20dc7f13422054187371</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>costIsLinear</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfoData.html</anchorfile>
      <anchor>a6232e824afa79608ca1b99a05f1827a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>costIsQuadratic</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfoData.html</anchorfile>
      <anchor>a56fe28e8521e18948dfb0fc7aed48419</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>costIsNonLinear</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfoData.html</anchorfile>
      <anchor>a481aa35d527a2275511d31be85c078a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasSparseConstraintJacobian</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfoData.html</anchorfile>
      <anchor>ad8afbe06510e095efa11d2b05b87b141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasSparseHessian</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfoData.html</anchorfile>
      <anchor>a861a0c35c207671c854c8cdb36cef68e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hessianIsProvided</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfoData.html</anchorfile>
      <anchor>a73facba9e4e03e159b89bcca0905b8a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OptimizationProblemInfoData</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfoData.html</anchorfile>
      <anchor>a43fbeed21c2840a900ff21e0c0bdb6ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>OptimizationProblem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OptimizationProblemInfoData.html</anchorfile>
      <anchor>ac2f9678dc46fbfb03985348e163a9ad5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimization::Optimizer</name>
    <filename>classiDynTree_1_1optimization_1_1Optimizer.html</filename>
    <member kind="function">
      <type></type>
      <name>Optimizer</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>a5fb8e46345b5804f1ab7dbbf024f031c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Optimizer</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>a8422899e4dd81456a9fe4b8553eeafb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isAvailable</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>ac9b2386bef738ad45761103ffa0eed57</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setProblem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>abf15e27f3d10aba5c68e61d09d40971a</anchor>
      <arglist>(std::shared_ptr&lt; OptimizationProblem &gt; problem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::weak_ptr&lt; OptimizationProblem &gt;</type>
      <name>problem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>a6836c50c97f711451f5c0f011a2efddb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>solve</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>abbb92fc315d49718abffa88b55da1b70</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getPrimalVariables</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>a617535d1b31d6fc02c57aed5e3be85c2</anchor>
      <arglist>(VectorDynSize &amp;primalVariables)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getDualVariables</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>a07c3f0b90d4447336e9634eeace20fac</anchor>
      <arglist>(VectorDynSize &amp;constraintsMultipliers, VectorDynSize &amp;lowerBoundsMultipliers, VectorDynSize &amp;upperBoundsMultipliers)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getOptimalCost</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>a87a960241436933a5c9f9ca433ff3873</anchor>
      <arglist>(double &amp;optimalCost)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getOptimalConstraintsValues</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>a9e5806581720ef65847cc0c6c86e71cd</anchor>
      <arglist>(VectorDynSize &amp;constraintsValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>minusInfinity</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>aa65f87a58cf9fde10790b0286be8b842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>plusInfinity</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>a72cca7778dea09d8b24fcc0859fbac56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; OptimizationProblem &gt;</type>
      <name>m_problem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>ae3b9609d905cbbf3c3336c9350e94106</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::OriginElement</name>
    <filename>classiDynTree_1_1OriginElement.html</filename>
    <base>iDynTree::XMLElement</base>
    <member kind="function">
      <type></type>
      <name>OriginElement</name>
      <anchorfile>classiDynTree_1_1OriginElement.html</anchorfile>
      <anchor>a3d354e347389e691ba7ec62b0984abb3</anchor>
      <arglist>(iDynTree::Transform &amp;jointOrigin)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAttributes</name>
      <anchorfile>classiDynTree_1_1OriginElement.html</anchorfile>
      <anchor>a82a9b00d78ef244faca75274786dad3b</anchor>
      <arglist>(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;attributes) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ab40851b7629a74107f2183ca36e412e4</anchor>
      <arglist>(std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a16759fb450635662dced0eb2ace0228b</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChildHasBeenParsedCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a69171cc4b5c552b97f44375029356a2e</anchor>
      <arglist>(std::function&lt; void(std::shared_ptr&lt; XMLElement &gt;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt;</type>
      <name>attributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2a182ac17f5e644b113a67e02c3595e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; void()&gt;</type>
      <name>exitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a04ea33b2a4ebf84647fb6d38e24ba0e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a7129fb1e69a5bc819872e65d3965296d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; XMLElement &gt; &gt;</type>
      <name>children</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2f51748fc6eed4724e86dc5e52ebd5ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt; &gt;</type>
      <name>attributes</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a27347aca070a5dfc250077b6cc3e3748</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; XMLElement &gt;</type>
      <name>childElementForName</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a1224214141437630a36445e941867065</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>exitElementScope</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a66d20512ef5debea77d1919835dbda1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>childHasBeenParsed</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ac92ce9b144b27970e09f6f9dff77f251</anchor>
      <arglist>(std::shared_ptr&lt; XMLElement &gt; parsedChild)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsedCharacters</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a949bcf8e3496896d2b6d7d6da72870a7</anchor>
      <arglist>(const std::string &amp;characters)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParsedTextContent</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>abebc95353394912e187ad70e6078fcdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a3d8e1b737e614b35e3df0a4f76ac645b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimization::OsqpInterface</name>
    <filename>classiDynTree_1_1optimization_1_1OsqpInterface.html</filename>
    <base>iDynTree::optimization::Optimizer</base>
    <class kind="class">iDynTree::optimization::OsqpInterface::OsqpInterfaceImplementation</class>
    <member kind="function">
      <type></type>
      <name>OsqpInterface</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface.html</anchorfile>
      <anchor>a16291c4e426058e0c2a92757cb9e94bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OsqpInterface</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface.html</anchorfile>
      <anchor>a80ed27f2738fbf990537472e42802b73</anchor>
      <arglist>(const OsqpInterface &amp;other)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OsqpInterface</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface.html</anchorfile>
      <anchor>ae6209c03588a10d5a071121ce6dd4827</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAvailable</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface.html</anchorfile>
      <anchor>aab0b41086e9867878fc4ae3a0a56197a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setProblem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface.html</anchorfile>
      <anchor>a50f6bb730760e16994c71f8798e8262f</anchor>
      <arglist>(std::shared_ptr&lt; OptimizationProblem &gt; problem) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>solve</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface.html</anchorfile>
      <anchor>ae363f39a6e9dd8458fb6793cafeb8180</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getPrimalVariables</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface.html</anchorfile>
      <anchor>a3a24bd2831061790c1469f85e7c5cad0</anchor>
      <arglist>(VectorDynSize &amp;primalVariables) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getDualVariables</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface.html</anchorfile>
      <anchor>a5e105eccc086ce73549c633483a04400</anchor>
      <arglist>(VectorDynSize &amp;constraintsMultipliers, VectorDynSize &amp;lowerBoundsMultipliers, VectorDynSize &amp;upperBoundsMultipliers) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getOptimalCost</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface.html</anchorfile>
      <anchor>a0a2aeef8f212c2881e5d62c7869839cc</anchor>
      <arglist>(double &amp;optimalCost) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getOptimalConstraintsValues</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface.html</anchorfile>
      <anchor>aea61364fdc6bcf7d12420250217db43d</anchor>
      <arglist>(VectorDynSize &amp;constraintsValues) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>minusInfinity</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface.html</anchorfile>
      <anchor>a16cd82aa41972305f354dbbac881d622</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>plusInfinity</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface.html</anchorfile>
      <anchor>a9cafe53fa6736bfb43c3c1a87600013f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>OsqpSettings &amp;</type>
      <name>settings</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface.html</anchorfile>
      <anchor>af387fe64e3fea6473fed843e2a8e315f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::weak_ptr&lt; OptimizationProblem &gt;</type>
      <name>problem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>a6836c50c97f711451f5c0f011a2efddb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; OptimizationProblem &gt;</type>
      <name>m_problem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>ae3b9609d905cbbf3c3336c9350e94106</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimization::OsqpInterface::OsqpInterfaceImplementation</name>
    <filename>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>checkAndSetSetting</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a1a1f9c6f0fd3b59f681783487aa14666</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>possibleReStart</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a64973309281579c830b5df02ccece6ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>OsqpSettings</type>
      <name>settings</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a858ef8af95d57d423ba04ecf2938990b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OsqpSettings</type>
      <name>previousSettings</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>ad77f811e8e83d3730b6c718de8751212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OsqpEigen::Solver</type>
      <name>solver</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>accba2002a4c8240a936c3eba812056d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>initialGuessSet</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a3eb71ca46e31a3faf728979009386006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>constraintsUpperBounds</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>adf5ddaca58e00a39de29dcbc246ef2ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>constraintsLowerBounds</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a7a81d3a39fbebdba05d55e9103230b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>variablesLowerBounds</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a6685a4ac08b400c72323f66576d2dc41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>variablesUpperBounds</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>afb680bd46252a8bc6ce660c531f1159d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasBoxConstraints</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a9cf9529470ab2729d4a2e90a2628a9d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; std::vector&lt; size_t &gt; &gt;</type>
      <name>constraintNNZRows</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>aa018f062ea285a1b18c6f1f87967f802</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; std::vector&lt; size_t &gt; &gt;</type>
      <name>constraintNNZCols</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>ade64f8bc68aadfd3b5b00638d3042754</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; std::vector&lt; size_t &gt; &gt;</type>
      <name>hessianNNZRows</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a5233464e3783f3c67577f69ed29e2aad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; std::vector&lt; size_t &gt; &gt;</type>
      <name>hessianNNZCols</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>ab3a00a6b975b1a589d39c93b74b834c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>variablesBuffer</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a0059faba5ab808519708b939199b4b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>solutionBuffer</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a81b87622f6d8a52dfaffe12104fcff96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>constraintsBuffer</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>ac083a83a471fcd88f56bf7ae370e8614</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>costGradient</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a66350f6abd10f9405845a36dc9db7844</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>iDynTreeInitialGuess</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>aec7643a97e38e2ccccdce9dd82cdee2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; MatrixDynSize &gt;</type>
      <name>costHessian</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>ae05450c00cd1198d9eeacbe4eee2895c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; MatrixDynSize &gt;</type>
      <name>constraintJacobian</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a8dc6074d50228c61fb791418bb866627</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>nv</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a81f798108717c5d9f2411358bc612942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>nc</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a9897a892450d693afed8b3924abda4bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>previous_nv</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a72a5faa76212fe7df78898d8a4191a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>previous_nc</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>ad8400412e3c14cced864986833bc9a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::SparseMatrix&lt; double &gt;</type>
      <name>eigenHessian</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a290dab7a09abb034054d0ea9932b7f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::SparseMatrix&lt; double &gt;</type>
      <name>eigenJacobian</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a16370c8d07f3bc2f129e4be0362bd9b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>eigenGradient</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a13843065d06e2a9ec93950ca4ccdc357</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>eigenInitialGuess</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a72b66e3caa568294839a7c689b7a883d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>unifiedLowerBounds</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>ae1d761c1d809f63f86110fa34ac51ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>unifiedUpperBounds</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a537a598c20bc0a97e9e9a483839b2272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>eigenPrimalVariables</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a6b73908ef3cbb8611da2a574c1320b71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>eigenDualVariables</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a08169a919fe71ed8818bb6ca1402fbeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>alreadySolved</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a8195d29733e1ce84c269892013c03e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isLowerBounded</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>ac116ceeced3d1b81143bd23aed49be22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isUpperBounded</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a1b576b7178b89f1706b09055a7cb2d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>optionsAllowReoptimize</name>
      <anchorfile>classiDynTree_1_1optimization_1_1OsqpInterface_1_1OsqpInterfaceImplementation.html</anchorfile>
      <anchor>a57c6fd5fd37da71d31bbd52dea4b3870</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::optimization::OsqpSettings</name>
    <filename>structiDynTree_1_1optimization_1_1OsqpSettings.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>rho</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>a5d1bfcb87605ddd77d5f8480b54dae77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sigma</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>a67aeaa5ab3a363280e4c8427b334fec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>max_iter</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>ae0cd693ced905ac444a8b9977fec24c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>eps_abs</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>af9ca4167b6c18c09d3368fdad013aa32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>eps_rel</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>a02f3c106c086e8387fade77e1d6c244d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>eps_prim_inf</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>a1e8aa6c7bd9359ab8a22ba5de74ea305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>eps_dual_inf</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>a0aeed2e24308203ffed0937432616504</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>a89bc2fe6024f88233d6930991055336b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>linsys_solver</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>a249e2b6a840e2a228e95ae0841fbea49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>delta</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>ae7d688001e1ecfb9787b685d0c6cb723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>polish</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>a368863b5a7a2e246bf37919a173ab09e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>polish_refine_iter</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>ade77c574481c51c9247f9d260b515390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>a5bd4b4c018fedc1bc94c07281657d31f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>scaled_termination</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>a57c45fd89955d8beae9a287dc0b3111a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>check_termination</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>a0d4d403fd52cf2e4c1440a3b5c8d0c84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>warm_start</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>a01eada4232ef8cb60a631dba3ebdb15c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>scaling</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>a88a10410a9961dfe22e7cbcc44f6dca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>adaptive_rho</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>a78956f2d00108ddc3fe78b552719483c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>adaptive_rho_interval</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>a891e483e688755dbd08db08f7fc24e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>adaptive_rho_tolerance</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>a18936fbf53d8683af56d9ab33b3df5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>adaptive_rho_fraction</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>ab632aeefdaf80c829afaad8a0d0efa23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>time_limit</name>
      <anchorfile>structiDynTree_1_1optimization_1_1OsqpSettings.html</anchorfile>
      <anchor>acab437eb597b81c921fe2f3ff9ebb8e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cmdline::parser</name>
    <filename>classcmdline_1_1parser.html</filename>
    <member kind="function">
      <type></type>
      <name>parser</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>a436c7cba6efd596729d18d58f1016cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~parser</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>ad656d8b9b4a38ce85cd2b630c4fc9a6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>a122aab1fb389f16170397971be1e75b6</anchor>
      <arglist>(const std::string &amp;name, char short_name=0, const std::string &amp;desc=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>af97ab18f409599df07146da819c96bae</anchor>
      <arglist>(const std::string &amp;name, char short_name=0, const std::string &amp;desc=&quot;&quot;, bool need=true, const T def=T())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>aa6d002a3ef165c240d65c1e87f61a77c</anchor>
      <arglist>(const std::string &amp;name, char short_name=0, const std::string &amp;desc=&quot;&quot;, bool need=true, const T def=T(), F reader=F())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>footer</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>a00f22e1d9ac1b8d73dfc990b4f87a598</anchor>
      <arglist>(const std::string &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_program_name</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>afdf4cb8deaead2d735c7803ede5b6b6a</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_program_name</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>ac32c6e3e9f6dfe7ad44b9189d07f490c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exist</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>abe6c9ad7c3991062076917de0514376c</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>a81a73f9940d4a04a17cf894289f2ad9e</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>rest</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>a691375f291a8013f70e1c402f90c3531</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>ab8ca75cca3abf36b9474edcf0ce21ca6</anchor>
      <arglist>(const std::string &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>a745c9519abe50562987487b6bf794fd7</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>a83175f24d7d9e29256b855fb249f427b</anchor>
      <arglist>(int argc, const char *const argv[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse_check</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>af22be174b0ab09f03462c02e9afa03c9</anchor>
      <arglist>(const std::string &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse_check</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>a0829039262c93910a9fee8c80f3edb64</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse_check</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>a9c1aebc54c4bc0387c884888185b4941</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>error</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>a9bcaaea243a949bf30a40d938480d303</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>error_full</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>a0267b636f34a788f57d5eeffcc5daf44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>usage</name>
      <anchorfile>classcmdline_1_1parser.html</anchorfile>
      <anchor>a50b57c8179fe1b0dd8f5d2b8e8f3261b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ModelExporter::Pimpl</name>
    <filename>classiDynTree_1_1ModelExporter_1_1Pimpl.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>setModelAndSensors</name>
      <anchorfile>classiDynTree_1_1ModelExporter_1_1Pimpl.html</anchorfile>
      <anchor>a38e3e7be99a44c96925b168505e88e99</anchor>
      <arglist>(const Model &amp;_model, const SensorsList &amp;_sensors)</arglist>
    </member>
    <member kind="variable">
      <type>Model</type>
      <name>m_model</name>
      <anchorfile>classiDynTree_1_1ModelExporter_1_1Pimpl.html</anchorfile>
      <anchor>a159cfaaca751d650fd54d405851c9b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SensorsList</type>
      <name>m_sensors</name>
      <anchorfile>classiDynTree_1_1ModelExporter_1_1Pimpl.html</anchorfile>
      <anchor>a0931ceb7ad3409a7097ddf0a7f023f6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_isModelValid</name>
      <anchorfile>classiDynTree_1_1ModelExporter_1_1Pimpl.html</anchorfile>
      <anchor>a037170d1350f3f30ed5ecf3851cf3246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ModelExporterOptions</type>
      <name>m_options</name>
      <anchorfile>classiDynTree_1_1ModelExporter_1_1Pimpl.html</anchorfile>
      <anchor>a20e5c60c23315d9f3c3abbe9b476969a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Polygon</name>
    <filename>classiDynTree_1_1Polygon.html</filename>
    <member kind="function">
      <type></type>
      <name>Polygon</name>
      <anchorfile>classiDynTree_1_1Polygon.html</anchorfile>
      <anchor>a8ae3e9d22bc9acf32ac35ad3a92ddf4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNrOfVertices</name>
      <anchorfile>classiDynTree_1_1Polygon.html</anchorfile>
      <anchor>ae219a4bc4fc2f4112f7d60f8e93f6b5e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfVertices</name>
      <anchorfile>classiDynTree_1_1Polygon.html</anchorfile>
      <anchor>afcda2e1cc8bbfcebdea68245051a01d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1Polygon.html</anchorfile>
      <anchor>a0ac09dbde29030c23530ebd4d32fd9d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Polygon</type>
      <name>applyTransform</name>
      <anchorfile>classiDynTree_1_1Polygon.html</anchorfile>
      <anchor>a194733d9faab0c384be16b4252331b29</anchor>
      <arglist>(const Transform &amp;newFrame_X_oldFrame) const</arglist>
    </member>
    <member kind="function">
      <type>Position &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1Polygon.html</anchorfile>
      <anchor>ac30a370b8c6deb3f4bcd86f4eb9257e7</anchor>
      <arglist>(const size_t idx)</arglist>
    </member>
    <member kind="function">
      <type>const Position &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1Polygon.html</anchorfile>
      <anchor>a14e1082e515e599103d70d4e4be4e511</anchor>
      <arglist>(const size_t idx) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Polygon</type>
      <name>XYRectangleFromOffsets</name>
      <anchorfile>classiDynTree_1_1Polygon.html</anchorfile>
      <anchor>a92f2de943a20d6e0c83a471cafef22cf</anchor>
      <arglist>(const double front, const double back, const double left, const double right)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Position &gt;</type>
      <name>m_vertices</name>
      <anchorfile>classiDynTree_1_1Polygon.html</anchorfile>
      <anchor>a0f9063756d63cfd170fc1f9cac901789</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Polygon2D</name>
    <filename>classiDynTree_1_1Polygon2D.html</filename>
    <member kind="function">
      <type></type>
      <name>Polygon2D</name>
      <anchorfile>classiDynTree_1_1Polygon2D.html</anchorfile>
      <anchor>ad143381c39c3f1234dad23e673ab8561</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNrOfVertices</name>
      <anchorfile>classiDynTree_1_1Polygon2D.html</anchorfile>
      <anchor>a9a1e285e865a930d6b99413a065180a2</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfVertices</name>
      <anchorfile>classiDynTree_1_1Polygon2D.html</anchorfile>
      <anchor>a5a48450436b7325e17165e79f0e60333</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1Polygon2D.html</anchorfile>
      <anchor>afb76cbccbffe71b2627e0a83295d3af7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2 &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1Polygon2D.html</anchorfile>
      <anchor>a60091d50f9dd565b890102376eb055eb</anchor>
      <arglist>(const size_t idx)</arglist>
    </member>
    <member kind="function">
      <type>const Vector2 &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1Polygon2D.html</anchorfile>
      <anchor>ad7585030c746e9c0f5f64c69ba128bd3</anchor>
      <arglist>(const size_t idx) const</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Vector2 &gt;</type>
      <name>m_vertices</name>
      <anchorfile>classiDynTree_1_1Polygon2D.html</anchorfile>
      <anchor>a73aa7246408880d3529e04e4f433e306</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Position</name>
    <filename>classiDynTree_1_1Position.html</filename>
    <base>iDynTree::PositionRaw</base>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ada7487eff1fee83db8d41165d30f1263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ad0f06a255dc213a5904d232f703a0192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aa11c3eee00e88dabb7880f6cac2a9b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a69b51f8119155d31a254676ae867ae8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a7586102420b5ad9c679db233b556dc05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>ab9a911b341e94dce3c12a0b00909bca7</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a43bb1d57623d1a8723ed4d91b11c84f0</anchor>
      <arglist>(const Position &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a2ec67c9730e953b9b322eed3ab93a327</anchor>
      <arglist>(const PositionRaw &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PositionSemantics &amp;</type>
      <name>getSemantics</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a0020854c542f30a07eaad9e16577e92c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PositionSemantics &amp;</type>
      <name>getSemantics</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a7351d79b0c77b1051cbcb9e6ea9e71de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Position &amp;</type>
      <name>changePoint</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>ade5d37a8042ff5aa7dc7a0a19cd85a75</anchor>
      <arglist>(const Position &amp;newPoint)</arglist>
    </member>
    <member kind="function">
      <type>const Position &amp;</type>
      <name>changeRefPoint</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a91e575cba1074858c7b0a5bad2235ab5</anchor>
      <arglist>(const Position &amp;newRefPoint)</arglist>
    </member>
    <member kind="function">
      <type>const Position &amp;</type>
      <name>changeCoordinateFrame</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>ac53455068bb9543f4bdbd3ef000ddd23</anchor>
      <arglist>(const Rotation &amp;newCoordinateFrame)</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionVector</type>
      <name>changePointOf</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a084e7ceda461be06437a1b4bce13ff80</anchor>
      <arglist>(const SpatialMotionVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>changePointOf</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a1cb0f61163edd2a5d1270f4f5bd952bb</anchor>
      <arglist>(const SpatialForceVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>changePointOf</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a88d5d8268549a0c34541d1a8ba521b9a</anchor>
      <arglist>(const Twist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialAcc</type>
      <name>changePointOf</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>aa93150342775df928536cbdc6504f9d3</anchor>
      <arglist>(const SpatialAcc &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMomentum</type>
      <name>changePointOf</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a8b2c15ec5f9cc33f9a1ff0cbdaf98d9f</anchor>
      <arglist>(const SpatialMomentum &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>changePointOf</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a7cfa20dda040d64eca5068b7df0c461e</anchor>
      <arglist>(const Wrench &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>ae3f22570adb18010ccffcf4ca680ef51</anchor>
      <arglist>(const Position &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a502889ab010c4355e9ed08aa4452d59a</anchor>
      <arglist>(const Position &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a1fe25ef2a4912d67b692a4649a84df6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a0e9ca2aafa7a4a786fbdd0c83bbdccd1</anchor>
      <arglist>(const Twist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a66dc701a9789b4f06badaed2722bdd65</anchor>
      <arglist>(const SpatialForceVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialAcc</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a88c9b6606f756507b5d4755dccda244f</anchor>
      <arglist>(const SpatialAcc &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMomentum</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a8e817bcd7259999322b29705f388d9f3</anchor>
      <arglist>(const SpatialMomentum &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a8712f068ccc27d06cb857efd9061386c</anchor>
      <arglist>(const Wrench &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const PositionRaw &amp;</type>
      <name>changePoint</name>
      <anchorfile>classiDynTree_1_1PositionRaw.html</anchorfile>
      <anchor>a2ba8f8ce52358fd58e8294af17737e8e</anchor>
      <arglist>(const PositionRaw &amp;newPoint)</arglist>
    </member>
    <member kind="function">
      <type>const PositionRaw &amp;</type>
      <name>changeRefPoint</name>
      <anchorfile>classiDynTree_1_1PositionRaw.html</anchorfile>
      <anchor>a8621f198fdcde83b2c65f7bf0dd1006b</anchor>
      <arglist>(const PositionRaw &amp;newRefPoint)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a3bd1389dbdf51e06f4c64451c242397e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab6f044aea32e55a72f6ebed68f93f767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a57b77a6c96f3276ed8e12b5e35b7f442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBuffer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aee106d61ebb0925fecfa55cbaa515981</anchor>
      <arglist>(double *buf) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a8b1a9ae6ea05f34d5f3ffdaf655e4b62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>aecc777eddc18bb19d4edc2cee6d296b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a2e935e37d751752feab107dc58560aaf</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a8ca6cab1f06019c34d593f0aaff4dced</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a9c0f65c965c198e3bebd3cc9a03937d3</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab0e81983f76aab4997962a423dc3189d</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>abc9aca9e8f729a9d78e4da70bac72382</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>af793dbb7d980c53813b1bccc4703f450</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a5f04ccb5f96cd94aa207b98ced2b3254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Position</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>ad51df8f87746e6ba889319ba6f619958</anchor>
      <arglist>(const Position &amp;op1, const Position &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Position</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a4d2eee1edb5a6fb5bef3a7d013586eaa</anchor>
      <arglist>(const Position &amp;op)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Position</type>
      <name>Zero</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>aee87490c47a300dd487d35bef3ce4a1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PositionRaw</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1PositionRaw.html</anchorfile>
      <anchor>aa2d0708d75fbc322f3885148e6d35751</anchor>
      <arglist>(const PositionRaw &amp;op1, const PositionRaw &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PositionRaw</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1PositionRaw.html</anchorfile>
      <anchor>a0c14a627de3f5c6e70f3e32766e3188c</anchor>
      <arglist>(const PositionRaw &amp;op)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a7bf5cd26b6fc24c9ddaf8854ebb8ec63</anchor>
      <arglist>[VecSize]</arglist>
    </member>
    <member kind="friend">
      <type>friend Position</type>
      <name>Rotation::changeCoordFrameOf</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a529088a017261b8a2aad8312e6e23ee7</anchor>
      <arglist>(const Position &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>a8b1a9ae6ea05f34d5f3ffdaf655e4b62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1Position.html</anchorfile>
      <anchor>aecc777eddc18bb19d4edc2cee6d296b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a2e935e37d751752feab107dc58560aaf</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a8ca6cab1f06019c34d593f0aaff4dced</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a9c0f65c965c198e3bebd3cc9a03937d3</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab0e81983f76aab4997962a423dc3189d</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>abc9aca9e8f729a9d78e4da70bac72382</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>af793dbb7d980c53813b1bccc4703f450</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a5f04ccb5f96cd94aa207b98ced2b3254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ada7487eff1fee83db8d41165d30f1263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ad0f06a255dc213a5904d232f703a0192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aa11c3eee00e88dabb7880f6cac2a9b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a69b51f8119155d31a254676ae867ae8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::PositionRaw</name>
    <filename>classiDynTree_1_1PositionRaw.html</filename>
    <base>iDynTree::VectorFixSize</base>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ada7487eff1fee83db8d41165d30f1263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ad0f06a255dc213a5904d232f703a0192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aa11c3eee00e88dabb7880f6cac2a9b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a69b51f8119155d31a254676ae867ae8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionRaw</name>
      <anchorfile>classiDynTree_1_1PositionRaw.html</anchorfile>
      <anchor>a262288c2b48b229af89bebb53d92d9f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionRaw</name>
      <anchorfile>classiDynTree_1_1PositionRaw.html</anchorfile>
      <anchor>a7e7bc8ca7dd0f280f948bd5b68a74be9</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionRaw</name>
      <anchorfile>classiDynTree_1_1PositionRaw.html</anchorfile>
      <anchor>a80d840331aaff631f3a20de6c1ad058c</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionRaw</name>
      <anchorfile>classiDynTree_1_1PositionRaw.html</anchorfile>
      <anchor>a393b55cd191f8e7d55e1b0f01d34c593</anchor>
      <arglist>(const PositionRaw &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const PositionRaw &amp;</type>
      <name>changePoint</name>
      <anchorfile>classiDynTree_1_1PositionRaw.html</anchorfile>
      <anchor>a2ba8f8ce52358fd58e8294af17737e8e</anchor>
      <arglist>(const PositionRaw &amp;newPoint)</arglist>
    </member>
    <member kind="function">
      <type>const PositionRaw &amp;</type>
      <name>changeRefPoint</name>
      <anchorfile>classiDynTree_1_1PositionRaw.html</anchorfile>
      <anchor>a8621f198fdcde83b2c65f7bf0dd1006b</anchor>
      <arglist>(const PositionRaw &amp;newRefPoint)</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionVector</type>
      <name>changePointOf</name>
      <anchorfile>classiDynTree_1_1PositionRaw.html</anchorfile>
      <anchor>aeb3d01e442c7e59b1c090119f4ee629c</anchor>
      <arglist>(const SpatialMotionVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>changePointOf</name>
      <anchorfile>classiDynTree_1_1PositionRaw.html</anchorfile>
      <anchor>a33ed3752652d9616246560299cd283c8</anchor>
      <arglist>(const SpatialForceVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a3bd1389dbdf51e06f4c64451c242397e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab6f044aea32e55a72f6ebed68f93f767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a57b77a6c96f3276ed8e12b5e35b7f442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBuffer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aee106d61ebb0925fecfa55cbaa515981</anchor>
      <arglist>(double *buf) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1PositionRaw.html</anchorfile>
      <anchor>a673f8b97cb2251f58b9cd8269abe1c35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1PositionRaw.html</anchorfile>
      <anchor>ad9bc7d10dfcc39db22d173c18e2d28a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a2e935e37d751752feab107dc58560aaf</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a8ca6cab1f06019c34d593f0aaff4dced</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a9c0f65c965c198e3bebd3cc9a03937d3</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab0e81983f76aab4997962a423dc3189d</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>abc9aca9e8f729a9d78e4da70bac72382</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>af793dbb7d980c53813b1bccc4703f450</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a5f04ccb5f96cd94aa207b98ced2b3254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PositionRaw</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1PositionRaw.html</anchorfile>
      <anchor>aa2d0708d75fbc322f3885148e6d35751</anchor>
      <arglist>(const PositionRaw &amp;op1, const PositionRaw &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PositionRaw</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1PositionRaw.html</anchorfile>
      <anchor>a0c14a627de3f5c6e70f3e32766e3188c</anchor>
      <arglist>(const PositionRaw &amp;op)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a7bf5cd26b6fc24c9ddaf8854ebb8ec63</anchor>
      <arglist>[VecSize]</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1PositionRaw.html</anchorfile>
      <anchor>a673f8b97cb2251f58b9cd8269abe1c35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1PositionRaw.html</anchorfile>
      <anchor>ad9bc7d10dfcc39db22d173c18e2d28a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a2e935e37d751752feab107dc58560aaf</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a8ca6cab1f06019c34d593f0aaff4dced</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a9c0f65c965c198e3bebd3cc9a03937d3</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab0e81983f76aab4997962a423dc3189d</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>abc9aca9e8f729a9d78e4da70bac72382</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>af793dbb7d980c53813b1bccc4703f450</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a5f04ccb5f96cd94aa207b98ced2b3254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ada7487eff1fee83db8d41165d30f1263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ad0f06a255dc213a5904d232f703a0192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aa11c3eee00e88dabb7880f6cac2a9b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a69b51f8119155d31a254676ae867ae8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::PositionSemantics</name>
    <filename>classiDynTree_1_1PositionSemantics.html</filename>
    <member kind="function">
      <type></type>
      <name>PositionSemantics</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a848d91866b45ab119e6a0b21816377fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionSemantics</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>aff3a4106ccf7e82b4e5f83bb9a117e18</anchor>
      <arglist>(int _point, int _body, int _refPoint, int _refBody, int _coordinateFrame)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionSemantics</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>aaa498ccd270d51a84dc1f889a9ade969</anchor>
      <arglist>(const PositionSemantics &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToUnknown</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a50fae8aaba9267319ef8c3264ffd68d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changePoint</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>af4a9e05f7f46af96f5ba4047f6d8d257</anchor>
      <arglist>(const PositionSemantics &amp;newPoint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeRefPoint</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a6fb1545bda1899e6a116f4e5e441faa5</anchor>
      <arglist>(const PositionSemantics &amp;newRefPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPoint</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a9a19c34ecf256f8fe1cf6a53846cf809</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBody</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>ab96c284434bf9d56261f6c26b84ab0aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getReferencePoint</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>af96e5fdce85f0ef5ca7c150dc3a425c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRefBody</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a0b3371e5ab04e0914f3e85d542227cd7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoordinateFrame</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a2058b583ccd22081b7ef3f4f9ac037d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoint</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a4d8101004411c7f483828c87fa78b412</anchor>
      <arglist>(int _point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBody</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a2597e756a8867c2eceaa35049c190fb9</anchor>
      <arglist>(int _body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReferencePoint</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a60cfd3180dbcb959cfd5a4cf3bef6e4d</anchor>
      <arglist>(int _referencePoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefBody</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a4b201281d4ab1da3ae85d9f1c10b5e67</anchor>
      <arglist>(int _refBody)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoordinateFrame</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a964b0747433092de1ffc92d30149b452</anchor>
      <arglist>(int _coordinateFrame)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>aec3491e441529d32bf53b4a4c97d4afa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a149e7d261037dbd0d356bd767724be8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a04f6670f96a731301bf2f8abc2ca21fd</anchor>
      <arglist>(const PositionSemantics &amp;op1, const PositionSemantics &amp;op2, PositionSemantics &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a6b1e15b0c5b620514f4a958d2c6792cb</anchor>
      <arglist>(const PositionSemantics &amp;op, PositionSemantics &amp;result)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>point</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a07c1b5a66635289b809e2fe2f8afe4ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>body</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a59d5ee7f3712ad0a2b2aaf4603f87cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>refPoint</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a6653e2c63910ef65a00a6a03b61a9ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>refBody</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>aa9aa908d7643f2b48538462a221b0aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>coordinateFrame</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a008711593c8c3d8bfa22bdce2593c059</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>check_changePoint</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a300e007dfc83337af20675d0da5a5c4c</anchor>
      <arglist>(const PositionSemantics &amp;newPoint)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>check_changeRefPoint</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>afc9cf39964bf3d1b557c34c1b362f87f</anchor>
      <arglist>(const PositionSemantics &amp;newRefPoint)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>check_changeCoordinateFrame</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a8456291b374e50449ce6d46ea16c0464</anchor>
      <arglist>(const RotationSemantics &amp;newCoordinateFrame)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>check_compose</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a24407f5849083867a09d311fb7525acc</anchor>
      <arglist>(const PositionSemantics &amp;op1, const PositionSemantics &amp;op2)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>check_inverse</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a046fe649185f9ce2bdc52d33b3cd4a06</anchor>
      <arglist>(const PositionSemantics &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPoint</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a9a19c34ecf256f8fe1cf6a53846cf809</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBody</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>ab96c284434bf9d56261f6c26b84ab0aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getReferencePoint</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>af96e5fdce85f0ef5ca7c150dc3a425c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRefBody</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a0b3371e5ab04e0914f3e85d542227cd7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoordinateFrame</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a2058b583ccd22081b7ef3f4f9ac037d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoint</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a4d8101004411c7f483828c87fa78b412</anchor>
      <arglist>(int _point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBody</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a2597e756a8867c2eceaa35049c190fb9</anchor>
      <arglist>(int _body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReferencePoint</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a60cfd3180dbcb959cfd5a4cf3bef6e4d</anchor>
      <arglist>(int _referencePoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefBody</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a4b201281d4ab1da3ae85d9f1c10b5e67</anchor>
      <arglist>(int _refBody)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoordinateFrame</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a964b0747433092de1ffc92d30149b452</anchor>
      <arglist>(int _coordinateFrame)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>aec3491e441529d32bf53b4a4c97d4afa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1PositionSemantics.html</anchorfile>
      <anchor>a149e7d261037dbd0d356bd767724be8a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::PrismaticJoint</name>
    <filename>classiDynTree_1_1PrismaticJoint.html</filename>
    <base>iDynTree::MovableJointImpl</base>
    <member kind="function">
      <type></type>
      <name>PrismaticJoint</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>a79ed0a8a9c7d67a9f47230bfc0214d7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrismaticJoint</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>aa83aec02a88dec71313860dcbb9a90ea</anchor>
      <arglist>(const LinkIndex link1, const LinkIndex link2, const Transform &amp;link1_X_link2, const Axis &amp;_translation_axis_wrt_link1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrismaticJoint</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>a3f6bc8eedb120e0fb1c9920fea7319ca</anchor>
      <arglist>(const PrismaticJoint &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrismaticJoint</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>a5abd7dda6e1253faaf6803c3c3fcc59d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IJoint *</type>
      <name>clone</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>a3d622b0c3bb924f7926deb0821a4b8e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttachedLinks</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>afeed092c3d22070bb861bea4a55ffb39</anchor>
      <arglist>(const LinkIndex link1, const LinkIndex link2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRestTransform</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>ad9905ffd07c3f880d1c3bbc890011f5b</anchor>
      <arglist>(const Transform &amp;link1_X_link2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAxis</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>a6cbd4aa4fda17be0b6c1adb3fc49f36d</anchor>
      <arglist>(const Axis &amp;prismaticAxis, const LinkIndex child, const LinkIndex parent=LINK_INVALID_INDEX)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAxis</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>aa3fce73d2a8dcb5e1fb75111aa7c126c</anchor>
      <arglist>(const Axis &amp;prismaticAxis_wrt_link1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LinkIndex</type>
      <name>getFirstAttachedLink</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>ac3faacadbe2c8079e3aefd652c4038c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LinkIndex</type>
      <name>getSecondAttachedLink</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>a662ecd6fb15d32fa94410989dc908768</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Axis</type>
      <name>getAxis</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>a39544519cd464f15c4ead1997b1643d0</anchor>
      <arglist>(const LinkIndex child, const LinkIndex parent=LINK_INVALID_INDEX) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Transform</type>
      <name>getRestTransform</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>ab2fd8efc602445c25811a6b6424c96be</anchor>
      <arglist>(const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Transform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>aa26d30479fcdd6203e6858d1f2c59836</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function">
      <type>TransformDerivative</type>
      <name>getTransformDerivative</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>a0ce9b9cd049657c73cf6b1e2461210b9</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const LinkIndex child, const LinkIndex parent, const int posCoord_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SpatialMotionVector</type>
      <name>getMotionSubspaceVector</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>a494229072287dfc78645514171e882a4</anchor>
      <arglist>(int dof_i, const LinkIndex child, const LinkIndex parent=LINK_INVALID_INDEX) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeChildPosVelAcc</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>a019d64cd37079e8b4c4eb1c231b170e4</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const VectorDynSize &amp;jntAcc, LinkPositions &amp;linkPositions, LinkVelArray &amp;linkVels, LinkAccArray &amp;linkAccs, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeChildVel</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>af3efefcf0919eb273c4f2f3e992abef1</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, LinkVelArray &amp;linkVels, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeChildVelAcc</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>aa3b378da7c14303da5d6bd0047b9ab67</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const VectorDynSize &amp;jntAcc, LinkVelArray &amp;linkVels, LinkAccArray &amp;linkAccs, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeChildAcc</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>ac91f6744cc6870e5e49d4c3b3c718950</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const LinkVelArray &amp;linkVels, const VectorDynSize &amp;jntAcc, LinkAccArray &amp;linkAccs, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeChildBiasAcc</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>a1b85953ab8fba28dcd3c80b7272a01eb</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const LinkVelArray &amp;linkVels, LinkAccArray &amp;linkBiasAccs, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeJointTorque</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>ad65f90f23365e80af12f46c89920e7b1</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const Wrench &amp;internalWrench, const LinkIndex linkThatAppliesWrench, const LinkIndex linkOnWhichWrenchIsApplied, VectorDynSize &amp;jntTorques) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasPosLimits</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>afdb1856b85c51302cbec0ca1f71a9226</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>enablePosLimits</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>a0dd77d1dc27be90ed494f68cdfbc89ad</anchor>
      <arglist>(const bool enable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getPosLimits</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>aa5c01681e5e796d9e499d57f31996284</anchor>
      <arglist>(const size_t _index, double &amp;min, double &amp;max) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMinPosLimit</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>a1fd4107952a4b3ef46b9481414db00d7</anchor>
      <arglist>(const size_t _index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxPosLimit</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>a1d18795cb13589029236691752f10a84</anchor>
      <arglist>(const size_t _index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setPosLimits</name>
      <anchorfile>classiDynTree_1_1PrismaticJoint.html</anchorfile>
      <anchor>a33fc05bc55c87bdcc26b0410ad9166a9</anchor>
      <arglist>(const size_t _index, double &amp;min, double &amp;max)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNrOfPosCoords</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a045d13488a7d6481fcf2db951655922a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNrOfDOFs</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>af9d78ba6c319f68f16f9ff9ef58fd124</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIndex</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a4b1807b06b92f64c41502c17b8ecd5a6</anchor>
      <arglist>(JointIndex &amp;_index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual JointIndex</type>
      <name>getIndex</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a717d5ccedc215f53b75e918229d98bab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosCoordsOffset</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>afbbbe860f34622d4d8ae1d938fd65b98</anchor>
      <arglist>(const size_t _offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getPosCoordsOffset</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a599c535eb4fced80019a72e126752a0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDOFsOffset</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>aa9cb6e7141a84e23c7d7fca9c900c6bc</anchor>
      <arglist>(const size_t _offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getDOFsOffset</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a593be2dc005f1580c341bc723ed36b5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointIndex</type>
      <name>m_index</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a872555afe6bfd9b14fb6bbea08968003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_posCoordsOffset</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a6332b3582ec526f58f719a90d2d00c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_DOFsOffset</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a425f5ae5cc08edee16740d4b8a793360</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QtiDynTreeSoleGuiPlugin</name>
    <filename>classQtiDynTreeSoleGuiPlugin.html</filename>
    <member kind="signal">
      <type>void</type>
      <name>init</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>aaab0cab82f124fb61c02f6e982b59827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>sendWindowTitle</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>a2301c70e08c1c84f7534203077f1782b</anchor>
      <arglist>(QString title)</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>sendWindowSize</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>aa3764b5e472567a8779872998b0317d0</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>sendWindowPos</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>ac370fa1030e290497c7d42d1eb29f48b</anchor>
      <arglist>(int xPos, int yPos)</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>done</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>aad9fe20e854cc6f427bd36bb27772789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>posXChanged</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>a8d2d7386ce3cba3093373189b7a99d00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>posYChanged</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>a06e833d1327c1254e855c94cc2c69108</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>widthChanged</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>a9194e479938da41d0c4e74390e494944</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>heightChanged</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>a0e49da8f972216f66225e9f07bfcb876</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>windowTitleChanged</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>a2b360b21e5e1e36b673cd64fb5a2ce6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QtiDynTreeSoleGuiPlugin</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>a2c9c10284984f38b78d36f5b7928cb40</anchor>
      <arglist>(QQuickItem *parent=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QtiDynTreeSoleGuiPlugin</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>afa7b66d21ef16f2526360c1022ba689b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Q_INVOKABLE bool</type>
      <name>parseParameters</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>a177e23060b137b7e680c1711bf0f8d4e</anchor>
      <arglist>(QStringList params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>a8422fcc03cbc1955cba9f336fbcae334</anchor>
      <arglist>(QPainter *painter)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>windowTitle</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>a4e67a6cba22684941549032340d9c424</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>posX</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>ad781dfc55e9a78d95acf1158c5d452bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>posY</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>a9f7d5ca9858457e473896fdc817e07de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>windowWidth</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>a6f50c95c48c0108cc71e7b3850064d37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>windowHeight</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>ab9c4fb9f551ca40b6c2141af1465064b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="property">
      <type>QString</type>
      <name>windowTitle</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>ab1783cc7b39ddb6d4f12119d518c55a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="property">
      <type>int</type>
      <name>posX</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>ab2007385640a9eb84f3794a6aff0a567</anchor>
      <arglist></arglist>
    </member>
    <member kind="property">
      <type>int</type>
      <name>posY</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>aa1a9cc037bda8961ca45421cf548f246</anchor>
      <arglist></arglist>
    </member>
    <member kind="property">
      <type>int</type>
      <name>windowWidth</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>adbe1e85ce258a792edf3e957b1c56451</anchor>
      <arglist></arglist>
    </member>
    <member kind="property">
      <type>int</type>
      <name>windowHeight</name>
      <anchorfile>classQtiDynTreeSoleGuiPlugin.html</anchorfile>
      <anchor>a64a28ec94581202d40e55ced51c43426</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QtiDynTreeSoleGuiPluginPlugin</name>
    <filename>classQtiDynTreeSoleGuiPluginPlugin.html</filename>
    <member kind="function">
      <type>void</type>
      <name>registerTypes</name>
      <anchorfile>classQtiDynTreeSoleGuiPluginPlugin.html</anchorfile>
      <anchor>a6ccc290bb68457c6c2f9f2c4ab379752</anchor>
      <arglist>(const char *uri)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::QuadraticCost</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1QuadraticCost.html</filename>
    <base>iDynTree::optimalcontrol::QuadraticLikeCost</base>
    <member kind="function">
      <type></type>
      <name>QuadraticCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticCost.html</anchorfile>
      <anchor>a6cd4faefd974997223f94df948f0dbc3</anchor>
      <arglist>(const std::string &amp;costName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QuadraticCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticCost.html</anchorfile>
      <anchor>a6ab8e33bb3c769c20cc61220b0987bbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticCost.html</anchorfile>
      <anchor>afc82f38e5250adee9edcd89cd1168ac4</anchor>
      <arglist>(const iDynTree::MatrixDynSize &amp;stateHessian, const iDynTree::VectorDynSize &amp;stateGradient)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticCost.html</anchorfile>
      <anchor>a1509335a42ed6bb45f38379d4a39092f</anchor>
      <arglist>(std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingMatrix &gt; timeVaryingStateHessian, std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingVector &gt; timeVaryingStateGradient)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticCost.html</anchorfile>
      <anchor>a5505aefc487185f42b117137dd0502fc</anchor>
      <arglist>(const iDynTree::MatrixDynSize &amp;controlHessian, const iDynTree::VectorDynSize &amp;controlGradient)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticCost.html</anchorfile>
      <anchor>ac5f5e3bbb989ce5482cd2a690ed1687b</anchor>
      <arglist>(std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingMatrix &gt; timeVaryingControlHessian, std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingVector &gt; timeVaryingControlGradient)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setCostBias</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticCost.html</anchorfile>
      <anchor>ad928571c75286252a7cf8e04675913c5</anchor>
      <arglist>(double stateCostBias, double controlCostBias)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setCostBias</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticCost.html</anchorfile>
      <anchor>a98ef09172a6249a121342f44306e77fa</anchor>
      <arglist>(std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingDouble &gt; timeVaryingStateCostBias, std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingDouble &gt; timeVaryingControlCostBias)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setStateHessianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticCost.html</anchorfile>
      <anchor>ac26021f3cd107bb7612a34f4b079a9d5</anchor>
      <arglist>(const SparsityStructure &amp;stateSparsity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setControlHessianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticCost.html</anchorfile>
      <anchor>a80897122f5bf717243d0f454d6f702f8</anchor>
      <arglist>(const SparsityStructure &amp;controlSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costEvaluation</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>ae1726e0a4c497e0dc23c5c1bdc352863</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, double &amp;costValue) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costFirstPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>adba80cb374b9480383565e3b401219f4</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::VectorDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costFirstPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a47cce0b64dbbba8e0eac180f0dd19e20</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::VectorDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>accb30d2b375cd93bbf7776d2d63d2100</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::MatrixDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a58ee2cada051e2fd8c642bec6b7d827a</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::MatrixDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTStateControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>ab298698138c89514de25695c40b4bed6</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::MatrixDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a58b8694736f26fb6a6cc3843759c8831</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a155ce5315d859f994510ba47adad0ef1</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateControlSparsity) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a6f758bc67249991beddf14886bd646d4</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity) final</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Cost.html</anchorfile>
      <anchor>ab75a1c3759901f6cd1dc3543481d06c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingMatrix &gt;</type>
      <name>m_timeVaryingStateHessian</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>abf8b22918021ba6ff7743575d30138c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingVector &gt;</type>
      <name>m_timeVaryingStateGradient</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>abedf340f114e51dacd483fd73f373fe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingDouble &gt;</type>
      <name>m_timeVaryingStateCostBias</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a416877725e0df7d52ef0f599b39db143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingMatrix &gt;</type>
      <name>m_timeVaryingControlHessian</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a41bc5547c17cf3b7490ea15361fc0de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingVector &gt;</type>
      <name>m_timeVaryingControlGradient</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a9269110e23af528aae7b78aad054d0c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingDouble &gt;</type>
      <name>m_timeVaryingControlCostBias</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a379ea8c1910865e1ad109cc46ad8bfb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_hasSecondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>ae9c9fd426f107159f3e5354fd3f0562e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_hasSecondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>aeb28846afd2fe3f4373b646d49fbba97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_hasSecondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>ae00c9061c568494f23b858ad05a0ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparsityStructure</type>
      <name>m_secondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a917cfae65e537e496290046a44d7ca94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparsityStructure</type>
      <name>m_secondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a55d298ac7b70590ad7e9122a21c03b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparsityStructure</type>
      <name>m_secondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>aa329727f0449dd78cc65248c5ee2f7ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::QuadraticLikeCost</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</filename>
    <base>iDynTree::optimalcontrol::Cost</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QuadraticLikeCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a5601ece076c4c21afae275f712161bc4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costEvaluation</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>ae1726e0a4c497e0dc23c5c1bdc352863</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, double &amp;costValue) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costFirstPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>adba80cb374b9480383565e3b401219f4</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::VectorDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costFirstPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a47cce0b64dbbba8e0eac180f0dd19e20</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::VectorDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTState</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>accb30d2b375cd93bbf7776d2d63d2100</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::MatrixDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a58ee2cada051e2fd8c642bec6b7d827a</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::MatrixDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTStateControl</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>ab298698138c89514de25695c40b4bed6</anchor>
      <arglist>(double time, const iDynTree::VectorDynSize &amp;state, const iDynTree::VectorDynSize &amp;control, iDynTree::MatrixDynSize &amp;partialDerivative) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a58b8694736f26fb6a6cc3843759c8831</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateSparsity) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a155ce5315d859f994510ba47adad0ef1</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;stateControlSparsity) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>costSecondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a6f758bc67249991beddf14886bd646d4</anchor>
      <arglist>(iDynTree::optimalcontrol::SparsityStructure &amp;controlSparsity) final</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Cost.html</anchorfile>
      <anchor>ab75a1c3759901f6cd1dc3543481d06c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>QuadraticLikeCost</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a882f483ef58fd779148f92dba7f81ba6</anchor>
      <arglist>(const std::string &amp;costName)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingMatrix &gt;</type>
      <name>m_timeVaryingStateHessian</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>abf8b22918021ba6ff7743575d30138c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingVector &gt;</type>
      <name>m_timeVaryingStateGradient</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>abedf340f114e51dacd483fd73f373fe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingDouble &gt;</type>
      <name>m_timeVaryingStateCostBias</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a416877725e0df7d52ef0f599b39db143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingMatrix &gt;</type>
      <name>m_timeVaryingControlHessian</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a41bc5547c17cf3b7490ea15361fc0de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingVector &gt;</type>
      <name>m_timeVaryingControlGradient</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a9269110e23af528aae7b78aad054d0c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; iDynTree::optimalcontrol::TimeVaryingDouble &gt;</type>
      <name>m_timeVaryingControlCostBias</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a379ea8c1910865e1ad109cc46ad8bfb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_hasSecondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>ae9c9fd426f107159f3e5354fd3f0562e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_hasSecondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>aeb28846afd2fe3f4373b646d49fbba97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_hasSecondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>ae00c9061c568494f23b858ad05a0ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparsityStructure</type>
      <name>m_secondPartialDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a917cfae65e537e496290046a44d7ca94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparsityStructure</type>
      <name>m_secondPartialDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>a55d298ac7b70590ad7e9122a21c03b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparsityStructure</type>
      <name>m_secondPartialDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1QuadraticLikeCost.html</anchorfile>
      <anchor>aa329727f0449dd78cc65248c5ee2f7ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cmdline::range_reader</name>
    <filename>structcmdline_1_1range__reader.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>range_reader</name>
      <anchorfile>structcmdline_1_1range__reader.html</anchorfile>
      <anchor>a7b31d754293d2f2f3df49b40a6e95a5a</anchor>
      <arglist>(const T &amp;low, const T &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structcmdline_1_1range__reader.html</anchorfile>
      <anchor>a81dfb7277756d5b23f816481db121a20</anchor>
      <arglist>(const std::string &amp;s) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::RevoluteJoint</name>
    <filename>classiDynTree_1_1RevoluteJoint.html</filename>
    <base>iDynTree::MovableJointImpl</base>
    <member kind="function">
      <type></type>
      <name>RevoluteJoint</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>aa09aee905d118d03a9d22b5bdc98e132</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevoluteJoint</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a2340a2651002e2513df12ccd1b2b4040</anchor>
      <arglist>(const LinkIndex link1, const LinkIndex link2, const Transform &amp;link1_X_link2, const Axis &amp;_rotation_axis_wrt_link1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevoluteJoint</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>ad0ba82884c9219ac78f9137f16f432e5</anchor>
      <arglist>(const Transform &amp;link1_X_link2, const Axis &amp;_rotation_axis_wrt_link1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevoluteJoint</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a23308fb8f761871832d44fe98b077bfd</anchor>
      <arglist>(const RevoluteJoint &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RevoluteJoint</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a48c4bf48abf76fb9deaf19ba6f5c4cd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IJoint *</type>
      <name>clone</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>ac07e6a3ccd36d86a0c46d6ff9bd71600</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttachedLinks</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a9b327c31f551e6b43efdcc70c4979782</anchor>
      <arglist>(const LinkIndex link1, const LinkIndex link2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRestTransform</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a82d1f9d8c260885e1f137554edd27405</anchor>
      <arglist>(const Transform &amp;link1_X_link2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAxis</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a59149520fafc74a5597afdb16be8101a</anchor>
      <arglist>(const Axis &amp;revoluteAxis, const LinkIndex child, const LinkIndex parent=LINK_INVALID_INDEX)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAxis</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>aefe8fca3a986e5c69ab44ab6d924458b</anchor>
      <arglist>(const Axis &amp;revoluteAxis_wrt_link1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LinkIndex</type>
      <name>getFirstAttachedLink</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a3d6c1a957741d41b67dbd9beaed6f7dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LinkIndex</type>
      <name>getSecondAttachedLink</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a2c70909d8e385b498cb89008fcbed0ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Axis</type>
      <name>getAxis</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a20b3ce425f402faa6fba150f4bf81856</anchor>
      <arglist>(const LinkIndex child, const LinkIndex parent=LINK_INVALID_INDEX) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Transform</type>
      <name>getRestTransform</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a9887f4a58efd49f40512ceb6e3ce8a03</anchor>
      <arglist>(const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Transform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a87c33818ea693117101f3bf538dbc911</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function">
      <type>TransformDerivative</type>
      <name>getTransformDerivative</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>afb136bbf0c99f9bcf571dfe1d3937e18</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const LinkIndex child, const LinkIndex parent, const int posCoord_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SpatialMotionVector</type>
      <name>getMotionSubspaceVector</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a4e21be23df8542ccbcdaa90391dc2a6b</anchor>
      <arglist>(int dof_i, const LinkIndex child, const LinkIndex parent=LINK_INVALID_INDEX) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeChildPosVelAcc</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a4fd937e9cd11a9c206b04d66dabed17d</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const VectorDynSize &amp;jntAcc, LinkPositions &amp;linkPositions, LinkVelArray &amp;linkVels, LinkAccArray &amp;linkAccs, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeChildVel</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>aa1e8e2c301a65ed3fa4c7d60ff93f8f0</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, LinkVelArray &amp;linkVels, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeChildVelAcc</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>afc1d4419f5f5ae413ad4863de28b56b4</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const VectorDynSize &amp;jntAcc, LinkVelArray &amp;linkVels, LinkAccArray &amp;linkAccs, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeChildAcc</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a1eec73f7f3f2264a1ca6508964f2c322</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const LinkVelArray &amp;linkVels, const VectorDynSize &amp;jntAcc, LinkAccArray &amp;linkAccs, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeChildBiasAcc</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a3bf748aa99a370c500fdd41658f0b811</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const VectorDynSize &amp;jntVel, const LinkVelArray &amp;linkVels, LinkAccArray &amp;linkBiasAccs, const LinkIndex child, const LinkIndex parent) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeJointTorque</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>ad92d7bdf86ea406efabb8e4c79a59c5a</anchor>
      <arglist>(const VectorDynSize &amp;jntPos, const Wrench &amp;internalWrench, const LinkIndex linkThatAppliesWrench, const LinkIndex linkOnWhichWrenchIsApplied, VectorDynSize &amp;jntTorques) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasPosLimits</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a9aa696d06dfb2191a962717f295876d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>enablePosLimits</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a67904ba0b9d5e069e2b8746e2fa10f7d</anchor>
      <arglist>(const bool enable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getPosLimits</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a45a6c41a052d4208396d5fec1fbbb25c</anchor>
      <arglist>(const size_t _index, double &amp;min, double &amp;max) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMinPosLimit</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a3bac89c645aa5de8c99545d483dcbb8d</anchor>
      <arglist>(const size_t _index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxPosLimit</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>ace477b32eb025b64fc65200d6c4032d0</anchor>
      <arglist>(const size_t _index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setPosLimits</name>
      <anchorfile>classiDynTree_1_1RevoluteJoint.html</anchorfile>
      <anchor>a81e0607472fcef80340a06c38436abda</anchor>
      <arglist>(const size_t _index, double &amp;min, double &amp;max)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNrOfPosCoords</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a045d13488a7d6481fcf2db951655922a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNrOfDOFs</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>af9d78ba6c319f68f16f9ff9ef58fd124</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIndex</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a4b1807b06b92f64c41502c17b8ecd5a6</anchor>
      <arglist>(JointIndex &amp;_index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual JointIndex</type>
      <name>getIndex</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a717d5ccedc215f53b75e918229d98bab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosCoordsOffset</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>afbbbe860f34622d4d8ae1d938fd65b98</anchor>
      <arglist>(const size_t _offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getPosCoordsOffset</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a599c535eb4fced80019a72e126752a0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDOFsOffset</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>aa9cb6e7141a84e23c7d7fca9c900c6bc</anchor>
      <arglist>(const size_t _offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getDOFsOffset</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a593be2dc005f1580c341bc723ed36b5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointIndex</type>
      <name>m_index</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a872555afe6bfd9b14fb6bbea08968003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_posCoordsOffset</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a6332b3582ec526f58f719a90d2d00c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_DOFsOffset</name>
      <anchorfile>classiDynTree_1_1MovableJointImpl.html</anchorfile>
      <anchor>a425f5ae5cc08edee16740d4b8a793360</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::RigidBodyInertiaNonLinearParametrization</name>
    <filename>classiDynTree_1_1RigidBodyInertiaNonLinearParametrization.html</filename>
    <member kind="function">
      <type>Transform</type>
      <name>getLinkCentroidalTransform</name>
      <anchorfile>classiDynTree_1_1RigidBodyInertiaNonLinearParametrization.html</anchorfile>
      <anchor>af3c47b35dd351b9f7e9d24a110946866</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromRigidBodyInertia</name>
      <anchorfile>classiDynTree_1_1RigidBodyInertiaNonLinearParametrization.html</anchorfile>
      <anchor>a2cd0ec22c0284865c3a96bdf8cebfcaa</anchor>
      <arglist>(const SpatialInertia &amp;inertia)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromInertialParameters</name>
      <anchorfile>classiDynTree_1_1RigidBodyInertiaNonLinearParametrization.html</anchorfile>
      <anchor>acd6477b2b89370d34b3488a852cb8f5d</anchor>
      <arglist>(const Vector10 &amp;inertialParams)</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia</type>
      <name>toRigidBodyInertia</name>
      <anchorfile>classiDynTree_1_1RigidBodyInertiaNonLinearParametrization.html</anchorfile>
      <anchor>aef1db5adbd4ab28303f9245a79a4b8aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPhysicallyConsistent</name>
      <anchorfile>classiDynTree_1_1RigidBodyInertiaNonLinearParametrization.html</anchorfile>
      <anchor>a04f5f4b7bdfb65f28676dc2690ff5e90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector16</type>
      <name>asVectorWithRotationAsVec</name>
      <anchorfile>classiDynTree_1_1RigidBodyInertiaNonLinearParametrization.html</anchorfile>
      <anchor>a5211cdc73b612df5798d86bd0ed7173b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromVectorWithRotationAsVec</name>
      <anchorfile>classiDynTree_1_1RigidBodyInertiaNonLinearParametrization.html</anchorfile>
      <anchor>a0a81a97c3836c35c52e6cff4827c5af8</anchor>
      <arglist>(const Vector16 &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Matrix10x16</type>
      <name>getGradientWithRotationAsVec</name>
      <anchorfile>classiDynTree_1_1RigidBodyInertiaNonLinearParametrization.html</anchorfile>
      <anchor>ac42eb7d4f0c0259d41dae267d5ee1d24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mass</name>
      <anchorfile>classiDynTree_1_1RigidBodyInertiaNonLinearParametrization.html</anchorfile>
      <anchor>ae323ec7fbb184a0d7744fa37adb427c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Position</type>
      <name>com</name>
      <anchorfile>classiDynTree_1_1RigidBodyInertiaNonLinearParametrization.html</anchorfile>
      <anchor>a3a59e7a9d05ddd309234f425426a1beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Rotation</type>
      <name>link_R_centroidal</name>
      <anchorfile>classiDynTree_1_1RigidBodyInertiaNonLinearParametrization.html</anchorfile>
      <anchor>ac1a6ff8ed7fbba5b4bd6f232fc74391f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>centralSecondMomentOfMass</name>
      <anchorfile>classiDynTree_1_1RigidBodyInertiaNonLinearParametrization.html</anchorfile>
      <anchor>a5f868792868d8b4d03931601172a6b4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::integrators::RK4</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1integrators_1_1RK4.html</filename>
    <base>iDynTree::optimalcontrol::integrators::FixedStepIntegrator</base>
    <member kind="function">
      <type></type>
      <name>RK4</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1RK4.html</anchorfile>
      <anchor>af85f59a77039faf74a30efcac87d8d2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RK4</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1RK4.html</anchorfile>
      <anchor>af8bc003555c01266bf9a2b7d2edb4689</anchor>
      <arglist>(const std::shared_ptr&lt; iDynTree::optimalcontrol::DynamicalSystem &gt; dynamicalSystem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RK4</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1RK4.html</anchorfile>
      <anchor>a2bef80ae538a8d9c518f870ee76e88dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>integrate</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1FixedStepIntegrator.html</anchorfile>
      <anchor>a647bc31b7c8d037ae5df8b66518bf0e0</anchor>
      <arglist>(double initialTime, double finalTime) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setMaximumStepSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a6e2b9052aa9b0638ce7d2f8347b4fe00</anchor>
      <arglist>(const double dT)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maximumStepSize</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a0d39d3023f056364a01963b7520a7c21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setDynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a72bf5f94da63280de3c2b3223cd251e6</anchor>
      <arglist>(const std::shared_ptr&lt; iDynTree::optimalcontrol::DynamicalSystem &gt; dynamicalSystem)</arglist>
    </member>
    <member kind="function">
      <type>const std::weak_ptr&lt; DynamicalSystem &gt;</type>
      <name>dynamicalSystem</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a00cae12a44e212fac9a71fd2d07d8caf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getSolution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a661760c48a95a73d6061743a7e988c4b</anchor>
      <arglist>(double time, VectorDynSize &amp;solution) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; SolutionElement &gt; &amp;</type>
      <name>getFullSolution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>ab5b22916d2b6e31314d3dd8955a574d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearSolution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>aa0aac8f0c4e34d345c05960591468d73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCollocationConstraint</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a12e7200b4cf89eeca101c94de758b3bb</anchor>
      <arglist>(double time, const std::vector&lt; VectorDynSize &gt; &amp;collocationPoints, const std::vector&lt; VectorDynSize &gt; &amp;controlInputs, double dT, VectorDynSize &amp;constraintValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCollocationConstraintJacobian</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>ae44f7ecb211132d6280df85e23378a05</anchor>
      <arglist>(double time, const std::vector&lt; VectorDynSize &gt; &amp;collocationPoints, const std::vector&lt; VectorDynSize &gt; &amp;controlInputs, double dT, std::vector&lt; MatrixDynSize &gt; &amp;stateJacobianValues, std::vector&lt; MatrixDynSize &gt; &amp;controlJacobianValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintJacobianStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>aab4d320903f06565e0fbecbbae934f0f</anchor>
      <arglist>(std::vector&lt; SparsityStructure &gt; &amp;stateJacobianSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintJacobianControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a97950a2b3f0f491f75109ff0739dc0f9</anchor>
      <arglist>(std::vector&lt; SparsityStructure &gt; &amp;controlJacobianSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCollocationConstraintSecondDerivatives</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>aebc2c1544ef18998b7701205549f2cd7</anchor>
      <arglist>(double time, const std::vector&lt; VectorDynSize &gt; &amp;collocationPoints, const std::vector&lt; VectorDynSize &gt; &amp;controlInputs, double dT, const VectorDynSize &amp;lambda, CollocationHessianMap &amp;stateSecondDerivative, CollocationHessianMap &amp;controlSecondDerivative, CollocationHessianMap &amp;stateControlSecondDerivative)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintSecondDerivativeWRTStateSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a6a8e264a12ba28ef1973d0616e5ac144</anchor>
      <arglist>(CollocationHessianSparsityMap &amp;stateDerivativeSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintSecondDerivativeWRTControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a77cb08d2a9451f828508e19c25a9991e</anchor>
      <arglist>(CollocationHessianSparsityMap &amp;controlDerivativeSparsity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCollocationConstraintSecondDerivativeWRTStateControlSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>acefec19f5d879d9720df1f3a8c1b8186</anchor>
      <arglist>(CollocationHessianSparsityMap &amp;stateControlDerivativeSparsity)</arglist>
    </member>
    <member kind="function">
      <type>const IntegratorInfo &amp;</type>
      <name>info</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a18959a33019837571480eea082a4bdb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>interpolatePoints</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>ad5b95d324ad148603d09aedcb52860ce</anchor>
      <arglist>(const std::vector&lt; SolutionElement &gt;::const_iterator &amp;first, const std::vector&lt; SolutionElement &gt;::const_iterator &amp;second, double time, VectorDynSize &amp;outputPoint) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_dTmax</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a371179a8cb3e4b4a03a3a0d90d2e6cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; DynamicalSystem &gt;</type>
      <name>m_dynamicalSystem_ptr</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>aa9eb4f3c3a4da99f1ce27b28154e4bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SolutionElement &gt;</type>
      <name>m_solution</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a25b9c2215f3bbf7940214925e3a55ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; IntegratorInfoData &gt;</type>
      <name>m_infoData</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a91cc593e13d13305e81b3e7fc5ae6276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntegratorInfo</type>
      <name>m_info</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1Integrator.html</anchorfile>
      <anchor>a3b03ff054e91a4142240dea337524fa1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::RobotElement</name>
    <filename>classiDynTree_1_1RobotElement.html</filename>
    <base>iDynTree::XMLElement</base>
    <member kind="function">
      <type></type>
      <name>RobotElement</name>
      <anchorfile>classiDynTree_1_1RobotElement.html</anchorfile>
      <anchor>a283a4d40b067ca9f738f49042cd9d11b</anchor>
      <arglist>(iDynTree::Model &amp;model, std::vector&lt; std::shared_ptr&lt; SensorHelper &gt;&gt; &amp;sensorHelpers, std::unordered_map&lt; std::string, JointElement::JointInfo &gt; &amp;joints, std::unordered_map&lt; std::string, JointElement::JointInfo &gt; &amp;fixedJoints, std::unordered_map&lt; std::string, MaterialElement::MaterialInfo &gt; &amp;materials, std::unordered_map&lt; std::string, std::vector&lt; VisualElement::VisualInfo &gt;&gt; &amp;visuals, std::unordered_map&lt; std::string, std::vector&lt; VisualElement::VisualInfo &gt;&gt; &amp;collisions)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RobotElement</name>
      <anchorfile>classiDynTree_1_1RobotElement.html</anchorfile>
      <anchor>a2b4f5e4da0bad0a5a79b7ca0ce9bcbde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; iDynTree::XMLElement &gt;</type>
      <name>childElementForName</name>
      <anchorfile>classiDynTree_1_1RobotElement.html</anchorfile>
      <anchor>a6e63bc398441f86da1679bcd937a3f7d</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>childHasBeenParsed</name>
      <anchorfile>classiDynTree_1_1RobotElement.html</anchorfile>
      <anchor>a9e40dc08778e6160b1d0088a9417b669</anchor>
      <arglist>(std::shared_ptr&lt; iDynTree::XMLElement &gt;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ab40851b7629a74107f2183ca36e412e4</anchor>
      <arglist>(std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a16759fb450635662dced0eb2ace0228b</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChildHasBeenParsedCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a69171cc4b5c552b97f44375029356a2e</anchor>
      <arglist>(std::function&lt; void(std::shared_ptr&lt; XMLElement &gt;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt;</type>
      <name>attributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2a182ac17f5e644b113a67e02c3595e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; void()&gt;</type>
      <name>exitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a04ea33b2a4ebf84647fb6d38e24ba0e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a7129fb1e69a5bc819872e65d3965296d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; XMLElement &gt; &gt;</type>
      <name>children</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2f51748fc6eed4724e86dc5e52ebd5ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt; &gt;</type>
      <name>attributes</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a27347aca070a5dfc250077b6cc3e3748</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>exitElementScope</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a66d20512ef5debea77d1919835dbda1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>childHasBeenParsed</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ac92ce9b144b27970e09f6f9dff77f251</anchor>
      <arglist>(std::shared_ptr&lt; XMLElement &gt; parsedChild)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setAttributes</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a9dc312559f13e9d78d10ddc2242ac27d</anchor>
      <arglist>(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;attributes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsedCharacters</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a949bcf8e3496896d2b6d7d6da72870a7</anchor>
      <arglist>(const std::string &amp;characters)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParsedTextContent</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>abebc95353394912e187ad70e6078fcdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a3d8e1b737e614b35e3df0a4f76ac645b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Rotation</name>
    <filename>classiDynTree_1_1Rotation.html</filename>
    <base>iDynTree::RotationRaw</base>
    <member kind="function">
      <type></type>
      <name>Rotation</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a3b5c6a82b93158b7dce0a5a87cd42d51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>aea80e6bbd7eba2511c16de3a8070d393</anchor>
      <arglist>(double xx, double xy, double xz, double yx, double yy, double yz, double zx, double zy, double zz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>af2c807c8151fdb61f4bff2de2752c145</anchor>
      <arglist>(const RotationRaw &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a836995b0cd4569da0199d1de96f09000</anchor>
      <arglist>(const Rotation &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RotationSemantics &amp;</type>
      <name>getSemantics</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a6cda33ca3975cc7ea640e5eb3d9135ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RotationSemantics &amp;</type>
      <name>getSemantics</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>aea2a0a4a11c069908a16d24369530e50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Rotation &amp;</type>
      <name>changeOrientFrame</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a8e33a327e4a8072cc400000450f4ddc2</anchor>
      <arglist>(const Rotation &amp;newOrientFrame)</arglist>
    </member>
    <member kind="function">
      <type>const Rotation &amp;</type>
      <name>changeRefOrientFrame</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a5f860f064f68386224e78248593248ee</anchor>
      <arglist>(const Rotation &amp;newRefOrientFrame)</arglist>
    </member>
    <member kind="function">
      <type>const Rotation &amp;</type>
      <name>changeCoordinateFrame</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>aa350332ae60a045f416bff1593ecddc7</anchor>
      <arglist>(const Rotation &amp;newCoordinateFrame)</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>changeCoordFrameOf</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a207bde922fc36aac515a6137a2dc2747</anchor>
      <arglist>(const Position &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionVector</type>
      <name>changeCoordFrameOf</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a6db0ecf650360abbc0ae8b80a8b56bef</anchor>
      <arglist>(const SpatialMotionVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>changeCoordFrameOf</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>ace899c4b5f9e7da07774713081abff87</anchor>
      <arglist>(const SpatialForceVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>changeCoordFrameOf</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a8ab289fa8ea505fa304422a611e21dc3</anchor>
      <arglist>(const Twist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialAcc</type>
      <name>changeCoordFrameOf</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a6a3e9290ea98e34cb1893ed53c748ee7</anchor>
      <arglist>(const SpatialAcc &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMomentum</type>
      <name>changeCoordFrameOf</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a0a9852ab9cadc27708d251315680fe38</anchor>
      <arglist>(const SpatialMomentum &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>changeCoordFrameOf</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a4719a12b1f3bf67ff09aa0c8a7663b56</anchor>
      <arglist>(const Wrench &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>changeCoordFrameOf</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a2bf5899ea17119adec9150554b11ff80</anchor>
      <arglist>(const Direction &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Axis</type>
      <name>changeCoordFrameOf</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a90083c8fd426035fdfd81f0f019222c9</anchor>
      <arglist>(const Axis &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ClassicalAcc</type>
      <name>changeCoordFrameOf</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>adc231798a74209f9560d61361cb3516c</anchor>
      <arglist>(const ClassicalAcc &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>RotationalInertiaRaw</type>
      <name>changeCoordFrameOf</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a16c64400ab9bd2461c1dfe9dc79088ef</anchor>
      <arglist>(const RotationalInertiaRaw &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Rotation</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a7b907d0eea05fea309a607bbc5a2aebc</anchor>
      <arglist>(const Rotation &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Rotation</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a91ef997749232efa10da11c7c4139205</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a5ea65af729f09227d495d488581aea80</anchor>
      <arglist>(const Position &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>adae81c3a4967c7bf1111972203760260</anchor>
      <arglist>(const SpatialForceVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a4188054f8742115393feaf52807466c5</anchor>
      <arglist>(const Twist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>acfeb680d3a2c7f934cdd13c131989f76</anchor>
      <arglist>(const Wrench &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a5988709db56f784653d352ad89d7cdf5</anchor>
      <arglist>(const Direction &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Axis</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>af1f80ef74003cfb4c646c761c19b15ea</anchor>
      <arglist>(const Axis &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialAcc</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>aa5301287f3a23308cc8c6634425b113f</anchor>
      <arglist>(const SpatialAcc &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMomentum</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a4982c8b2ee7d822389cb80f93e8171c9</anchor>
      <arglist>(const SpatialMomentum &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ClassicalAcc</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>aef148d5c3b3b5294b879b2f57d3f6b0e</anchor>
      <arglist>(const ClassicalAcc &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>RotationalInertiaRaw</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a187d8cde5f7cd24560a7785cb89ad585</anchor>
      <arglist>(const RotationalInertiaRaw &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>AngularMotionVector3</type>
      <name>log</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a31ca5467d6991d28c1c95c1091693452</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromQuaternion</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a40da839b3ed7cf1be092ce4c8056467a</anchor>
      <arglist>(const iDynTree::Vector4 &amp;quaternion)</arglist>
    </member>
    <member kind="function">
      <type>const RotationRaw &amp;</type>
      <name>changeOrientFrame</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>aded5af21ddf50e1764376e7283f969c4</anchor>
      <arglist>(const RotationRaw &amp;newOrientFrame)</arglist>
    </member>
    <member kind="function">
      <type>const RotationRaw &amp;</type>
      <name>changeRefOrientFrame</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>afda3117c3e178177c91c8edcadbcb426</anchor>
      <arglist>(const RotationRaw &amp;newRefOrientFrame)</arglist>
    </member>
    <member kind="function">
      <type>PositionRaw</type>
      <name>changeCoordFrameOf</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a454c11a15ccb1f1f5cf74148e2a2c94f</anchor>
      <arglist>(const PositionRaw &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>afa9fff22a34eb198785d87ffe161488f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aa4afb9030800a8424afd9a8bb36d8972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a26bd376a8f4cfa044ff366a22f1aab6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRowMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a6da0a936d351418e0dcb4d67f3d0abbc</anchor>
      <arglist>(double *rowMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillColMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a58750c21e5e8c31c54c3eed7dd2309b6</anchor>
      <arglist>(double *colMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRPY</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a600352007d9250f7f227f21db85611f2</anchor>
      <arglist>(double &amp;r, double &amp;p, double &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Vector3</type>
      <name>asRPY</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>affb93ecd043eb4870e46ad3e7ad9f3d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getQuaternion</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a226999eca0d7e8c382a427f7f056da03</anchor>
      <arglist>(iDynTree::Vector4 &amp;quaternion) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getQuaternion</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>ae92f3d9a7bd41ba6b6d71d4a6c839998</anchor>
      <arglist>(double &amp;s, double &amp;r1, double &amp;r2, double &amp;r3) const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Vector4</type>
      <name>asQuaternion</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>adcac444f00ca751417f3095b401de86c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>abc3a2c5ebc4388c90732137457db0f97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a57bcd6b8bcf5bf76c1a65498264cae35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>add5c4c897353715a8d86fc72ea463481</anchor>
      <arglist>(const Rotation &amp;op1, const Rotation &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>inverse2</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a28fc16b73e3071b15b379a135fe52bb0</anchor>
      <arglist>(const Rotation &amp;orient)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RotationRaw</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a331d946e35f92fa91c80a6cc75cbcac9</anchor>
      <arglist>(const RotationRaw &amp;op1, const RotationRaw &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RotationRaw</type>
      <name>inverse2</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a45730ca5ba2177e9ed1de11d708f32e0</anchor>
      <arglist>(const RotationRaw &amp;orient)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>RotX</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>ad361606b9bef2b4c9f02e0279e480ed4</anchor>
      <arglist>(const double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>RotY</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>acae4392104935aa6f9af2638a703a385</anchor>
      <arglist>(const double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>RotZ</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>ab0b440c12b7f47c2eb724b47bc9b3a4f</anchor>
      <arglist>(const double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>RotAxis</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>ab8fea7fd5afd4bea75cbcb7ce9bf5cce</anchor>
      <arglist>(const Direction &amp;direction, const double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>RotAxisDerivative</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>af75632c7507cf68367556d70620d0142</anchor>
      <arglist>(const Direction &amp;direction, const double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>RPY</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a8a09f91f852dfc6eef646cdf737cb572</anchor>
      <arglist>(const double roll, const double pitch, const double yaw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>RPYRightTrivializedDerivative</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>ade94c567710848fe366c1554279f3c1e</anchor>
      <arglist>(const double roll, const double pitch, const double yaw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>RPYRightTrivializedDerivativeRateOfChange</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a35b349be1fe8d33c31b67bdc4028a75d</anchor>
      <arglist>(const double roll, const double pitch, const double yaw, const double rollDot, const double pitchDot, const double yawDot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>RPYRightTrivializedDerivativeInverse</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>ae6fb051218550404d09cdb85f5cb4096</anchor>
      <arglist>(const double roll, const double pitch, const double yaw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>RPYRightTrivializedDerivativeInverseRateOfChange</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a017e9bca05503c11fcc3b367dc18fa18</anchor>
      <arglist>(const double roll, const double pitch, const double yaw, const double rollDot, const double pitchDot, const double yawDot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixFixSize&lt; 4, 3 &gt;</type>
      <name>QuaternionRightTrivializedDerivative</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>aad0b6527316e50b6763692ab3e039619</anchor>
      <arglist>(Vector4 quaternion)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixFixSize&lt; 3, 4 &gt;</type>
      <name>QuaternionRightTrivializedDerivativeInverse</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a3f16573e1bdec66d9a3f0e3477fb452c</anchor>
      <arglist>(Vector4 quaternion)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>Identity</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>adaa3df5e26cabd02770ae9b9cfd35939</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>RotationFromQuaternion</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a87310752992a318e25a1071dbdde361e</anchor>
      <arglist>(const iDynTree::Vector4 &amp;quaternion)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>leftJacobian</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a6edd2f418e2f4fe12b45b20b9683b099</anchor>
      <arglist>(const iDynTree::AngularMotionVector3 &amp;omega)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>leftJacobianInverse</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>afe79b771833063e443a25218377e508e</anchor>
      <arglist>(const iDynTree::AngularMotionVector3 &amp;omega)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a8e916f4550fec92847dab198695299a1</anchor>
      <arglist>[nRows *nCols]</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRPY</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a600352007d9250f7f227f21db85611f2</anchor>
      <arglist>(double &amp;r, double &amp;p, double &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Vector3</type>
      <name>asRPY</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>affb93ecd043eb4870e46ad3e7ad9f3d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getQuaternion</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a226999eca0d7e8c382a427f7f056da03</anchor>
      <arglist>(iDynTree::Vector4 &amp;quaternion) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getQuaternion</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>ae92f3d9a7bd41ba6b6d71d4a6c839998</anchor>
      <arglist>(double &amp;s, double &amp;r1, double &amp;r2, double &amp;r3) const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Vector4</type>
      <name>asQuaternion</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>adcac444f00ca751417f3095b401de86c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>RotX</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>ad361606b9bef2b4c9f02e0279e480ed4</anchor>
      <arglist>(const double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>RotY</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>acae4392104935aa6f9af2638a703a385</anchor>
      <arglist>(const double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>RotZ</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>ab0b440c12b7f47c2eb724b47bc9b3a4f</anchor>
      <arglist>(const double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>RotAxis</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>ab8fea7fd5afd4bea75cbcb7ce9bf5cce</anchor>
      <arglist>(const Direction &amp;direction, const double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>RotAxisDerivative</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>af75632c7507cf68367556d70620d0142</anchor>
      <arglist>(const Direction &amp;direction, const double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>RPY</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a8a09f91f852dfc6eef646cdf737cb572</anchor>
      <arglist>(const double roll, const double pitch, const double yaw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>RPYRightTrivializedDerivative</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>ade94c567710848fe366c1554279f3c1e</anchor>
      <arglist>(const double roll, const double pitch, const double yaw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>RPYRightTrivializedDerivativeRateOfChange</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a35b349be1fe8d33c31b67bdc4028a75d</anchor>
      <arglist>(const double roll, const double pitch, const double yaw, const double rollDot, const double pitchDot, const double yawDot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>RPYRightTrivializedDerivativeInverse</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>ae6fb051218550404d09cdb85f5cb4096</anchor>
      <arglist>(const double roll, const double pitch, const double yaw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>RPYRightTrivializedDerivativeInverseRateOfChange</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a017e9bca05503c11fcc3b367dc18fa18</anchor>
      <arglist>(const double roll, const double pitch, const double yaw, const double rollDot, const double pitchDot, const double yawDot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixFixSize&lt; 4, 3 &gt;</type>
      <name>QuaternionRightTrivializedDerivative</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>aad0b6527316e50b6763692ab3e039619</anchor>
      <arglist>(Vector4 quaternion)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixFixSize&lt; 3, 4 &gt;</type>
      <name>QuaternionRightTrivializedDerivativeInverse</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a3f16573e1bdec66d9a3f0e3477fb452c</anchor>
      <arglist>(Vector4 quaternion)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>Identity</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>adaa3df5e26cabd02770ae9b9cfd35939</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>RotationFromQuaternion</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a87310752992a318e25a1071dbdde361e</anchor>
      <arglist>(const iDynTree::Vector4 &amp;quaternion)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>leftJacobian</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a6edd2f418e2f4fe12b45b20b9683b099</anchor>
      <arglist>(const iDynTree::AngularMotionVector3 &amp;omega)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3x3</type>
      <name>leftJacobianInverse</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>afe79b771833063e443a25218377e508e</anchor>
      <arglist>(const iDynTree::AngularMotionVector3 &amp;omega)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>abc3a2c5ebc4388c90732137457db0f97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1Rotation.html</anchorfile>
      <anchor>a57bcd6b8bcf5bf76c1a65498264cae35</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::RotationalInertiaRaw</name>
    <filename>classiDynTree_1_1RotationalInertiaRaw.html</filename>
    <base>MatrixFixSize&lt; 3, 3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>RotationalInertiaRaw</name>
      <anchorfile>classiDynTree_1_1RotationalInertiaRaw.html</anchorfile>
      <anchor>ab9d59eeb6e800984a084de1b92f9c848</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationalInertiaRaw</name>
      <anchorfile>classiDynTree_1_1RotationalInertiaRaw.html</anchorfile>
      <anchor>a4fd1fb49b1ec5a14d36d77e579c8b4ce</anchor>
      <arglist>(const double *in_data, const unsigned int in_rows, const unsigned int in_cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationalInertiaRaw</name>
      <anchorfile>classiDynTree_1_1RotationalInertiaRaw.html</anchorfile>
      <anchor>ab2abca01c8b3bf4875193d7c00fcfe5c</anchor>
      <arglist>(const RotationalInertiaRaw &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>afa9fff22a34eb198785d87ffe161488f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aa4afb9030800a8424afd9a8bb36d8972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a26bd376a8f4cfa044ff366a22f1aab6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRowMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a6da0a936d351418e0dcb4d67f3d0abbc</anchor>
      <arglist>(double *rowMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillColMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a58750c21e5e8c31c54c3eed7dd2309b6</anchor>
      <arglist>(double *colMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aab67a981ed6a31503d0aca8b4589d6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a1323e690b88b1abe04bd838db6546637</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RotationalInertiaRaw</type>
      <name>Zero</name>
      <anchorfile>classiDynTree_1_1RotationalInertiaRaw.html</anchorfile>
      <anchor>a45db0bafc3b055cb1bacabc8f291bf59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a8e916f4550fec92847dab198695299a1</anchor>
      <arglist>[nRows *nCols]</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aab67a981ed6a31503d0aca8b4589d6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a1323e690b88b1abe04bd838db6546637</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::RotationRaw</name>
    <filename>classiDynTree_1_1RotationRaw.html</filename>
    <base>iDynTree::MatrixFixSize</base>
    <member kind="function">
      <type></type>
      <name>RotationRaw</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>aaa44b90d4fa704b11750cfc426fc24e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationRaw</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>aa0a5bea09ea4fb93c09d5acb1e2b076d</anchor>
      <arglist>(double xx, double xy, double xz, double yx, double yy, double yz, double zx, double zy, double zz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationRaw</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>ab9a6ec23b658bd49cde69622d657e22e</anchor>
      <arglist>(const double *in_data, const unsigned int in_rows, const unsigned int in_cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationRaw</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a308cb7eb1a78ee179c750b79ae84ccda</anchor>
      <arglist>(const RotationRaw &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const RotationRaw &amp;</type>
      <name>changeOrientFrame</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>aded5af21ddf50e1764376e7283f969c4</anchor>
      <arglist>(const RotationRaw &amp;newOrientFrame)</arglist>
    </member>
    <member kind="function">
      <type>const RotationRaw &amp;</type>
      <name>changeRefOrientFrame</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>afda3117c3e178177c91c8edcadbcb426</anchor>
      <arglist>(const RotationRaw &amp;newRefOrientFrame)</arglist>
    </member>
    <member kind="function">
      <type>PositionRaw</type>
      <name>changeCoordFrameOf</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a454c11a15ccb1f1f5cf74148e2a2c94f</anchor>
      <arglist>(const PositionRaw &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ClassicalAcc</type>
      <name>changeCoordFrameOf</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a066ec0cd376d0b362944d92ad7f7422a</anchor>
      <arglist>(const ClassicalAcc &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>RotationalInertiaRaw</type>
      <name>changeCoordFrameOf</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>aae1b906465c8dff05dbe2c60637a3071</anchor>
      <arglist>(const RotationalInertiaRaw &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>afa9fff22a34eb198785d87ffe161488f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aa4afb9030800a8424afd9a8bb36d8972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a26bd376a8f4cfa044ff366a22f1aab6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRowMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a6da0a936d351418e0dcb4d67f3d0abbc</anchor>
      <arglist>(double *rowMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillColMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a58750c21e5e8c31c54c3eed7dd2309b6</anchor>
      <arglist>(double *colMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a664fe5dfd3048f06edd3e832432ab6bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a0c0d54a248073cdb774f4ef9fe8f1611</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RotationRaw</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a331d946e35f92fa91c80a6cc75cbcac9</anchor>
      <arglist>(const RotationRaw &amp;op1, const RotationRaw &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RotationRaw</type>
      <name>inverse2</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a45730ca5ba2177e9ed1de11d708f32e0</anchor>
      <arglist>(const RotationRaw &amp;orient)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RotationRaw</type>
      <name>RotX</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a25c0b2d0ae1de0cabc13a14cffa1d43a</anchor>
      <arglist>(const double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RotationRaw</type>
      <name>RotY</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a319a01b664b15f37c4ecdaa38508204d</anchor>
      <arglist>(const double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RotationRaw</type>
      <name>RotZ</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a43cca3998fa8df85b4996dfc2d527af4</anchor>
      <arglist>(const double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RotationRaw</type>
      <name>RPY</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a435d4ee59bfe2055f329b1a5e14e24a6</anchor>
      <arglist>(const double roll, const double pitch, const double yaw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RotationRaw</type>
      <name>Identity</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a421abf755b21f3a6299f32e5640b2bd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a8e916f4550fec92847dab198695299a1</anchor>
      <arglist>[nRows *nCols]</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RotationRaw</type>
      <name>RotX</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a25c0b2d0ae1de0cabc13a14cffa1d43a</anchor>
      <arglist>(const double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RotationRaw</type>
      <name>RotY</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a319a01b664b15f37c4ecdaa38508204d</anchor>
      <arglist>(const double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RotationRaw</type>
      <name>RotZ</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a43cca3998fa8df85b4996dfc2d527af4</anchor>
      <arglist>(const double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RotationRaw</type>
      <name>RPY</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a435d4ee59bfe2055f329b1a5e14e24a6</anchor>
      <arglist>(const double roll, const double pitch, const double yaw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RotationRaw</type>
      <name>Identity</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a421abf755b21f3a6299f32e5640b2bd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a664fe5dfd3048f06edd3e832432ab6bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1RotationRaw.html</anchorfile>
      <anchor>a0c0d54a248073cdb774f4ef9fe8f1611</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::RotationSemantics</name>
    <filename>classiDynTree_1_1RotationSemantics.html</filename>
    <member kind="function">
      <type></type>
      <name>RotationSemantics</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a2092ad922081b712909621997d1f1ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationSemantics</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a2ee273132ef056417ca1044879f76aaa</anchor>
      <arglist>(int _orientationFrame, int _body, int _refOrientationFrame, int _refBody)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationSemantics</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>ac9a972a0a2f02f5c906f7b302c4a5baf</anchor>
      <arglist>(const RotationSemantics &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToUnknown</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>ab47a4fdae129463e4a01e0f38a87ad68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOrientationFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a5354247aff76d2ef576d692ec689d35c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBody</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a7c1b4f5c551fc1d1d7b183d4737ce35b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getReferenceOrientationFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>af64828bd0c9170e31aa60bb94f093b92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRefBody</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a0ed87d2c7989e9a6b1a77971c2d71594</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoordinateFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a900be52de851671d06bd03b95e18690e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientationFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a46d6c2d415b5f46cde840d080ee794ff</anchor>
      <arglist>(int _orientationFrame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBody</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a3c47c22ec3ed60a9cd839d9850a7e2d1</anchor>
      <arglist>(int _body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReferenceOrientationFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a8579f14a8a5ea864f0e00abf11e3cd13</anchor>
      <arglist>(int _refOrientationFrame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefBody</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>aaf4a9cbb4d4c18aa0f8fa782f0e80892</anchor>
      <arglist>(int _refBody)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoordinateFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a092933190350387c204a76cd8f8f192f</anchor>
      <arglist>(int _coordinateFrame)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a0f20932d428345dca405b143ed815176</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a4a450a8e7d516b969b2dac3644d9a2f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>orientationFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a92db35590f2f5792d1ca15315a46af77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>body</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a1f151e008fd73b0e5f335e180ab22155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>refOrientationFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a088fa596a33a674a69cc011cc370cd69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>refBody</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a9ef66bda85cbc0fc7b47ef349a8102a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>coordinateFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a3b11e25bbcb26f5f5b7347b528c69638</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>check_changeOrientFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a6f4d806984715597399c3b9b516b4c1d</anchor>
      <arglist>(const RotationSemantics &amp;newOrientFrame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>check_changeRefOrientFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>aa92ac62ca902cf99beaa9a34c6a4c093</anchor>
      <arglist>(const RotationSemantics &amp;newRefOrientFrame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>check_changeCoordFrameOf</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a750996ca4b8c611d947606b311e92d1f</anchor>
      <arglist>(const PositionSemantics &amp;op) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>check_compose</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>aa7c4cb7af9921fcc5cfbc07e0678a16c</anchor>
      <arglist>(const RotationSemantics &amp;op1, const RotationSemantics &amp;op2)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>check_inverse2</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a4ac5b70ee31eca82648f46075e7562fa</anchor>
      <arglist>(const RotationSemantics &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOrientationFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a5354247aff76d2ef576d692ec689d35c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBody</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a7c1b4f5c551fc1d1d7b183d4737ce35b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getReferenceOrientationFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>af64828bd0c9170e31aa60bb94f093b92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRefBody</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a0ed87d2c7989e9a6b1a77971c2d71594</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoordinateFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a900be52de851671d06bd03b95e18690e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientationFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a46d6c2d415b5f46cde840d080ee794ff</anchor>
      <arglist>(int _orientationFrame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBody</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a3c47c22ec3ed60a9cd839d9850a7e2d1</anchor>
      <arglist>(int _body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReferenceOrientationFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a8579f14a8a5ea864f0e00abf11e3cd13</anchor>
      <arglist>(int _refOrientationFrame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefBody</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>aaf4a9cbb4d4c18aa0f8fa782f0e80892</anchor>
      <arglist>(int _refBody)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoordinateFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a092933190350387c204a76cd8f8f192f</anchor>
      <arglist>(int _coordinateFrame)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeOrientFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>af7d0fd5c91a8ff3887550b14f5cd18eb</anchor>
      <arglist>(const RotationSemantics &amp;newOrientFrame)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeRefOrientFrame</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>ac3f12fbb60070354aefb1790761afe98</anchor>
      <arglist>(const RotationSemantics &amp;newRefOrientFrame)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeCoordFrameOf</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>ad41a23a2a9498dc05cf2179af7dce050</anchor>
      <arglist>(const PositionSemantics &amp;other, PositionSemantics &amp;result) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a8f05c319580ab7737f9562b0f738aeed</anchor>
      <arglist>(const RotationSemantics &amp;op1, const RotationSemantics &amp;op2, RotationSemantics &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inverse2</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a8453ea1df0d42a0142045063bbac127e</anchor>
      <arglist>(const RotationSemantics &amp;op, RotationSemantics &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a0f20932d428345dca405b143ed815176</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1RotationSemantics.html</anchorfile>
      <anchor>a4a450a8e7d516b969b2dac3644d9a2f4</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::SchmittParams</name>
    <filename>structiDynTree_1_1SchmittParams.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>stableTimeContactMake</name>
      <anchorfile>structiDynTree_1_1SchmittParams.html</anchorfile>
      <anchor>a2696f35d748c8d690457cf7b438216d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>stableTimeContactBreak</name>
      <anchorfile>structiDynTree_1_1SchmittParams.html</anchorfile>
      <anchor>af80a091c205ab2d3a9670b6c59353d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>contactMakeForceThreshold</name>
      <anchorfile>structiDynTree_1_1SchmittParams.html</anchorfile>
      <anchor>a0a5ec7d64b511eb5ef4b9290a05ce9eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>contactBreakForceThreshold</name>
      <anchorfile>structiDynTree_1_1SchmittParams.html</anchorfile>
      <anchor>ac25e1168d03e53fabbac213037c1234d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SchmittTrigger</name>
    <filename>classiDynTree_1_1SchmittTrigger.html</filename>
    <member kind="function">
      <type></type>
      <name>SchmittTrigger</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>af163ef294409e336012f581cec9325bc</anchor>
      <arglist>(double stableOFFTime, double stableONTime, double lowValueThreshold, double highValueThreshold)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetDevice</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>aef6200c8634482b6f5b5b1199919d00a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDevice</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>a8cdfc9864074756bea49c7a5e0b2da37</anchor>
      <arglist>(double currentTime, double rawValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>a4bbfb06faf87bacaafcb48d26d333ce6</anchor>
      <arglist>(double stableOFFTime, double stableONTime, double lowValueThreshold, double highValueThreshold)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStableOFFTime</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>a29d08d901e5c9007c1fc360b3ef56d3d</anchor>
      <arglist>(double stableOFFTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStableONTime</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>a1ce31c77ea5deebbe6d8b295458bb854</anchor>
      <arglist>(double stableONTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLowValueThreshold</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>a5a073f869c044539ea1ed6054f96b09e</anchor>
      <arglist>(double lowValueThreshold)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHighValueThreshold</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>a924f9c108b3778ab309f0c1d5f77d8ce</anchor>
      <arglist>(double highValueThreshold)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialState</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>ae7b71b094ce9961f5790a0563a60e440</anchor>
      <arglist>(bool state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getState</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>aac8920ee0c8e52c6736feb60b950a9bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getElapsedTime</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>a955ee661b7c26f49de420abd89332dd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbose</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>ab6993bf0ca7697713a2ad90746b8f2dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetVerbose</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>a4dd33f44fa05a636b2f8040d8e961ce1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>a4bbfb06faf87bacaafcb48d26d333ce6</anchor>
      <arglist>(double stableOFFTime, double stableONTime, double lowValueThreshold, double highValueThreshold)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStableOFFTime</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>a29d08d901e5c9007c1fc360b3ef56d3d</anchor>
      <arglist>(double stableOFFTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStableONTime</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>a1ce31c77ea5deebbe6d8b295458bb854</anchor>
      <arglist>(double stableONTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLowValueThreshold</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>a5a073f869c044539ea1ed6054f96b09e</anchor>
      <arglist>(double lowValueThreshold)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHighValueThreshold</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>a924f9c108b3778ab309f0c1d5f77d8ce</anchor>
      <arglist>(double highValueThreshold)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialState</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>ae7b71b094ce9961f5790a0563a60e440</anchor>
      <arglist>(bool state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getState</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>aac8920ee0c8e52c6736feb60b950a9bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getElapsedTime</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>a955ee661b7c26f49de420abd89332dd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbose</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>ab6993bf0ca7697713a2ad90746b8f2dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetVerbose</name>
      <anchorfile>classiDynTree_1_1SchmittTrigger.html</anchorfile>
      <anchor>a4dd33f44fa05a636b2f8040d8e961ce1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::Selector</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1Selector.html</filename>
    <member kind="function">
      <type></type>
      <name>Selector</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>acfb1430115574210a2460a8c3baa7f98</anchor>
      <arglist>(unsigned int selectedSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Selector</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>a86fe17a634a0b3a4fccb86c3ef544a09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorDynSize &amp;</type>
      <name>select</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>a1cbaeb8d8f27f1a4cea25471ff1aab89</anchor>
      <arglist>(const VectorDynSize &amp;fullVector)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MatrixDynSize &amp;</type>
      <name>asSelectorMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>a22e514feed601d1e5d6d46cd2a522b83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparsityStructure &amp;</type>
      <name>sparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>a67898193aac90f6eefb5ca7d52540372</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>ab517313f7436046c4da463cc5a4e9175</anchor>
      <arglist>(const SparsityStructure &amp;sparsity)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>a3e3363a41fed3bb2cbb4218300c35216</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorDynSize</type>
      <name>m_selected</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>a0ad2e3912792c51e813e18fd8cb74480</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MatrixDynSize</type>
      <name>m_selectionMatrix</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>ae879af967abc75d5b958ca0da7aa8412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparsityStructure</type>
      <name>m_correspondingHessianSparsity</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1Selector.html</anchorfile>
      <anchor>a944ac90f2e752be02169981ecd526cfe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Sensor</name>
    <filename>classiDynTree_1_1Sensor.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~Sensor</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>a98c6fdc37d09806e2c24aa110f03f652</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>a4a62adb1d4c1e4bedca8762783ab0468</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SensorType</type>
      <name>getSensorType</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>a6dd712921c150fddd33217694feb3652</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>ace89679ad53fd11326ec00dc82ebd925</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setName</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>a40cafcac5f0c1567e44d53c775641818</anchor>
      <arglist>(const std::string &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Sensor *</type>
      <name>clone</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>a6428f5534e54c607bc5e773073c6c50e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>a247d7d8b8dcdf828cf7172aabf05457c</anchor>
      <arglist>(const Model &amp;model) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>updateIndices</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>ae91fc5a5922a99815b0cdc9de9f1ac88</anchor>
      <arglist>(const Model &amp;model)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>updateIndeces</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>af70d378d9a03ea209587a3a9b86b4061</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SensorElement</name>
    <filename>classiDynTree_1_1SensorElement.html</filename>
    <base>iDynTree::XMLElement</base>
    <class kind="struct">iDynTree::SensorElement::SensorInfo</class>
    <member kind="function">
      <type></type>
      <name>SensorElement</name>
      <anchorfile>classiDynTree_1_1SensorElement.html</anchorfile>
      <anchor>ad36cb30cdb1e829f3154655b13afb516</anchor>
      <arglist>(std::vector&lt; std::shared_ptr&lt; SensorHelper &gt;&gt; &amp;sensors)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; XMLElement &gt;</type>
      <name>childElementForName</name>
      <anchorfile>classiDynTree_1_1SensorElement.html</anchorfile>
      <anchor>aa5305a25df9fb2d6f2160ac22e4119be</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAttributes</name>
      <anchorfile>classiDynTree_1_1SensorElement.html</anchorfile>
      <anchor>a89602903716a20070be91a2eef07940f</anchor>
      <arglist>(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;attributes) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ab40851b7629a74107f2183ca36e412e4</anchor>
      <arglist>(std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a16759fb450635662dced0eb2ace0228b</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChildHasBeenParsedCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a69171cc4b5c552b97f44375029356a2e</anchor>
      <arglist>(std::function&lt; void(std::shared_ptr&lt; XMLElement &gt;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt;</type>
      <name>attributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2a182ac17f5e644b113a67e02c3595e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; void()&gt;</type>
      <name>exitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a04ea33b2a4ebf84647fb6d38e24ba0e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a7129fb1e69a5bc819872e65d3965296d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; XMLElement &gt; &gt;</type>
      <name>children</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2f51748fc6eed4724e86dc5e52ebd5ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt; &gt;</type>
      <name>attributes</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a27347aca070a5dfc250077b6cc3e3748</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>exitElementScope</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a66d20512ef5debea77d1919835dbda1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>childHasBeenParsed</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ac92ce9b144b27970e09f6f9dff77f251</anchor>
      <arglist>(std::shared_ptr&lt; XMLElement &gt; parsedChild)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsedCharacters</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a949bcf8e3496896d2b6d7d6da72870a7</anchor>
      <arglist>(const std::string &amp;characters)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParsedTextContent</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>abebc95353394912e187ad70e6078fcdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a3d8e1b737e614b35e3df0a4f76ac645b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SensorHelper</name>
    <filename>classiDynTree_1_1SensorHelper.html</filename>
    <member kind="function">
      <type></type>
      <name>SensorHelper</name>
      <anchorfile>classiDynTree_1_1SensorHelper.html</anchorfile>
      <anchor>ad5fbaf3d8c8df33cc7c30b689bccd97a</anchor>
      <arglist>(std::shared_ptr&lt; const SensorElement::SensorInfo &gt; m_sensorInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SensorHelper</name>
      <anchorfile>classiDynTree_1_1SensorHelper.html</anchorfile>
      <anchor>ad420111e0ad36e1df48085f565476d40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Sensor *</type>
      <name>generateSensor</name>
      <anchorfile>classiDynTree_1_1SensorHelper.html</anchorfile>
      <anchor>a5bdee23a7596be29f49d791ee306c31e</anchor>
      <arglist>(const Model &amp;) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; const SensorElement::SensorInfo &gt;</type>
      <name>m_sensorInfo</name>
      <anchorfile>classiDynTree_1_1SensorHelper.html</anchorfile>
      <anchor>ac726e84fbbcc59662ab2bf0c531b1270</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::SensorElement::SensorInfo</name>
    <filename>structiDynTree_1_1SensorElement_1_1SensorInfo.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>m_name</name>
      <anchorfile>structiDynTree_1_1SensorElement_1_1SensorInfo.html</anchorfile>
      <anchor>ad29f9d79c6b6172e1da5d1aa5c86fe32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_attachedLink</name>
      <anchorfile>structiDynTree_1_1SensorElement_1_1SensorInfo.html</anchorfile>
      <anchor>a4f8ca12987d70d269cdc393b56fc88ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_attachedJoint</name>
      <anchorfile>structiDynTree_1_1SensorElement_1_1SensorInfo.html</anchorfile>
      <anchor>ad81c753355d8677067c87f69ccb4f3ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::SensorType</type>
      <name>m_sensorType</name>
      <anchorfile>structiDynTree_1_1SensorElement_1_1SensorInfo.html</anchorfile>
      <anchor>a9c2c4aef4bc89e059d38de0cd7c9aeef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Transform</type>
      <name>m_origin</name>
      <anchorfile>structiDynTree_1_1SensorElement_1_1SensorInfo.html</anchorfile>
      <anchor>af2c8d387af6970b4438a2f270db9e017</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SensorsList</name>
    <filename>classiDynTree_1_1SensorsList.html</filename>
    <class kind="class">iDynTree::SensorsList::ConstIterator</class>
    <class kind="class">iDynTree::SensorsList::ConstTypedIterator</class>
    <class kind="class">iDynTree::SensorsList::Iterator</class>
    <class kind="struct">iDynTree::SensorsList::SensorsListPimpl</class>
    <class kind="class">iDynTree::SensorsList::TypedIterator</class>
    <member kind="typedef">
      <type>TypedIterator</type>
      <name>typed_iterator</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>aebdb30ea705c5f354aa39cb741ee63a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstTypedIterator</type>
      <name>const_typed_iterator</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a2eb981ba901b6eb4ff2354d5f04b7701</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a4143a28a17a2b0884179d095cd0f8c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a401ffc51c5a62062d291d42af9809ce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SensorsList</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a3df83506e04fc901432d3ce92459ecd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SensorsList</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a0fdf85096d1148e6bf8b9b9d97f2befe</anchor>
      <arglist>(const SensorsList &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SensorsList &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a63af9f3e8fcf5e19d0ac0f3ed743a648</anchor>
      <arglist>(const SensorsList &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SensorsList</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a28cee9e1664ac1eed60e4f074425dd96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSensor</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a78d9ae532ad969d0f8554623fa713815</anchor>
      <arglist>(const Sensor &amp;sensor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setSerialization</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a6154db8662dabf186ed7014fdd247374</anchor>
      <arglist>(const SensorType &amp;sensor_type, const std::vector&lt; std::string &gt; &amp;serializaton)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSerialization</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a674083e12d9a5e673d75db1998020589</anchor>
      <arglist>(const SensorType &amp;sensor_type, std::vector&lt; std::string &gt; &amp;serializaton)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfSensors</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a251095cf7c52b439d995c9ce6307d299</anchor>
      <arglist>(const SensorType &amp;sensor_type) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSensorIndex</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>ae9ca62bfb42bb34d585dcb2b002aa701</anchor>
      <arglist>(const SensorType &amp;sensor_type, const std::string &amp;_sensor_name, unsigned int &amp;sensor_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSensorIndex</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a15b9f08a92fa4daf01f6c7ab51659f28</anchor>
      <arglist>(const SensorType &amp;sensor_type, const std::string &amp;_sensor_name) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSizeOfAllSensorsMeasurements</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a31832ea1ddd81e7e4c9fa0983e33d47e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Sensor *</type>
      <name>getSensor</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a0e704cdf2ed7234183205f8aa5a6b65e</anchor>
      <arglist>(const SensorType &amp;sensor_type, int sensor_index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>aa6db282503b0aceb2145d981b5ca5478</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeSensor</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a17f2ff2224e182ab21916bab483eb5ac</anchor>
      <arglist>(const SensorType &amp;sensor_type, const std::string &amp;_sensor_name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeSensor</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>aa92895ca1db30da48e60f45ee33324c7</anchor>
      <arglist>(const SensorType &amp;sensor_type, const unsigned int sensor_index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeAllSensorsOfType</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>af466948f6df5c1cdbfdcfe7e44d410d1</anchor>
      <arglist>(const SensorType &amp;sensor_type)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>allSensorsIterator</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a91b15ea986a7cd32994d7f44cdcd275a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>allSensorsIterator</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a4fe4f029d04bc01c447c4d4dfd8c3af8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>typed_iterator</type>
      <name>sensorsIteratorForType</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a079886337021198c8fe1818786307e06</anchor>
      <arglist>(const iDynTree::SensorType &amp;sensor_type)</arglist>
    </member>
    <member kind="function">
      <type>const_typed_iterator</type>
      <name>sensorsIteratorForType</name>
      <anchorfile>classiDynTree_1_1SensorsList.html</anchorfile>
      <anchor>a5a183cece741ddd5b2d1dfe95ae0bd7d</anchor>
      <arglist>(const iDynTree::SensorType &amp;sensor_type) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::SensorsList::SensorsListPimpl</name>
    <filename>structiDynTree_1_1SensorsList_1_1SensorsListPimpl.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, size_t &gt;</type>
      <name>SensorNameToIndexMap</name>
      <anchorfile>structiDynTree_1_1SensorsList_1_1SensorsListPimpl.html</anchorfile>
      <anchor>a16dbfc9856597ca8ec1140d8c436e219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; Sensor * &gt; &gt;</type>
      <name>allSensors</name>
      <anchorfile>structiDynTree_1_1SensorsList_1_1SensorsListPimpl.html</anchorfile>
      <anchor>ab4069a262cd4bf85595205002f207557</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SensorNameToIndexMap &gt;</type>
      <name>sensorsNameToIndex</name>
      <anchorfile>structiDynTree_1_1SensorsList_1_1SensorsListPimpl.html</anchorfile>
      <anchor>ac1f0cde7af66b57a3ab8ff0016b0bf54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SensorsMeasurements</name>
    <filename>classiDynTree_1_1SensorsMeasurements.html</filename>
    <class kind="struct">iDynTree::SensorsMeasurements::SensorsMeasurementsPrivateAttributes</class>
    <member kind="function">
      <type></type>
      <name>SensorsMeasurements</name>
      <anchorfile>classiDynTree_1_1SensorsMeasurements.html</anchorfile>
      <anchor>a1a14e72920fd5afc53e9bf0e656bd93d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SensorsMeasurements</name>
      <anchorfile>classiDynTree_1_1SensorsMeasurements.html</anchorfile>
      <anchor>a7020210e0089cd9d011680b3331ac403</anchor>
      <arglist>(const SensorsList &amp;sensorList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SensorsMeasurements</name>
      <anchorfile>classiDynTree_1_1SensorsMeasurements.html</anchorfile>
      <anchor>a7b42cdb179bf20acc780422882af9308</anchor>
      <arglist>(const SensorsMeasurements &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SensorsMeasurements &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1SensorsMeasurements.html</anchorfile>
      <anchor>a68a49ddfae9a5d2648beb319aa7cd161</anchor>
      <arglist>(const SensorsMeasurements &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SensorsMeasurements</name>
      <anchorfile>classiDynTree_1_1SensorsMeasurements.html</anchorfile>
      <anchor>a5b22b66467d54a92c245905121f3aa7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setNrOfSensors</name>
      <anchorfile>classiDynTree_1_1SensorsMeasurements.html</anchorfile>
      <anchor>aa2ee467d3429f352be9b1f10b1a3bfae</anchor>
      <arglist>(const SensorType &amp;sensor_type, unsigned int nrOfSensors)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfSensors</name>
      <anchorfile>classiDynTree_1_1SensorsMeasurements.html</anchorfile>
      <anchor>a08e67be0f5f6a661c89fbbc7d8145c02</anchor>
      <arglist>(const SensorType &amp;sensor_type) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1SensorsMeasurements.html</anchorfile>
      <anchor>a29c04be67efee04dc5d499a7f9ee5614</anchor>
      <arglist>(const SensorsList &amp;sensorsList)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toVector</name>
      <anchorfile>classiDynTree_1_1SensorsMeasurements.html</anchorfile>
      <anchor>a02a06dbaf1317f943a10cb0a1367e9e4</anchor>
      <arglist>(VectorDynSize &amp;measurementVector) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setMeasurement</name>
      <anchorfile>classiDynTree_1_1SensorsMeasurements.html</anchorfile>
      <anchor>af5c7e1944c7532fca48fdd6b2e624fb9</anchor>
      <arglist>(const SensorType &amp;sensor_type, const unsigned int &amp;sensor_index, const iDynTree::Wrench &amp;measurement)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setMeasurement</name>
      <anchorfile>classiDynTree_1_1SensorsMeasurements.html</anchorfile>
      <anchor>ac12f7e66d6c2bfae42c6c5409f5d0d9f</anchor>
      <arglist>(const SensorType &amp;sensor_type, const unsigned int &amp;sensor_index, const iDynTree::LinAcceleration &amp;measurement)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setMeasurement</name>
      <anchorfile>classiDynTree_1_1SensorsMeasurements.html</anchorfile>
      <anchor>aa74ce1d6236eee846dc4dc9f3d43010f</anchor>
      <arglist>(const SensorType &amp;sensor_type, const unsigned int &amp;sensor_index, const iDynTree::AngVelocity &amp;measurement)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setMeasurement</name>
      <anchorfile>classiDynTree_1_1SensorsMeasurements.html</anchorfile>
      <anchor>a132385eac8da9b1e6568ea9168998e10</anchor>
      <arglist>(const SensorType &amp;sensor_type, const unsigned int &amp;sensor_index, const Vector3 &amp;measurement)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getMeasurement</name>
      <anchorfile>classiDynTree_1_1SensorsMeasurements.html</anchorfile>
      <anchor>ad7aff5a095a5e80757f5ae75b19debe9</anchor>
      <arglist>(const SensorType &amp;sensor_type, const unsigned int &amp;sensor_index, iDynTree::Wrench &amp;measurement) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getMeasurement</name>
      <anchorfile>classiDynTree_1_1SensorsMeasurements.html</anchorfile>
      <anchor>ade55e45bb10a50feb546847961050180</anchor>
      <arglist>(const SensorType &amp;sensor_type, const unsigned int &amp;sensor_index, iDynTree::LinAcceleration &amp;measurement) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getMeasurement</name>
      <anchorfile>classiDynTree_1_1SensorsMeasurements.html</anchorfile>
      <anchor>aa8c3872fc050cf1e6f6e493f0940c82b</anchor>
      <arglist>(const SensorType &amp;sensor_type, const unsigned int &amp;sensor_index, iDynTree::AngVelocity &amp;measurement) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getMeasurement</name>
      <anchorfile>classiDynTree_1_1SensorsMeasurements.html</anchorfile>
      <anchor>a3045c33d34f03b937835c6d07d99be03</anchor>
      <arglist>(const SensorType &amp;sensor_type, const unsigned int &amp;sensor_index, Vector3 &amp;measurement) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSizeOfAllSensorsMeasurements</name>
      <anchorfile>classiDynTree_1_1SensorsMeasurements.html</anchorfile>
      <anchor>a89704247187588c99da74ed64f810094</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::SensorsMeasurements::SensorsMeasurementsPrivateAttributes</name>
    <filename>structiDynTree_1_1SensorsMeasurements_1_1SensorsMeasurementsPrivateAttributes.html</filename>
    <member kind="variable">
      <type>std::vector&lt; iDynTree::Wrench &gt;</type>
      <name>SixAxisFTSensorsMeasurements</name>
      <anchorfile>structiDynTree_1_1SensorsMeasurements_1_1SensorsMeasurementsPrivateAttributes.html</anchorfile>
      <anchor>a53c6f9c59b2ee5f21968d15caf7c723e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; iDynTree::AngVelocity &gt;</type>
      <name>GyroscopeMeasurements</name>
      <anchorfile>structiDynTree_1_1SensorsMeasurements_1_1SensorsMeasurementsPrivateAttributes.html</anchorfile>
      <anchor>a37eadaa70281aa49dd86ac3824738474</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; iDynTree::LinAcceleration &gt;</type>
      <name>AccelerometerMeasurements</name>
      <anchorfile>structiDynTree_1_1SensorsMeasurements_1_1SensorsMeasurementsPrivateAttributes.html</anchorfile>
      <anchor>a921db6f5962e584d5d5f1daae54e0a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Vector3 &gt;</type>
      <name>ThreeAxisAngularAccelerometerMeasurements</name>
      <anchorfile>structiDynTree_1_1SensorsMeasurements_1_1SensorsMeasurementsPrivateAttributes.html</anchorfile>
      <anchor>ac4700a8fcb270bb44a954205334246a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Vector3 &gt;</type>
      <name>ThreeAxisForceTorqueContactMeasurements</name>
      <anchorfile>structiDynTree_1_1SensorsMeasurements_1_1SensorsMeasurementsPrivateAttributes.html</anchorfile>
      <anchor>af2068d2b71ca432c8270a70fe2919de4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::optimization::SharedData</name>
    <filename>structiDynTree_1_1optimization_1_1SharedData.html</filename>
    <member kind="variable">
      <type>std::shared_ptr&lt; OptimizationProblem &gt;</type>
      <name>problem</name>
      <anchorfile>structiDynTree_1_1optimization_1_1SharedData.html</anchorfile>
      <anchor>af518af18c7b80f6f05b3cdaa4ddd54fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; size_t, ConstraintInfo &gt;</type>
      <name>expandedToOriginalInequalities</name>
      <anchorfile>structiDynTree_1_1optimization_1_1SharedData.html</anchorfile>
      <anchor>ac44c2e8b2b5a3542b635f688ca0a07b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; size_t, ConstraintInfo &gt;</type>
      <name>expandedToOriginalEqualities</name>
      <anchorfile>structiDynTree_1_1optimization_1_1SharedData.html</anchorfile>
      <anchor>af1672a1c7f7f085d4158b9c8e0f94f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>variablesBuffer</name>
      <anchorfile>structiDynTree_1_1optimization_1_1SharedData.html</anchorfile>
      <anchor>a8eee65f9ed58941b5be85ef092233d8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>costJacobianBuffer</name>
      <anchorfile>structiDynTree_1_1optimization_1_1SharedData.html</anchorfile>
      <anchor>a40e67565ee3b2479cf0c1a9292e7b114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>constraintsBuffer</name>
      <anchorfile>structiDynTree_1_1optimization_1_1SharedData.html</anchorfile>
      <anchor>a6edb0674e0a67c46d293d1d9637d3ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixDynSize</type>
      <name>constraintJacobian</name>
      <anchorfile>structiDynTree_1_1optimization_1_1SharedData.html</anchorfile>
      <anchor>a8849ce5d425c518ddfd1c914907e964a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixDynSize</type>
      <name>zeroMatrix</name>
      <anchorfile>structiDynTree_1_1optimization_1_1SharedData.html</anchorfile>
      <anchor>a58fc248cff5c940be70fb2a0a4191c0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixDynSize</type>
      <name>jacBuffer</name>
      <anchorfile>structiDynTree_1_1optimization_1_1SharedData.html</anchorfile>
      <anchor>a34a107092f7c55e3d2a1bf85c9dd0d62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SimpleLeggedOdometry</name>
    <filename>classiDynTree_1_1SimpleLeggedOdometry.html</filename>
    <member kind="function">
      <type></type>
      <name>SimpleLeggedOdometry</name>
      <anchorfile>classiDynTree_1_1SimpleLeggedOdometry.html</anchorfile>
      <anchor>a189c13e9ff5d64f3b8b05034f7cedb64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleLeggedOdometry</name>
      <anchorfile>classiDynTree_1_1SimpleLeggedOdometry.html</anchorfile>
      <anchor>a6bacff4fe44806f3c951d952ff3374c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setModel</name>
      <anchorfile>classiDynTree_1_1SimpleLeggedOdometry.html</anchorfile>
      <anchor>a98d2477422589b8c6db8aa8b9a251bd6</anchor>
      <arglist>(const Model &amp;_model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadModelFromFile</name>
      <anchorfile>classiDynTree_1_1SimpleLeggedOdometry.html</anchorfile>
      <anchor>a6d646ff88863070b03bf291d4ca743d9</anchor>
      <arglist>(const std::string filename, const std::string filetype=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadModelFromFileWithSpecifiedDOFs</name>
      <anchorfile>classiDynTree_1_1SimpleLeggedOdometry.html</anchorfile>
      <anchor>a17e45d228ca407f8694dd9333d6ebeb8</anchor>
      <arglist>(const std::string filename, const std::vector&lt; std::string &gt; &amp;consideredDOFs, const std::string filetype=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const Model &amp;</type>
      <name>model</name>
      <anchorfile>classiDynTree_1_1SimpleLeggedOdometry.html</anchorfile>
      <anchor>ab4efd7936d325e26266bad2c3970a7dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateKinematics</name>
      <anchorfile>classiDynTree_1_1SimpleLeggedOdometry.html</anchorfile>
      <anchor>a78a57dc95b9f1fa55c04a46d3d9b22dd</anchor>
      <arglist>(JointPosDoubleArray &amp;jointPos)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>classiDynTree_1_1SimpleLeggedOdometry.html</anchorfile>
      <anchor>a847b99153a839d0a49d64f04c8a9c49d</anchor>
      <arglist>(const std::string &amp;initialFixedFrame, const Transform initialFixedFrame_H_world=Transform::Identity())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>classiDynTree_1_1SimpleLeggedOdometry.html</anchorfile>
      <anchor>a6452e51cce27c452f145a93e5a172320</anchor>
      <arglist>(const FrameIndex initialFixedFrameIndex, const Transform initialFixedFrame_H_world=Transform::Identity())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>classiDynTree_1_1SimpleLeggedOdometry.html</anchorfile>
      <anchor>a178be52aa8212fd7738c477b634ce5e8</anchor>
      <arglist>(const std::string &amp;initialFixedFrame, const std::string &amp;initialReferenceFrameForWorld, const Transform initialReferenceFrame_H_world=Transform::Identity())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>classiDynTree_1_1SimpleLeggedOdometry.html</anchorfile>
      <anchor>a5b928f1cc685b759241d4a17cc2658ec</anchor>
      <arglist>(const FrameIndex initialFixedFrameIndex, const FrameIndex initialReferenceFrameIndexForWorld, const Transform initialReferenceFrame_H_world=Transform::Identity())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeFixedFrame</name>
      <anchorfile>classiDynTree_1_1SimpleLeggedOdometry.html</anchorfile>
      <anchor>ade993eaed828dd9bd464cfc7c5eebee3</anchor>
      <arglist>(const std::string &amp;newFixedFrame)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeFixedFrame</name>
      <anchorfile>classiDynTree_1_1SimpleLeggedOdometry.html</anchorfile>
      <anchor>afa2880fc26e63213a98943041578d34d</anchor>
      <arglist>(const FrameIndex newFixedFrame)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeFixedFrame</name>
      <anchorfile>classiDynTree_1_1SimpleLeggedOdometry.html</anchorfile>
      <anchor>aaf23541001dd123e74c42ba44d8f48e6</anchor>
      <arglist>(const std::string &amp;newFixedFrame, const Transform &amp;world_H_newFixedFrame)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeFixedFrame</name>
      <anchorfile>classiDynTree_1_1SimpleLeggedOdometry.html</anchorfile>
      <anchor>a8e8e64afca6ad056a22a1c245e68a0d8</anchor>
      <arglist>(const FrameIndex newFixedFrame, const Transform &amp;world_H_newFixedFrame)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getCurrentFixedLink</name>
      <anchorfile>classiDynTree_1_1SimpleLeggedOdometry.html</anchorfile>
      <anchor>af4eba0d4270edf9a45b3057e3591dac5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Transform</type>
      <name>getWorldLinkTransform</name>
      <anchorfile>classiDynTree_1_1SimpleLeggedOdometry.html</anchorfile>
      <anchor>a7384158b08bdae95c1d3d1fde2bcddf7</anchor>
      <arglist>(const LinkIndex frame_index)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Transform</type>
      <name>getWorldFrameTransform</name>
      <anchorfile>classiDynTree_1_1SimpleLeggedOdometry.html</anchorfile>
      <anchor>a12c8738d977e4ccf31ea3a214f8b661e</anchor>
      <arglist>(const FrameIndex frame_index)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SixAxisForceTorqueSensor</name>
    <filename>classiDynTree_1_1SixAxisForceTorqueSensor.html</filename>
    <base>iDynTree::JointSensor</base>
    <class kind="struct">iDynTree::SixAxisForceTorqueSensor::SixAxisForceTorqueSensorPrivateAttributes</class>
    <member kind="function">
      <type></type>
      <name>SixAxisForceTorqueSensor</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a549b0f51072a81d6f49cfcdb825b8ee5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SixAxisForceTorqueSensor</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a22e3fcd77b77f1bf9c938d301fd8ae17</anchor>
      <arglist>(const SixAxisForceTorqueSensor &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SixAxisForceTorqueSensor &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>ade18ffe1e41f7a25b69d13c2bd12d7cd</anchor>
      <arglist>(const SixAxisForceTorqueSensor &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SixAxisForceTorqueSensor</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a4618a5bc37289c80bbe7d3df1d8fedd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setName</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a445a69b12f7ae15e85e189cecb37a984</anchor>
      <arglist>(const std::string &amp;_name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFirstLinkSensorTransform</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a62eafe07143eac9c5e236a3a206bb4b6</anchor>
      <arglist>(const int link_index, const iDynTree::Transform &amp;link_H_sensor) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setSecondLinkSensorTransform</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>ae7fe249cfe2f618e1f536f745fe9c367</anchor>
      <arglist>(const int link_index, const iDynTree::Transform &amp;link_H_sensor) const</arglist>
    </member>
    <member kind="function">
      <type>LinkIndex</type>
      <name>getFirstLinkIndex</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a2add205093853d5a98622f0213c74d55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinkIndex</type>
      <name>getSecondLinkIndex</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>aeee5343108cf96ad80d76e17719aefa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setFirstLinkName</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a4023a4689e7be9c6ca254f5beff2a8d6</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setSecondLinkName</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>ab5e8f251429697fc14ce57b4ae9be8d2</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getFirstLinkName</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a292081038cae5fc474ceebe27117c1ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getSecondLinkName</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>afb8fea77a956d20cfbb991bc88e36940</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setParentJoint</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>afa9c0da7093f9509d3ca71c6d3079a34</anchor>
      <arglist>(const std::string &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setParentJointIndex</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>ab5419597baafc250e6b7971b601001e5</anchor>
      <arglist>(const int &amp;parent_index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAppliedWrenchLink</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a029a2d45f6f3f999311600fe837022f1</anchor>
      <arglist>(const int applied_wrench_index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a973fc334d1ae6e08d6d189f260a79acf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SensorType</type>
      <name>getSensorType</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a0e7919d76cf8126f0e270bad03d7d70b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParentJoint</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a1dd7d0316793878dac193ebb161879c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JointIndex</type>
      <name>getParentJointIndex</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a3bd2224408b97f1c55aa004804b1236e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a816f6f309557a0f69330dad9879cfc14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Sensor *</type>
      <name>clone</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a6be2276eda2e96a267902840aca8d865</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateIndices</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>ada92c79d908918bf309936c15f6f0f05</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateIndeces</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a0975add05072b183194a4f242198a4ce</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAppliedWrenchLink</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>ae9f8a3ebf3fc767ba142d52c0968c904</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinkAttachedToSensor</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>af1cc90881dff415ae71db77c1a7f5b48</anchor>
      <arglist>(const int link_index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLinkSensorTransform</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>af74762eaf9901e82dddfe2bdac685cae</anchor>
      <arglist>(const int link_index, iDynTree::Transform &amp;link_H_sensor) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getWrenchAppliedOnLink</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>af3393f1e45c0258eca4fd98f51666a08</anchor>
      <arglist>(const int link_index, const iDynTree::Wrench &amp;measured_wrench, iDynTree::Wrench &amp;wrench_applied_on_link) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getWrenchAppliedOnLinkMatrix</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a9f926b5fed9b17da38ab5fb158487b33</anchor>
      <arglist>(const LinkIndex link_index, Matrix6x6 &amp;wrench_applied_on_link_matrix) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getWrenchAppliedOnLinkInverseMatrix</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a978eb446cf0f7b11baab9e866a253566</anchor>
      <arglist>(const LinkIndex link_index, Matrix6x6 &amp;wrench_applied_on_link_inverse_matrix) const</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Wrench</type>
      <name>predictMeasurement</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>a36149dbb791abdecd3751d5073268a6f</anchor>
      <arglist>(const Traversal &amp;traversal, const LinkInternalWrenches &amp;intWrenches)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SixAxisForceTorqueSensor.html</anchorfile>
      <anchor>af767a41c2680e4bd6af1159f58ab249a</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1JointSensor.html</anchorfile>
      <anchor>a66db330971a8de5fb7bb4503508a44fe</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::SixAxisForceTorqueSensor::SixAxisForceTorqueSensorPrivateAttributes</name>
    <filename>structiDynTree_1_1SixAxisForceTorqueSensor_1_1SixAxisForceTorqueSensorPrivateAttributes.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structiDynTree_1_1SixAxisForceTorqueSensor_1_1SixAxisForceTorqueSensorPrivateAttributes.html</anchorfile>
      <anchor>a7644fd59a71c8eca8c2a877e47e6c0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkIndex</type>
      <name>link1</name>
      <anchorfile>structiDynTree_1_1SixAxisForceTorqueSensor_1_1SixAxisForceTorqueSensorPrivateAttributes.html</anchorfile>
      <anchor>a8c15832f4003a3f452af83513f77bbc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkIndex</type>
      <name>link2</name>
      <anchorfile>structiDynTree_1_1SixAxisForceTorqueSensor_1_1SixAxisForceTorqueSensorPrivateAttributes.html</anchorfile>
      <anchor>ad53a261b9f2517bc568be7ff219a4715</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkIndex</type>
      <name>appliedWrenchLink</name>
      <anchorfile>structiDynTree_1_1SixAxisForceTorqueSensor_1_1SixAxisForceTorqueSensorPrivateAttributes.html</anchorfile>
      <anchor>ae755575a931f8bba248227763df4e8b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform</type>
      <name>link1_H_sensor</name>
      <anchorfile>structiDynTree_1_1SixAxisForceTorqueSensor_1_1SixAxisForceTorqueSensorPrivateAttributes.html</anchorfile>
      <anchor>a8188104b4c8c7218e4f2e0e2a86785b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform</type>
      <name>link2_H_sensor</name>
      <anchorfile>structiDynTree_1_1SixAxisForceTorqueSensor_1_1SixAxisForceTorqueSensorPrivateAttributes.html</anchorfile>
      <anchor>a0763a8f1e57106ea23de665d2a15345f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JointIndex</type>
      <name>parent_junction_index</name>
      <anchorfile>structiDynTree_1_1SixAxisForceTorqueSensor_1_1SixAxisForceTorqueSensorPrivateAttributes.html</anchorfile>
      <anchor>a9af31e61323702c4acb773374ae38a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>parent_junction_name</name>
      <anchorfile>structiDynTree_1_1SixAxisForceTorqueSensor_1_1SixAxisForceTorqueSensorPrivateAttributes.html</anchorfile>
      <anchor>a2fbfdd67af68b91b820e25f46a788d7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>link1Name</name>
      <anchorfile>structiDynTree_1_1SixAxisForceTorqueSensor_1_1SixAxisForceTorqueSensorPrivateAttributes.html</anchorfile>
      <anchor>af47304d771206040348b3da9b63259fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>link2Name</name>
      <anchorfile>structiDynTree_1_1SixAxisForceTorqueSensor_1_1SixAxisForceTorqueSensorPrivateAttributes.html</anchorfile>
      <anchor>a702d678c75d5c6fcf18b92be5d3ff191</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::skinDynLibConversionsHelper</name>
    <filename>classiDynTree_1_1skinDynLibConversionsHelper.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>addSkinDynLibAlias</name>
      <anchorfile>classiDynTree_1_1skinDynLibConversionsHelper.html</anchorfile>
      <anchor>a43bea15e71e84b0012407c758e3053a0</anchor>
      <arglist>(const Model &amp;model, const std::string iDynTree_link_name, const std::string iDynTree_frame_name, const int skinDynLib_body_part, const int skinDynLib_link_index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSkinDynLibAlias</name>
      <anchorfile>classiDynTree_1_1skinDynLibConversionsHelper.html</anchorfile>
      <anchor>a55341267530b46337d2e359eb875de51</anchor>
      <arglist>(const Model &amp;model, const std::string iDynTree_link_name, std::string &amp;iDynTree_frame_name, int &amp;skinDynLib_body_part, int &amp;skinDynLib_link_index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSkinDynLibAlias</name>
      <anchorfile>classiDynTree_1_1skinDynLibConversionsHelper.html</anchorfile>
      <anchor>ab87403caac882c9629cec31ff415400f</anchor>
      <arglist>(const Model &amp;model, const LinkIndex iDynTree_link_index, LinkIndex &amp;iDynTree_frame_index, int &amp;skinDynLib_body_part, int &amp;skinDynLib_link_index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skinDynLib2iDynTree</name>
      <anchorfile>classiDynTree_1_1skinDynLibConversionsHelper.html</anchorfile>
      <anchor>a191a5e18b9637cfac6cc94e33037de67</anchor>
      <arglist>(const int skinDynLib_body_part, const int skinDynLib_link_index, int &amp;iDynTree_link_index, int &amp;iDynTree_frame_index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeSkinDynLibAlias</name>
      <anchorfile>classiDynTree_1_1skinDynLibConversionsHelper.html</anchorfile>
      <anchor>a4fef354b543feefb5de09d5fc77b4ce1</anchor>
      <arglist>(const Model &amp;model, const std::string linkName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromSkinDynLibToiDynTree</name>
      <anchorfile>classiDynTree_1_1skinDynLibConversionsHelper.html</anchorfile>
      <anchor>a3d45ff7de330afbaedd94d07d1abf840</anchor>
      <arglist>(const Model &amp;model, const iCub::skinDynLib::dynContactList &amp;dynList, LinkUnknownWrenchContacts &amp;unknowns)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromSkinDynLibToiDynTree</name>
      <anchorfile>classiDynTree_1_1skinDynLibConversionsHelper.html</anchorfile>
      <anchor>a72db7b0625839e6556ef3b2d8dcd024f</anchor>
      <arglist>(const Model &amp;model, const iCub::skinDynLib::skinContactList &amp;skinList, LinkUnknownWrenchContacts &amp;unknowns)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromiDynTreeToSkinDynLib</name>
      <anchorfile>classiDynTree_1_1skinDynLibConversionsHelper.html</anchorfile>
      <anchor>aa6c96e112f58f04fb79c95e27bac5d47</anchor>
      <arglist>(const Model &amp;model, const LinkContactWrenches &amp;contactWrenches, iCub::skinDynLib::dynContactList &amp;dynList)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateSkinContactListFromLinkContactWrenches</name>
      <anchorfile>classiDynTree_1_1skinDynLibConversionsHelper.html</anchorfile>
      <anchor>accc52dda49d5c917cea780fdde35a3cd</anchor>
      <arglist>(const Model &amp;model, const LinkContactWrenches &amp;contactWrenches, iCub::skinDynLib::skinContactList &amp;skinContactListToUpdate)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::skinDynLibLinkID</name>
    <filename>classiDynTree_1_1skinDynLibLinkID.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiDynTree_1_1skinDynLibLinkID.html</anchorfile>
      <anchor>aacad409a5592c988a93a60e54c109b1d</anchor>
      <arglist>(const skinDynLibLinkID &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1skinDynLibLinkID.html</anchorfile>
      <anchor>a5387b3b9594e5d1b09006e844b8f0b9e</anchor>
      <arglist>(const skinDynLibLinkID &amp;k) const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>body_part</name>
      <anchorfile>classiDynTree_1_1skinDynLibLinkID.html</anchorfile>
      <anchor>af650c500de48fcacfc9618255f9c1a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>local_link_index</name>
      <anchorfile>classiDynTree_1_1skinDynLibLinkID.html</anchorfile>
      <anchor>a9647fd6dd263bd8d4217c50be892e962</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SolidShape</name>
    <filename>classiDynTree_1_1SolidShape.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~SolidShape</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a4e75798889f88e1acf4e82e667fa4463</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SolidShape *</type>
      <name>clone</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a0e17798de0579d18260b629fdd8b09a8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSphere</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a8ba065f0e60ad78baad071a3a870faf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBox</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a661c33c6139a4cde9c9eeb55ebcd915e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCylinder</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a8218783b444c4f651ebc5517399a04bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExternalMesh</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>aeef66627d452a2b192c9d62ac6e6b908</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Sphere *</type>
      <name>asSphere</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a99663faed75dfd72d0d89cc4bed840d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Box *</type>
      <name>asBox</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a45e488bee1b295013389a7c67a5512f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cylinder *</type>
      <name>asCylinder</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>ac1a4e162221fb08c270af4d0424b86b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ExternalMesh *</type>
      <name>asExternalMesh</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a87e9c96203f414d82a09ea4c391f1d88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Sphere *</type>
      <name>asSphere</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a720d8b9d4d78dc3ae961e0c9f0529465</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Box *</type>
      <name>asBox</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a4ea5d8b8ea2e334c1edecc390ca2e06c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Cylinder *</type>
      <name>asCylinder</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>ac6ba4dbcf0b0a10b8f09689d85842515</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ExternalMesh *</type>
      <name>asExternalMesh</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a6ed24fecde411acdfc1d1c6cfdaa4330</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a5026e44f557e25b407642e95dd7bbb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>nameIsValid</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>adca1aa44db797c0122b0479b2a65ff9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform</type>
      <name>link_H_geometry</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a8be2a1e24878ac8de853123219a6ac64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector4</type>
      <name>material</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a61f1577ee526add690666ad2e07e21c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::integrators::SolutionElement</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1integrators_1_1SolutionElement.html</filename>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>stateAtT</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1SolutionElement.html</anchorfile>
      <anchor>a1d874717c6479a5c043b1cac0e4489f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>time</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1integrators_1_1SolutionElement.html</anchorfile>
      <anchor>a0012c763c79c5c2e212bbfc30dca8f64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Span</name>
    <filename>classiDynTree_1_1Span.html</filename>
    <templarg></templarg>
    <templarg>Extent</templarg>
    <member kind="typedef">
      <type>ElementType</type>
      <name>element_type</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a70db7c45968e3bd56ca981811e237f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; ElementType &gt;</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a731b2a8e595a3b6e03df9c843856d7c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>index_type</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a5f39b58d1f1f24fa826e8afed2f0a47d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>element_type *</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a36b24ad88f7035362135d713f5210caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>element_type &amp;</type>
      <name>reference</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>ae2642271b87b800d7233fa17d521e1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>details::span_iterator&lt; Span&lt; ElementType, Extent &gt;, false &gt;</type>
      <name>iterator</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a756d7b9397c34924e72785d050024b2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>details::span_iterator&lt; Span&lt; ElementType, Extent &gt;, true &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>aa7f215f49b5509cc0be76c103716698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>ad03f65546eccd46d2866a12d9eea6aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a6c64cd168935d8f52052a6d37c6088a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_type</type>
      <name>size_type</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a679606e2b5ef53d99bb437b9b42f51d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>Span</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>aabd75312c3d9dd990f75c924b62e0994</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>Span</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>ad91a5ef1ecfacfd0f1bc8c549ec6eb2a</anchor>
      <arglist>(pointer ptr, index_type count)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>Span</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a9c962214e112e643a0f4898e2455ed85</anchor>
      <arglist>(pointer firstElem, pointer lastElem)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>Span</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a1fbbfad7a9b0967334d878cd3c68a7f6</anchor>
      <arglist>(element_type(&amp;arr)[N]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>Span</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a8e5b0b1eb6ae07cc346c1358e82c162d</anchor>
      <arglist>(std::array&lt; ArrayElementType, N &gt; &amp;arr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>Span</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a24a3f7b3832c3a78bf42529776960db6</anchor>
      <arglist>(const std::array&lt; std::remove_const_t&lt; element_type &gt;, N &gt; &amp;arr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>Span</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>aae7fac87b82c44524b67bca5e6a98bfd</anchor>
      <arglist>(Container &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>Span</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>afedf7aaf714bef1be9c70590340655c8</anchor>
      <arglist>(const Container &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>Span</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a2f5eb3aa82cd1bd72f8d90b5e6653a50</anchor>
      <arglist>(const Span &amp;other) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>Span</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a537095cae4195e7f8653c99f4b90d41e</anchor>
      <arglist>(const Span&lt; OtherElementType, OtherExtent &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Span</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a96e1b612c73489bc0543e1b281348d03</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a210a813bcd52fcfbf12997430237b533</anchor>
      <arglist>(const Span &amp;other) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; element_type, Count &gt;</type>
      <name>first</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a8adb813162ff11a568a0fdc425e492d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; element_type, Count &gt;</type>
      <name>last</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a18120c4d63ac40bb3490edfb6ceb226e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR auto</type>
      <name>subspan</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a7586e4325dd1765618d301ce4551682a</anchor>
      <arglist>() const -&gt; typename details::calculate_subspan_type&lt; ElementType, Extent, Offset, Count &gt;::type</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; element_type, dynamic_extent &gt;</type>
      <name>first</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a21d66395cac09a76a56d9d230d5bfc26</anchor>
      <arglist>(index_type count) const</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; element_type, dynamic_extent &gt;</type>
      <name>last</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a640d4ee52e067a94dc1de648f79c5edc</anchor>
      <arglist>(index_type count) const</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; element_type, dynamic_extent &gt;</type>
      <name>subspan</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a982781643e6a4a5a5ea31c6013bebde5</anchor>
      <arglist>(index_type offset, index_type count=dynamic_extent) const</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR index_type</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>af304ba80cabe3c1a7d00f1cbb81b803f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR index_type</type>
      <name>size_bytes</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>aba35de3ae6d57c9fb20a8f801060b90b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR bool</type>
      <name>empty</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a1666613569f4e2f24db16a112a41c8e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR reference</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>af79f016b2ac1e691005cc20ebdd179ba</anchor>
      <arglist>(index_type idx) const</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>aa9ffc2e79aaa1fb7113cb47493811806</anchor>
      <arglist>(index_type idx) const</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a6a61c6089c1b64c468a7cddd612dc0c9</anchor>
      <arglist>(index_type idx, double val)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR reference</type>
      <name>at</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>ac7629c2d787e91ae8501db3c5699428b</anchor>
      <arglist>(index_type idx) const</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR reference</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>ab50f91a19ed1d88f7bb10367fa59412e</anchor>
      <arglist>(index_type idx) const</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR pointer</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a348108e3280c4ef8c8e3ec35d4f6d7bf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR iterator</type>
      <name>begin</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a3ffa753817b222a0f9c83232f4c5c141</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR iterator</type>
      <name>end</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>afb67f31bc6c4da128044733f940b7e55</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a56af802b85a3ad0aea91e63f117c05b7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR const_iterator</type>
      <name>cend</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a81c64d2257e3e0f665e06168ea941b45</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a700dd4216eb5a5fccc6aaa7751c46abd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a373be1ad1db1e1f4c8ebd87d838c0dc6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>ab79906017e317d4147909338f2705649</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a3da51a5c1535128edd711b64325511fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr const index_type</type>
      <name>extent</name>
      <anchorfile>classiDynTree_1_1Span.html</anchorfile>
      <anchor>a769d61d5d758537d47cabfd3a3074858</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::details::span_iterator</name>
    <filename>classiDynTree_1_1details_1_1span__iterator.html</filename>
    <templarg></templarg>
    <templarg>IsConst</templarg>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>afda7d38dfbe62ea4fca71096f325231e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; element_type_ &gt;</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>a5a2a55b8c402d3715799c8f25c981511</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Span::index_type</type>
      <name>difference_type</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>a95e7743424aa2a3bff3ca571d56e610f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; IsConst, const element_type_, element_type_ &gt; &amp;</type>
      <name>reference</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>a03af8487e423c4cc728c1dc1f7f7bdd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::add_pointer_t&lt; reference &gt;</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>ac362fa94544278396d257bf2cf2f0045</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>span_iterator</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>aa51d1f641fc61475b619084f9d1cd1e2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>span_iterator</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>a2dfbc9599010de35cf909f2df7781108</anchor>
      <arglist>(const Span *span, typename Span::index_type idx) noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR</type>
      <name>span_iterator</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>abc721637e9cb5fa1d18bbb6b38712143</anchor>
      <arglist>(const span_iterator&lt; Span, B &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR reference</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>ae93c3126a4cafed6df5a4a7ece791693</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>aedf22b1a1e80d35c8a3d993f747f9c1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR span_iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>abc5424d3ee57f8ab6fcc1217637a2849</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR span_iterator</type>
      <name>operator++</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>a7a249673db7494b11ad49f3c4397f5e9</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR span_iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>a76fb6fcf233057cb310a320fd8c65f15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR span_iterator</type>
      <name>operator--</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>a71e04527506cb19aae503bbb0ec1f792</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR span_iterator</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>a2d597dc838b857055b0d02ede27a9ea3</anchor>
      <arglist>(difference_type n) const</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR span_iterator &amp;</type>
      <name>operator+=</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>a94f2bc0df554d18745d65c0d1261621e</anchor>
      <arglist>(difference_type n)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR span_iterator</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>af9a6c1dcb6d10b55500a36f465a5913f</anchor>
      <arglist>(difference_type n) const</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR span_iterator &amp;</type>
      <name>operator-=</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>af7cae232b80bf2b2f69e44bab09036dc</anchor>
      <arglist>(difference_type n)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR difference_type</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>ae73116a84ec75e5b9de7108a762a555e</anchor>
      <arglist>(span_iterator rhs) const</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR reference</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>a5e795510a6ac876761874c68fa1b6d5b</anchor>
      <arglist>(difference_type n) const</arglist>
    </member>
    <member kind="variable">
      <type>friend</type>
      <name>span_iterator&lt; Span, true &gt;</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>a955ef508deb0f59ccb1b7da91579c971</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Span *</type>
      <name>span_</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>ae61e8342b21ed93b8dc40c209b996aa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ptrdiff_t</type>
      <name>index_</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>ae7c97626fbc07c1011a157af897d1c6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>IDYNTREE_CONSTEXPR friend bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>a7d6d902c87892c3fbb0a3bcf58181c1c</anchor>
      <arglist>(span_iterator lhs, span_iterator rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>IDYNTREE_CONSTEXPR friend bool</type>
      <name>operator!=</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>ad1bb528178e666c9a7ba8e20f92bad8c</anchor>
      <arglist>(span_iterator lhs, span_iterator rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>IDYNTREE_CONSTEXPR friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>a9c9a598e0cd1212f4dd10d7a155be54c</anchor>
      <arglist>(span_iterator lhs, span_iterator rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>IDYNTREE_CONSTEXPR friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>ae6b274e7652a76915dc3142aa1f553d2</anchor>
      <arglist>(span_iterator lhs, span_iterator rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>IDYNTREE_CONSTEXPR friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>abe582aeb4c23c757830fe556b7222104</anchor>
      <arglist>(span_iterator lhs, span_iterator rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>IDYNTREE_CONSTEXPR friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classiDynTree_1_1details_1_1span__iterator.html</anchorfile>
      <anchor>adc91f255205e954804b88018f4b78ea4</anchor>
      <arglist>(span_iterator lhs, span_iterator rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SparseMatrix</name>
    <filename>classiDynTree_1_1SparseMatrix.html</filename>
    <templarg>ordering</templarg>
    <class kind="class">iDynTree::SparseMatrix::ConstIterator</class>
    <class kind="class">iDynTree::SparseMatrix::Iterator</class>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a24f2ff77f8a365363a8e653aa0eb4fc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>ac0c797f9d94c6c57f2960b171979e653</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a7f47cbee94400a310cee00c87b54ae8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a54894d1be0767574d10929f70e1ff7a8</anchor>
      <arglist>(unsigned rows, unsigned cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>aaea8575a049e60fc9e94614a820dd8c0</anchor>
      <arglist>(unsigned rows, unsigned cols, const iDynTree::VectorDynSize &amp;memoryReserveDescription)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a5b69f06f3e4a624b72a7f20efc4d17cf</anchor>
      <arglist>(const SparseMatrix&lt; otherOrdering &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>SparseMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>af4b703b6aed159a4c435b28caca49b12</anchor>
      <arglist>(const SparseMatrix&lt; otherOrdering &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseMatrix</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>abfbbcd22a139de15a170835299116f30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>numberOfNonZeros</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a7bc60d24408cfad239974c6a5e7a2414</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a4eadfff1e443aabc936da17d518c1f42</anchor>
      <arglist>(unsigned rows, unsigned columns)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a0c288232b9e39709c0cbe46c41213e71</anchor>
      <arglist>(unsigned rows, unsigned columns, const iDynTree::VectorDynSize &amp;innerIndicesInformation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>ade0ae9bb23f8bdf694a07a68bbe92126</anchor>
      <arglist>(unsigned nonZeroElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a08e7b1d008307f13ae8513746f29d85c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromConstTriplets</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a48cb8c9c1703b5746d70051ebbfe548e</anchor>
      <arglist>(const iDynTree::Triplets &amp;triplets)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a29ee8a8299132878d559670986295057</anchor>
      <arglist>(iDynTree::Triplets &amp;triplets)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a113c836be6b80aae32d324034d1ee674</anchor>
      <arglist>(unsigned row, unsigned col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a47f1431750f9f6b5df2e649b2730416e</anchor>
      <arglist>(unsigned row, unsigned col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getValue</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a8b6e7564a3a420c07eed89becba69d0d</anchor>
      <arglist>(unsigned row, unsigned col) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>adec5267f53b50f5d8e810b79130969e8</anchor>
      <arglist>(unsigned row, unsigned col, double newValue)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>ae98c5de756d1758294780abec959040a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>columns</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a290d32b2e87f37b35c41bfd55c39dde4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>valuesBuffer</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a1f567b280ef9ed9408f19b1fe113253b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double const  *</type>
      <name>valuesBuffer</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a37a3326adea2ce8c138125152445f1ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>innerIndicesBuffer</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>ad611077d4bd896426a1e502beec55d37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int const  *</type>
      <name>innerIndicesBuffer</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a9154a6505753fa0d9649702f0c7f17fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>outerIndicesBuffer</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a83420883523fb333971edc5c248766ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int const  *</type>
      <name>outerIndicesBuffer</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2572da54b82639f57e464ab95691330</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a17fa321f04e7f09c14f162665a850502</anchor>
      <arglist>(bool fullMatrix=false) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>internalDescription</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a4c848a05bea9d0e504e52c09d399572a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a25166bc284e12b6a8878dc1e35cda95e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>af5990fd2e520789e63a435faad7b8818</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a9dd68e99f094d0578696a09617b3820f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a1bf7b26110ef9de2cbb7d4ac66af406b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseMatrix&lt; ordering &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a76a716c779b2cadab8fedf45cd063b7c</anchor>
      <arglist>(const SparseMatrix&lt; otherOrdering &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a596af0d90b16cc15b429ee5a265893b9</anchor>
      <arglist>(unsigned rows, unsigned cols, const iDynTree::VectorDynSize &amp;memoryReserveDescription)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a0258cad647ab60ea711554bfa3a97cd4</anchor>
      <arglist>(unsigned int row, unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a7f98f786864034d47861b774b304733f</anchor>
      <arglist>(unsigned int row, unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a1a1d518ca0e514d7cb77c0294bb717e3</anchor>
      <arglist>(unsigned rows, unsigned columns, const iDynTree::VectorDynSize &amp;columnNNZInformation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a5ece328966076bcf16d645f90a7d94f1</anchor>
      <arglist>(iDynTree::Triplets &amp;triplets)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a64b4e3486d6ba8b68ad800007bd6acef</anchor>
      <arglist>(const SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SparseMatrix&lt; iDynTree::RowMajor &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>afadf6010c836dda07d1960849f96abe4</anchor>
      <arglist>(const SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a85ea5590496b6e38ba32a292eed1aed5</anchor>
      <arglist>(unsigned rows, unsigned cols, const iDynTree::VectorDynSize &amp;memoryReserveDescription)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a9e1021bdc4d196507b0418267c904073</anchor>
      <arglist>(unsigned int row, unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>afbc8599845b2e9406fef3a95ef8bf5c1</anchor>
      <arglist>(unsigned int row, unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a29d241a18347a7a969d6e105832a2efb</anchor>
      <arglist>(unsigned rows, unsigned columns, const iDynTree::VectorDynSize &amp;columnNNZInformation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a22f88020b4af263e180484931f939ca7</anchor>
      <arglist>(iDynTree::Triplets &amp;triplets)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a9acbc68648389534cfe871c6e2d4a85c</anchor>
      <arglist>(const SparseMatrix&lt; iDynTree::RowMajor &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a446943972961b837c353fc92ef59bb1b</anchor>
      <arglist>(const SparseMatrix&lt; iDynTree::RowMajor &gt; &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SparseMatrix</type>
      <name>sparseMatrixFromTriplets</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>acaeba594b7d3ede6eee772017a8b9156</anchor>
      <arglist>(unsigned rows, unsigned cols, const iDynTree::Triplets &amp;nonZeroElements)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrix&lt; iDynTree::ColumnMajor &gt;</name>
    <filename>classiDynTree_1_1SparseMatrix.html</filename>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a24f2ff77f8a365363a8e653aa0eb4fc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>ac0c797f9d94c6c57f2960b171979e653</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a7f47cbee94400a310cee00c87b54ae8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a54894d1be0767574d10929f70e1ff7a8</anchor>
      <arglist>(unsigned rows, unsigned cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>aaea8575a049e60fc9e94614a820dd8c0</anchor>
      <arglist>(unsigned rows, unsigned cols, const iDynTree::VectorDynSize &amp;memoryReserveDescription)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a5b69f06f3e4a624b72a7f20efc4d17cf</anchor>
      <arglist>(const SparseMatrix&lt; otherOrdering &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a596af0d90b16cc15b429ee5a265893b9</anchor>
      <arglist>(unsigned rows, unsigned cols, const iDynTree::VectorDynSize &amp;memoryReserveDescription)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a64b4e3486d6ba8b68ad800007bd6acef</anchor>
      <arglist>(const SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a85ea5590496b6e38ba32a292eed1aed5</anchor>
      <arglist>(unsigned rows, unsigned cols, const iDynTree::VectorDynSize &amp;memoryReserveDescription)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a9acbc68648389534cfe871c6e2d4a85c</anchor>
      <arglist>(const SparseMatrix&lt; iDynTree::RowMajor &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SparseMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>af4b703b6aed159a4c435b28caca49b12</anchor>
      <arglist>(const SparseMatrix&lt; otherOrdering &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>SparseMatrix&lt; ordering &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a76a716c779b2cadab8fedf45cd063b7c</anchor>
      <arglist>(const SparseMatrix&lt; otherOrdering &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SparseMatrix&lt; iDynTree::RowMajor &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>afadf6010c836dda07d1960849f96abe4</anchor>
      <arglist>(const SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a446943972961b837c353fc92ef59bb1b</anchor>
      <arglist>(const SparseMatrix&lt; iDynTree::RowMajor &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseMatrix</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>abfbbcd22a139de15a170835299116f30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>numberOfNonZeros</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a7bc60d24408cfad239974c6a5e7a2414</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a4eadfff1e443aabc936da17d518c1f42</anchor>
      <arglist>(unsigned rows, unsigned columns)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a0c288232b9e39709c0cbe46c41213e71</anchor>
      <arglist>(unsigned rows, unsigned columns, const iDynTree::VectorDynSize &amp;innerIndicesInformation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a1a1d518ca0e514d7cb77c0294bb717e3</anchor>
      <arglist>(unsigned rows, unsigned columns, const iDynTree::VectorDynSize &amp;columnNNZInformation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a29d241a18347a7a969d6e105832a2efb</anchor>
      <arglist>(unsigned rows, unsigned columns, const iDynTree::VectorDynSize &amp;columnNNZInformation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>ade0ae9bb23f8bdf694a07a68bbe92126</anchor>
      <arglist>(unsigned nonZeroElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a08e7b1d008307f13ae8513746f29d85c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromConstTriplets</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a48cb8c9c1703b5746d70051ebbfe548e</anchor>
      <arglist>(const iDynTree::Triplets &amp;triplets)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a29ee8a8299132878d559670986295057</anchor>
      <arglist>(iDynTree::Triplets &amp;triplets)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a5ece328966076bcf16d645f90a7d94f1</anchor>
      <arglist>(iDynTree::Triplets &amp;triplets)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a22f88020b4af263e180484931f939ca7</anchor>
      <arglist>(iDynTree::Triplets &amp;triplets)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a113c836be6b80aae32d324034d1ee674</anchor>
      <arglist>(unsigned row, unsigned col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a47f1431750f9f6b5df2e649b2730416e</anchor>
      <arglist>(unsigned row, unsigned col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a0258cad647ab60ea711554bfa3a97cd4</anchor>
      <arglist>(unsigned int row, unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a7f98f786864034d47861b774b304733f</anchor>
      <arglist>(unsigned int row, unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a9e1021bdc4d196507b0418267c904073</anchor>
      <arglist>(unsigned int row, unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>afbc8599845b2e9406fef3a95ef8bf5c1</anchor>
      <arglist>(unsigned int row, unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getValue</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a8b6e7564a3a420c07eed89becba69d0d</anchor>
      <arglist>(unsigned row, unsigned col) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>adec5267f53b50f5d8e810b79130969e8</anchor>
      <arglist>(unsigned row, unsigned col, double newValue)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>ae98c5de756d1758294780abec959040a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>columns</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a290d32b2e87f37b35c41bfd55c39dde4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>valuesBuffer</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a1f567b280ef9ed9408f19b1fe113253b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double const *</type>
      <name>valuesBuffer</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a37a3326adea2ce8c138125152445f1ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>innerIndicesBuffer</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>ad611077d4bd896426a1e502beec55d37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int const *</type>
      <name>innerIndicesBuffer</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a9154a6505753fa0d9649702f0c7f17fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>outerIndicesBuffer</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a83420883523fb333971edc5c248766ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int const *</type>
      <name>outerIndicesBuffer</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2572da54b82639f57e464ab95691330</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a17fa321f04e7f09c14f162665a850502</anchor>
      <arglist>(bool fullMatrix=false) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>internalDescription</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a4c848a05bea9d0e504e52c09d399572a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a25166bc284e12b6a8878dc1e35cda95e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>af5990fd2e520789e63a435faad7b8818</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a9dd68e99f094d0578696a09617b3820f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>a1bf7b26110ef9de2cbb7d4ac66af406b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SparseMatrix</type>
      <name>sparseMatrixFromTriplets</name>
      <anchorfile>classiDynTree_1_1SparseMatrix.html</anchorfile>
      <anchor>acaeba594b7d3ede6eee772017a8b9156</anchor>
      <arglist>(unsigned rows, unsigned cols, const iDynTree::Triplets &amp;nonZeroElements)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>internal::kinematics::SparsityHelper</name>
    <filename>classinternal_1_1kinematics_1_1SparsityHelper.html</filename>
    <member kind="function">
      <type></type>
      <name>SparsityHelper</name>
      <anchorfile>classinternal_1_1kinematics_1_1SparsityHelper.html</anchorfile>
      <anchor>a46025dfa23bf3ca02bd1ebdee9253111</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparsityHelper</name>
      <anchorfile>classinternal_1_1kinematics_1_1SparsityHelper.html</anchorfile>
      <anchor>a72213cf8926e60d27ae3b37b9e0ee2b6</anchor>
      <arglist>(const SparsityHelper &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>SparsityHelper &amp;</type>
      <name>operator=</name>
      <anchorfile>classinternal_1_1kinematics_1_1SparsityHelper.html</anchorfile>
      <anchor>aad99ca323d055bf5ab1e1dfa29ce6793</anchor>
      <arglist>(const SparsityHelper &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparsityHelper</name>
      <anchorfile>classinternal_1_1kinematics_1_1SparsityHelper.html</anchorfile>
      <anchor>a00f6edd2ba0eb16e4a3069780fec3a04</anchor>
      <arglist>(SparsityHelper &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>SparsityHelper &amp;</type>
      <name>operator=</name>
      <anchorfile>classinternal_1_1kinematics_1_1SparsityHelper.html</anchorfile>
      <anchor>acd284579180fe99c1855c008d88ad32e</anchor>
      <arglist>(SparsityHelper &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classinternal_1_1kinematics_1_1SparsityHelper.html</anchorfile>
      <anchor>a166accf3388929d9690a76365c2f20d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addConstraintSparsityPattern</name>
      <anchorfile>classinternal_1_1kinematics_1_1SparsityHelper.html</anchorfile>
      <anchor>a6b208df3000cb0d2d2490b0cb08b2489</anchor>
      <arglist>(const iDynTree::MatrixDynSize &amp;newConstraint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addConstraintSparsityPattern</name>
      <anchorfile>classinternal_1_1kinematics_1_1SparsityHelper.html</anchorfile>
      <anchor>a99dcd1e84f9214b4a5f77bd813d89bda</anchor>
      <arglist>(const iDynTree::MatrixFixSize&lt; nRows, nCols &gt; &amp;newConstraint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addConstraintSparsityPattern</name>
      <anchorfile>classinternal_1_1kinematics_1_1SparsityHelper.html</anchorfile>
      <anchor>a8b3ee065ee574981db57061005421f16</anchor>
      <arglist>(const iDynTree::MatrixDynSize &amp;newConstraint, const iDynTree::IndexRange &amp;constraintRange)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addConstraintSparsityPattern</name>
      <anchorfile>classinternal_1_1kinematics_1_1SparsityHelper.html</anchorfile>
      <anchor>ae67e37f45fb3a99fd8a57d196fc62e4e</anchor>
      <arglist>(const iDynTree::MatrixFixSize&lt; nRows, nCols &gt; &amp;newConstraint, const iDynTree::IndexRange &amp;constraintRange)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfNonZerosForRow</name>
      <anchorfile>classinternal_1_1kinematics_1_1SparsityHelper.html</anchorfile>
      <anchor>a1c446d2bce1d6a5467e6a9dc71e03874</anchor>
      <arglist>(size_t rowIndex) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfNonZeros</name>
      <anchorfile>classinternal_1_1kinematics_1_1SparsityHelper.html</anchorfile>
      <anchor>ab06c1fd524494a9f573662b197608578</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>totalNumberOfNonZerosBeforeRow</name>
      <anchorfile>classinternal_1_1kinematics_1_1SparsityHelper.html</anchorfile>
      <anchor>a43cb1e0d1525be72e1989569b044dcba</anchor>
      <arglist>(size_t rowIndex) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; size_t &gt; &amp;</type>
      <name>nonZeroIndicesForRow</name>
      <anchorfile>classinternal_1_1kinematics_1_1SparsityHelper.html</anchorfile>
      <anchor>a723c71c49933d7f0c132e974f4c5afac</anchor>
      <arglist>(size_t rowIndex) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignActualMatrixValues</name>
      <anchorfile>classinternal_1_1kinematics_1_1SparsityHelper.html</anchorfile>
      <anchor>aa11d2449f0c659104ddcf8488910a182</anchor>
      <arglist>(const iDynTree::IndexRange &amp;constraintRange, const iDynTree::MatrixDynSize &amp;fullMatrix, size_t fullMatrixStartingRowIndex, Ipopt::Number *outputBuffer)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classinternal_1_1kinematics_1_1SparsityHelper.html</anchorfile>
      <anchor>ae8593fcbf475f77ab3452db4e18fdf9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::vector&lt; size_t &gt; &amp;</type>
      <name>NullIndicesVector</name>
      <anchorfile>classinternal_1_1kinematics_1_1SparsityHelper.html</anchorfile>
      <anchor>a15b7cd4637556327b5d402eecf835e61</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::SparsityStructure</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1SparsityStructure.html</filename>
    <member kind="function">
      <type></type>
      <name>SparsityStructure</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1SparsityStructure.html</anchorfile>
      <anchor>a03d68f374090c437c2a2fb182f14bd2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparsityStructure</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1SparsityStructure.html</anchorfile>
      <anchor>a05bf1a8e84161b24a60e1d1dfb36ce60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>merge</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1SparsityStructure.html</anchorfile>
      <anchor>afcc3a00994da17b5a6fbd70f4764b4f4</anchor>
      <arglist>(const SparsityStructure &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDenseBlock</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1SparsityStructure.html</anchorfile>
      <anchor>a282ae74e664f5b79892ac7b27425f47c</anchor>
      <arglist>(size_t startRow, size_t startColumn, size_t numberOfRows, size_t numberOfColumns)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addDenseBlock</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1SparsityStructure.html</anchorfile>
      <anchor>a5c707f55be1d1a78e7c441d74756fd61</anchor>
      <arglist>(const iDynTree::IndexRange &amp;rowsRange, const iDynTree::IndexRange &amp;columnsRange)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addIdentityBlock</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1SparsityStructure.html</anchorfile>
      <anchor>ad26313a4d7823d298c035aadf25e525b</anchor>
      <arglist>(size_t startRow, size_t startColumn, size_t dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addBlock</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1SparsityStructure.html</anchorfile>
      <anchor>a5a7173cfdc908cf9ec69262dad36e472</anchor>
      <arglist>(size_t startRow, size_t startColumn, const SparsityStructure &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1SparsityStructure.html</anchorfile>
      <anchor>a52b5b33273f4b832c2f0e42546a76c68</anchor>
      <arglist>(size_t newRow, size_t newCol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1SparsityStructure.html</anchorfile>
      <anchor>ad200c17882d5c214615333198f71b01b</anchor>
      <arglist>(NonZero newElement)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValuePresent</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1SparsityStructure.html</anchorfile>
      <anchor>a5eebf19167a5c80e434c420c1a65fba1</anchor>
      <arglist>(size_t row, size_t col) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1SparsityStructure.html</anchorfile>
      <anchor>a78e40305e4d8328f065a90d7faa37a68</anchor>
      <arglist>(size_t newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1SparsityStructure.html</anchorfile>
      <anchor>adbf4c1d026577b783157cc84e09bd242</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1SparsityStructure.html</anchorfile>
      <anchor>a3109a903c8d815355433c13f9ff8de2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1SparsityStructure.html</anchorfile>
      <anchor>a97e4d57fd02a49ec1d56628e75d723e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonZero</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1SparsityStructure.html</anchorfile>
      <anchor>a4d21f8a2a2f1b7143d2ba0e420785e66</anchor>
      <arglist>(size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; size_t &gt; &amp;</type>
      <name>nonZeroElementRows</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1SparsityStructure.html</anchorfile>
      <anchor>a7e5375d3bb6f8c8567fe1dc2f97464bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; size_t &gt; &amp;</type>
      <name>nonZeroElementColumns</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1SparsityStructure.html</anchorfile>
      <anchor>ae71d817d48f0d38ed17b88edd6a575e8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SpatialAcc</name>
    <filename>classiDynTree_1_1SpatialAcc.html</filename>
    <base>iDynTree::SpatialMotionVector</base>
    <member kind="typedef">
      <type>SpatialMotionForceVectorT_traits&lt; SpatialMotionVector &gt;::LinearVector3Type</type>
      <name>LinearVector3T</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a69ef18dc028e8e4cb3e70113d6d757c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpatialMotionForceVectorT_traits&lt; SpatialMotionVector &gt;::AngularVector3Type</type>
      <name>AngularVector3T</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a4dd2aa658641029221673188f2059509</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DualSpace&lt; DerivedSpatialVecT &gt;::Type</type>
      <name>DualVectorT</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a7910d803e3b8c3ef52db0bdc0b2bec42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialAcc</name>
      <anchorfile>classiDynTree_1_1SpatialAcc.html</anchorfile>
      <anchor>a7f86e1d84d6c0cd10295f267cec74b41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialAcc</name>
      <anchorfile>classiDynTree_1_1SpatialAcc.html</anchorfile>
      <anchor>ac6b893cc27cb8cfd88ac0feeea7e18f3</anchor>
      <arglist>(const LinAcceleration &amp;_linearVec3, const AngAcceleration &amp;_angularVec3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialAcc</name>
      <anchorfile>classiDynTree_1_1SpatialAcc.html</anchorfile>
      <anchor>a9303c3fc30ff89d9c41abc2c09ea5e34</anchor>
      <arglist>(const SpatialMotionVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialAcc</name>
      <anchorfile>classiDynTree_1_1SpatialAcc.html</anchorfile>
      <anchor>a8ea94a2808f1b0c03cf5afbbdc437d55</anchor>
      <arglist>(const SpatialAcc &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SpatialAcc</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1SpatialAcc.html</anchorfile>
      <anchor>a003311bc2f503b0741a00f2c73ccd601</anchor>
      <arglist>(const SpatialAcc &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialAcc</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1SpatialAcc.html</anchorfile>
      <anchor>ac8746043ef0439e70ed44dede999d278</anchor>
      <arglist>(const SpatialAcc &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialAcc</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1SpatialAcc.html</anchorfile>
      <anchor>a13042371f792f10cd9d7f8d73fe613d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionVector</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a22816c9ea7c88ea880bbe547366c2dad</anchor>
      <arglist>(const double scalar) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionVector</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a00b69fb5887ebaab90f53bf3f43927ae</anchor>
      <arglist>(const SpatialMotionVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a1230a70db77b4cf2ebb2c643b62d37e9</anchor>
      <arglist>(const SpatialForceVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>asCrossProductMatrix</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a0afe65574d10fd441e294b01b9d59328</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>asCrossProductMatrixWrench</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>aa12336105b40e215151dc40e02d85533</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>exp</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a3d13bde6997132732cac8cc942dba7ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinearVector3T &amp;</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a705aa7e917215639cf8088da8a279031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LinearVector3T &amp;</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aef471e533b923fca899adfcac5703173</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AngularVector3T &amp;</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a8b9ae18e77c2af17ec1d369d196e0c10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AngularVector3T &amp;</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a67479f75f4632e397d7c38394f499ca5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a171e7cf6e215e67eb32ac791526a044f</anchor>
      <arglist>(const LinearVector3T &amp;_linearVec3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a719a64c179d736390f48b6ddd0ccf6fa</anchor>
      <arglist>(const AngularVector3T &amp;_angularVec3)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a176d715e9026aee5a3cad9ff9dde198c</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a583e1a9062c0d7f72da539e521e597b5</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a74a991f1f695825378e5b1765e743e42</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a0fe3633e4ccf66267b01b7302a1658ec</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>af1f3a2d0e7522b63b2dc0d729a33f5a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a8414377bb976157317aeb070b4ed235d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DerivedSpatialVecT</type>
      <name>changePoint</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aaf50d0723aa1bf73962f05224a56bd8b</anchor>
      <arglist>(const Position &amp;newPoint)</arglist>
    </member>
    <member kind="function">
      <type>const DerivedSpatialVecT</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>af55844354af98084b8fd52a9240b2d5f</anchor>
      <arglist>(const Rotation &amp;newCoordFrame)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a676b41872e9165b9795a9706149a8e17</anchor>
      <arglist>(const DualVectorT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aee117ebb24cae309a169f678019f1181</anchor>
      <arglist>(const DerivedSpatialVecT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>afcf112b3ddd4e01fc0389dd2319eb383</anchor>
      <arglist>(const DerivedSpatialVecT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>asVector</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a28178bda574859bc9cda8e51f23ffc07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aea482fe4d53b76b02a0438d9561e1fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a73b398dd07e9f3dd5c252692380a6b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a0f1211dba411c4efe1a7c9d0944d2a38</anchor>
      <arglist>(const DerivedSpatialVecT &amp;op1, const DerivedSpatialVecT &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aa1ad54ef1ef1c37676cf7c231242f9fb</anchor>
      <arglist>(const DerivedSpatialVecT &amp;op)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>Zero</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>ae2ae611372d0a0f53dd983e3598bcc58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearVector3T</type>
      <name>linearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a404b99c91ecaa2269ed0e891df474720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AngularVector3T</type>
      <name>angularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a7713fdb080783747a894974f5c4b44a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpatialVectorSemantics&lt; typename LinearVector3T::SemanticsType, typename AngularVector3T::SemanticsType &gt;</type>
      <name>semantics</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>ac05cf4a583d9231bbd7863d75ab7f00b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>linearOffset</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aa6aa22433d0a6c29e37a4efc5970e1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>angularOffset</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a45a617c3a2fbf58cb8f14be36a9f0ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>totalSize</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>adfea1ab56aa331af032a7f7d31ac0afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aea482fe4d53b76b02a0438d9561e1fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a73b398dd07e9f3dd5c252692380a6b02</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SpatialForceVector</name>
    <filename>classiDynTree_1_1SpatialForceVector.html</filename>
    <base>SpatialVector&lt; SpatialForceVector &gt;</base>
    <member kind="typedef">
      <type>SpatialMotionForceVectorT_traits&lt; SpatialForceVector &gt;::LinearVector3Type</type>
      <name>LinearVector3T</name>
      <anchorfile>classiDynTree_1_1SpatialForceVector.html</anchorfile>
      <anchor>a2d86d89ba38e46bfe38631258bd8571a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpatialMotionForceVectorT_traits&lt; SpatialForceVector &gt;::AngularVector3Type</type>
      <name>AngularVector3T</name>
      <anchorfile>classiDynTree_1_1SpatialForceVector.html</anchorfile>
      <anchor>a6302c479904a175eb6c61c9de390d287</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DualSpace&lt; DerivedSpatialVecT &gt;::Type</type>
      <name>DualVectorT</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a7910d803e3b8c3ef52db0bdc0b2bec42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialForceVector</name>
      <anchorfile>classiDynTree_1_1SpatialForceVector.html</anchorfile>
      <anchor>a0db0813f6b4ce9f042999679cea6928c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialForceVector</name>
      <anchorfile>classiDynTree_1_1SpatialForceVector.html</anchorfile>
      <anchor>af876de5a159ec7941aa102a9ba2c9511</anchor>
      <arglist>(const LinearVector3T &amp;_linearVec3, const AngularVector3T &amp;_angularVec3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialForceVector</name>
      <anchorfile>classiDynTree_1_1SpatialForceVector.html</anchorfile>
      <anchor>a1524ab2d4869030e0afd4b3039a22b08</anchor>
      <arglist>(const SpatialForceVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialForceVector</name>
      <anchorfile>classiDynTree_1_1SpatialForceVector.html</anchorfile>
      <anchor>a64cb561fa22a1fa8149764d64dd2c6cf</anchor>
      <arglist>(const SpatialVector&lt; SpatialForceVector &gt; &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SpatialForceVector</name>
      <anchorfile>classiDynTree_1_1SpatialForceVector.html</anchorfile>
      <anchor>a5aea1cb1fe9dd0476f820ff51d44dc10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1SpatialForceVector.html</anchorfile>
      <anchor>ac96276a6d073a19752aea3ef4183d608</anchor>
      <arglist>(const double scalar) const</arglist>
    </member>
    <member kind="function">
      <type>LinearVector3T &amp;</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a705aa7e917215639cf8088da8a279031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LinearVector3T &amp;</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aef471e533b923fca899adfcac5703173</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AngularVector3T &amp;</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a8b9ae18e77c2af17ec1d369d196e0c10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AngularVector3T &amp;</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a67479f75f4632e397d7c38394f499ca5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a171e7cf6e215e67eb32ac791526a044f</anchor>
      <arglist>(const LinearVector3T &amp;_linearVec3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a719a64c179d736390f48b6ddd0ccf6fa</anchor>
      <arglist>(const AngularVector3T &amp;_angularVec3)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a176d715e9026aee5a3cad9ff9dde198c</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a583e1a9062c0d7f72da539e521e597b5</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a74a991f1f695825378e5b1765e743e42</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a0fe3633e4ccf66267b01b7302a1658ec</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>af1f3a2d0e7522b63b2dc0d729a33f5a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a8414377bb976157317aeb070b4ed235d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DerivedSpatialVecT</type>
      <name>changePoint</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aaf50d0723aa1bf73962f05224a56bd8b</anchor>
      <arglist>(const Position &amp;newPoint)</arglist>
    </member>
    <member kind="function">
      <type>const DerivedSpatialVecT</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>af55844354af98084b8fd52a9240b2d5f</anchor>
      <arglist>(const Rotation &amp;newCoordFrame)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a676b41872e9165b9795a9706149a8e17</anchor>
      <arglist>(const DualVectorT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aee117ebb24cae309a169f678019f1181</anchor>
      <arglist>(const DerivedSpatialVecT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>afcf112b3ddd4e01fc0389dd2319eb383</anchor>
      <arglist>(const DerivedSpatialVecT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a3ac59b03e3786339836b9b7d190f39e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>asVector</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a28178bda574859bc9cda8e51f23ffc07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aea482fe4d53b76b02a0438d9561e1fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a73b398dd07e9f3dd5c252692380a6b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a0f1211dba411c4efe1a7c9d0944d2a38</anchor>
      <arglist>(const DerivedSpatialVecT &amp;op1, const DerivedSpatialVecT &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aa1ad54ef1ef1c37676cf7c231242f9fb</anchor>
      <arglist>(const DerivedSpatialVecT &amp;op)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>Zero</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>ae2ae611372d0a0f53dd983e3598bcc58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearVector3T</type>
      <name>linearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a404b99c91ecaa2269ed0e891df474720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AngularVector3T</type>
      <name>angularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a7713fdb080783747a894974f5c4b44a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpatialVectorSemantics&lt; typename LinearVector3T::SemanticsType, typename AngularVector3T::SemanticsType &gt;</type>
      <name>semantics</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>ac05cf4a583d9231bbd7863d75ab7f00b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>linearOffset</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aa6aa22433d0a6c29e37a4efc5970e1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>angularOffset</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a45a617c3a2fbf58cb8f14be36a9f0ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>totalSize</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>adfea1ab56aa331af032a7f7d31ac0afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aea482fe4d53b76b02a0438d9561e1fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a73b398dd07e9f3dd5c252692380a6b02</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SpatialForceWrtMotionDerivative</name>
    <filename>classiDynTree_1_1SpatialForceWrtMotionDerivative.html</filename>
    <base>iDynTree::MatrixFixSize</base>
    <member kind="function">
      <type>SpatialForceWrtMotionDerivative</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1SpatialForceWrtMotionDerivative.html</anchorfile>
      <anchor>a9d454876935197ca67ebe145684fa53f</anchor>
      <arglist>(const Transform &amp;a_X_b)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>afa9fff22a34eb198785d87ffe161488f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aa4afb9030800a8424afd9a8bb36d8972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a26bd376a8f4cfa044ff366a22f1aab6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRowMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a6da0a936d351418e0dcb4d67f3d0abbc</anchor>
      <arglist>(double *rowMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillColMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a58750c21e5e8c31c54c3eed7dd2309b6</anchor>
      <arglist>(double *colMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aab67a981ed6a31503d0aca8b4589d6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a1323e690b88b1abe04bd838db6546637</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a8e916f4550fec92847dab198695299a1</anchor>
      <arglist>[nRows *nCols]</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aab67a981ed6a31503d0aca8b4589d6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a1323e690b88b1abe04bd838db6546637</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SpatialInertia</name>
    <filename>classiDynTree_1_1SpatialInertia.html</filename>
    <base>iDynTree::SpatialInertiaRaw</base>
    <member kind="function">
      <type></type>
      <name>SpatialInertia</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>ab599c235ffbb9936d16a56c53f390d06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialInertia</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>a894a85c0a1319ae8894c73b5298669d7</anchor>
      <arglist>(const double mass, const PositionRaw &amp;com, const RotationalInertiaRaw &amp;rotInertia)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialInertia</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>a105dc0fc74f9c5fe6475ac3d29dc275f</anchor>
      <arglist>(const SpatialInertiaRaw &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialInertia</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>a64175e97f51f1595870b8aff78f64839</anchor>
      <arglist>(const SpatialInertia &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>asMatrix</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>a7ac807ec779d50c39b04d37578f57e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>applyInverse</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>ac8f2cb43371716b2aeb3a893e4e14462</anchor>
      <arglist>(const SpatialMomentum &amp;mom) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>getInverse</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>a7a7aee5d660fcc79d46351cc250a58cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>ae27826af45cbe71fe032df901a8581ff</anchor>
      <arglist>(const SpatialInertia &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>a87e87a50bd6d6ce97333be081e5593fd</anchor>
      <arglist>(const SpatialMotionVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMomentum</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>a8f34cacbbf37b2ed9eb9c27501b39a9c</anchor>
      <arglist>(const Twist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>acae1bf059807dd9af5717034b746b699</anchor>
      <arglist>(const SpatialAcc &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>biasWrench</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>a100bc8dc58245924b2f3c3a7fbf243bc</anchor>
      <arglist>(const Twist &amp;V) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>biasWrenchDerivative</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>ad623214d451123c7e435a53e13572076</anchor>
      <arglist>(const Twist &amp;V) const</arglist>
    </member>
    <member kind="function">
      <type>Vector10</type>
      <name>asVector</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>ac1bfbb66868419b1fd9fd635c8b779a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromVector</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>a3e9180c32b6979c2baac6b5fe836d322</anchor>
      <arglist>(const Vector10 &amp;inertialParams)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPhysicallyConsistent</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>a6b493d81ed9bcedb37f81d0125d1ab04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromRotationalInertiaWrtCenterOfMass</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>a910d0f719839f786b22a9bcc1b945371</anchor>
      <arglist>(const double mass, const PositionRaw &amp;com, const RotationalInertiaRaw &amp;rotInertia)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMass</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>a38d60687fb01182e2d6cc9970e697b98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PositionRaw</type>
      <name>getCenterOfMass</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>a37cb05817ed6e158eb96a8d5d7519941</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RotationalInertiaRaw &amp;</type>
      <name>getRotationalInertiaWrtFrameOrigin</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>ad714a17bb19b0c7fa7f3448b0f416265</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RotationalInertiaRaw</type>
      <name>getRotationalInertiaWrtCenterOfMass</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>a890bf2876d229c14b3ae24277bccebba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>multiply</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>adda5a778ebf6d876fa24d8d8b48a49ef</anchor>
      <arglist>(const SpatialMotionVector &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>ab545a454ffbd8144ce1b13fbb280d787</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpatialInertia</type>
      <name>combine</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>aef61afb03ec85fbe105850bc87310e02</anchor>
      <arglist>(const SpatialInertia &amp;op1, const SpatialInertia &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpatialInertia</type>
      <name>Zero</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>a65a035eec791c63c46162f52cb11583f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix6x10</type>
      <name>momentumRegressor</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>ab3b8801a8ba9a77794e5ba3e2deec574</anchor>
      <arglist>(const iDynTree::Twist &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix6x10</type>
      <name>momentumDerivativeRegressor</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>a4ec679061843fb65027fbfb08a9d7de9</anchor>
      <arglist>(const iDynTree::Twist &amp;v, const iDynTree::SpatialAcc &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix6x10</type>
      <name>momentumDerivativeSlotineLiRegressor</name>
      <anchorfile>classiDynTree_1_1SpatialInertia.html</anchorfile>
      <anchor>abd39e1f9b2dfb472ba6baf40982936cd</anchor>
      <arglist>(const iDynTree::Twist &amp;v, const iDynTree::Twist &amp;vRef, const iDynTree::SpatialAcc &amp;aRef)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpatialInertiaRaw</type>
      <name>combine</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>aa1234d53451fb6a9e3f0eb1b428277d5</anchor>
      <arglist>(const SpatialInertiaRaw &amp;op1, const SpatialInertiaRaw &amp;op2)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_mass</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>a94039efc9f52c01fc0111fb5c17cbd87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_mcom</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>adffed809529bfbc044e8c330374c611a</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RotationalInertiaRaw</type>
      <name>m_rotInertia</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>aae4c95f1309e827a915431c58dad3666</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SpatialInertiaRaw</name>
    <filename>classiDynTree_1_1SpatialInertiaRaw.html</filename>
    <member kind="function">
      <type></type>
      <name>SpatialInertiaRaw</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>a9075739a88cf8d456be6c9346955c267</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialInertiaRaw</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>aae32215a7b93c1f160bdf449dc76c60f</anchor>
      <arglist>(const double mass, const PositionRaw &amp;com, const RotationalInertiaRaw &amp;rotInertia)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialInertiaRaw</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>a5e43484f889736ad717282bb72bdac92</anchor>
      <arglist>(const SpatialInertiaRaw &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromRotationalInertiaWrtCenterOfMass</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>a910d0f719839f786b22a9bcc1b945371</anchor>
      <arglist>(const double mass, const PositionRaw &amp;com, const RotationalInertiaRaw &amp;rotInertia)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMass</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>a38d60687fb01182e2d6cc9970e697b98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PositionRaw</type>
      <name>getCenterOfMass</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>a37cb05817ed6e158eb96a8d5d7519941</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RotationalInertiaRaw &amp;</type>
      <name>getRotationalInertiaWrtFrameOrigin</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>ad714a17bb19b0c7fa7f3448b0f416265</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RotationalInertiaRaw</type>
      <name>getRotationalInertiaWrtCenterOfMass</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>a890bf2876d229c14b3ae24277bccebba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>multiply</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>adda5a778ebf6d876fa24d8d8b48a49ef</anchor>
      <arglist>(const SpatialMotionVector &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>ab545a454ffbd8144ce1b13fbb280d787</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpatialInertiaRaw</type>
      <name>combine</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>aa1234d53451fb6a9e3f0eb1b428277d5</anchor>
      <arglist>(const SpatialInertiaRaw &amp;op1, const SpatialInertiaRaw &amp;op2)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_mass</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>a94039efc9f52c01fc0111fb5c17cbd87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_mcom</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>adffed809529bfbc044e8c330374c611a</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RotationalInertiaRaw</type>
      <name>m_rotInertia</name>
      <anchorfile>classiDynTree_1_1SpatialInertiaRaw.html</anchorfile>
      <anchor>aae4c95f1309e827a915431c58dad3666</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SpatialMomentum</name>
    <filename>classiDynTree_1_1SpatialMomentum.html</filename>
    <base>iDynTree::SpatialForceVector</base>
    <member kind="typedef">
      <type>SpatialMotionForceVectorT_traits&lt; SpatialForceVector &gt;::LinearVector3Type</type>
      <name>LinearVector3T</name>
      <anchorfile>classiDynTree_1_1SpatialForceVector.html</anchorfile>
      <anchor>a2d86d89ba38e46bfe38631258bd8571a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpatialMotionForceVectorT_traits&lt; SpatialForceVector &gt;::AngularVector3Type</type>
      <name>AngularVector3T</name>
      <anchorfile>classiDynTree_1_1SpatialForceVector.html</anchorfile>
      <anchor>a6302c479904a175eb6c61c9de390d287</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DualSpace&lt; DerivedSpatialVecT &gt;::Type</type>
      <name>DualVectorT</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a7910d803e3b8c3ef52db0bdc0b2bec42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialMomentum</name>
      <anchorfile>classiDynTree_1_1SpatialMomentum.html</anchorfile>
      <anchor>a33dbae19e7b71c3e5a109f01320c9dc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialMomentum</name>
      <anchorfile>classiDynTree_1_1SpatialMomentum.html</anchorfile>
      <anchor>a3a35ab39d70c4172dda479965294f152</anchor>
      <arglist>(const LinMomentum &amp;_linearVec3, const AngMomentum &amp;_angularVec3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialMomentum</name>
      <anchorfile>classiDynTree_1_1SpatialMomentum.html</anchorfile>
      <anchor>a75866ebbf82a596f16159d0ef8f76b0b</anchor>
      <arglist>(const SpatialForceVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialMomentum</name>
      <anchorfile>classiDynTree_1_1SpatialMomentum.html</anchorfile>
      <anchor>ab3e289ea80df9790190ef366d4ce7623</anchor>
      <arglist>(const SpatialMomentum &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SpatialMomentum</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1SpatialMomentum.html</anchorfile>
      <anchor>ab764ff72fed03fa8fae21deb6747b181</anchor>
      <arglist>(const SpatialMomentum &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMomentum</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1SpatialMomentum.html</anchorfile>
      <anchor>a500636f1ab58625e4ed7deac76293b39</anchor>
      <arglist>(const SpatialMomentum &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMomentum</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1SpatialMomentum.html</anchorfile>
      <anchor>aa1adc21c7c04b11507360c0fd4b669ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1SpatialForceVector.html</anchorfile>
      <anchor>ac96276a6d073a19752aea3ef4183d608</anchor>
      <arglist>(const double scalar) const</arglist>
    </member>
    <member kind="function">
      <type>LinearVector3T &amp;</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a705aa7e917215639cf8088da8a279031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LinearVector3T &amp;</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aef471e533b923fca899adfcac5703173</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AngularVector3T &amp;</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a8b9ae18e77c2af17ec1d369d196e0c10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AngularVector3T &amp;</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a67479f75f4632e397d7c38394f499ca5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a171e7cf6e215e67eb32ac791526a044f</anchor>
      <arglist>(const LinearVector3T &amp;_linearVec3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a719a64c179d736390f48b6ddd0ccf6fa</anchor>
      <arglist>(const AngularVector3T &amp;_angularVec3)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a176d715e9026aee5a3cad9ff9dde198c</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a583e1a9062c0d7f72da539e521e597b5</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a74a991f1f695825378e5b1765e743e42</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a0fe3633e4ccf66267b01b7302a1658ec</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>af1f3a2d0e7522b63b2dc0d729a33f5a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a8414377bb976157317aeb070b4ed235d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DerivedSpatialVecT</type>
      <name>changePoint</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aaf50d0723aa1bf73962f05224a56bd8b</anchor>
      <arglist>(const Position &amp;newPoint)</arglist>
    </member>
    <member kind="function">
      <type>const DerivedSpatialVecT</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>af55844354af98084b8fd52a9240b2d5f</anchor>
      <arglist>(const Rotation &amp;newCoordFrame)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a676b41872e9165b9795a9706149a8e17</anchor>
      <arglist>(const DualVectorT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aee117ebb24cae309a169f678019f1181</anchor>
      <arglist>(const DerivedSpatialVecT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>afcf112b3ddd4e01fc0389dd2319eb383</anchor>
      <arglist>(const DerivedSpatialVecT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>asVector</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a28178bda574859bc9cda8e51f23ffc07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aea482fe4d53b76b02a0438d9561e1fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a73b398dd07e9f3dd5c252692380a6b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a0f1211dba411c4efe1a7c9d0944d2a38</anchor>
      <arglist>(const DerivedSpatialVecT &amp;op1, const DerivedSpatialVecT &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aa1ad54ef1ef1c37676cf7c231242f9fb</anchor>
      <arglist>(const DerivedSpatialVecT &amp;op)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>Zero</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>ae2ae611372d0a0f53dd983e3598bcc58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearVector3T</type>
      <name>linearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a404b99c91ecaa2269ed0e891df474720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AngularVector3T</type>
      <name>angularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a7713fdb080783747a894974f5c4b44a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpatialVectorSemantics&lt; typename LinearVector3T::SemanticsType, typename AngularVector3T::SemanticsType &gt;</type>
      <name>semantics</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>ac05cf4a583d9231bbd7863d75ab7f00b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>linearOffset</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aa6aa22433d0a6c29e37a4efc5970e1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>angularOffset</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a45a617c3a2fbf58cb8f14be36a9f0ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>totalSize</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>adfea1ab56aa331af032a7f7d31ac0afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aea482fe4d53b76b02a0438d9561e1fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a73b398dd07e9f3dd5c252692380a6b02</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SpatialMotionForceVectorT_traits</name>
    <filename>classiDynTree_1_1SpatialMotionForceVectorT__traits.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>SpatialMotionForceVectorT_traits&lt; DerivedSpatialVecT &gt;</name>
    <filename>classiDynTree_1_1SpatialMotionForceVectorT__traits.html</filename>
  </compound>
  <compound kind="class">
    <name>iDynTree::SpatialMotionForceVectorT_traits&lt; SpatialForceVector &gt;</name>
    <filename>classiDynTree_1_1SpatialMotionForceVectorT__traits_3_01SpatialForceVector_01_4.html</filename>
    <member kind="typedef">
      <type>LinearForceVector3</type>
      <name>LinearVector3Type</name>
      <anchorfile>classiDynTree_1_1SpatialMotionForceVectorT__traits_3_01SpatialForceVector_01_4.html</anchorfile>
      <anchor>a4e2508ae97d4f5dfd44a696880cc676f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularForceVector3</type>
      <name>AngularVector3Type</name>
      <anchorfile>classiDynTree_1_1SpatialMotionForceVectorT__traits_3_01SpatialForceVector_01_4.html</anchorfile>
      <anchor>a3ca57c15cc8f6ee1b55cd14a06e1d4b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SpatialMotionForceVectorT_traits&lt; SpatialMotionVector &gt;</name>
    <filename>classiDynTree_1_1SpatialMotionForceVectorT__traits_3_01SpatialMotionVector_01_4.html</filename>
    <member kind="typedef">
      <type>LinearMotionVector3</type>
      <name>LinearVector3Type</name>
      <anchorfile>classiDynTree_1_1SpatialMotionForceVectorT__traits_3_01SpatialMotionVector_01_4.html</anchorfile>
      <anchor>afa68fedfc26d965b728703a46929c74b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularMotionVector3</type>
      <name>AngularVector3Type</name>
      <anchorfile>classiDynTree_1_1SpatialMotionForceVectorT__traits_3_01SpatialMotionVector_01_4.html</anchorfile>
      <anchor>a647a1590ad87a13495f632f287f9fa66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SpatialMotionVector</name>
    <filename>classiDynTree_1_1SpatialMotionVector.html</filename>
    <base>SpatialVector&lt; SpatialMotionVector &gt;</base>
    <member kind="typedef">
      <type>SpatialMotionForceVectorT_traits&lt; SpatialMotionVector &gt;::LinearVector3Type</type>
      <name>LinearVector3T</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a69ef18dc028e8e4cb3e70113d6d757c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpatialMotionForceVectorT_traits&lt; SpatialMotionVector &gt;::AngularVector3Type</type>
      <name>AngularVector3T</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a4dd2aa658641029221673188f2059509</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DualSpace&lt; DerivedSpatialVecT &gt;::Type</type>
      <name>DualVectorT</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a7910d803e3b8c3ef52db0bdc0b2bec42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialMotionVector</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a0fb7aa781b8ab353a0e21bc163e7c1e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialMotionVector</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a177da5880d65b2c4747cc9be0579aec7</anchor>
      <arglist>(const LinearVector3T &amp;_linearVec3, const AngularVector3T &amp;_angularVec3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialMotionVector</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a469d555799e3942b020dc94910998dd4</anchor>
      <arglist>(const SpatialMotionVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialMotionVector</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a9c27f65454a05a5c770b3e8ae23ab3a0</anchor>
      <arglist>(const SpatialVector&lt; SpatialMotionVector &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionVector</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a22816c9ea7c88ea880bbe547366c2dad</anchor>
      <arglist>(const double scalar) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionVector</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a00b69fb5887ebaab90f53bf3f43927ae</anchor>
      <arglist>(const SpatialMotionVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a1230a70db77b4cf2ebb2c643b62d37e9</anchor>
      <arglist>(const SpatialForceVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>asCrossProductMatrix</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a0afe65574d10fd441e294b01b9d59328</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>asCrossProductMatrixWrench</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>aa12336105b40e215151dc40e02d85533</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>exp</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a3d13bde6997132732cac8cc942dba7ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinearVector3T &amp;</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a705aa7e917215639cf8088da8a279031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LinearVector3T &amp;</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aef471e533b923fca899adfcac5703173</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AngularVector3T &amp;</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a8b9ae18e77c2af17ec1d369d196e0c10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AngularVector3T &amp;</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a67479f75f4632e397d7c38394f499ca5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a171e7cf6e215e67eb32ac791526a044f</anchor>
      <arglist>(const LinearVector3T &amp;_linearVec3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a719a64c179d736390f48b6ddd0ccf6fa</anchor>
      <arglist>(const AngularVector3T &amp;_angularVec3)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a176d715e9026aee5a3cad9ff9dde198c</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a583e1a9062c0d7f72da539e521e597b5</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a74a991f1f695825378e5b1765e743e42</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a0fe3633e4ccf66267b01b7302a1658ec</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>af1f3a2d0e7522b63b2dc0d729a33f5a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a8414377bb976157317aeb070b4ed235d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DerivedSpatialVecT</type>
      <name>changePoint</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aaf50d0723aa1bf73962f05224a56bd8b</anchor>
      <arglist>(const Position &amp;newPoint)</arglist>
    </member>
    <member kind="function">
      <type>const DerivedSpatialVecT</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>af55844354af98084b8fd52a9240b2d5f</anchor>
      <arglist>(const Rotation &amp;newCoordFrame)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a676b41872e9165b9795a9706149a8e17</anchor>
      <arglist>(const DualVectorT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aee117ebb24cae309a169f678019f1181</anchor>
      <arglist>(const DerivedSpatialVecT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>afcf112b3ddd4e01fc0389dd2319eb383</anchor>
      <arglist>(const DerivedSpatialVecT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a3ac59b03e3786339836b9b7d190f39e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>asVector</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a28178bda574859bc9cda8e51f23ffc07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aea482fe4d53b76b02a0438d9561e1fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a73b398dd07e9f3dd5c252692380a6b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a0f1211dba411c4efe1a7c9d0944d2a38</anchor>
      <arglist>(const DerivedSpatialVecT &amp;op1, const DerivedSpatialVecT &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aa1ad54ef1ef1c37676cf7c231242f9fb</anchor>
      <arglist>(const DerivedSpatialVecT &amp;op)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>Zero</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>ae2ae611372d0a0f53dd983e3598bcc58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearVector3T</type>
      <name>linearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a404b99c91ecaa2269ed0e891df474720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AngularVector3T</type>
      <name>angularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a7713fdb080783747a894974f5c4b44a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpatialVectorSemantics&lt; typename LinearVector3T::SemanticsType, typename AngularVector3T::SemanticsType &gt;</type>
      <name>semantics</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>ac05cf4a583d9231bbd7863d75ab7f00b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>linearOffset</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aa6aa22433d0a6c29e37a4efc5970e1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>angularOffset</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a45a617c3a2fbf58cb8f14be36a9f0ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>totalSize</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>adfea1ab56aa331af032a7f7d31ac0afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aea482fe4d53b76b02a0438d9561e1fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a73b398dd07e9f3dd5c252692380a6b02</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SpatialMotionWrtMotionDerivative</name>
    <filename>classiDynTree_1_1SpatialMotionWrtMotionDerivative.html</filename>
    <base>iDynTree::MatrixFixSize</base>
    <member kind="function">
      <type>SpatialMotionWrtMotionDerivative</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1SpatialMotionWrtMotionDerivative.html</anchorfile>
      <anchor>a2bde02a54e1cce3b70169b468a51feae</anchor>
      <arglist>(const Transform &amp;a_X_b)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>afa9fff22a34eb198785d87ffe161488f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aa4afb9030800a8424afd9a8bb36d8972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a26bd376a8f4cfa044ff366a22f1aab6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRowMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a6da0a936d351418e0dcb4d67f3d0abbc</anchor>
      <arglist>(double *rowMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillColMajorBuffer</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a58750c21e5e8c31c54c3eed7dd2309b6</anchor>
      <arglist>(double *colMajorBuf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aab67a981ed6a31503d0aca8b4589d6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a1323e690b88b1abe04bd838db6546637</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a8e916f4550fec92847dab198695299a1</anchor>
      <arglist>[nRows *nCols]</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a66afdf40131ce8b5231dc6b648035a16</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a0571f0d0d9916450663cae500b2c61ad</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ad76e296f38501d21f06d755379215c3f</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>ab39cd117ef2133d49ba174dc9afc4d47</anchor>
      <arglist>(const unsigned int row, const unsigned int col, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>abc5d85c2fbe9e7669985f0f06000b88e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a540785faaca0a29cb3b0ab5bd650f486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>aab67a981ed6a31503d0aca8b4589d6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1MatrixFixSize.html</anchorfile>
      <anchor>a1323e690b88b1abe04bd838db6546637</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::GeomVector3::SpatialVector</name>
    <filename>classiDynTree_1_1GeomVector3_1_1SpatialVector.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>iDynTree::SpatialVector</name>
    <filename>classiDynTree_1_1SpatialVector.html</filename>
    <member kind="typedef">
      <type>SpatialMotionForceVectorT_traits&lt; DerivedSpatialVecT &gt;::LinearVector3Type</type>
      <name>LinearVector3T</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a4ca8db3255a63370cb6fb9c5b8e4bc6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpatialMotionForceVectorT_traits&lt; DerivedSpatialVecT &gt;::AngularVector3Type</type>
      <name>AngularVector3T</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a13a172b06a7af17f6220a90a4163b3f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DualSpace&lt; DerivedSpatialVecT &gt;::Type</type>
      <name>DualVectorT</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a7910d803e3b8c3ef52db0bdc0b2bec42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialVector</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a787b62017e61e1dc49e0bc753cb0516b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialVector</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a3d7d78e133ab83dfadb346539f70df96</anchor>
      <arglist>(const LinearVector3T &amp;_linearVec3, const AngularVector3T &amp;_angularVec3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialVector</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aff082c865731b86ad00f3901b1f487cb</anchor>
      <arglist>(const SpatialVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>LinearVector3T &amp;</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a705aa7e917215639cf8088da8a279031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AngularVector3T &amp;</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a8b9ae18e77c2af17ec1d369d196e0c10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LinearVector3T &amp;</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aef471e533b923fca899adfcac5703173</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AngularVector3T &amp;</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a67479f75f4632e397d7c38394f499ca5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a171e7cf6e215e67eb32ac791526a044f</anchor>
      <arglist>(const LinearVector3T &amp;_linearVec3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a719a64c179d736390f48b6ddd0ccf6fa</anchor>
      <arglist>(const AngularVector3T &amp;_angularVec3)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a176d715e9026aee5a3cad9ff9dde198c</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a583e1a9062c0d7f72da539e521e597b5</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a74a991f1f695825378e5b1765e743e42</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a0fe3633e4ccf66267b01b7302a1658ec</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>af1f3a2d0e7522b63b2dc0d729a33f5a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a8414377bb976157317aeb070b4ed235d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DerivedSpatialVecT</type>
      <name>changePoint</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aaf50d0723aa1bf73962f05224a56bd8b</anchor>
      <arglist>(const Position &amp;newPoint)</arglist>
    </member>
    <member kind="function">
      <type>const DerivedSpatialVecT</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>af55844354af98084b8fd52a9240b2d5f</anchor>
      <arglist>(const Rotation &amp;newCoordFrame)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a676b41872e9165b9795a9706149a8e17</anchor>
      <arglist>(const DualVectorT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aee117ebb24cae309a169f678019f1181</anchor>
      <arglist>(const DerivedSpatialVecT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>afcf112b3ddd4e01fc0389dd2319eb383</anchor>
      <arglist>(const DerivedSpatialVecT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a3ac59b03e3786339836b9b7d190f39e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>asVector</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a28178bda574859bc9cda8e51f23ffc07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aea482fe4d53b76b02a0438d9561e1fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a73b398dd07e9f3dd5c252692380a6b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a0f1211dba411c4efe1a7c9d0944d2a38</anchor>
      <arglist>(const DerivedSpatialVecT &amp;op1, const DerivedSpatialVecT &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aa1ad54ef1ef1c37676cf7c231242f9fb</anchor>
      <arglist>(const DerivedSpatialVecT &amp;op)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>Zero</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>ae2ae611372d0a0f53dd983e3598bcc58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearVector3T</type>
      <name>linearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a404b99c91ecaa2269ed0e891df474720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AngularVector3T</type>
      <name>angularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a7713fdb080783747a894974f5c4b44a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpatialVectorSemantics&lt; typename LinearVector3T::SemanticsType, typename AngularVector3T::SemanticsType &gt;</type>
      <name>semantics</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>ac05cf4a583d9231bbd7863d75ab7f00b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>linearOffset</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aa6aa22433d0a6c29e37a4efc5970e1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>angularOffset</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a45a617c3a2fbf58cb8f14be36a9f0ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>totalSize</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>adfea1ab56aa331af032a7f7d31ac0afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aea482fe4d53b76b02a0438d9561e1fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a73b398dd07e9f3dd5c252692380a6b02</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpatialVector&lt; SpatialForceVector &gt;</name>
    <filename>classiDynTree_1_1SpatialVector.html</filename>
    <member kind="typedef">
      <type>SpatialMotionForceVectorT_traits&lt; DerivedSpatialVecT &gt;::LinearVector3Type</type>
      <name>LinearVector3T</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a4ca8db3255a63370cb6fb9c5b8e4bc6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpatialMotionForceVectorT_traits&lt; DerivedSpatialVecT &gt;::AngularVector3Type</type>
      <name>AngularVector3T</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a13a172b06a7af17f6220a90a4163b3f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DualSpace&lt; DerivedSpatialVecT &gt;::Type</type>
      <name>DualVectorT</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a7910d803e3b8c3ef52db0bdc0b2bec42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialVector</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a787b62017e61e1dc49e0bc753cb0516b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialVector</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a3d7d78e133ab83dfadb346539f70df96</anchor>
      <arglist>(const LinearVector3T &amp;_linearVec3, const AngularVector3T &amp;_angularVec3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialVector</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aff082c865731b86ad00f3901b1f487cb</anchor>
      <arglist>(const SpatialVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>LinearVector3T &amp;</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a705aa7e917215639cf8088da8a279031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LinearVector3T &amp;</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aef471e533b923fca899adfcac5703173</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AngularVector3T &amp;</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a8b9ae18e77c2af17ec1d369d196e0c10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AngularVector3T &amp;</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a67479f75f4632e397d7c38394f499ca5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a171e7cf6e215e67eb32ac791526a044f</anchor>
      <arglist>(const LinearVector3T &amp;_linearVec3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a719a64c179d736390f48b6ddd0ccf6fa</anchor>
      <arglist>(const AngularVector3T &amp;_angularVec3)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a176d715e9026aee5a3cad9ff9dde198c</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a583e1a9062c0d7f72da539e521e597b5</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a74a991f1f695825378e5b1765e743e42</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a0fe3633e4ccf66267b01b7302a1658ec</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>af1f3a2d0e7522b63b2dc0d729a33f5a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a8414377bb976157317aeb070b4ed235d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DerivedSpatialVecT</type>
      <name>changePoint</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aaf50d0723aa1bf73962f05224a56bd8b</anchor>
      <arglist>(const Position &amp;newPoint)</arglist>
    </member>
    <member kind="function">
      <type>const DerivedSpatialVecT</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>af55844354af98084b8fd52a9240b2d5f</anchor>
      <arglist>(const Rotation &amp;newCoordFrame)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a676b41872e9165b9795a9706149a8e17</anchor>
      <arglist>(const DualVectorT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aee117ebb24cae309a169f678019f1181</anchor>
      <arglist>(const DerivedSpatialVecT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>afcf112b3ddd4e01fc0389dd2319eb383</anchor>
      <arglist>(const DerivedSpatialVecT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a3ac59b03e3786339836b9b7d190f39e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>asVector</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a28178bda574859bc9cda8e51f23ffc07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aea482fe4d53b76b02a0438d9561e1fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a73b398dd07e9f3dd5c252692380a6b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a0f1211dba411c4efe1a7c9d0944d2a38</anchor>
      <arglist>(const DerivedSpatialVecT &amp;op1, const DerivedSpatialVecT &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aa1ad54ef1ef1c37676cf7c231242f9fb</anchor>
      <arglist>(const DerivedSpatialVecT &amp;op)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>Zero</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>ae2ae611372d0a0f53dd983e3598bcc58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearVector3T</type>
      <name>linearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a404b99c91ecaa2269ed0e891df474720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AngularVector3T</type>
      <name>angularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a7713fdb080783747a894974f5c4b44a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpatialVectorSemantics&lt; typename LinearVector3T::SemanticsType, typename AngularVector3T::SemanticsType &gt;</type>
      <name>semantics</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>ac05cf4a583d9231bbd7863d75ab7f00b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>linearOffset</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aa6aa22433d0a6c29e37a4efc5970e1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>angularOffset</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a45a617c3a2fbf58cb8f14be36a9f0ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>totalSize</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>adfea1ab56aa331af032a7f7d31ac0afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aea482fe4d53b76b02a0438d9561e1fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a73b398dd07e9f3dd5c252692380a6b02</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpatialVector&lt; SpatialMotionVector &gt;</name>
    <filename>classiDynTree_1_1SpatialVector.html</filename>
    <member kind="typedef">
      <type>SpatialMotionForceVectorT_traits&lt; DerivedSpatialVecT &gt;::LinearVector3Type</type>
      <name>LinearVector3T</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a4ca8db3255a63370cb6fb9c5b8e4bc6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpatialMotionForceVectorT_traits&lt; DerivedSpatialVecT &gt;::AngularVector3Type</type>
      <name>AngularVector3T</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a13a172b06a7af17f6220a90a4163b3f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DualSpace&lt; DerivedSpatialVecT &gt;::Type</type>
      <name>DualVectorT</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a7910d803e3b8c3ef52db0bdc0b2bec42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialVector</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a787b62017e61e1dc49e0bc753cb0516b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialVector</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a3d7d78e133ab83dfadb346539f70df96</anchor>
      <arglist>(const LinearVector3T &amp;_linearVec3, const AngularVector3T &amp;_angularVec3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialVector</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aff082c865731b86ad00f3901b1f487cb</anchor>
      <arglist>(const SpatialVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>LinearVector3T &amp;</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a705aa7e917215639cf8088da8a279031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LinearVector3T &amp;</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aef471e533b923fca899adfcac5703173</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AngularVector3T &amp;</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a8b9ae18e77c2af17ec1d369d196e0c10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AngularVector3T &amp;</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a67479f75f4632e397d7c38394f499ca5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a171e7cf6e215e67eb32ac791526a044f</anchor>
      <arglist>(const LinearVector3T &amp;_linearVec3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a719a64c179d736390f48b6ddd0ccf6fa</anchor>
      <arglist>(const AngularVector3T &amp;_angularVec3)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a176d715e9026aee5a3cad9ff9dde198c</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a583e1a9062c0d7f72da539e521e597b5</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a74a991f1f695825378e5b1765e743e42</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a0fe3633e4ccf66267b01b7302a1658ec</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>af1f3a2d0e7522b63b2dc0d729a33f5a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a8414377bb976157317aeb070b4ed235d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DerivedSpatialVecT</type>
      <name>changePoint</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aaf50d0723aa1bf73962f05224a56bd8b</anchor>
      <arglist>(const Position &amp;newPoint)</arglist>
    </member>
    <member kind="function">
      <type>const DerivedSpatialVecT</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>af55844354af98084b8fd52a9240b2d5f</anchor>
      <arglist>(const Rotation &amp;newCoordFrame)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a676b41872e9165b9795a9706149a8e17</anchor>
      <arglist>(const DualVectorT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aee117ebb24cae309a169f678019f1181</anchor>
      <arglist>(const DerivedSpatialVecT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>afcf112b3ddd4e01fc0389dd2319eb383</anchor>
      <arglist>(const DerivedSpatialVecT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a3ac59b03e3786339836b9b7d190f39e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>asVector</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a28178bda574859bc9cda8e51f23ffc07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aea482fe4d53b76b02a0438d9561e1fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a73b398dd07e9f3dd5c252692380a6b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a0f1211dba411c4efe1a7c9d0944d2a38</anchor>
      <arglist>(const DerivedSpatialVecT &amp;op1, const DerivedSpatialVecT &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aa1ad54ef1ef1c37676cf7c231242f9fb</anchor>
      <arglist>(const DerivedSpatialVecT &amp;op)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>Zero</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>ae2ae611372d0a0f53dd983e3598bcc58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearVector3T</type>
      <name>linearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a404b99c91ecaa2269ed0e891df474720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AngularVector3T</type>
      <name>angularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a7713fdb080783747a894974f5c4b44a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpatialVectorSemantics&lt; typename LinearVector3T::SemanticsType, typename AngularVector3T::SemanticsType &gt;</type>
      <name>semantics</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>ac05cf4a583d9231bbd7863d75ab7f00b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>linearOffset</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aa6aa22433d0a6c29e37a4efc5970e1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>angularOffset</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a45a617c3a2fbf58cb8f14be36a9f0ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>totalSize</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>adfea1ab56aa331af032a7f7d31ac0afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aea482fe4d53b76b02a0438d9561e1fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a73b398dd07e9f3dd5c252692380a6b02</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SpatialVectorSemantics</name>
    <filename>classiDynTree_1_1SpatialVectorSemantics.html</filename>
    <member kind="function">
      <type></type>
      <name>SpatialVectorSemantics</name>
      <anchorfile>classiDynTree_1_1SpatialVectorSemantics.html</anchorfile>
      <anchor>affb06e8121724729e5780ccdad265a9a</anchor>
      <arglist>(LinearVec3SemanticsT &amp;linearVec3, AngularVec3SemanticsT &amp;angularVec3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check_linear2angularConsistency</name>
      <anchorfile>classiDynTree_1_1SpatialVectorSemantics.html</anchorfile>
      <anchor>a125e13b946eb65b162745553dd69aaaf</anchor>
      <arglist>(const LinearVec3SemanticsT &amp;linearVec3, const AngularVec3SemanticsT &amp;angularVec3)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVectorSemantics &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1SpatialVectorSemantics.html</anchorfile>
      <anchor>aca12abbc4b95173845244fe1df816740</anchor>
      <arglist>(const SpatialVectorSemantics &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVectorSemantics.html</anchorfile>
      <anchor>a91664f8d1fb25b974be1dc7fa518eea2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVectorSemantics.html</anchorfile>
      <anchor>acbdf4d87f6880e09498c6c2d42f8de9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearVec3SemanticsT &amp;</type>
      <name>linearVec3Semantics</name>
      <anchorfile>classiDynTree_1_1SpatialVectorSemantics.html</anchorfile>
      <anchor>a4dae63cf571cdedd88fb1016c4abd53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AngularVec3SemanticsT &amp;</type>
      <name>angularVec3Semantics</name>
      <anchorfile>classiDynTree_1_1SpatialVectorSemantics.html</anchorfile>
      <anchor>a0bb1b44f6f3e05d0e284b36f59dbb24c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVectorSemantics.html</anchorfile>
      <anchor>a91664f8d1fb25b974be1dc7fa518eea2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVectorSemantics.html</anchorfile>
      <anchor>acbdf4d87f6880e09498c6c2d42f8de9b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpatialVectorSemantics&lt; typename LinearVector3T::SemanticsType, typename AngularVector3T::SemanticsType &gt;</name>
    <filename>classiDynTree_1_1SpatialVectorSemantics.html</filename>
    <member kind="function">
      <type></type>
      <name>SpatialVectorSemantics</name>
      <anchorfile>classiDynTree_1_1SpatialVectorSemantics.html</anchorfile>
      <anchor>affb06e8121724729e5780ccdad265a9a</anchor>
      <arglist>(LinearVec3SemanticsT &amp;linearVec3, AngularVec3SemanticsT &amp;angularVec3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check_linear2angularConsistency</name>
      <anchorfile>classiDynTree_1_1SpatialVectorSemantics.html</anchorfile>
      <anchor>a125e13b946eb65b162745553dd69aaaf</anchor>
      <arglist>(const LinearVec3SemanticsT &amp;linearVec3, const AngularVec3SemanticsT &amp;angularVec3)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVectorSemantics &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1SpatialVectorSemantics.html</anchorfile>
      <anchor>aca12abbc4b95173845244fe1df816740</anchor>
      <arglist>(const SpatialVectorSemantics &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVectorSemantics.html</anchorfile>
      <anchor>a91664f8d1fb25b974be1dc7fa518eea2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVectorSemantics.html</anchorfile>
      <anchor>acbdf4d87f6880e09498c6c2d42f8de9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearVec3SemanticsT &amp;</type>
      <name>linearVec3Semantics</name>
      <anchorfile>classiDynTree_1_1SpatialVectorSemantics.html</anchorfile>
      <anchor>a4dae63cf571cdedd88fb1016c4abd53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AngularVec3SemanticsT &amp;</type>
      <name>angularVec3Semantics</name>
      <anchorfile>classiDynTree_1_1SpatialVectorSemantics.html</anchorfile>
      <anchor>a0bb1b44f6f3e05d0e284b36f59dbb24c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVectorSemantics.html</anchorfile>
      <anchor>a91664f8d1fb25b974be1dc7fa518eea2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVectorSemantics.html</anchorfile>
      <anchor>acbdf4d87f6880e09498c6c2d42f8de9b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Sphere</name>
    <filename>classiDynTree_1_1Sphere.html</filename>
    <base>iDynTree::SolidShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Sphere</name>
      <anchorfile>classiDynTree_1_1Sphere.html</anchorfile>
      <anchor>af53a8c5fe863706f508cc7f2d6d62108</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolidShape *</type>
      <name>clone</name>
      <anchorfile>classiDynTree_1_1Sphere.html</anchorfile>
      <anchor>ab796ae1d806ab45c288f3ce41695b7ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSphere</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a8ba065f0e60ad78baad071a3a870faf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBox</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a661c33c6139a4cde9c9eeb55ebcd915e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCylinder</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a8218783b444c4f651ebc5517399a04bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExternalMesh</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>aeef66627d452a2b192c9d62ac6e6b908</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Sphere *</type>
      <name>asSphere</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a99663faed75dfd72d0d89cc4bed840d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Sphere *</type>
      <name>asSphere</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a720d8b9d4d78dc3ae961e0c9f0529465</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Box *</type>
      <name>asBox</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a45e488bee1b295013389a7c67a5512f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box *</type>
      <name>asBox</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a4ea5d8b8ea2e334c1edecc390ca2e06c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cylinder *</type>
      <name>asCylinder</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>ac1a4e162221fb08c270af4d0424b86b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Cylinder *</type>
      <name>asCylinder</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>ac6ba4dbcf0b0a10b8f09689d85842515</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ExternalMesh *</type>
      <name>asExternalMesh</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a87e9c96203f414d82a09ea4c391f1d88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExternalMesh *</type>
      <name>asExternalMesh</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a6ed24fecde411acdfc1d1c6cfdaa4330</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>radius</name>
      <anchorfile>classiDynTree_1_1Sphere.html</anchorfile>
      <anchor>ab5bea69eecc9147f77ac2defcdfe1442</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a5026e44f557e25b407642e95dd7bbb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>nameIsValid</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>adca1aa44db797c0122b0479b2a65ff9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform</type>
      <name>link_H_geometry</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a8be2a1e24878ac8de853123219a6ac64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector4</type>
      <name>material</name>
      <anchorfile>classiDynTree_1_1SolidShape.html</anchorfile>
      <anchor>a61f1577ee526add690666ad2e07e21c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::stackEl</name>
    <filename>structiDynTree_1_1stackEl.html</filename>
    <member kind="variable">
      <type>LinkConstPtr</type>
      <name>link</name>
      <anchorfile>structiDynTree_1_1stackEl.html</anchorfile>
      <anchor>a8942640a8090f1fc2ee6f6994d4108fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkConstPtr</type>
      <name>parent</name>
      <anchorfile>structiDynTree_1_1stackEl.html</anchorfile>
      <anchor>ae4a657d5bd7ec188e983964b76587b01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>state</name>
    <filename>structstate.html</filename>
  </compound>
  <compound kind="class">
    <name>iDynTree::SubModelDecomposition</name>
    <filename>classiDynTree_1_1SubModelDecomposition.html</filename>
    <member kind="function">
      <type></type>
      <name>SubModelDecomposition</name>
      <anchorfile>classiDynTree_1_1SubModelDecomposition.html</anchorfile>
      <anchor>ae82500f7dbab9194b1f65613373131f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SubModelDecomposition</name>
      <anchorfile>classiDynTree_1_1SubModelDecomposition.html</anchorfile>
      <anchor>a145cde29018b5b6c27a462925fd484f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>splitModelAlongJoints</name>
      <anchorfile>classiDynTree_1_1SubModelDecomposition.html</anchorfile>
      <anchor>a03d8e08985fa2b90c2f9a8cd5c4d97ce</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const std::vector&lt; std::string &gt; &amp;splitJoints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNrOfSubModels</name>
      <anchorfile>classiDynTree_1_1SubModelDecomposition.html</anchorfile>
      <anchor>a53534266e618b82ab612058081e813e4</anchor>
      <arglist>(const size_t nrOfSubModels)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfSubModels</name>
      <anchorfile>classiDynTree_1_1SubModelDecomposition.html</anchorfile>
      <anchor>a2e7f4ca8c79fb8401a5f3cd70db7147b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfLinks</name>
      <anchorfile>classiDynTree_1_1SubModelDecomposition.html</anchorfile>
      <anchor>a4ad7b85b26b61b08adb0256570556265</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traversal &amp;</type>
      <name>getTraversal</name>
      <anchorfile>classiDynTree_1_1SubModelDecomposition.html</anchorfile>
      <anchor>a34677a988436e7fa711c9c25abc8c464</anchor>
      <arglist>(const size_t subModelIndex)</arglist>
    </member>
    <member kind="function">
      <type>const Traversal &amp;</type>
      <name>getTraversal</name>
      <anchorfile>classiDynTree_1_1SubModelDecomposition.html</anchorfile>
      <anchor>a0e31307b930c929fa974d731d8fef449</anchor>
      <arglist>(const size_t subModelIndex) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSubModelOfLink</name>
      <anchorfile>classiDynTree_1_1SubModelDecomposition.html</anchorfile>
      <anchor>a716875f41b4d883d5ef8a2baa8930b4e</anchor>
      <arglist>(const LinkIndex &amp;link) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSubModelOfFrame</name>
      <anchorfile>classiDynTree_1_1SubModelDecomposition.html</anchorfile>
      <anchor>ac68e94640125f0909f1ef2023143dad4</anchor>
      <arglist>(const Model &amp;model, const FrameIndex &amp;frame) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KDL::CoDyCo::Regressors::subtreeBaseDynamicsRegressor</name>
    <filename>classKDL_1_1CoDyCo_1_1Regressors_1_1subtreeBaseDynamicsRegressor.html</filename>
    <base>KDL::CoDyCo::Regressors::DynamicRegressorInterface</base>
    <member kind="function">
      <type></type>
      <name>subtreeBaseDynamicsRegressor</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1subtreeBaseDynamicsRegressor.html</anchorfile>
      <anchor>a170fc769a3904e237dc1172fd07c14a3</anchor>
      <arglist>(const KDL::CoDyCo::UndirectedTree &amp;_undirected_tree, const iDynTree::SensorsList &amp;_sensors_tree, const std::vector&lt; int &gt; &amp;_linkIndices2regrCols, std::vector&lt; std::string &gt; _subtree_leaf_links=std::vector&lt; std::string &gt;(0), const bool _consider_ft_offset=false, bool _verbose=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~subtreeBaseDynamicsRegressor</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1subtreeBaseDynamicsRegressor.html</anchorfile>
      <anchor>ab9e43173d0047b9657a49555650a8ae0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNrOfOutputs</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1subtreeBaseDynamicsRegressor.html</anchorfile>
      <anchor>a7a82a3ef6ca032afd63f320f49660d3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; int &gt;</type>
      <name>getRelativeJunctions</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1subtreeBaseDynamicsRegressor.html</anchorfile>
      <anchor>a21cbf8d6598a9ad4804dec85b1365300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iDynTree::Regressors::DynamicsRegressorParametersList</type>
      <name>getUsedParameters</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1subtreeBaseDynamicsRegressor.html</anchorfile>
      <anchor>a72d09a3d27508ecfae39af404579b49a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setGlobalParameters</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1subtreeBaseDynamicsRegressor.html</anchorfile>
      <anchor>a4d693b8139c708b0d5991ed42cecbe43</anchor>
      <arglist>(const iDynTree::Regressors::DynamicsRegressorParametersList &amp;globalParameters)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeRegressor</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1subtreeBaseDynamicsRegressor.html</anchorfile>
      <anchor>ae592f7a129a7b1e72a8a5552f2822864</anchor>
      <arglist>(const KDL::JntArray &amp;q, const KDL::JntArray &amp;q_dot, const KDL::JntArray &amp;q_dotdot, const std::vector&lt; KDL::Frame &gt; &amp;X_dynamic_base, const std::vector&lt; KDL::Twist &gt; &amp;v, const std::vector&lt; KDL::Twist &gt; &amp;a, const iDynTree::SensorsMeasurements &amp;measured_wrenches, const KDL::JntArray &amp;measured_torques, Eigen::MatrixXd &amp;regressor_matrix, Eigen::VectorXd &amp;known_terms)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>configure</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1subtreeBaseDynamicsRegressor.html</anchorfile>
      <anchor>ab6adad117fd0835fa6cf96ad79ba79bc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::symoro_par_model</name>
    <filename>classiDynTree_1_1symoro__par__model.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1symoro__par__model.html</anchorfile>
      <anchor>a2385478a87e2229eb32a0abc9721e3b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1symoro__par__model.html</anchorfile>
      <anchor>a1792149da9eeb5931fb2578f863a05fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1symoro__par__model.html</anchorfile>
      <anchor>abe7bf3739ba51b0127ca4bea47a307f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>NF</name>
      <anchorfile>classiDynTree_1_1symoro__par__model.html</anchorfile>
      <anchor>aa9dedbb586c6f7eff3b2e2d3eb613a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>NL</name>
      <anchorfile>classiDynTree_1_1symoro__par__model.html</anchorfile>
      <anchor>ad3a052a1d0ccade67f89d7998fb20673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>NJ</name>
      <anchorfile>classiDynTree_1_1symoro__par__model.html</anchorfile>
      <anchor>adfc27f43739644e420dd3f6e08a32771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Type</name>
      <anchorfile>classiDynTree_1_1symoro__par__model.html</anchorfile>
      <anchor>a909a021fca5a9741c412d62899414e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>Ant</name>
      <anchorfile>classiDynTree_1_1symoro__par__model.html</anchorfile>
      <anchor>aa3e726c5d4809b23de21f93ddbd09bd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>Sigma</name>
      <anchorfile>classiDynTree_1_1symoro__par__model.html</anchorfile>
      <anchor>a883c2069089a9dab2e2f00e7bd0ebb3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>B</name>
      <anchorfile>classiDynTree_1_1symoro__par__model.html</anchorfile>
      <anchor>a9ac3863c49b25a89f46d2314439162d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>d</name>
      <anchorfile>classiDynTree_1_1symoro__par__model.html</anchorfile>
      <anchor>a7e4c28ef66e8693c8a2dbc8872c7c6b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>R</name>
      <anchorfile>classiDynTree_1_1symoro__par__model.html</anchorfile>
      <anchor>a89df5180a66db04a9ba902cd44d970be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>gamma</name>
      <anchorfile>classiDynTree_1_1symoro__par__model.html</anchorfile>
      <anchor>aca47281047450a23b2ce0050ff208a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>Alpha</name>
      <anchorfile>classiDynTree_1_1symoro__par__model.html</anchorfile>
      <anchor>a1b798bff672153f786983586f1f03b58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>Mu</name>
      <anchorfile>classiDynTree_1_1symoro__par__model.html</anchorfile>
      <anchor>a1c47cb60f32712441a78f9e7aef4177e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>Theta</name>
      <anchorfile>classiDynTree_1_1symoro__par__model.html</anchorfile>
      <anchor>a8d77787f102b427ca9b61b34437c2809</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::SystemLineariser</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1SystemLineariser.html</filename>
  </compound>
  <compound kind="struct">
    <name>iDynTree::TestMatrixMismatch</name>
    <filename>structiDynTree_1_1TestMatrixMismatch.html</filename>
    <member kind="function">
      <type></type>
      <name>TestMatrixMismatch</name>
      <anchorfile>structiDynTree_1_1TestMatrixMismatch.html</anchorfile>
      <anchor>a678884537e4533bf9936857f3c8d7cb4</anchor>
      <arglist>(bool _match, double _expected, double _realElement)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>match</name>
      <anchorfile>structiDynTree_1_1TestMatrixMismatch.html</anchorfile>
      <anchor>a494e7bed6dd1a5177f1b47a8717909fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>expected</name>
      <anchorfile>structiDynTree_1_1TestMatrixMismatch.html</anchorfile>
      <anchor>ab6ffcf5077580483c50bdd7ff94a6aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>realElement</name>
      <anchorfile>structiDynTree_1_1TestMatrixMismatch.html</anchorfile>
      <anchor>abb621257176b0e5b3e8d7c0b41a9d401</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::ThreeAxisAngularAccelerometerSensor::ThreeAxisAngularAccelerometerPrivateAttributes</name>
    <filename>structiDynTree_1_1ThreeAxisAngularAccelerometerSensor_1_1ThreeAxisAngularAccelerometerPrivateAttributes.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structiDynTree_1_1ThreeAxisAngularAccelerometerSensor_1_1ThreeAxisAngularAccelerometerPrivateAttributes.html</anchorfile>
      <anchor>a3b6e4ed4aa52d56e28535ff0ee7fb72e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform</type>
      <name>link_H_sensor</name>
      <anchorfile>structiDynTree_1_1ThreeAxisAngularAccelerometerSensor_1_1ThreeAxisAngularAccelerometerPrivateAttributes.html</anchorfile>
      <anchor>a477278282b3985ea178402f04e29ab79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>parent_link_index</name>
      <anchorfile>structiDynTree_1_1ThreeAxisAngularAccelerometerSensor_1_1ThreeAxisAngularAccelerometerPrivateAttributes.html</anchorfile>
      <anchor>a2fbaf4b1d4beb098b212367e9c05e90f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>parent_link_name</name>
      <anchorfile>structiDynTree_1_1ThreeAxisAngularAccelerometerSensor_1_1ThreeAxisAngularAccelerometerPrivateAttributes.html</anchorfile>
      <anchor>ad7c628facb44b502d761c1b8861c8456</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ThreeAxisAngularAccelerometerSensor</name>
    <filename>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</filename>
    <base>iDynTree::LinkSensor</base>
    <class kind="struct">iDynTree::ThreeAxisAngularAccelerometerSensor::ThreeAxisAngularAccelerometerPrivateAttributes</class>
    <member kind="function">
      <type></type>
      <name>ThreeAxisAngularAccelerometerSensor</name>
      <anchorfile>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</anchorfile>
      <anchor>a1512d5b7e32c358fdb0a0b6b9b5b8679</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreeAxisAngularAccelerometerSensor</name>
      <anchorfile>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</anchorfile>
      <anchor>a4c7efd1837494a1a771637cf8effb241</anchor>
      <arglist>(const ThreeAxisAngularAccelerometerSensor &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ThreeAxisAngularAccelerometerSensor &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</anchorfile>
      <anchor>aea25c9785d17ea96aeb46863e615c96f</anchor>
      <arglist>(const ThreeAxisAngularAccelerometerSensor &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreeAxisAngularAccelerometerSensor</name>
      <anchorfile>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</anchorfile>
      <anchor>ae4219b1ab49d08afe4631292e84d0b2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setName</name>
      <anchorfile>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</anchorfile>
      <anchor>ae60d56505a10ef186f6af7f5bf5feaa1</anchor>
      <arglist>(const std::string &amp;_name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setLinkSensorTransform</name>
      <anchorfile>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</anchorfile>
      <anchor>a0c6420e2d828d4d95c399f847bada325</anchor>
      <arglist>(const iDynTree::Transform &amp;link_H_sensor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setParentLink</name>
      <anchorfile>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</anchorfile>
      <anchor>a52e9392105c1194d30238ff2df75e782</anchor>
      <arglist>(const std::string &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setParentLinkIndex</name>
      <anchorfile>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</anchorfile>
      <anchor>a0d83d703d9273361a697fd33e64286a2</anchor>
      <arglist>(const LinkIndex &amp;parent_index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</anchorfile>
      <anchor>adf34f6a32f73d39b0a9a5eb98e675a05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SensorType</type>
      <name>getSensorType</name>
      <anchorfile>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</anchorfile>
      <anchor>a5ef9ac9d8a3d752d2d89e66006bb2a49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParentLink</name>
      <anchorfile>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</anchorfile>
      <anchor>a9e1daa37dc2f4d2dcae646e01cb06a5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinkIndex</type>
      <name>getParentLinkIndex</name>
      <anchorfile>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</anchorfile>
      <anchor>a0af155b769a0d09eafd0b2a8891944e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>getLinkSensorTransform</name>
      <anchorfile>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</anchorfile>
      <anchor>a2eda12416407060776056a95c375d554</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</anchorfile>
      <anchor>a7df52d9d13dd67a1cf29847d436070e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Sensor *</type>
      <name>clone</name>
      <anchorfile>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</anchorfile>
      <anchor>a1fbec7eb4903f7348a22c905c913c2a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateIndices</name>
      <anchorfile>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</anchorfile>
      <anchor>a8213b6c275f41db4b3a60bc2451a03f5</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>predictMeasurement</name>
      <anchorfile>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</anchorfile>
      <anchor>af25f1dada5f0669f6fe876274f66891d</anchor>
      <arglist>(const iDynTree::SpatialAcc &amp;linkAcc)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>predictMeasurement</name>
      <anchorfile>classiDynTree_1_1ThreeAxisAngularAccelerometerSensor.html</anchorfile>
      <anchor>a9d7c59ca9052b49786ee37fa31bf8f72</anchor>
      <arglist>(const iDynTree::SpatialAcc &amp;linkAcc, const iDynTree::Twist &amp;linkTwist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1LinkSensor.html</anchorfile>
      <anchor>ab715a5a2deca41ecb920133b075f7c58</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>updateIndeces</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>af70d378d9a03ea209587a3a9b86b4061</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::ThreeAxisForceTorqueContactSensor</name>
    <filename>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</filename>
    <base>iDynTree::LinkSensor</base>
    <class kind="struct">iDynTree::ThreeAxisForceTorqueContactSensor::ThreeAxisForceTorqueContactSensorPrivateAttributes</class>
    <member kind="function">
      <type></type>
      <name>ThreeAxisForceTorqueContactSensor</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>a68628c854b8a28e510aba96f0c802e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreeAxisForceTorqueContactSensor</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>ad268a5a84823f122b83fc59884734965</anchor>
      <arglist>(const ThreeAxisForceTorqueContactSensor &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ThreeAxisForceTorqueContactSensor &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>a6a2f21eb80757a76c575eb2f3bb504d5</anchor>
      <arglist>(const ThreeAxisForceTorqueContactSensor &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreeAxisForceTorqueContactSensor</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>afaa51370d3208168c7f393a839dbfedb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setName</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>a355c0226fb7c34e765123b965efdac85</anchor>
      <arglist>(const std::string &amp;_name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setLinkSensorTransform</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>a137df78d69f448d6a1e1876158167eec</anchor>
      <arglist>(const iDynTree::Transform &amp;link_H_sensor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setParentLink</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>a7e2978a17832c1405d6667db5515aa8b</anchor>
      <arglist>(const std::string &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setParentLinkIndex</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>ae29362a072ca8c3dcace8c39b553c83a</anchor>
      <arglist>(const LinkIndex &amp;parent_index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>a8297291284faa8217f01bad0fed9ca2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SensorType</type>
      <name>getSensorType</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>aac80df24ed741903317fb8a725ce0e36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParentLink</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>a6d1bf2bf8184f0a079f0c0bffc2c7b1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinkIndex</type>
      <name>getParentLinkIndex</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>a1c212ddb3446da62ac6904506250e374</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>getLinkSensorTransform</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>aeb7e44f72ffbb9991b0d9995c1040627</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>a659cbf015f650a0874fe4db00020cd10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Sensor *</type>
      <name>clone</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>a3a3cba2e70aaf1409f729411c668d9fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateIndices</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>aff3b2cd0b1a847dc6336c55042131e6e</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConsistent</name>
      <anchorfile>classiDynTree_1_1LinkSensor.html</anchorfile>
      <anchor>ab715a5a2deca41ecb920133b075f7c58</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>updateIndeces</name>
      <anchorfile>classiDynTree_1_1Sensor.html</anchorfile>
      <anchor>af70d378d9a03ea209587a3a9b86b4061</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLoadCellLocations</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>a40cfcd0ae4f87a355e9a103afae53df9</anchor>
      <arglist>(std::vector&lt; Position &gt; &amp;loadCellLocations)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Position &gt;</type>
      <name>getLoadCellLocations</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>af9dae114566e861aff50cdca6d296a52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>computeThreeAxisForceTorqueFromLoadCellMeasurements</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>ab4c6badea80c6d3a48ae1b6d96b76cc8</anchor>
      <arglist>(VectorDynSize &amp;loadCellMeasurements) const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>computeCenterOfPressureFromLoadCellMeasurements</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>a0cb7b4dcec179b29fefaa116f8a515a8</anchor>
      <arglist>(VectorDynSize &amp;loadCellMeasurements) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLoadCellLocations</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>a40cfcd0ae4f87a355e9a103afae53df9</anchor>
      <arglist>(std::vector&lt; Position &gt; &amp;loadCellLocations)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Position &gt;</type>
      <name>getLoadCellLocations</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>af9dae114566e861aff50cdca6d296a52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>computeThreeAxisForceTorqueFromLoadCellMeasurements</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>ab4c6badea80c6d3a48ae1b6d96b76cc8</anchor>
      <arglist>(VectorDynSize &amp;loadCellMeasurements) const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>computeCenterOfPressureFromLoadCellMeasurements</name>
      <anchorfile>classiDynTree_1_1ThreeAxisForceTorqueContactSensor.html</anchorfile>
      <anchor>a0cb7b4dcec179b29fefaa116f8a515a8</anchor>
      <arglist>(VectorDynSize &amp;loadCellMeasurements) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::ThreeAxisForceTorqueContactSensor::ThreeAxisForceTorqueContactSensorPrivateAttributes</name>
    <filename>structiDynTree_1_1ThreeAxisForceTorqueContactSensor_1_1ThreeAxisForceTorqueContactSensorPrivateAttributes.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structiDynTree_1_1ThreeAxisForceTorqueContactSensor_1_1ThreeAxisForceTorqueContactSensorPrivateAttributes.html</anchorfile>
      <anchor>ac4cb53a7fdb029aef9f3e35b00252a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform</type>
      <name>link_H_sensor</name>
      <anchorfile>structiDynTree_1_1ThreeAxisForceTorqueContactSensor_1_1ThreeAxisForceTorqueContactSensorPrivateAttributes.html</anchorfile>
      <anchor>a62987cc595e06bf1f4c284d1009699d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>parent_link_index</name>
      <anchorfile>structiDynTree_1_1ThreeAxisForceTorqueContactSensor_1_1ThreeAxisForceTorqueContactSensorPrivateAttributes.html</anchorfile>
      <anchor>aeb59fa4d9d693f3cbb2ed0ae7b1388f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>parent_link_name</name>
      <anchorfile>structiDynTree_1_1ThreeAxisForceTorqueContactSensor_1_1ThreeAxisForceTorqueContactSensorPrivateAttributes.html</anchorfile>
      <anchor>aef6a3ea048607af9a25305989fa971ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Position &gt;</type>
      <name>m_loadCellLocations</name>
      <anchorfile>structiDynTree_1_1ThreeAxisForceTorqueContactSensor_1_1ThreeAxisForceTorqueContactSensorPrivateAttributes.html</anchorfile>
      <anchor>abf7558a91707a47d436bed9997065172</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::optimalcontrol::TimedConstraint</name>
    <filename>structiDynTree_1_1optimalcontrol_1_1TimedConstraint.html</filename>
    <member kind="variable">
      <type>std::shared_ptr&lt; Constraint &gt;</type>
      <name>constraint</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedConstraint.html</anchorfile>
      <anchor>ac881f6cfd264576cfd7999faa0018eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeRange</type>
      <name>timeRange</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedConstraint.html</anchorfile>
      <anchor>a04dbb0e43ed75b9723029c4bd920db8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>constraintBuffer</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedConstraint.html</anchorfile>
      <anchor>a96b749fbae775dfd22d5ed8e54316e7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixDynSize</type>
      <name>stateJacobianBuffer</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedConstraint.html</anchorfile>
      <anchor>a0cafe685ba1e6a72b5ea414958095bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixDynSize</type>
      <name>controlJacobianBuffer</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedConstraint.html</anchorfile>
      <anchor>a76e76c7de7252c4870226f40b7b89016</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>lambdaBuffer</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedConstraint.html</anchorfile>
      <anchor>a85654697160bb8f9c2d832663a04bf0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::optimalcontrol::TimedCost</name>
    <filename>structiDynTree_1_1optimalcontrol_1_1TimedCost.html</filename>
    <member kind="function">
      <type>void</type>
      <name>resizeBuffers</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedCost.html</anchorfile>
      <anchor>a156b911b55c0cb03697bc71e3d3fc1ad</anchor>
      <arglist>(intType stateDim, intType controlDim)</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; Cost &gt;</type>
      <name>cost</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedCost.html</anchorfile>
      <anchor>a2a65c97624ee44e5e862ce9f00806d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixDynSize</type>
      <name>stateHessianBuffer</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedCost.html</anchorfile>
      <anchor>a7d5cba53966bc54611aa703a65e8c66a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixDynSize</type>
      <name>controlHessianBuffer</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedCost.html</anchorfile>
      <anchor>aee5b1a717cffcc114cb872fd541925f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixDynSize</type>
      <name>mixedHessianBuffer</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedCost.html</anchorfile>
      <anchor>a913500ccfffa59705817e560997bfdcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>stateJacobianBuffer</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedCost.html</anchorfile>
      <anchor>add0bd4f42412c4762a6dfb0be17d14c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorDynSize</type>
      <name>controlJacobianBuffer</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedCost.html</anchorfile>
      <anchor>a41915750b59ddada0b522250fdbae7dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>weight</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedCost.html</anchorfile>
      <anchor>a2affcb86dd88e9a509d4e3303ba22963</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeRange</type>
      <name>timeRange</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedCost.html</anchorfile>
      <anchor>a8d9bb6682d32d720e8573a4366ca05a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isLinear</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedCost.html</anchorfile>
      <anchor>a206e0560d518d82e48c23ac65d1a4245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isQuadratic</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedCost.html</anchorfile>
      <anchor>a0c2d6b1a082a0ccb6a111d04672570ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>stateHessianSparsity</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedCost.html</anchorfile>
      <anchor>a29e0c0e5ef0a898ca86b13b76d6ec0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>controlHessianSparsity</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedCost.html</anchorfile>
      <anchor>a48a4dfabf3d4a8d8b7ac44566fb47d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SparsityStructure</type>
      <name>mixedHessianSparsity</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedCost.html</anchorfile>
      <anchor>a8b80391acf45650127fa17b49616f0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasStateHessianSparsity</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedCost.html</anchorfile>
      <anchor>aa2a8f58246b250e03ac382e122c80308</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasControlHessianSparsity</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedCost.html</anchorfile>
      <anchor>a33a8ac04324a7d93dc5b654fcb539a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasMixedHessianSparsity</name>
      <anchorfile>structiDynTree_1_1optimalcontrol_1_1TimedCost.html</anchorfile>
      <anchor>a964f48a1ee36303d4303198b4501ec46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::TimeInvariantObject</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1TimeInvariantObject.html</filename>
    <templarg></templarg>
    <base>iDynTree::optimalcontrol::TimeVaryingObject</base>
    <member kind="function">
      <type></type>
      <name>TimeInvariantObject</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeInvariantObject.html</anchorfile>
      <anchor>a29c082df6fcc0f3733fea79953f11498</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeInvariantObject</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeInvariantObject.html</anchorfile>
      <anchor>a2a0e4aa6c899e1df7dbd96d01df33f6a</anchor>
      <arglist>(const Object &amp;timeInvariantObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TimeInvariantObject</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeInvariantObject.html</anchorfile>
      <anchor>a4c676205da6a1b360c8cc425fe8bf55a</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>Object &amp;</type>
      <name>get</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeInvariantObject.html</anchorfile>
      <anchor>ad00c4d8ab15fdb227f18c41d2997c2cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Object &amp;</type>
      <name>get</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeInvariantObject.html</anchorfile>
      <anchor>a73b6066f23e5462fc421fabd3ca79989</anchor>
      <arglist>(double time, bool &amp;isValid) final</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::TimeRange</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1TimeRange.html</filename>
    <member kind="function">
      <type></type>
      <name>TimeRange</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeRange.html</anchorfile>
      <anchor>abec74795c9958ccf0966cb787f87e1cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeRange</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeRange.html</anchorfile>
      <anchor>a1bff0f60d902de8887b89ab7b241296a</anchor>
      <arglist>(const double init, const double end)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>initTime</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeRange.html</anchorfile>
      <anchor>a8777a4422ff57f9d0e4f0c7e9b92983c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>endTime</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeRange.html</anchorfile>
      <anchor>aaa3e2e156c7711165572a232bc589d7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeRange.html</anchorfile>
      <anchor>abf9e5ee1e08f815bf4661216d4dd14dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTimeInterval</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeRange.html</anchorfile>
      <anchor>aa6c1fe8169f79d13ecf89aba2ce70132</anchor>
      <arglist>(const double init, const double end)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeRange.html</anchorfile>
      <anchor>a4bf8b850c34c312bbb41f620015d16d7</anchor>
      <arglist>(const TimeRange &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeRange.html</anchorfile>
      <anchor>ae3eab5a642f5a8101b64dc7bdd72976b</anchor>
      <arglist>(const TimeRange &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeRange.html</anchorfile>
      <anchor>a0c255e38ff0d653c9918e923a4416b9c</anchor>
      <arglist>(const TimeRange &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeRange.html</anchorfile>
      <anchor>a47c00f9bf3507d6361701b6bb5c7915e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInRange</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeRange.html</anchorfile>
      <anchor>ae5c421bd30acf3a9770848e114f3b8e5</anchor>
      <arglist>(double time) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInstant</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeRange.html</anchorfile>
      <anchor>ae08c84a663dbdef2bd7707794ad76b6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimeRange</type>
      <name>AnyTime</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeRange.html</anchorfile>
      <anchor>a2b0c34409f7e78a9a19a26a0fffe78de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimeRange</type>
      <name>Instant</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeRange.html</anchorfile>
      <anchor>a1aef7270fac0394cc36594fead3f0981</anchor>
      <arglist>(const double time)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimalcontrol::TimeVaryingObject</name>
    <filename>classiDynTree_1_1optimalcontrol_1_1TimeVaryingObject.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>TimeVaryingObject</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeVaryingObject.html</anchorfile>
      <anchor>afc82e0bb632774bbb9573548be0449a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeVaryingObject</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeVaryingObject.html</anchorfile>
      <anchor>ab8ad0577c4e724e8a91dec1447e150e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Object &amp;</type>
      <name>get</name>
      <anchorfile>classiDynTree_1_1optimalcontrol_1_1TimeVaryingObject.html</anchorfile>
      <anchor>af506565632a9133a63152880682c2b85</anchor>
      <arglist>(double time, bool &amp;isValid)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KDL::CoDyCo::Regressors::torqueRegressor</name>
    <filename>classKDL_1_1CoDyCo_1_1Regressors_1_1torqueRegressor.html</filename>
    <base>KDL::CoDyCo::Regressors::DynamicRegressorInterface</base>
    <member kind="function">
      <type></type>
      <name>torqueRegressor</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1torqueRegressor.html</anchorfile>
      <anchor>a1f03df95fa0853c5b654c22c32a1c8ae</anchor>
      <arglist>(const KDL::CoDyCo::UndirectedTree &amp;_undirected_tree, const iDynTree::SensorsList &amp;_sensors_tree, const std::vector&lt; int &gt; &amp;_linkIndices2regrCols, const std::string &amp;dof_name, const bool _reverse_direction=false, const std::vector&lt; bool &gt; &amp;_activated_ft_sensors=std::vector&lt; bool &gt;(0), const bool _consider_ft_offset=false, const bool _verbose=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~torqueRegressor</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1torqueRegressor.html</anchorfile>
      <anchor>a268cb7465f70c9c66a2223838a1b9f53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActiveFTSensor</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1torqueRegressor.html</anchorfile>
      <anchor>a755f6c72a5c4bfa16ea6d46520bb261e</anchor>
      <arglist>(const int ft_sensor_id) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>configure</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1torqueRegressor.html</anchorfile>
      <anchor>acbf1d81fffeed910a3f9cad88a761012</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfOutputs</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1torqueRegressor.html</anchorfile>
      <anchor>aa69361f7d385dca17606fcc9a3eae53f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; int &gt;</type>
      <name>getRelativeJunctions</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1torqueRegressor.html</anchorfile>
      <anchor>a989d150f3a62dc6cf79a38b7daadd1da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iDynTree::Regressors::DynamicsRegressorParametersList</type>
      <name>getUsedParameters</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1torqueRegressor.html</anchorfile>
      <anchor>af23ee84f04adbd2f7f2acb21eac5b44e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setGlobalParameters</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1torqueRegressor.html</anchorfile>
      <anchor>a8f9a6178f0fa0b559bc883436a0ecbb7</anchor>
      <arglist>(const iDynTree::Regressors::DynamicsRegressorParametersList &amp;globalParameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>computeRegressor</name>
      <anchorfile>classKDL_1_1CoDyCo_1_1Regressors_1_1torqueRegressor.html</anchorfile>
      <anchor>a653b6b81481a663a88ff567c33721b5c</anchor>
      <arglist>(const KDL::JntArray &amp;q, const KDL::JntArray &amp;q_dot, const KDL::JntArray &amp;q_dotdot, const std::vector&lt; KDL::Frame &gt; &amp;X_dynamic_base, const std::vector&lt; KDL::Twist &gt; &amp;v, const std::vector&lt; KDL::Twist &gt; &amp;a, const iDynTree::SensorsMeasurements &amp;measured_wrenches, const KDL::JntArray &amp;measured_torques, Eigen::MatrixXd &amp;regressor_matrix, Eigen::VectorXd &amp;known_terms)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Transform</name>
    <filename>classiDynTree_1_1Transform.html</filename>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a27bbf3c5f81a55f521aebccd2ef25c82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a46a45cf7fbe614298b85c4784f3518de</anchor>
      <arglist>(const Rotation &amp;_rot, const Position &amp;origin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a51b7b01d69d3e0cf26851745a742a8a6</anchor>
      <arglist>(const Matrix4x4 &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a813733bebe23163c27cecab9e289aeef</anchor>
      <arglist>(const Transform &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromHomogeneousTransform</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>adf94fe4e7e534b90a8515d9fe2b03d9c</anchor>
      <arglist>(const Matrix4x4 &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a964e5024598b174c8b84ffe49a71e115</anchor>
      <arglist>(const Transform &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TransformSemantics &amp;</type>
      <name>getSemantics</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>af967be5d54d5d066306de0e664777c81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TransformSemantics &amp;</type>
      <name>getSemantics</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a86ba540be525256008a1e0f652e603ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Rotation &amp;</type>
      <name>getRotation</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>ab0393d7b5d8f418263e87c07df657499</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Position &amp;</type>
      <name>getPosition</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>ab487d3e546ef58437df8c50a6e51e218</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a2b95e05edabf49b5584efb38d105f9be</anchor>
      <arglist>(const Rotation &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>ac27f7fdc364760a5e0e24b3c0abab7a4</anchor>
      <arglist>(const Position &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a83a88c7dbba949bfced19dac0a133f4e</anchor>
      <arglist>(const Transform &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a8a58af1e6c5d582c5765d91e5cdc1675</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a47a4606065be27e235712f9805b3bdc9</anchor>
      <arglist>(const Position &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>af120c9b238d9efdf947109b47c4e4fdf</anchor>
      <arglist>(const Wrench &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a5ecf98714169de1a297c543305005a92</anchor>
      <arglist>(const Twist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMomentum</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a9698f396afb2d422caae294fd6a8894c</anchor>
      <arglist>(const SpatialMomentum &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialAcc</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>adb61420ce0cf15da881551147ced2000</anchor>
      <arglist>(const SpatialAcc &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionVector</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>ac77626420790ccdf7bc8672f0f8238d4</anchor>
      <arglist>(const SpatialMotionVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>ad0351792d47583c938b5dab0d678bafc</anchor>
      <arglist>(const SpatialForceVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a1434f959c24d6047900578768e29909c</anchor>
      <arglist>(const SpatialInertia &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ArticulatedBodyInertia</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a909ab9d195c19ede41da8b503be868c0</anchor>
      <arglist>(const ArticulatedBodyInertia &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a4b630c9130ea310c7dc05034a145557f</anchor>
      <arglist>(const Direction &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Axis</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>aa342f1751789eba01433f662d2b0c512</anchor>
      <arglist>(const Axis &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix4x4</type>
      <name>asHomogeneousTransform</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a8db2358dc66b742a7dcc19e5e43f4e39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>asAdjointTransform</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>afadd977e513cdb2813b8763abe627121</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>asAdjointTransformWrench</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a860616069f3511b9a78b82b4a3de1f2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionVector</type>
      <name>log</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a0020412b9f32230742d028960fcdc811</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>ad58158a4351190312529596e6ee4571f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a3cfe8175a9139f543034665f40743535</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Transform</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>aef2669fb1b435c567fc893f95d6725e1</anchor>
      <arglist>(const Transform &amp;op1, const Transform &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Transform</type>
      <name>inverse2</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>abf6014da409bdf3e557e486f7992efa0</anchor>
      <arglist>(const Transform &amp;trans)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Transform</type>
      <name>Identity</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>aa91c8c96db65061a4dba503652057345</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Position</type>
      <name>pos</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a10cda19caf39a2f170da141491e274f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Rotation</type>
      <name>rot</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a473cab87d96deea511e558fa67b21e57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransformSemantics</type>
      <name>semantics</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a00cda3a15a658dde02b8031fe2695d7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a83a88c7dbba949bfced19dac0a133f4e</anchor>
      <arglist>(const Transform &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a8a58af1e6c5d582c5765d91e5cdc1675</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a47a4606065be27e235712f9805b3bdc9</anchor>
      <arglist>(const Position &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>af120c9b238d9efdf947109b47c4e4fdf</anchor>
      <arglist>(const Wrench &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a5ecf98714169de1a297c543305005a92</anchor>
      <arglist>(const Twist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMomentum</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a9698f396afb2d422caae294fd6a8894c</anchor>
      <arglist>(const SpatialMomentum &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialAcc</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>adb61420ce0cf15da881551147ced2000</anchor>
      <arglist>(const SpatialAcc &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionVector</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>ac77626420790ccdf7bc8672f0f8238d4</anchor>
      <arglist>(const SpatialMotionVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>ad0351792d47583c938b5dab0d678bafc</anchor>
      <arglist>(const SpatialForceVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a1434f959c24d6047900578768e29909c</anchor>
      <arglist>(const SpatialInertia &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ArticulatedBodyInertia</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a909ab9d195c19ede41da8b503be868c0</anchor>
      <arglist>(const ArticulatedBodyInertia &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a4b630c9130ea310c7dc05034a145557f</anchor>
      <arglist>(const Direction &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Axis</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>aa342f1751789eba01433f662d2b0c512</anchor>
      <arglist>(const Axis &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix4x4</type>
      <name>asHomogeneousTransform</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a8db2358dc66b742a7dcc19e5e43f4e39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>asAdjointTransform</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>afadd977e513cdb2813b8763abe627121</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>asAdjointTransformWrench</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a860616069f3511b9a78b82b4a3de1f2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionVector</type>
      <name>log</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a0020412b9f32230742d028960fcdc811</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>ad58158a4351190312529596e6ee4571f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1Transform.html</anchorfile>
      <anchor>a3cfe8175a9139f543034665f40743535</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>internal::kinematics::TransformConstraint</name>
    <filename>classinternal_1_1kinematics_1_1TransformConstraint.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>TransformConstraintType</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>aae569ceeb375670f5b2121ac7da5d525</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TransformConstraintTypePosition</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>aae569ceeb375670f5b2121ac7da5d525a74879ea5bd8514c63144ed2597b64ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TransformConstraintTypeRotation</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>aae569ceeb375670f5b2121ac7da5d525a8cf0cfaccb3de41db2ba086380659a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TransformConstraintTypeFullTransform</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>aae569ceeb375670f5b2121ac7da5d525acd763304a605e1374ce33208cdab1711</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TransformConstraintTypePosition</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>aae569ceeb375670f5b2121ac7da5d525a74879ea5bd8514c63144ed2597b64ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TransformConstraintTypeRotation</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>aae569ceeb375670f5b2121ac7da5d525a8cf0cfaccb3de41db2ba086380659a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TransformConstraintTypeFullTransform</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>aae569ceeb375670f5b2121ac7da5d525acd763304a605e1374ce33208cdab1711</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getSize</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>ab62d89d1640da7c71043af7306e9af1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TransformConstraint::TransformConstraintType</type>
      <name>getType</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>a90ece5b8b117c951e3daa618b5ad3c64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPositionConstraint</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>a63a141104d6a958e0b406dad7da88f4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRotationConstraint</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>a416cb3eea28f7763135360c443dbb46e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::Position &amp;</type>
      <name>getPosition</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>abe8349bbb6256d64bd88a0b34463d62c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>a7aa03cdc075ce535499bc3f38d8c129b</anchor>
      <arglist>(const iDynTree::Position &amp;newPos)</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::Rotation &amp;</type>
      <name>getRotation</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>aa76a67ca6ea669ec02a47a62cdfb8a33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>a0b5070a6ccb41e1fa9503aee5b266664</anchor>
      <arglist>(const iDynTree::Rotation &amp;newRot)</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::Transform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>a2c08c9d77197c3a8b4439792ec9ba61e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getFrameName</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>a60219ccd56ca1c84afda19baee86f84d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const double</type>
      <name>getPositionWeight</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>ade2c7910317b7d5373e2b668aa7e1e47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositionWeight</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>afb45c0e46b7b181b03ac053fd054aa42</anchor>
      <arglist>(const double newPosWeight)</arglist>
    </member>
    <member kind="function">
      <type>const double</type>
      <name>getRotationWeight</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>adbe7987551ef9ee0a23a8b403014c40b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotationWeight</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>add76b23dcf1cda8c712935a70f865ea7</anchor>
      <arglist>(const double newRotWeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetResolutionMode</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>ab101059da0fea68ee61bb18f88878243</anchor>
      <arglist>(enum iDynTree::InverseKinematicsTreatTargetAsConstraint mode)</arglist>
    </member>
    <member kind="function">
      <type>enum iDynTree::InverseKinematicsTreatTargetAsConstraint</type>
      <name>targetResolutionMode</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>a3ae847b060483678b926618cb9c72a6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActive</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>a07897a0dcb1a8e50f5dc4053033c94ee</anchor>
      <arglist>(const bool isActive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>af305af8528a87aab8d2b85438cfde2a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TransformConstraint</type>
      <name>positionConstraint</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>a06eec9e1090524c2909aafca2cd32644</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Position &amp;position, const double posWeight=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TransformConstraint</type>
      <name>rotationConstraint</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>af8bdafbe6e33f24e644ebd33333c16a2</anchor>
      <arglist>(const std::string &amp;frameName, const iDynTree::Rotation &amp;rotation, const double rotWeight=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TransformConstraint</type>
      <name>fullTransformConstraint</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>a12a97fa3cd5bba9ea329fbe5da4c1bc6</anchor>
      <arglist>(const std::string &amp;constrainedFrameName, const iDynTree::Position &amp;position, const iDynTree::Rotation &amp;rotation, const double posWeight=1.0, const double rotWeight=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TransformConstraint</type>
      <name>fullTransformConstraint</name>
      <anchorfile>classinternal_1_1kinematics_1_1TransformConstraint.html</anchorfile>
      <anchor>a61a3c280307ae94eb4114cb0ab0bbffe</anchor>
      <arglist>(const std::string &amp;constrainedFrameName, const iDynTree::Transform &amp;transform, const double posWeight=1.0, const double rotWeight=1.0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::TransformDerivative</name>
    <filename>classiDynTree_1_1TransformDerivative.html</filename>
    <member kind="function">
      <type></type>
      <name>TransformDerivative</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>adf92c041cf5c91f7a56ddac14a9f30bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformDerivative</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a86d92c6237183c73b300a3d748eda395</anchor>
      <arglist>(const Matrix3x3 &amp;_rotDeriv, const Vector3 &amp;posDeriv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformDerivative</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a9ce3f86db8990c49d8dd2c68db4a68f2</anchor>
      <arglist>(const TransformDerivative &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TransformDerivative</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>aa7c10eaa9a3898fc9fb67fe6c8188e0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3x3 &amp;</type>
      <name>getRotationDerivative</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a42a51ce797aa70699c9e0f28acd3c8a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>getPositionDerivative</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a22811967fb65edf7e662504f693098a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotationDerivative</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a5cc3d9ce991a42f19d8858c19fd1573e</anchor>
      <arglist>(const Matrix3x3 &amp;rotationDerivative)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositionDerivative</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a1da48139b879178dcefae4abf004ec15</anchor>
      <arglist>(const Vector3 &amp;positionDerivative)</arglist>
    </member>
    <member kind="function">
      <type>Matrix4x4</type>
      <name>asHomogeneousTransformDerivative</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a38890e0b6e1c6a6e65b220cf2ae598ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>asAdjointTransformDerivative</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a49312f51f1958233deaeabc6338f503e</anchor>
      <arglist>(const Transform &amp;transform) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>asAdjointTransformWrenchDerivative</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>ab27febf007aa54fa3c88e74b37a3293c</anchor>
      <arglist>(const Transform &amp;transform) const</arglist>
    </member>
    <member kind="function">
      <type>TransformDerivative</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a1233fc928abded3318a8d34cdd6762ae</anchor>
      <arglist>(const Transform &amp;otherTransform) const</arglist>
    </member>
    <member kind="function">
      <type>TransformDerivative</type>
      <name>derivativeOfInverse</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>afadded161ac37c2ace8c182817ec3c3e</anchor>
      <arglist>(const Transform &amp;transform) const</arglist>
    </member>
    <member kind="function">
      <type>ArticulatedBodyInertia</type>
      <name>transform</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a27c594f59804d305f3fbb3e5edaff273</anchor>
      <arglist>(const Transform &amp;transform, ArticulatedBodyInertia &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>transform</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a250449a4ca6bbae36481e15bb883c5aa</anchor>
      <arglist>(const Transform &amp;transform, SpatialForceVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionVector</type>
      <name>transform</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a7b8b4747e5511931668ec4f1ef6159ab</anchor>
      <arglist>(const Transform &amp;transform, SpatialMotionVector &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TransformDerivative</type>
      <name>Zero</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a16aa640a135d76be55136da9b93a1c87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>posDerivative</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a1cec24a352476d31501a6fc9a8f4715e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3x3</type>
      <name>rotDerivative</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>aae1bddabe0940d98e03251361e766570</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Matrix4x4</type>
      <name>asHomogeneousTransformDerivative</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a38890e0b6e1c6a6e65b220cf2ae598ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>asAdjointTransformDerivative</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a49312f51f1958233deaeabc6338f503e</anchor>
      <arglist>(const Transform &amp;transform) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>asAdjointTransformWrenchDerivative</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>ab27febf007aa54fa3c88e74b37a3293c</anchor>
      <arglist>(const Transform &amp;transform) const</arglist>
    </member>
    <member kind="function">
      <type>TransformDerivative</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a1233fc928abded3318a8d34cdd6762ae</anchor>
      <arglist>(const Transform &amp;otherTransform) const</arglist>
    </member>
    <member kind="function">
      <type>TransformDerivative</type>
      <name>derivativeOfInverse</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>afadded161ac37c2ace8c182817ec3c3e</anchor>
      <arglist>(const Transform &amp;transform) const</arglist>
    </member>
    <member kind="function">
      <type>ArticulatedBodyInertia</type>
      <name>transform</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a27c594f59804d305f3fbb3e5edaff273</anchor>
      <arglist>(const Transform &amp;transform, ArticulatedBodyInertia &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>transform</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a250449a4ca6bbae36481e15bb883c5aa</anchor>
      <arglist>(const Transform &amp;transform, SpatialForceVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionVector</type>
      <name>transform</name>
      <anchorfile>classiDynTree_1_1TransformDerivative.html</anchorfile>
      <anchor>a7b8b4747e5511931668ec4f1ef6159ab</anchor>
      <arglist>(const Transform &amp;transform, SpatialMotionVector &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::TransformSemantics</name>
    <filename>classiDynTree_1_1TransformSemantics.html</filename>
    <member kind="function">
      <type></type>
      <name>TransformSemantics</name>
      <anchorfile>classiDynTree_1_1TransformSemantics.html</anchorfile>
      <anchor>a6f1d255c8da69118e1bf08696522cc48</anchor>
      <arglist>(PositionSemantics &amp;position, RotationSemantics &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>const RotationSemantics &amp;</type>
      <name>getRotationSemantics</name>
      <anchorfile>classiDynTree_1_1TransformSemantics.html</anchorfile>
      <anchor>ad7b50987f09213337218fdef51b0783c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PositionSemantics &amp;</type>
      <name>getPositionSemantics</name>
      <anchorfile>classiDynTree_1_1TransformSemantics.html</anchorfile>
      <anchor>a8134589b58a77f6eda012eedfca16185</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRotationSemantics</name>
      <anchorfile>classiDynTree_1_1TransformSemantics.html</anchorfile>
      <anchor>a5feb78f5ac98f8a9704cd121b28de948</anchor>
      <arglist>(const RotationSemantics &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPositionSemantics</name>
      <anchorfile>classiDynTree_1_1TransformSemantics.html</anchorfile>
      <anchor>a338c13071a92dd962cc14db54cd370ef</anchor>
      <arglist>(const PositionSemantics &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1TransformSemantics.html</anchorfile>
      <anchor>a5d3ee9ca89f1570d8203859dba473115</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1TransformSemantics.html</anchorfile>
      <anchor>a561f15d4d585e0dece3328cbe006f2c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>check_position2rotationConsistency</name>
      <anchorfile>classiDynTree_1_1TransformSemantics.html</anchorfile>
      <anchor>afb77db6e37a1b72f145cb089dbdb1688</anchor>
      <arglist>(const PositionSemantics &amp;position, const RotationSemantics &amp;rotation)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PositionSemantics &amp;</type>
      <name>positionSemantics</name>
      <anchorfile>classiDynTree_1_1TransformSemantics.html</anchorfile>
      <anchor>acd0371d04fc27b14cb5315342b786123</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RotationSemantics &amp;</type>
      <name>rotationSemantics</name>
      <anchorfile>classiDynTree_1_1TransformSemantics.html</anchorfile>
      <anchor>ad7f02b9a30767b34d1653aa1ade1c38a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Transform</name>
      <anchorfile>classiDynTree_1_1TransformSemantics.html</anchorfile>
      <anchor>af851b4d9aacd1a871da33592334b8d72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1TransformSemantics.html</anchorfile>
      <anchor>a5d3ee9ca89f1570d8203859dba473115</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1TransformSemantics.html</anchorfile>
      <anchor>a561f15d4d585e0dece3328cbe006f2c0</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Traversal</name>
    <filename>classiDynTree_1_1Traversal.html</filename>
    <member kind="function">
      <type></type>
      <name>Traversal</name>
      <anchorfile>classiDynTree_1_1Traversal.html</anchorfile>
      <anchor>ae4970440869a8eb807f960325524e6e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Traversal</name>
      <anchorfile>classiDynTree_1_1Traversal.html</anchorfile>
      <anchor>a70220dfc59ce52d03d330e4fed7f11da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrOfVisitedLinks</name>
      <anchorfile>classiDynTree_1_1Traversal.html</anchorfile>
      <anchor>a9399131b8326438aa1b669b5a44fb720</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Link *</type>
      <name>getLink</name>
      <anchorfile>classiDynTree_1_1Traversal.html</anchorfile>
      <anchor>ad176d3bcc500d2d55a0611c3f796fa1b</anchor>
      <arglist>(const TraversalIndex traversalIndex) const</arglist>
    </member>
    <member kind="function">
      <type>const Link *</type>
      <name>getBaseLink</name>
      <anchorfile>classiDynTree_1_1Traversal.html</anchorfile>
      <anchor>a741a9d001471a000a154a9f81c870278</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Link *</type>
      <name>getParentLink</name>
      <anchorfile>classiDynTree_1_1Traversal.html</anchorfile>
      <anchor>a9035d467e468719c139b30df8c8c8847</anchor>
      <arglist>(const TraversalIndex traversalIndex) const</arglist>
    </member>
    <member kind="function">
      <type>const IJoint *</type>
      <name>getParentJoint</name>
      <anchorfile>classiDynTree_1_1Traversal.html</anchorfile>
      <anchor>a8d9766b5d64bcd0f7de90b72e53d0946</anchor>
      <arglist>(const TraversalIndex traversalIndex) const</arglist>
    </member>
    <member kind="function">
      <type>const Link *</type>
      <name>getParentLinkFromLinkIndex</name>
      <anchorfile>classiDynTree_1_1Traversal.html</anchorfile>
      <anchor>a89668689e1fbf26dd559ada7c8324ff3</anchor>
      <arglist>(const LinkIndex linkIndex) const</arglist>
    </member>
    <member kind="function">
      <type>const IJoint *</type>
      <name>getParentJointFromLinkIndex</name>
      <anchorfile>classiDynTree_1_1Traversal.html</anchorfile>
      <anchor>ac3800930ffdd320c2422d3f3536350a1</anchor>
      <arglist>(const LinkIndex linkIndex) const</arglist>
    </member>
    <member kind="function">
      <type>TraversalIndex</type>
      <name>getTraversalIndexFromLinkIndex</name>
      <anchorfile>classiDynTree_1_1Traversal.html</anchorfile>
      <anchor>a34685ec218439e50f5c69979eccf1a0b</anchor>
      <arglist>(const LinkIndex linkIndex) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reset</name>
      <anchorfile>classiDynTree_1_1Traversal.html</anchorfile>
      <anchor>a3805f4b2d3ced7e603919e96520dfa14</anchor>
      <arglist>(const unsigned int nrOfLinksInModel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reset</name>
      <anchorfile>classiDynTree_1_1Traversal.html</anchorfile>
      <anchor>a50152ca9efd43c153817875717868c01</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addTraversalBase</name>
      <anchorfile>classiDynTree_1_1Traversal.html</anchorfile>
      <anchor>a3f59fac9f81f21568320ee3d2e803e80</anchor>
      <arglist>(const Link *link)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addTraversalElement</name>
      <anchorfile>classiDynTree_1_1Traversal.html</anchorfile>
      <anchor>a83d3620b6f58c32789e9911c37a9618d</anchor>
      <arglist>(const Link *link, const IJoint *jointToParent, const Link *parentLink)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParentOf</name>
      <anchorfile>classiDynTree_1_1Traversal.html</anchorfile>
      <anchor>afe6e4f14929306f0246609666bf7c53c</anchor>
      <arglist>(const LinkIndex parentCandidate, const LinkIndex childCandidate) const</arglist>
    </member>
    <member kind="function">
      <type>LinkIndex</type>
      <name>getChildLinkIndexFromJointIndex</name>
      <anchorfile>classiDynTree_1_1Traversal.html</anchorfile>
      <anchor>af511b057b56553be5db56e34ca17c9a9</anchor>
      <arglist>(const Model &amp;model, const JointIndex jntIdx) const</arglist>
    </member>
    <member kind="function">
      <type>LinkIndex</type>
      <name>getParentLinkIndexFromJointIndex</name>
      <anchorfile>classiDynTree_1_1Traversal.html</anchorfile>
      <anchor>a7c82fa00d69ac54fefdd89abcf1b2a5f</anchor>
      <arglist>(const Model &amp;model, const JointIndex jntIdx) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1Traversal.html</anchorfile>
      <anchor>a46e66828b90f0455f3fc4c00fd112411</anchor>
      <arglist>(const Model &amp;model) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimization::Triplet</name>
    <filename>classiDynTree_1_1optimization_1_1Triplet.html</filename>
    <member kind="function">
      <type>const size_t &amp;</type>
      <name>row</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Triplet.html</anchorfile>
      <anchor>aba22fab42cfe0d7a075532771c30da45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const size_t &amp;</type>
      <name>col</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Triplet.html</anchorfile>
      <anchor>a130f6919a2373710e49acfeace984008</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>value</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Triplet.html</anchorfile>
      <anchor>a01e900deda0349ad7ada080f6f159086</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>m_row</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Triplet.html</anchorfile>
      <anchor>a9cbec9f22840cf09ed1a1e77c50e5397</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>m_col</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Triplet.html</anchorfile>
      <anchor>ae8242e436c632f8a02e3daba7401cdfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_value</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Triplet.html</anchorfile>
      <anchor>a8d5f4d45ae75dd31d7d643b85e963045</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Triplet</name>
    <filename>classiDynTree_1_1Triplet.html</filename>
    <member kind="function">
      <type></type>
      <name>Triplet</name>
      <anchorfile>classiDynTree_1_1Triplet.html</anchorfile>
      <anchor>a419c7fd5e93253bfbc9ff81647dc26c7</anchor>
      <arglist>(unsigned row, unsigned column, double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classiDynTree_1_1Triplet.html</anchorfile>
      <anchor>ac9deac2f6706016c2ec6b420021c2b75</anchor>
      <arglist>(const iDynTree::Triplet &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1Triplet.html</anchorfile>
      <anchor>a0d0ea030041afd141464944ed27c6ac9</anchor>
      <arglist>(const iDynTree::Triplet &amp;) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>rowMajorCompare</name>
      <anchorfile>classiDynTree_1_1Triplet.html</anchorfile>
      <anchor>aad9d3a9ffdfceeead4350ac1aa23bedb</anchor>
      <arglist>(const iDynTree::Triplet &amp;a, const iDynTree::Triplet &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>columnMajorCompare</name>
      <anchorfile>classiDynTree_1_1Triplet.html</anchorfile>
      <anchor>a3f938abf42342340427976eb3cad182e</anchor>
      <arglist>(const iDynTree::Triplet &amp;a, const iDynTree::Triplet &amp;b)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>row</name>
      <anchorfile>classiDynTree_1_1Triplet.html</anchorfile>
      <anchor>a907b9db769d1ab0c64336030f94ec3f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>column</name>
      <anchorfile>classiDynTree_1_1Triplet.html</anchorfile>
      <anchor>aa1794c35ab00895431456e2441fad2b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>value</name>
      <anchorfile>classiDynTree_1_1Triplet.html</anchorfile>
      <anchor>acdaf460ce61a536013c84156139a5d76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimization::TripletIterator</name>
    <filename>classiDynTree_1_1optimization_1_1TripletIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>TripletIterator</name>
      <anchorfile>classiDynTree_1_1optimization_1_1TripletIterator.html</anchorfile>
      <anchor>a8bd57d8ad2bfda25fcf3ebeefcb51120</anchor>
      <arglist>(std::shared_ptr&lt; std::vector&lt; size_t &gt;&gt; rowIndeces, std::shared_ptr&lt; std::vector&lt; size_t &gt;&gt; colIndeces, std::shared_ptr&lt; MatrixDynSize &gt; denseMatrix, bool addIdentityOnTop=false)</arglist>
    </member>
    <member kind="function">
      <type>TripletIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classiDynTree_1_1optimization_1_1TripletIterator.html</anchorfile>
      <anchor>ae261ffdca2f52aeac7ff0f93451306cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1optimization_1_1TripletIterator.html</anchorfile>
      <anchor>a3edefbfe2b438c6174d21f53dc12fb25</anchor>
      <arglist>(const TripletIterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiDynTree_1_1optimization_1_1TripletIterator.html</anchorfile>
      <anchor>a0de8c8cbf7cde0138dfb35ca8e2db80e</anchor>
      <arglist>(const TripletIterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Triplet *</type>
      <name>operator-&gt;</name>
      <anchorfile>classiDynTree_1_1optimization_1_1TripletIterator.html</anchorfile>
      <anchor>a543e4ae7d36ba8cc2b3f443670213c63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Triplet &amp;</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1optimization_1_1TripletIterator.html</anchorfile>
      <anchor>af2d0955163502ff3f73557079dc75c13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TripletIterator</type>
      <name>begin</name>
      <anchorfile>classiDynTree_1_1optimization_1_1TripletIterator.html</anchorfile>
      <anchor>a64267670a61783d39a0881892c82db0a</anchor>
      <arglist>(std::shared_ptr&lt; std::vector&lt; size_t &gt;&gt; rowIndeces, std::shared_ptr&lt; std::vector&lt; size_t &gt;&gt; colIndeces, std::shared_ptr&lt; MatrixDynSize &gt; denseMatrix, bool addIdentityOnTop=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TripletIterator</type>
      <name>end</name>
      <anchorfile>classiDynTree_1_1optimization_1_1TripletIterator.html</anchorfile>
      <anchor>a5d8303949d7725384c001271d6560101</anchor>
      <arglist>(std::shared_ptr&lt; std::vector&lt; size_t &gt;&gt; rowIndeces, std::shared_ptr&lt; std::vector&lt; size_t &gt;&gt; colIndeces, std::shared_ptr&lt; MatrixDynSize &gt; denseMatrix, bool addIdentityOnTop=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SparseMatrix::Iterator::TripletRef</name>
    <filename>classiDynTree_1_1SparseMatrix_1_1Iterator_1_1TripletRef.html</filename>
    <member kind="function">
      <type>int</type>
      <name>row</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1Iterator_1_1TripletRef.html</anchorfile>
      <anchor>aaf01469392ba6c1cdef4fd54a5ef1aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>column</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1Iterator_1_1TripletRef.html</anchorfile>
      <anchor>a3fe7d4922113535a6d3698b5260b2d55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>value</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1Iterator_1_1TripletRef.html</anchorfile>
      <anchor>abc438ee2fc85f6303c9f5c6ed9d2874e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>classiDynTree_1_1SparseMatrix_1_1Iterator_1_1TripletRef.html</anchorfile>
      <anchor>a1270d5949746de61c59505d67177a4da</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Triplets</name>
    <filename>classiDynTree_1_1Triplets.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; iDynTree::Triplet &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>ae11ba4c0104cb7807609ca90de4e02df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; iDynTree::Triplet &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>a4201098d5bd15fabb5f196ef043c99f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>a5e204c0d255de02617c7938e5cc0e43f</anchor>
      <arglist>(unsigned size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>a89321cdcaeb114271b0e92e3ddb55662</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSubMatrix</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>a677ca4d3abd1796db7e727abd9af1b79</anchor>
      <arglist>(unsigned startingRow, unsigned startingColumn, const MatrixFixSize&lt; rows, cols &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSubMatrix</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>a3282500d833c33f3c2d813477da9fe63</anchor>
      <arglist>(unsigned startingRow, unsigned startingColumn, const MatrixDynSize &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSubMatrix</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>acdc395dce7e383bae4faf022995e97c7</anchor>
      <arglist>(unsigned startingRow, unsigned startingColumn, const SparseMatrix&lt; ordering &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDiagonalMatrix</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>aad23407dd497c651929b699a581b8ea8</anchor>
      <arglist>(IndexRange startingRow, IndexRange startingColumn, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDiagonalMatrix</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>a27f181f67ecb2c346fd3ab3f15694576</anchor>
      <arglist>(unsigned startingRow, unsigned startingColumn, double value, unsigned diagonalMatrixSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushTriplet</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>a7a0e994004d7b4c70d972d09c5e764f8</anchor>
      <arglist>(const Triplet &amp;triplet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>a324b77c2e8e2ab6416bb3d49e35000f9</anchor>
      <arglist>(unsigned startingRow, unsigned startingColumn, const MatrixFixSize&lt; rows, cols &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>af3a66b10aea35dd2f13ac390a2f84b0d</anchor>
      <arglist>(unsigned startingRow, unsigned startingColumn, const MatrixDynSize &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>a4fbbbda07797548e2bb38fa143ef7e51</anchor>
      <arglist>(unsigned startingRow, unsigned startingColumn, const SparseMatrix&lt; ordering &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiagonalMatrix</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>a9aaadb4251073475f09929398508a208</anchor>
      <arglist>(IndexRange startingRow, IndexRange startingColumn, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiagonalMatrix</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>a0373bbf931e4269a15050bc4e76961e7</anchor>
      <arglist>(unsigned startingRow, unsigned startingColumn, double value, unsigned diagonalMatrixSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTriplet</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>ae15cee789b931896511a29049a13ca77</anchor>
      <arglist>(const Triplet &amp;triplet)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>a78f76185da1b4b9bb73d6100f71fa3ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>a34f03a372566254db58478bb07293074</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>a86e7823ee8bcb2a5eb8e29581588f4c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>a2a18fc6280b96c6513b554d3df240b97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>ac694238c112e0fa330c98becec7dd07c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>ad8f7bb56530ae9d85b56aef713f18ee9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classiDynTree_1_1Triplets.html</anchorfile>
      <anchor>a02eccc6c1b89ba9ea8af716dc9bdb78b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Twist</name>
    <filename>classiDynTree_1_1Twist.html</filename>
    <base>iDynTree::SpatialMotionVector</base>
    <member kind="typedef">
      <type>SpatialMotionForceVectorT_traits&lt; SpatialMotionVector &gt;::LinearVector3Type</type>
      <name>LinearVector3T</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a69ef18dc028e8e4cb3e70113d6d757c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpatialMotionForceVectorT_traits&lt; SpatialMotionVector &gt;::AngularVector3Type</type>
      <name>AngularVector3T</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a4dd2aa658641029221673188f2059509</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DualSpace&lt; DerivedSpatialVecT &gt;::Type</type>
      <name>DualVectorT</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a7910d803e3b8c3ef52db0bdc0b2bec42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Twist</name>
      <anchorfile>classiDynTree_1_1Twist.html</anchorfile>
      <anchor>a3a2fff49fa9cbdcdc96589f26f909811</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Twist</name>
      <anchorfile>classiDynTree_1_1Twist.html</anchorfile>
      <anchor>ad6ccf45a38ed5304317540ac2d4f9953</anchor>
      <arglist>(const LinVelocity &amp;_linearVec3, const AngVelocity &amp;_angularVec3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Twist</name>
      <anchorfile>classiDynTree_1_1Twist.html</anchorfile>
      <anchor>a356ac02dceb5807c911d0dc77a37c62b</anchor>
      <arglist>(const SpatialMotionVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Twist</name>
      <anchorfile>classiDynTree_1_1Twist.html</anchorfile>
      <anchor>a9769af112f3b78419a69678a80da6c53</anchor>
      <arglist>(const Twist &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1Twist.html</anchorfile>
      <anchor>aceda68fe1acfbabfe78f7c9462f4f25a</anchor>
      <arglist>(const Twist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1Twist.html</anchorfile>
      <anchor>a40943fa7464aa2f1f205ffad431dbb02</anchor>
      <arglist>(const Twist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1Twist.html</anchorfile>
      <anchor>a2c0be74f866be2d1607cbfdf28031411</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SpatialAcc</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Twist.html</anchorfile>
      <anchor>aca6ae92346059edd6efe6a3d6faf81da</anchor>
      <arglist>(const Twist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1Twist.html</anchorfile>
      <anchor>aeb45cc74d27dbe912f630842136f0e40</anchor>
      <arglist>(const SpatialMomentum &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionVector</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a22816c9ea7c88ea880bbe547366c2dad</anchor>
      <arglist>(const double scalar) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionVector</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a00b69fb5887ebaab90f53bf3f43927ae</anchor>
      <arglist>(const SpatialMotionVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>cross</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a1230a70db77b4cf2ebb2c643b62d37e9</anchor>
      <arglist>(const SpatialForceVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>asCrossProductMatrix</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a0afe65574d10fd441e294b01b9d59328</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6x6</type>
      <name>asCrossProductMatrixWrench</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>aa12336105b40e215151dc40e02d85533</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>exp</name>
      <anchorfile>classiDynTree_1_1SpatialMotionVector.html</anchorfile>
      <anchor>a3d13bde6997132732cac8cc942dba7ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinearVector3T &amp;</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a705aa7e917215639cf8088da8a279031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LinearVector3T &amp;</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aef471e533b923fca899adfcac5703173</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AngularVector3T &amp;</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a8b9ae18e77c2af17ec1d369d196e0c10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AngularVector3T &amp;</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a67479f75f4632e397d7c38394f499ca5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a171e7cf6e215e67eb32ac791526a044f</anchor>
      <arglist>(const LinearVector3T &amp;_linearVec3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a719a64c179d736390f48b6ddd0ccf6fa</anchor>
      <arglist>(const AngularVector3T &amp;_angularVec3)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a176d715e9026aee5a3cad9ff9dde198c</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a583e1a9062c0d7f72da539e521e597b5</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a74a991f1f695825378e5b1765e743e42</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a0fe3633e4ccf66267b01b7302a1658ec</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>af1f3a2d0e7522b63b2dc0d729a33f5a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a8414377bb976157317aeb070b4ed235d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DerivedSpatialVecT</type>
      <name>changePoint</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aaf50d0723aa1bf73962f05224a56bd8b</anchor>
      <arglist>(const Position &amp;newPoint)</arglist>
    </member>
    <member kind="function">
      <type>const DerivedSpatialVecT</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>af55844354af98084b8fd52a9240b2d5f</anchor>
      <arglist>(const Rotation &amp;newCoordFrame)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a676b41872e9165b9795a9706149a8e17</anchor>
      <arglist>(const DualVectorT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aee117ebb24cae309a169f678019f1181</anchor>
      <arglist>(const DerivedSpatialVecT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>afcf112b3ddd4e01fc0389dd2319eb383</anchor>
      <arglist>(const DerivedSpatialVecT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>asVector</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a28178bda574859bc9cda8e51f23ffc07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aea482fe4d53b76b02a0438d9561e1fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a73b398dd07e9f3dd5c252692380a6b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a0f1211dba411c4efe1a7c9d0944d2a38</anchor>
      <arglist>(const DerivedSpatialVecT &amp;op1, const DerivedSpatialVecT &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aa1ad54ef1ef1c37676cf7c231242f9fb</anchor>
      <arglist>(const DerivedSpatialVecT &amp;op)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>Zero</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>ae2ae611372d0a0f53dd983e3598bcc58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearVector3T</type>
      <name>linearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a404b99c91ecaa2269ed0e891df474720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AngularVector3T</type>
      <name>angularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a7713fdb080783747a894974f5c4b44a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpatialVectorSemantics&lt; typename LinearVector3T::SemanticsType, typename AngularVector3T::SemanticsType &gt;</type>
      <name>semantics</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>ac05cf4a583d9231bbd7863d75ab7f00b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>linearOffset</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aa6aa22433d0a6c29e37a4efc5970e1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>angularOffset</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a45a617c3a2fbf58cb8f14be36a9f0ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>totalSize</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>adfea1ab56aa331af032a7f7d31ac0afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aea482fe4d53b76b02a0438d9561e1fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a73b398dd07e9f3dd5c252692380a6b02</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::SensorsList::TypedIterator</name>
    <filename>classiDynTree_1_1SensorsList_1_1TypedIterator.html</filename>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1TypedIterator.html</anchorfile>
      <anchor>a702619539e349f8181d0f477c23653ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sensor *</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1TypedIterator.html</anchorfile>
      <anchor>abbc49cf00ef2ae1676e978a390965762</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1TypedIterator.html</anchorfile>
      <anchor>a68f9e69d544cd2b03d774cea94ad8511</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1TypedIterator.html</anchorfile>
      <anchor>af28534de09c45684f8859ef6319172d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::input_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1TypedIterator.html</anchorfile>
      <anchor>ad262dd406adfe039a2862c89f3440890</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TypedIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1TypedIterator.html</anchorfile>
      <anchor>ac2dc11f382759ab851d4185fd3c51d57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypedIterator</type>
      <name>operator++</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1TypedIterator.html</anchorfile>
      <anchor>a95a89e8fb57ba5f77d25be114d8a9f50</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1TypedIterator.html</anchorfile>
      <anchor>af3a4286ed35e11712b53fb7b911c5096</anchor>
      <arglist>(const TypedIterator &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1TypedIterator.html</anchorfile>
      <anchor>acd6e227887ee48b1aafeedab91569926</anchor>
      <arglist>(const ConstTypedIterator &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1TypedIterator.html</anchorfile>
      <anchor>a45b158ad291d2a24180ddc44d0401bd3</anchor>
      <arglist>(const TypedIterator &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1TypedIterator.html</anchorfile>
      <anchor>a4deb184c66222fc758656d7326f10b9f</anchor>
      <arglist>(const ConstTypedIterator &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1TypedIterator.html</anchorfile>
      <anchor>a0be258aeee3ce2858a063fde510c4530</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1TypedIterator.html</anchorfile>
      <anchor>a02d8403cc245bc0abd229b3cb16b4cc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1TypedIterator.html</anchorfile>
      <anchor>a603d7a8936b533aa5b9beb58aae7dc86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SensorsList</name>
      <anchorfile>classiDynTree_1_1SensorsList_1_1TypedIterator.html</anchorfile>
      <anchor>a51c57a31c0c18c18341920b6346dc830</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::UnknownWrenchContact</name>
    <filename>structiDynTree_1_1UnknownWrenchContact.html</filename>
    <member kind="function">
      <type></type>
      <name>UnknownWrenchContact</name>
      <anchorfile>structiDynTree_1_1UnknownWrenchContact.html</anchorfile>
      <anchor>afbafed415f76f254f947239babd53821</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnknownWrenchContact</name>
      <anchorfile>structiDynTree_1_1UnknownWrenchContact.html</anchorfile>
      <anchor>ae0e92ae72a85b022854b0a2f9c35c3a0</anchor>
      <arglist>(const UnknownWrenchContactType _unknownType, const Position &amp;_contactPoint, const Direction &amp;_forceDirection=iDynTree::Direction::Default(), const Wrench &amp;_knownWrench=iDynTree::Wrench(), const unsigned long &amp;_contactId=0)</arglist>
    </member>
    <member kind="variable">
      <type>UnknownWrenchContactType</type>
      <name>unknownType</name>
      <anchorfile>structiDynTree_1_1UnknownWrenchContact.html</anchorfile>
      <anchor>a3b66b4adb16d8ec490a51bc5852bafbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Position</type>
      <name>contactPoint</name>
      <anchorfile>structiDynTree_1_1UnknownWrenchContact.html</anchorfile>
      <anchor>a0fd828593dab7ca27f2c2959c568736d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Direction</type>
      <name>forceDirection</name>
      <anchorfile>structiDynTree_1_1UnknownWrenchContact.html</anchorfile>
      <anchor>a40fd8ee73d9423a40a8e280d72b6b886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Wrench</type>
      <name>knownWrench</name>
      <anchorfile>structiDynTree_1_1UnknownWrenchContact.html</anchorfile>
      <anchor>a4b96dc6c0dad0f2d4cda49d65381b7d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>contactId</name>
      <anchorfile>structiDynTree_1_1UnknownWrenchContact.html</anchorfile>
      <anchor>a7e7bfe7d8a3bf766d096ca3d627adb44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::URDFDocument</name>
    <filename>classiDynTree_1_1URDFDocument.html</filename>
    <base>iDynTree::XMLDocument</base>
    <member kind="function">
      <type></type>
      <name>URDFDocument</name>
      <anchorfile>classiDynTree_1_1URDFDocument.html</anchorfile>
      <anchor>ae82ec0055e74c89ad5979f739d1d6093</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~URDFDocument</name>
      <anchorfile>classiDynTree_1_1URDFDocument.html</anchorfile>
      <anchor>a9dd0401f2605dc4a9b7ef0b394301f84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::ModelParserOptions &amp;</type>
      <name>options</name>
      <anchorfile>classiDynTree_1_1URDFDocument.html</anchorfile>
      <anchor>adbe2af39655e8a2752c7320850a93cd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::Model &amp;</type>
      <name>model</name>
      <anchorfile>classiDynTree_1_1URDFDocument.html</anchorfile>
      <anchor>a8d7b092af1ae243341e1833f8dc18771</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const iDynTree::SensorsList &amp;</type>
      <name>sensors</name>
      <anchorfile>classiDynTree_1_1URDFDocument.html</anchorfile>
      <anchor>a796fb01b515732e68d3800c3ca8f8937</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; XMLElement &gt;</type>
      <name>rootElementForName</name>
      <anchorfile>classiDynTree_1_1URDFDocument.html</anchorfile>
      <anchor>ad6ce4f39be8c7c0ce31e470401d3db27</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>documentHasBeenParsed</name>
      <anchorfile>classiDynTree_1_1URDFDocument.html</anchorfile>
      <anchor>af4b51c607132c29d08581fc16033ca4b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; XMLElement &gt;</type>
      <name>root</name>
      <anchorfile>classiDynTree_1_1XMLDocument.html</anchorfile>
      <anchor>a74947d41ace6ed53dafbafe6622073fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>classiDynTree_1_1XMLDocument.html</anchorfile>
      <anchor>a09f709b05c0f1f12670763848deeebf8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::shared_ptr&lt; SensorHelper &gt; &gt;</type>
      <name>sensorHelpers</name>
      <anchorfile>classiDynTree_1_1URDFDocument.html</anchorfile>
      <anchor>aeee45e879a758d6074a9c58390ff3a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, JointElement::JointInfo &gt;</type>
      <name>joints</name>
      <anchorfile>classiDynTree_1_1URDFDocument.html</anchorfile>
      <anchor>a94c9fb5372fff427e6eefa501fa9d2a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, JointElement::JointInfo &gt;</type>
      <name>fixedJoints</name>
      <anchorfile>classiDynTree_1_1URDFDocument.html</anchorfile>
      <anchor>af869c50633a0784f6452ed0e6a5ed176</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, MaterialElement::MaterialInfo &gt;</type>
      <name>materials</name>
      <anchorfile>classiDynTree_1_1URDFDocument.html</anchorfile>
      <anchor>a71e86291a5b358bb75fed272e2e1e304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, std::vector&lt; VisualElement::VisualInfo &gt; &gt;</type>
      <name>visuals</name>
      <anchorfile>classiDynTree_1_1URDFDocument.html</anchorfile>
      <anchor>ad6c09ba92ed27b5fb377d933293c9326</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, std::vector&lt; VisualElement::VisualInfo &gt; &gt;</type>
      <name>collisions</name>
      <anchorfile>classiDynTree_1_1URDFDocument.html</anchorfile>
      <anchor>adb3498e68464efe5d7674698a889e64f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::URDFParserOptions</name>
    <filename>structiDynTree_1_1URDFParserOptions.html</filename>
    <member kind="function">
      <type></type>
      <name>URDFParserOptions</name>
      <anchorfile>structiDynTree_1_1URDFParserOptions.html</anchorfile>
      <anchor>aba0a4d4a56d7dc1cf85034dc37b64b5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>addSensorFramesAsAdditionalFrames</name>
      <anchorfile>structiDynTree_1_1URDFParserOptions.html</anchorfile>
      <anchor>a0b4a5be086b3511d0e582c91c60697f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>originalFilename</name>
      <anchorfile>structiDynTree_1_1URDFParserOptions.html</anchorfile>
      <anchor>aff6b907c7eabd6bcf1ba4f253394ef55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::VectorDynSize</name>
    <filename>classiDynTree_1_1VectorDynSize.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a0bfc17c328f9cbb2a63b501edb09cc6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a3ea2fb7a1554fed00d992b005b6c661a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a4ade79723371cd1b3b3d7bbdf17d9e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>afa55464b73d97865bb3c070a3fa53b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDynSize</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ad5f75c57383d1f74bdff0cf636dc897c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDynSize</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ac66bce7010c8b91584eee450acc53690</anchor>
      <arglist>(unsigned int _size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDynSize</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ad0034650c34f0f5746c0dc8260d21ecc</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDynSize</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a6cd442c9388f049e75a141fa9da1a37e</anchor>
      <arglist>(const VectorDynSize &amp;vec)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VectorDynSize</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ac4444bc331547a72c0e962d81b725970</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorDynSize &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a2ee163f324bb9171c8634720ac171206</anchor>
      <arglist>(const VectorDynSize &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>VectorDynSize &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a2fc641ea76b67ea0b66a222e464d21e3</anchor>
      <arglist>(const Span&lt; const double &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a3f79e2f73308baf60b5dd01cce2adccb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ae89128b2aa30a63d30286e89f599672f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ad264c9a85bf7adbd308627b0e719d65f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a8686d610d4561c14d61674589f01504a</anchor>
      <arglist>(const unsigned int newCapacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ab10cf86d773fa67a1522c3b229c4ffc0</anchor>
      <arglist>(const unsigned int newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>adb3205ed58008a5d54c9cd84b155d6e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>adb08f82f775b84bd0e0f8964b5c42dc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBuffer</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a1f435e6b594f64f058059df2e63434f8</anchor>
      <arglist>(double *buf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a6b2272000a38902034f260bed6ebf72f</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a1ecdfb8aac18f58044f9f07bbd5361b6</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a279bf38d182b1e8b184ec0c778ff25ba</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a6d76c5a49c6316be7c509a3d5b18b572</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a26db894130286e61d308b8e31e746929</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>aa04a369bac2d9cd48918f27fffe64322</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a2a8ee12197ac411e775b320cc09d43c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ae4f23d980b16dac5b100ec8eaa37f848</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>af1d48bf5aac5f4cf8c87e3ac161d2523</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>changeCapacityAndCopyData</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>abc961e3e048e7202d5d9712777c7a0a4</anchor>
      <arglist>(const unsigned int _newCapacity)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a5b4afa8d10714a7343f53d5a6c4ddecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_size</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ab11875d43023b752e38453c8f3ef8b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_capacity</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ad9c51ce2b2797b7ae7bec622812aec75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a6b2272000a38902034f260bed6ebf72f</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a1ecdfb8aac18f58044f9f07bbd5361b6</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a279bf38d182b1e8b184ec0c778ff25ba</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a6d76c5a49c6316be7c509a3d5b18b572</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a26db894130286e61d308b8e31e746929</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>aa04a369bac2d9cd48918f27fffe64322</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a2a8ee12197ac411e775b320cc09d43c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a0bfc17c328f9cbb2a63b501edb09cc6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a3ea2fb7a1554fed00d992b005b6c661a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>a4ade79723371cd1b3b3d7bbdf17d9e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>afa55464b73d97865bb3c070a3fa53b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>ae4f23d980b16dac5b100ec8eaa37f848</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1VectorDynSize.html</anchorfile>
      <anchor>af1d48bf5aac5f4cf8c87e3ac161d2523</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::VectorFixSize</name>
    <filename>classiDynTree_1_1VectorFixSize.html</filename>
    <templarg>VecSize</templarg>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ada7487eff1fee83db8d41165d30f1263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ad0f06a255dc213a5904d232f703a0192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aa11c3eee00e88dabb7880f6cac2a9b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a69b51f8119155d31a254676ae867ae8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorFixSize</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a1ed77487376ad9915912e2118cb228af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorFixSize</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a0c1897263227863d477ed524d4e3da71</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type>VectorFixSize &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a671b1cead93ceb1c9098e4534b22018b</anchor>
      <arglist>(const Span&lt; const double &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a3bd1389dbdf51e06f4c64451c242397e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab6f044aea32e55a72f6ebed68f93f767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a57b77a6c96f3276ed8e12b5e35b7f442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBuffer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aee106d61ebb0925fecfa55cbaa515981</anchor>
      <arglist>(double *buf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a2e935e37d751752feab107dc58560aaf</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a8ca6cab1f06019c34d593f0aaff4dced</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a9c0f65c965c198e3bebd3cc9a03937d3</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab0e81983f76aab4997962a423dc3189d</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>abc9aca9e8f729a9d78e4da70bac72382</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>af793dbb7d980c53813b1bccc4703f450</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a5f04ccb5f96cd94aa207b98ced2b3254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a11d7cfdce4e1674e2ce73a23c7e29990</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>acae25eb63bcbe6b524849d77134c168d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a7bf5cd26b6fc24c9ddaf8854ebb8ec63</anchor>
      <arglist>[VecSize]</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a2e935e37d751752feab107dc58560aaf</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a8ca6cab1f06019c34d593f0aaff4dced</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a9c0f65c965c198e3bebd3cc9a03937d3</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab0e81983f76aab4997962a423dc3189d</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>abc9aca9e8f729a9d78e4da70bac72382</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>af793dbb7d980c53813b1bccc4703f450</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a5f04ccb5f96cd94aa207b98ced2b3254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a11d7cfdce4e1674e2ce73a23c7e29990</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>acae25eb63bcbe6b524849d77134c168d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ada7487eff1fee83db8d41165d30f1263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ad0f06a255dc213a5904d232f703a0192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aa11c3eee00e88dabb7880f6cac2a9b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a69b51f8119155d31a254676ae867ae8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorFixSize&lt; 3 &gt;</name>
    <filename>classiDynTree_1_1VectorFixSize.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ada7487eff1fee83db8d41165d30f1263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ad0f06a255dc213a5904d232f703a0192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aa11c3eee00e88dabb7880f6cac2a9b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a69b51f8119155d31a254676ae867ae8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorFixSize</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a1ed77487376ad9915912e2118cb228af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorFixSize</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a0c1897263227863d477ed524d4e3da71</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type>VectorFixSize &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a671b1cead93ceb1c9098e4534b22018b</anchor>
      <arglist>(const Span&lt; const double &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a3bd1389dbdf51e06f4c64451c242397e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab6f044aea32e55a72f6ebed68f93f767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a57b77a6c96f3276ed8e12b5e35b7f442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBuffer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aee106d61ebb0925fecfa55cbaa515981</anchor>
      <arglist>(double *buf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a2e935e37d751752feab107dc58560aaf</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a8ca6cab1f06019c34d593f0aaff4dced</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a9c0f65c965c198e3bebd3cc9a03937d3</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab0e81983f76aab4997962a423dc3189d</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>abc9aca9e8f729a9d78e4da70bac72382</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>af793dbb7d980c53813b1bccc4703f450</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a5f04ccb5f96cd94aa207b98ced2b3254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a11d7cfdce4e1674e2ce73a23c7e29990</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>acae25eb63bcbe6b524849d77134c168d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a7bf5cd26b6fc24c9ddaf8854ebb8ec63</anchor>
      <arglist>[VecSize]</arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ada7487eff1fee83db8d41165d30f1263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ad0f06a255dc213a5904d232f703a0192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aa11c3eee00e88dabb7880f6cac2a9b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a69b51f8119155d31a254676ae867ae8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a2e935e37d751752feab107dc58560aaf</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a8ca6cab1f06019c34d593f0aaff4dced</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a9c0f65c965c198e3bebd3cc9a03937d3</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab0e81983f76aab4997962a423dc3189d</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>abc9aca9e8f729a9d78e4da70bac72382</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>af793dbb7d980c53813b1bccc4703f450</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a5f04ccb5f96cd94aa207b98ced2b3254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a11d7cfdce4e1674e2ce73a23c7e29990</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>acae25eb63bcbe6b524849d77134c168d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorFixSize&lt; 4 &gt;</name>
    <filename>classiDynTree_1_1VectorFixSize.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ada7487eff1fee83db8d41165d30f1263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ad0f06a255dc213a5904d232f703a0192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aa11c3eee00e88dabb7880f6cac2a9b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a69b51f8119155d31a254676ae867ae8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorFixSize</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a1ed77487376ad9915912e2118cb228af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorFixSize</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a0c1897263227863d477ed524d4e3da71</anchor>
      <arglist>(const double *in_data, const unsigned int in_size)</arglist>
    </member>
    <member kind="function">
      <type>VectorFixSize &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a671b1cead93ceb1c9098e4534b22018b</anchor>
      <arglist>(const Span&lt; const double &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a3bd1389dbdf51e06f4c64451c242397e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab6f044aea32e55a72f6ebed68f93f767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a57b77a6c96f3276ed8e12b5e35b7f442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBuffer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aee106d61ebb0925fecfa55cbaa515981</anchor>
      <arglist>(double *buf) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a2e935e37d751752feab107dc58560aaf</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a8ca6cab1f06019c34d593f0aaff4dced</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a9c0f65c965c198e3bebd3cc9a03937d3</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab0e81983f76aab4997962a423dc3189d</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>abc9aca9e8f729a9d78e4da70bac72382</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>af793dbb7d980c53813b1bccc4703f450</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a5f04ccb5f96cd94aa207b98ced2b3254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a11d7cfdce4e1674e2ce73a23c7e29990</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>acae25eb63bcbe6b524849d77134c168d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_data</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a7bf5cd26b6fc24c9ddaf8854ebb8ec63</anchor>
      <arglist>[VecSize]</arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ada7487eff1fee83db8d41165d30f1263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; double &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ad0f06a255dc213a5904d232f703a0192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>aa11c3eee00e88dabb7880f6cac2a9b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a69b51f8119155d31a254676ae867ae8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a2e935e37d751752feab107dc58560aaf</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a8ca6cab1f06019c34d593f0aaff4dced</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a9c0f65c965c198e3bebd3cc9a03937d3</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>ab0e81983f76aab4997962a423dc3189d</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>abc9aca9e8f729a9d78e4da70bac72382</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>af793dbb7d980c53813b1bccc4703f450</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a5f04ccb5f96cd94aa207b98ced2b3254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>a11d7cfdce4e1674e2ce73a23c7e29990</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1VectorFixSize.html</anchorfile>
      <anchor>acae25eb63bcbe6b524849d77134c168d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::VectorsVisualization</name>
    <filename>classiDynTree_1_1VectorsVisualization.html</filename>
    <base>iDynTree::IVectorsVisualization</base>
    <member kind="function">
      <type></type>
      <name>VectorsVisualization</name>
      <anchorfile>classiDynTree_1_1VectorsVisualization.html</anchorfile>
      <anchor>ae3f710b2011a3aaabebfc085903f8a06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorsVisualization</name>
      <anchorfile>classiDynTree_1_1VectorsVisualization.html</anchorfile>
      <anchor>a9944d8212ae358212b888053691641c7</anchor>
      <arglist>(const VectorsVisualization &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>VectorsVisualization &amp;</type>
      <name>operator=</name>
      <anchorfile>classiDynTree_1_1VectorsVisualization.html</anchorfile>
      <anchor>ad0e27b42d6afce7b12a0cbdc09470e3c</anchor>
      <arglist>(const VectorsVisualization &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classiDynTree_1_1VectorsVisualization.html</anchorfile>
      <anchor>a53745718920e83d5cd0d2f9532256305</anchor>
      <arglist>(irr::scene::ISceneManager *smgr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classiDynTree_1_1VectorsVisualization.html</anchorfile>
      <anchor>a2e8e3bb6d5ebb31d73389c1c1c984f35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VectorsVisualization</name>
      <anchorfile>classiDynTree_1_1VectorsVisualization.html</anchorfile>
      <anchor>a5666cd189cf55c7c3065b0cfc0e921a8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>addVector</name>
      <anchorfile>classiDynTree_1_1VectorsVisualization.html</anchorfile>
      <anchor>ae2cc3356685d77a2d933eccec47d8d48</anchor>
      <arglist>(const Position &amp;origin, const Direction &amp;direction, double modulus) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>addVector</name>
      <anchorfile>classiDynTree_1_1VectorsVisualization.html</anchorfile>
      <anchor>aa4ceeb3bb9d916b4ebc1e7dac3dd6779</anchor>
      <arglist>(const Position &amp;origin, const Vector3 &amp;components) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getNrOfVectors</name>
      <anchorfile>classiDynTree_1_1VectorsVisualization.html</anchorfile>
      <anchor>a8c965fe8bd1cfc009ad0d6a2517e291a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getVector</name>
      <anchorfile>classiDynTree_1_1VectorsVisualization.html</anchorfile>
      <anchor>a4e5045980c29668c3b0a8ee1485e1bbf</anchor>
      <arglist>(size_t vectorIndex, Position &amp;currentOrigin, Direction &amp;currentDirection, double &amp;currentModulus) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getVector</name>
      <anchorfile>classiDynTree_1_1VectorsVisualization.html</anchorfile>
      <anchor>a19e528545ed097e98c43ed3cfcf65249</anchor>
      <arglist>(size_t vectorIndex, Position &amp;currentOrigin, Vector3 &amp;components) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>updateVector</name>
      <anchorfile>classiDynTree_1_1VectorsVisualization.html</anchorfile>
      <anchor>a9a806a45d61f10ac4d0eab65b02fdd53</anchor>
      <arglist>(size_t vectorIndex, const Position &amp;origin, const Direction &amp;direction, double modulus) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>updateVector</name>
      <anchorfile>classiDynTree_1_1VectorsVisualization.html</anchorfile>
      <anchor>ab4a6a658ba896fb045c8d27e71af6164</anchor>
      <arglist>(size_t vectorIndex, const Position &amp;origin, const Vector3 &amp;components) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setVectorColor</name>
      <anchorfile>classiDynTree_1_1VectorsVisualization.html</anchorfile>
      <anchor>a76cff72a95bb6433a42a817ce33afd54</anchor>
      <arglist>(size_t vectorIndex, const ColorViz &amp;vectorColor) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setVectorsAspect</name>
      <anchorfile>classiDynTree_1_1VectorsVisualization.html</anchorfile>
      <anchor>afe44a4c0a91bfcd3c540f036a9dfab27</anchor>
      <arglist>(double zeroModulusRadius, double modulusMultiplier, double heightScale) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::VisualElement</name>
    <filename>classiDynTree_1_1VisualElement.html</filename>
    <base>iDynTree::XMLElement</base>
    <class kind="struct">iDynTree::VisualElement::VisualInfo</class>
    <member kind="function">
      <type></type>
      <name>VisualElement</name>
      <anchorfile>classiDynTree_1_1VisualElement.html</anchorfile>
      <anchor>aa36ef6f44abb9c979267b2e73d9c3be6</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const VisualInfo &amp;</type>
      <name>visualInfo</name>
      <anchorfile>classiDynTree_1_1VisualElement.html</anchorfile>
      <anchor>a83227ffed3c69bcfdcb0fd87f5eebfd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAttributes</name>
      <anchorfile>classiDynTree_1_1VisualElement.html</anchorfile>
      <anchor>aafcde4f7f8a04701de0d07935bc93a7e</anchor>
      <arglist>(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;attributes) override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; iDynTree::XMLElement &gt;</type>
      <name>childElementForName</name>
      <anchorfile>classiDynTree_1_1VisualElement.html</anchorfile>
      <anchor>a8e9bd83fad63e3b863d832fea4584241</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ab40851b7629a74107f2183ca36e412e4</anchor>
      <arglist>(std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a16759fb450635662dced0eb2ace0228b</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChildHasBeenParsedCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a69171cc4b5c552b97f44375029356a2e</anchor>
      <arglist>(std::function&lt; void(std::shared_ptr&lt; XMLElement &gt;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt;</type>
      <name>attributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2a182ac17f5e644b113a67e02c3595e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; void()&gt;</type>
      <name>exitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a04ea33b2a4ebf84647fb6d38e24ba0e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a7129fb1e69a5bc819872e65d3965296d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; XMLElement &gt; &gt;</type>
      <name>children</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2f51748fc6eed4724e86dc5e52ebd5ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt; &gt;</type>
      <name>attributes</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a27347aca070a5dfc250077b6cc3e3748</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>exitElementScope</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a66d20512ef5debea77d1919835dbda1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>childHasBeenParsed</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ac92ce9b144b27970e09f6f9dff77f251</anchor>
      <arglist>(std::shared_ptr&lt; XMLElement &gt; parsedChild)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsedCharacters</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a949bcf8e3496896d2b6d7d6da72870a7</anchor>
      <arglist>(const std::string &amp;characters)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParsedTextContent</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>abebc95353394912e187ad70e6078fcdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a3d8e1b737e614b35e3df0a4f76ac645b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::VisualElement::VisualInfo</name>
    <filename>structiDynTree_1_1VisualElement_1_1VisualInfo.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>m_name</name>
      <anchorfile>structiDynTree_1_1VisualElement_1_1VisualInfo.html</anchorfile>
      <anchor>addd6cb61f3472731a93dffb9ef562573</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_nameAttributeFound</name>
      <anchorfile>structiDynTree_1_1VisualElement_1_1VisualInfo.html</anchorfile>
      <anchor>a429e0158b37e2da9617c8a48428a809c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::Transform</type>
      <name>m_origin</name>
      <anchorfile>structiDynTree_1_1VisualElement_1_1VisualInfo.html</anchorfile>
      <anchor>a566a985b0ce45197f131ec3f6db41934</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; SolidShape &gt;</type>
      <name>m_solidShape</name>
      <anchorfile>structiDynTree_1_1VisualElement_1_1VisualInfo.html</anchorfile>
      <anchor>a496c6ab2de95ba796a8ce5c9419d9f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; MaterialElement::MaterialInfo &gt;</type>
      <name>m_material</name>
      <anchorfile>structiDynTree_1_1VisualElement_1_1VisualInfo.html</anchorfile>
      <anchor>a3f794cb64ecbc25a8dee3bf3a1401f9a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Visualizer</name>
    <filename>classiDynTree_1_1Visualizer.html</filename>
    <class kind="struct">iDynTree::Visualizer::VisualizerPimpl</class>
    <member kind="function">
      <type></type>
      <name>Visualizer</name>
      <anchorfile>classiDynTree_1_1Visualizer.html</anchorfile>
      <anchor>abbecaabb17b53ac73f061d91a0de3328</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Visualizer</name>
      <anchorfile>classiDynTree_1_1Visualizer.html</anchorfile>
      <anchor>a1d1103d9e47b59fd7fd3c4c3b6e48399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>classiDynTree_1_1Visualizer.html</anchorfile>
      <anchor>abf85f8ea85c3897d9b2dea1bf058e35f</anchor>
      <arglist>(const VisualizerOptions=VisualizerOptions())</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNrOfVisualizedModels</name>
      <anchorfile>classiDynTree_1_1Visualizer.html</anchorfile>
      <anchor>a231ab6ab8555d41b58b43aa202a0023d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getModelInstanceName</name>
      <anchorfile>classiDynTree_1_1Visualizer.html</anchorfile>
      <anchor>a2a254803f63b1cabaaeec22ac8cb4b9b</anchor>
      <arglist>(size_t modelInstanceIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getModelInstanceIndex</name>
      <anchorfile>classiDynTree_1_1Visualizer.html</anchorfile>
      <anchor>a9d5069cc3f91df42de386a7bf57a84be</anchor>
      <arglist>(const std::string instanceName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addModel</name>
      <anchorfile>classiDynTree_1_1Visualizer.html</anchorfile>
      <anchor>a25ef54501162c7afee6d5f15ebba373f</anchor>
      <arglist>(const iDynTree::Model &amp;model, const std::string &amp;instanceName)</arglist>
    </member>
    <member kind="function">
      <type>IModelVisualization &amp;</type>
      <name>modelViz</name>
      <anchorfile>classiDynTree_1_1Visualizer.html</anchorfile>
      <anchor>a64d6a2165ad62e6b03aa9fb37c240617</anchor>
      <arglist>(size_t modelIdx)</arglist>
    </member>
    <member kind="function">
      <type>IModelVisualization &amp;</type>
      <name>modelViz</name>
      <anchorfile>classiDynTree_1_1Visualizer.html</anchorfile>
      <anchor>af6ef8cb57712e6be6bc7029b16cd6d05</anchor>
      <arglist>(const std::string &amp;instanceName)</arglist>
    </member>
    <member kind="function">
      <type>ICamera &amp;</type>
      <name>camera</name>
      <anchorfile>classiDynTree_1_1Visualizer.html</anchorfile>
      <anchor>a5bbf1570ac685af17781453c29ae6020</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IEnvironment &amp;</type>
      <name>enviroment</name>
      <anchorfile>classiDynTree_1_1Visualizer.html</anchorfile>
      <anchor>a7e392aac1822f7aeb628cb477c4ac3b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IVectorsVisualization &amp;</type>
      <name>vectors</name>
      <anchorfile>classiDynTree_1_1Visualizer.html</anchorfile>
      <anchor>a54c8186b01f017d0fb7aa1a4e5d2bf06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classiDynTree_1_1Visualizer.html</anchorfile>
      <anchor>abfa7aed891eb9df40e200892567be8c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classiDynTree_1_1Visualizer.html</anchorfile>
      <anchor>a1517692d3f37e28a7e51b1c5b4117571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>drawToFile</name>
      <anchorfile>classiDynTree_1_1Visualizer.html</anchorfile>
      <anchor>ac3c119f56b8b892f93391b66cc22b90c</anchor>
      <arglist>(const std::string filename=&quot;iDynTreeVisualizerScreenshot.png&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classiDynTree_1_1Visualizer.html</anchorfile>
      <anchor>a7326dfca30d383941d1fd0968b476a9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ModelVisualization</name>
      <anchorfile>classiDynTree_1_1Visualizer.html</anchorfile>
      <anchor>a62fa7ce6e4b7f0e02925f62df919bc42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::VisualizerOptions</name>
    <filename>structiDynTree_1_1VisualizerOptions.html</filename>
    <member kind="function">
      <type></type>
      <name>VisualizerOptions</name>
      <anchorfile>structiDynTree_1_1VisualizerOptions.html</anchorfile>
      <anchor>a1f9e408639244900c2708406168ff1f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>structiDynTree_1_1VisualizerOptions.html</anchorfile>
      <anchor>a93881c95c54057b6d81685d91576770e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>winWidth</name>
      <anchorfile>structiDynTree_1_1VisualizerOptions.html</anchorfile>
      <anchor>a27dd48cc4e8277f38f07a4778dcbac88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>winHeight</name>
      <anchorfile>structiDynTree_1_1VisualizerOptions.html</anchorfile>
      <anchor>ac52ea0cc43febc857569c192a0919d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rootFrameArrowsDimension</name>
      <anchorfile>structiDynTree_1_1VisualizerOptions.html</anchorfile>
      <anchor>aed0f49333d9da8f0db94c98f8aae77ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>iDynTree::Visualizer::VisualizerPimpl</name>
    <filename>structiDynTree_1_1Visualizer_1_1VisualizerPimpl.html</filename>
    <member kind="function">
      <type></type>
      <name>VisualizerPimpl</name>
      <anchorfile>structiDynTree_1_1Visualizer_1_1VisualizerPimpl.html</anchorfile>
      <anchor>af2fe23fdf923128f450bd0256eb5a368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_isInitialized</name>
      <anchorfile>structiDynTree_1_1Visualizer_1_1VisualizerPimpl.html</anchorfile>
      <anchor>aab37ba8078869821643d200d53eda407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DummyModelVisualization</type>
      <name>m_invalidModelViz</name>
      <anchorfile>structiDynTree_1_1Visualizer_1_1VisualizerPimpl.html</anchorfile>
      <anchor>ad432b62fd19f6849c5c9f421acec8681</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lastFPS</name>
      <anchorfile>structiDynTree_1_1Visualizer_1_1VisualizerPimpl.html</anchorfile>
      <anchor>aa7a9e99720ecf1bf2e93404b8675d685</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DummyCamera</type>
      <name>m_camera</name>
      <anchorfile>structiDynTree_1_1Visualizer_1_1VisualizerPimpl.html</anchorfile>
      <anchor>a3253cb348fb7d2c39006585b5cdd7c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DummyEnvironment</type>
      <name>m_environment</name>
      <anchorfile>structiDynTree_1_1Visualizer_1_1VisualizerPimpl.html</anchorfile>
      <anchor>a180a6af127258fbe33264bb7226872a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DummyVectorsVisualization</type>
      <name>m_invalidVectors</name>
      <anchorfile>structiDynTree_1_1Visualizer_1_1VisualizerPimpl.html</anchorfile>
      <anchor>a0c87b95d2949917ba393d618ef750678</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::optimization::WorhpInterface</name>
    <filename>classiDynTree_1_1optimization_1_1WorhpInterface.html</filename>
    <base>iDynTree::optimization::Optimizer</base>
    <class kind="class">WorhpInterface::WorhpInterfaceImplementation</class>
    <member kind="function">
      <type></type>
      <name>WorhpInterface</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>a74f9698c545d20cb1abcecc38362d088</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorhpInterface</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>ad41aa251a914e7c6d01fa3a9d83d49c5</anchor>
      <arglist>(const WorhpInterface &amp;other)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorhpInterface</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>a26679b5e8bad29b9a3c63011d8409b2b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAvailable</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>a15f84954b8efaa23426d1e0588433bdb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setProblem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>a9f24a88ca6aceca1e81d17d2f1678c47</anchor>
      <arglist>(std::shared_ptr&lt; OptimizationProblem &gt; problem) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>solve</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>a7014b23b1fa584fdcba9c26de1ee4ffd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getPrimalVariables</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>a91500eb3955a0c6bfb8574bc16e335e9</anchor>
      <arglist>(VectorDynSize &amp;primalVariables) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getDualVariables</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>af895de43d051bd371c3dd0ca77b60140</anchor>
      <arglist>(VectorDynSize &amp;constraintsMultipliers, VectorDynSize &amp;lowerBoundsMultipliers, VectorDynSize &amp;upperBoundsMultipliers) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getOptimalCost</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>a89652754b5118eeccc4dd2de81b0b928</anchor>
      <arglist>(double &amp;optimalCost) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getOptimalConstraintsValues</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>a01401ccf54703ccfdddd0f4c97d1b31d</anchor>
      <arglist>(VectorDynSize &amp;constraintsValues) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>minusInfinity</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>a3f61d9a1ea6760c2d3c6f4be732074f2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>plusInfinity</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>a18674e03f4e9fc3664fc309e06f90800</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useApproximatedHessians</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>ab7033720d23d9af54b0700238757df04</anchor>
      <arglist>(bool useApproximatedHessian=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setWorhpParam</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>a8d6880db4f6662854bfe7e893a10ec77</anchor>
      <arglist>(const std::string &amp;paramName, bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setWorhpParam</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>aaf0eb03df35d4068268fd2cdb1e9d0a7</anchor>
      <arglist>(const std::string &amp;paramName, double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setWorhpParam</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>a9d15c47a0a246e70df76477a1d676ce0</anchor>
      <arglist>(const std::string &amp;paramName, int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getWorhpParam</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>ae2625de0cfd4d7c807753117b8a760dc</anchor>
      <arglist>(const std::string &amp;paramName, bool &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getWorhpParam</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>a760fc0096c8aa84d8cdfec3b99bdcf6e</anchor>
      <arglist>(const std::string &amp;paramName, double &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getWorhpParam</name>
      <anchorfile>classiDynTree_1_1optimization_1_1WorhpInterface.html</anchorfile>
      <anchor>a1f7bd656637950029be9d28a704854b2</anchor>
      <arglist>(const std::string &amp;paramName, int &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::weak_ptr&lt; OptimizationProblem &gt;</type>
      <name>problem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>a6836c50c97f711451f5c0f011a2efddb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; OptimizationProblem &gt;</type>
      <name>m_problem</name>
      <anchorfile>classiDynTree_1_1optimization_1_1Optimizer.html</anchorfile>
      <anchor>ae3b9609d905cbbf3c3336c9350e94106</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WorhpInterface::WorhpInterfaceImplementation</name>
    <filename>classWorhpInterface_1_1WorhpInterfaceImplementation.html</filename>
    <member kind="function">
      <type>void</type>
      <name>resizeBuffers</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>aa17e46671492a1deb93400bb6160afbc</anchor>
      <arglist>(unsigned int numberOfVariables, unsigned int numberOfConstraints)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>possibleReOptimize</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>ac605ae1fe89abd1f2831fd09e617e3f8</anchor>
      <arglist>(unsigned int newNumberOfVariables, unsigned int newNumberOfconstraints, unsigned int newJacobianNonZeros, unsigned int newHessianNonZeros)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateVariables</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a5c0f166ee763e7722cd16621ddd4c450</anchor>
      <arglist>(std::shared_ptr&lt; iDynTree::optimization::OptimizationProblem &gt; problem)</arglist>
    </member>
    <member kind="variable">
      <type>WorhpVariables</type>
      <name>worhp</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>acf72656cde21affe55c249afbf02120a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_t &gt;</type>
      <name>constraintsJacNNZRows</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a64e32a2576d0e2907e6f4d6a065365a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_t &gt;</type>
      <name>constraintsJacNNZCols</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a0a1dcab2957899b9c92aaef2e6dba751</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_t &gt;</type>
      <name>hessianNNZRows</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a1cadd222ccca6c0080305e032f8e37bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_t &gt;</type>
      <name>hessianNNZCols</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>aa9428dca6331c9b7f8bf50549c5b2b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>hessianLowerTriangularNonZeros</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a701086b1a913443c9d9b051b2ace1e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>initialPoint</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a8092bfa6134b43fcdeb073245c751755</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>variablesLowerBounds</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a707ee5e4131f5dac6308dcd12ceb964d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>variablesUpperBounds</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a8284872998b2ed22c2d7d5ab50f47ad9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>constraintsLowerBounds</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>ab44180c2a29ea9a9bc7f5c755299dfbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>constraintsUpperBounds</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>ae66b301e594c3a93af3b9fe24f1b1ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>variablesBuffer</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a50593f14cfd3dbef31859a5858d2ef97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>constraintsEvaluationBuffer</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a061e71fff989a13d8f2427cc63a2193e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>costGradientBuffer</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>aa76b7f40b0773930032e50e17b3a3078</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::VectorDynSize</type>
      <name>constraintsMultipliersBuffer</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a1a715ffc6e7cd859959a0c89210edfc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::MatrixDynSize</type>
      <name>constraintsJacobianBuffer</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a4144fa17c2f54e53b5ffd8ef19470e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::MatrixDynSize</type>
      <name>costHessianBuffer</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>aa98deec4147bda66a519dea730feb70c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iDynTree::MatrixDynSize</type>
      <name>constraintsHessianBuffer</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a8fb71e8d8d3f6fd6720ea54b2feb5b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; MatrixElement &gt;</type>
      <name>orderedJacobianNonZeros</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a9ef092d70bc5df74a9e927b25a670f2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; MatrixElement &gt;</type>
      <name>orderedHessianNonZeros</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a9f4a09e0758a6baadc22aca5a8795d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>previousNumberOfVariables</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a58dce9ded601e2c761dca1b92e98e64a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>previousNumberOfConstraints</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>add160531dd2a323a05120031f69c3f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>previousJacobianNonZeros</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a41093ff1ed0bbd7ef860563b23a962d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>previousHessianNonZeros</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a8c1679d2f9380e5d85f0f169b62c8739</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, bool &gt;</type>
      <name>boolParamsBackup</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a1aecfa336773f4561c9e48f50657341a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, int &gt;</type>
      <name>intParamsBackup</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>aaf9a3bef6baa8919766edddc9c965aae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, double &gt;</type>
      <name>doubleParamsBackup</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a41c81aab2b5854d876529054787cc64a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sparseJacobian</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a6a30f13e5a3095978105e5224291794d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sparseHessian</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>af2936e599089e2ce9d16d477290642b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>previouslySolved</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a16c880b1b3cd6529ead87071e6b30aa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>firstTime</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>aecc6107b91eb33a5036226aec1ef9e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useApproximatedHessian</name>
      <anchorfile>classWorhpInterface_1_1WorhpInterfaceImplementation.html</anchorfile>
      <anchor>a012667adde802aa29b687cf663a03865</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>WorhpVariables</name>
    <filename>structWorhpVariables.html</filename>
    <member kind="variable">
      <type>OptVar</type>
      <name>opt</name>
      <anchorfile>structWorhpVariables.html</anchorfile>
      <anchor>a36b1e3fded0bf3c1f139e0433ff17293</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Workspace</type>
      <name>wsp</name>
      <anchorfile>structWorhpVariables.html</anchorfile>
      <anchor>ac60e4e88306dfcac78b131f924c90b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Params</type>
      <name>par</name>
      <anchorfile>structWorhpVariables.html</anchorfile>
      <anchor>af5ec8c80e7169447ac4816d610961eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Control</type>
      <name>cnt</name>
      <anchorfile>structWorhpVariables.html</anchorfile>
      <anchor>a5542337486850206555809c3b13b1fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>status</name>
      <anchorfile>structWorhpVariables.html</anchorfile>
      <anchor>ade4781a94662c7bbf686cfc9d31dcfb6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::Wrench</name>
    <filename>classiDynTree_1_1Wrench.html</filename>
    <base>iDynTree::SpatialForceVector</base>
    <member kind="typedef">
      <type>SpatialMotionForceVectorT_traits&lt; SpatialForceVector &gt;::LinearVector3Type</type>
      <name>LinearVector3T</name>
      <anchorfile>classiDynTree_1_1SpatialForceVector.html</anchorfile>
      <anchor>a2d86d89ba38e46bfe38631258bd8571a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpatialMotionForceVectorT_traits&lt; SpatialForceVector &gt;::AngularVector3Type</type>
      <name>AngularVector3T</name>
      <anchorfile>classiDynTree_1_1SpatialForceVector.html</anchorfile>
      <anchor>a6302c479904a175eb6c61c9de390d287</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DualSpace&lt; DerivedSpatialVecT &gt;::Type</type>
      <name>DualVectorT</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a7910d803e3b8c3ef52db0bdc0b2bec42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Wrench</name>
      <anchorfile>classiDynTree_1_1Wrench.html</anchorfile>
      <anchor>a000d5f5d5e4ad90736e6a57ab13d5ecb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Wrench</name>
      <anchorfile>classiDynTree_1_1Wrench.html</anchorfile>
      <anchor>a7d3b8ee3ef7f6024acb26428a393415c</anchor>
      <arglist>(const Force &amp;_linearVec3, const Torque &amp;_angularVec3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Wrench</name>
      <anchorfile>classiDynTree_1_1Wrench.html</anchorfile>
      <anchor>a99c5191f4b6abfe0b72d1dab0a02bb0c</anchor>
      <arglist>(const SpatialForceVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Wrench</name>
      <anchorfile>classiDynTree_1_1Wrench.html</anchorfile>
      <anchor>af66e21abd0dd2721b0ca8db613355648</anchor>
      <arglist>(const Wrench &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1Wrench.html</anchorfile>
      <anchor>a2fcff32a02a287e62f3bd666b0a4328d</anchor>
      <arglist>(const Wrench &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1Wrench.html</anchorfile>
      <anchor>a061d3e56d593d54bae7c1d717d70e8b6</anchor>
      <arglist>(const Wrench &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1Wrench.html</anchorfile>
      <anchor>ae43f980d914019c767a6bc1e2f7d65d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>operator*</name>
      <anchorfile>classiDynTree_1_1SpatialForceVector.html</anchorfile>
      <anchor>ac96276a6d073a19752aea3ef4183d608</anchor>
      <arglist>(const double scalar) const</arglist>
    </member>
    <member kind="function">
      <type>LinearVector3T &amp;</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a705aa7e917215639cf8088da8a279031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LinearVector3T &amp;</type>
      <name>getLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aef471e533b923fca899adfcac5703173</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AngularVector3T &amp;</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a8b9ae18e77c2af17ec1d369d196e0c10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AngularVector3T &amp;</type>
      <name>getAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a67479f75f4632e397d7c38394f499ca5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a171e7cf6e215e67eb32ac791526a044f</anchor>
      <arglist>(const LinearVector3T &amp;_linearVec3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a719a64c179d736390f48b6ddd0ccf6fa</anchor>
      <arglist>(const AngularVector3T &amp;_angularVec3)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a176d715e9026aee5a3cad9ff9dde198c</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a583e1a9062c0d7f72da539e521e597b5</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVal</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a74a991f1f695825378e5b1765e743e42</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setVal</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a0fe3633e4ccf66267b01b7302a1658ec</anchor>
      <arglist>(const unsigned int index, const double new_el)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>af1f3a2d0e7522b63b2dc0d729a33f5a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a8414377bb976157317aeb070b4ed235d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DerivedSpatialVecT</type>
      <name>changePoint</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aaf50d0723aa1bf73962f05224a56bd8b</anchor>
      <arglist>(const Position &amp;newPoint)</arglist>
    </member>
    <member kind="function">
      <type>const DerivedSpatialVecT</type>
      <name>changeCoordFrame</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>af55844354af98084b8fd52a9240b2d5f</anchor>
      <arglist>(const Rotation &amp;newCoordFrame)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a676b41872e9165b9795a9706149a8e17</anchor>
      <arglist>(const DualVectorT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator+</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aee117ebb24cae309a169f678019f1181</anchor>
      <arglist>(const DerivedSpatialVecT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedSpatialVecT</type>
      <name>operator-</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>afcf112b3ddd4e01fc0389dd2319eb383</anchor>
      <arglist>(const DerivedSpatialVecT &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>asVector</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a28178bda574859bc9cda8e51f23ffc07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aea482fe4d53b76b02a0438d9561e1fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a73b398dd07e9f3dd5c252692380a6b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>compose</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a0f1211dba411c4efe1a7c9d0944d2a38</anchor>
      <arglist>(const DerivedSpatialVecT &amp;op1, const DerivedSpatialVecT &amp;op2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>inverse</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aa1ad54ef1ef1c37676cf7c231242f9fb</anchor>
      <arglist>(const DerivedSpatialVecT &amp;op)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DerivedSpatialVecT</type>
      <name>Zero</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>ae2ae611372d0a0f53dd983e3598bcc58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearVector3T</type>
      <name>linearVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a404b99c91ecaa2269ed0e891df474720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AngularVector3T</type>
      <name>angularVec3</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a7713fdb080783747a894974f5c4b44a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpatialVectorSemantics&lt; typename LinearVector3T::SemanticsType, typename AngularVector3T::SemanticsType &gt;</type>
      <name>semantics</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>ac05cf4a583d9231bbd7863d75ab7f00b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>linearOffset</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aa6aa22433d0a6c29e37a4efc5970e1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>angularOffset</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a45a617c3a2fbf58cb8f14be36a9f0ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>totalSize</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>adfea1ab56aa331af032a7f7d31ac0afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>aea482fe4d53b76b02a0438d9561e1fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>reservedToString</name>
      <anchorfile>classiDynTree_1_1SpatialVector.html</anchorfile>
      <anchor>a73b398dd07e9f3dd5c252692380a6b02</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::XMLAttribute</name>
    <filename>classiDynTree_1_1XMLAttribute.html</filename>
    <member kind="function">
      <type></type>
      <name>XMLAttribute</name>
      <anchorfile>classiDynTree_1_1XMLAttribute.html</anchorfile>
      <anchor>a255e025528fde4f5e1f7e11b2f13dfdb</anchor>
      <arglist>(std::string name, std::string value, std::string prefix, std::string uri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classiDynTree_1_1XMLAttribute.html</anchorfile>
      <anchor>aeaaa85b7a1e2d59856a120e00a43e5c8</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classiDynTree_1_1XMLAttribute.html</anchorfile>
      <anchor>a9dab18a16f1ffa891d0b07d9a22093ed</anchor>
      <arglist>(std::string value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrefix</name>
      <anchorfile>classiDynTree_1_1XMLAttribute.html</anchorfile>
      <anchor>a82c2a869d99feea7dab9fb0abc49542e</anchor>
      <arglist>(std::string prefix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setURI</name>
      <anchorfile>classiDynTree_1_1XMLAttribute.html</anchorfile>
      <anchor>a10d9efd1d5dc3507dc9b1143748e57dc</anchor>
      <arglist>(std::string uri)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1XMLAttribute.html</anchorfile>
      <anchor>a4da70f85ee7d440b99fcc75bf6d79257</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>value</name>
      <anchorfile>classiDynTree_1_1XMLAttribute.html</anchorfile>
      <anchor>aa36978c289e48e40a95abb4b8b69576a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prefix</name>
      <anchorfile>classiDynTree_1_1XMLAttribute.html</anchorfile>
      <anchor>a447232923ee05fad897ce5d6e3430e6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>uri</name>
      <anchorfile>classiDynTree_1_1XMLAttribute.html</anchorfile>
      <anchor>aa1c81b78ad45eb6b8240a2c9ce21a22b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>description</name>
      <anchorfile>classiDynTree_1_1XMLAttribute.html</anchorfile>
      <anchor>ae3fde3b73dfebc2d6e899a6b60d237ce</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::XMLDocument</name>
    <filename>classiDynTree_1_1XMLDocument.html</filename>
    <class kind="class">iDynTree::XMLDocument::XMLDocumentPimpl</class>
    <member kind="function">
      <type></type>
      <name>XMLDocument</name>
      <anchorfile>classiDynTree_1_1XMLDocument.html</anchorfile>
      <anchor>a94ea906352e78e3e5b9dde135b102297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XMLDocument</name>
      <anchorfile>classiDynTree_1_1XMLDocument.html</anchorfile>
      <anchor>a441185448aeb1b43a15f6c0060a48e50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; XMLElement &gt;</type>
      <name>rootElementForName</name>
      <anchorfile>classiDynTree_1_1XMLDocument.html</anchorfile>
      <anchor>ad1edbff2d0e73932b7a3f85ac920bee8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>documentHasBeenParsed</name>
      <anchorfile>classiDynTree_1_1XMLDocument.html</anchorfile>
      <anchor>ad7e79df5c98a9d6d25c08fbc28d22efd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; XMLElement &gt;</type>
      <name>root</name>
      <anchorfile>classiDynTree_1_1XMLDocument.html</anchorfile>
      <anchor>a74947d41ace6ed53dafbafe6622073fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>classiDynTree_1_1XMLDocument.html</anchorfile>
      <anchor>a09f709b05c0f1f12670763848deeebf8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>XMLParser</name>
      <anchorfile>classiDynTree_1_1XMLDocument.html</anchorfile>
      <anchor>af16c8fed027186b0e7fa53a309273a8d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::XMLDocument::XMLDocumentPimpl</name>
    <filename>classiDynTree_1_1XMLDocument_1_1XMLDocumentPimpl.html</filename>
    <member kind="variable">
      <type>std::shared_ptr&lt; XMLElement &gt;</type>
      <name>m_root</name>
      <anchorfile>classiDynTree_1_1XMLDocument_1_1XMLDocumentPimpl.html</anchorfile>
      <anchor>ac662642b4e5f27d6fc8e78150519bd91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::XMLElement</name>
    <filename>classiDynTree_1_1XMLElement.html</filename>
    <class kind="class">iDynTree::XMLElement::XMLElementPimpl</class>
    <member kind="function">
      <type></type>
      <name>XMLElement</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a885cb939d74e8ce27ce4c0708c04267e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XMLElement</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a7ad288fac24328b2bb19908500fec39a</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XMLElement</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a42ee14ee8b2ec8a9e9e31472e1b17556</anchor>
      <arglist>(const std::string &amp;name, const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;attributes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XMLElement</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a65fd0074dfe45cabcb9c4a961a4ddf90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ab40851b7629a74107f2183ca36e412e4</anchor>
      <arglist>(std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a16759fb450635662dced0eb2ace0228b</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChildHasBeenParsedCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a69171cc4b5c552b97f44375029356a2e</anchor>
      <arglist>(std::function&lt; void(std::shared_ptr&lt; XMLElement &gt;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;)&gt;</type>
      <name>attributeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2a182ac17f5e644b113a67e02c3595e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; void()&gt;</type>
      <name>exitScopeCallback</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a04ea33b2a4ebf84647fb6d38e24ba0e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a7129fb1e69a5bc819872e65d3965296d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; XMLElement &gt; &gt;</type>
      <name>children</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a2f51748fc6eed4724e86dc5e52ebd5ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt; &gt;</type>
      <name>attributes</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a27347aca070a5dfc250077b6cc3e3748</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; XMLElement &gt;</type>
      <name>childElementForName</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a1224214141437630a36445e941867065</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>exitElementScope</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a66d20512ef5debea77d1919835dbda1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>childHasBeenParsed</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>ac92ce9b144b27970e09f6f9dff77f251</anchor>
      <arglist>(std::shared_ptr&lt; XMLElement &gt; parsedChild)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setAttributes</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a9dc312559f13e9d78d10ddc2242ac27d</anchor>
      <arglist>(const std::unordered_map&lt; std::string, std::shared_ptr&lt; iDynTree::XMLAttribute &gt;&gt; &amp;attributes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsedCharacters</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a949bcf8e3496896d2b6d7d6da72870a7</anchor>
      <arglist>(const std::string &amp;characters)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParsedTextContent</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>abebc95353394912e187ad70e6078fcdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>a3d8e1b737e614b35e3df0a4f76ac645b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>XMLParser</name>
      <anchorfile>classiDynTree_1_1XMLElement.html</anchorfile>
      <anchor>af16c8fed027186b0e7fa53a309273a8d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::XMLElement::XMLElementPimpl</name>
    <filename>classiDynTree_1_1XMLElement_1_1XMLElementPimpl.html</filename>
    <member kind="variable">
      <type>std::function&lt; bool(const std::unordered_map&lt; std::string, std::shared_ptr&lt; XMLAttribute &gt;&gt; &amp;)&gt;</type>
      <name>f_attribute</name>
      <anchorfile>classiDynTree_1_1XMLElement_1_1XMLElementPimpl.html</anchorfile>
      <anchor>ac2e1ed1bc8f21ded5b7ab23d764fc85f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void()&gt;</type>
      <name>f_exitScope</name>
      <anchorfile>classiDynTree_1_1XMLElement_1_1XMLElementPimpl.html</anchorfile>
      <anchor>ad7f36f8f649a19b9a9a5138870c4b32e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void(std::shared_ptr&lt; XMLElement &gt;)&gt;</type>
      <name>f_childParsed</name>
      <anchorfile>classiDynTree_1_1XMLElement_1_1XMLElementPimpl.html</anchorfile>
      <anchor>aeb088d83efcd0618016574c81248363c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::stringstream</type>
      <name>m_charactersStream</name>
      <anchorfile>classiDynTree_1_1XMLElement_1_1XMLElementPimpl.html</anchorfile>
      <anchor>aa81e20eb35bec026ef218bd55d6cc19b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_name</name>
      <anchorfile>classiDynTree_1_1XMLElement_1_1XMLElementPimpl.html</anchorfile>
      <anchor>ad7d8253be2bcf8ebc7de576a47926665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::shared_ptr&lt; XMLElement &gt; &gt;</type>
      <name>m_children</name>
      <anchorfile>classiDynTree_1_1XMLElement_1_1XMLElementPimpl.html</anchorfile>
      <anchor>a584c48b7ba22c22e8a3684a6caa46488</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; XMLAttribute &gt; &gt;</type>
      <name>m_attributes</name>
      <anchorfile>classiDynTree_1_1XMLElement_1_1XMLElementPimpl.html</anchorfile>
      <anchor>a9de6de13ed905d4c5478e516e89feb25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::XMLParser</name>
    <filename>classiDynTree_1_1XMLParser.html</filename>
    <class kind="class">iDynTree::XMLParser::XMLParserPimpl</class>
    <member kind="function">
      <type></type>
      <name>XMLParser</name>
      <anchorfile>classiDynTree_1_1XMLParser.html</anchorfile>
      <anchor>a3971aff454d18f2e2e0cfdf93b284d44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XMLParser</name>
      <anchorfile>classiDynTree_1_1XMLParser.html</anchorfile>
      <anchor>ac57715b6b0bbe0a368042d6b1a57ab90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keepTreeInMemory</name>
      <anchorfile>classiDynTree_1_1XMLParser.html</anchorfile>
      <anchor>a380d48c74008493f76bbfa89d27a9c72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKeepTreeInMemory</name>
      <anchorfile>classiDynTree_1_1XMLParser.html</anchorfile>
      <anchor>a4298a1f57d35727ece02b59197e58026</anchor>
      <arglist>(bool keepTreeInMemory)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>logParsing</name>
      <anchorfile>classiDynTree_1_1XMLParser.html</anchorfile>
      <anchor>af57bd10e7fe04805404009f5fc2f3492</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogParsing</name>
      <anchorfile>classiDynTree_1_1XMLParser.html</anchorfile>
      <anchor>a7a13e1f8f9a88d8bbc3c14d9c7cd26f4</anchor>
      <arglist>(bool enableLogging)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validateXML</name>
      <anchorfile>classiDynTree_1_1XMLParser.html</anchorfile>
      <anchor>a53d7a4b6fffcd67e9de72c08440eb0fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidateXML</name>
      <anchorfile>classiDynTree_1_1XMLParser.html</anchorfile>
      <anchor>afd804a5fff0adbd9b87b1df2520218cb</anchor>
      <arglist>(bool validate)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>schemaLocation</name>
      <anchorfile>classiDynTree_1_1XMLParser.html</anchorfile>
      <anchor>a3bce709cb8baa967de9cd8521ea1293d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSchemaLocation</name>
      <anchorfile>classiDynTree_1_1XMLParser.html</anchorfile>
      <anchor>ad0b611b820cdfd53e93de8b4eab30c6b</anchor>
      <arglist>(std::string schemaLocation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseXMLFile</name>
      <anchorfile>classiDynTree_1_1XMLParser.html</anchorfile>
      <anchor>ab88dc1c938c5bb0397e2abdcf1064002</anchor>
      <arglist>(std::string absoluteFileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseXMLString</name>
      <anchorfile>classiDynTree_1_1XMLParser.html</anchorfile>
      <anchor>a4ccc2d4850f255cf9714d51e8fa344d1</anchor>
      <arglist>(std::string xmlString)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDocumentFactory</name>
      <anchorfile>classiDynTree_1_1XMLParser.html</anchorfile>
      <anchor>aaf18ad736bf7a6ed165e1b533ed29e06</anchor>
      <arglist>(std::function&lt; std::shared_ptr&lt; XMLDocument &gt;()&gt; factory)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; const XMLDocument &gt;</type>
      <name>document</name>
      <anchorfile>classiDynTree_1_1XMLParser.html</anchorfile>
      <anchor>a5bbd9556b11df0bfbe24a5fe33f42a90</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynTree::XMLParser::XMLParserPimpl</name>
    <filename>classiDynTree_1_1XMLParser_1_1XMLParserPimpl.html</filename>
    <member kind="function">
      <type></type>
      <name>XMLParserPimpl</name>
      <anchorfile>classiDynTree_1_1XMLParser_1_1XMLParserPimpl.html</anchorfile>
      <anchor>ab91a800999049cadc40ed1fbcaf99396</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlSAXHandlerPtr</type>
      <name>callbackHandler</name>
      <anchorfile>classiDynTree_1_1XMLParser_1_1XMLParserPimpl.html</anchorfile>
      <anchor>a4d5bbbe8b64cc4ba78407ae1cd7abac6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::stack&lt; std::shared_ptr&lt; XMLElement &gt; &gt;</type>
      <name>m_parsedTrace</name>
      <anchorfile>classiDynTree_1_1XMLParser_1_1XMLParserPimpl.html</anchorfile>
      <anchor>a9270d001ccd988bdba7991edb57d951b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; std::shared_ptr&lt; XMLDocument &gt;)&gt;</type>
      <name>f_documentFactory</name>
      <anchorfile>classiDynTree_1_1XMLParser_1_1XMLParserPimpl.html</anchorfile>
      <anchor>a129e701188ac5837d1e28cdf5d9e721e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; XMLDocument &gt;</type>
      <name>m_document</name>
      <anchorfile>classiDynTree_1_1XMLParser_1_1XMLParserPimpl.html</anchorfile>
      <anchor>a7230d7c4476ab8e2d2a4b2f4dea8dec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_schemaLocation</name>
      <anchorfile>classiDynTree_1_1XMLParser_1_1XMLParserPimpl.html</anchorfile>
      <anchor>ada86b8a8994cf88dd653cad493c1e4cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_performValidation</name>
      <anchorfile>classiDynTree_1_1XMLParser_1_1XMLParserPimpl.html</anchorfile>
      <anchor>a64a226c9b2a172678e9693fe38c4662e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_logParsing</name>
      <anchorfile>classiDynTree_1_1XMLParser_1_1XMLParserPimpl.html</anchorfile>
      <anchor>a1206aa5e22abd2969a654902d00aa2c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_keepInMemory</name>
      <anchorfile>classiDynTree_1_1XMLParser_1_1XMLParserPimpl.html</anchorfile>
      <anchor>af6964c0059e61e669ead58c58f6d9eb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>YARPRobotStatePublisherModule</name>
    <filename>classYARPRobotStatePublisherModule.html</filename>
    <member kind="function">
      <type></type>
      <name>YARPRobotStatePublisherModule</name>
      <anchorfile>classYARPRobotStatePublisherModule.html</anchorfile>
      <anchor>a04bc33d54ba6af3776cec14204efc895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>configure</name>
      <anchorfile>classYARPRobotStatePublisherModule.html</anchorfile>
      <anchor>abe0321d3bcf142041fba64e7a1c9906b</anchor>
      <arglist>(yarp::os::ResourceFinder &amp;rf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classYARPRobotStatePublisherModule.html</anchorfile>
      <anchor>a455f09cb206705715b14eec3b6c1d8cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPeriod</name>
      <anchorfile>classYARPRobotStatePublisherModule.html</anchorfile>
      <anchor>a146542f44b0f8f1c6825afe965cdd325</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateModule</name>
      <anchorfile>classYARPRobotStatePublisherModule.html</anchorfile>
      <anchor>ac0a16c131c4b021307fe66cf49c9a6fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onRead</name>
      <anchorfile>classYARPRobotStatePublisherModule.html</anchorfile>
      <anchor>a2f657fc1caaeec6a4dc304f70651e0fd</anchor>
      <arglist>(yarp::rosmsg::sensor_msgs::JointState &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>cmdline</name>
    <filename>namespacecmdline.html</filename>
    <namespace>cmdline::detail</namespace>
    <class kind="class">cmdline::cmdline_error</class>
    <class kind="struct">cmdline::default_reader</class>
    <class kind="struct">cmdline::oneof_reader</class>
    <class kind="class">cmdline::parser</class>
    <class kind="struct">cmdline::range_reader</class>
    <member kind="function">
      <type>range_reader&lt; T &gt;</type>
      <name>range</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>a254a4d230f6a0cd541273072ea2569c9</anchor>
      <arglist>(const T &amp;low, const T &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>aec34ff037ea9002323a2b656e1c49f93</anchor>
      <arglist>(T a1)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>a197fdd07b0735c1c7382bfa4d3e1e884</anchor>
      <arglist>(T a1, T a2)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>a5eb83c76445bb52917cd502939988f17</anchor>
      <arglist>(T a1, T a2, T a3)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>ada9e08ffe87130e9e0bc97c8ae9e37ed</anchor>
      <arglist>(T a1, T a2, T a3, T a4)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>ae68ed509566250984be762f4130b1598</anchor>
      <arglist>(T a1, T a2, T a3, T a4, T a5)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>a15c6fb15804ac5f2680345f25752737a</anchor>
      <arglist>(T a1, T a2, T a3, T a4, T a5, T a6)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>aab50ad7f54137d22779d9e857ccd5450</anchor>
      <arglist>(T a1, T a2, T a3, T a4, T a5, T a6, T a7)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>aeb59e9eaeea066b534633e5402180f4e</anchor>
      <arglist>(T a1, T a2, T a3, T a4, T a5, T a6, T a7, T a8)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>ad4667b21857606deef99cb73dc190130</anchor>
      <arglist>(T a1, T a2, T a3, T a4, T a5, T a6, T a7, T a8, T a9)</arglist>
    </member>
    <member kind="function">
      <type>oneof_reader&lt; T &gt;</type>
      <name>oneof</name>
      <anchorfile>namespacecmdline.html</anchorfile>
      <anchor>a65cb207a728dad2d786fd4bd97232c11</anchor>
      <arglist>(T a1, T a2, T a3, T a4, T a5, T a6, T a7, T a8, T a9, T a10)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>cmdline::detail</name>
    <filename>namespacecmdline_1_1detail.html</filename>
    <class kind="struct">cmdline::detail::is_same</class>
    <class kind="struct">cmdline::detail::is_same&lt; T, T &gt;</class>
    <class kind="class">cmdline::detail::lexical_cast_t</class>
    <class kind="class">cmdline::detail::lexical_cast_t&lt; std::string, Source, false &gt;</class>
    <class kind="class">cmdline::detail::lexical_cast_t&lt; Target, Source, true &gt;</class>
    <class kind="class">cmdline::detail::lexical_cast_t&lt; Target, std::string, false &gt;</class>
    <member kind="function">
      <type>Target</type>
      <name>lexical_cast</name>
      <anchorfile>namespacecmdline_1_1detail.html</anchorfile>
      <anchor>a5cd4d0bedba599ae78fc3b477d5b89fa</anchor>
      <arglist>(const Source &amp;arg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>demangle</name>
      <anchorfile>namespacecmdline_1_1detail.html</anchorfile>
      <anchor>a531047ed8f52b62caae26ab166520987</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>readable_typename</name>
      <anchorfile>namespacecmdline_1_1detail.html</anchorfile>
      <anchor>a9e3c4f02792dba7836cb5d933bf8665f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>default_value</name>
      <anchorfile>namespacecmdline_1_1detail.html</anchorfile>
      <anchor>a0d8a8c2598d920091d2c1055516f8005</anchor>
      <arglist>(T def)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>readable_typename&lt; std::string &gt;</name>
      <anchorfile>namespacecmdline_1_1detail.html</anchorfile>
      <anchor>aeaaa18e134cb1066b14d447a43c6386e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>iDynTree</name>
    <filename>namespaceiDynTree.html</filename>
    <namespace>iDynTree::details</namespace>
    <namespace>iDynTree::optimalcontrol</namespace>
    <namespace>iDynTree::optimization</namespace>
    <namespace>iDynTree::Regressors</namespace>
    <class kind="class">iDynTree::AccelerometerSensor</class>
    <class kind="class">iDynTree::AccelerometerSensorHelper</class>
    <class kind="class">iDynTree::AngularForceVector3</class>
    <class kind="class">iDynTree::AngularForceVector3Semantics</class>
    <class kind="class">iDynTree::AngularMotionVector3</class>
    <class kind="class">iDynTree::AngularMotionVector3Semantics</class>
    <class kind="struct">iDynTree::ArticulatedBodyAlgorithmInternalBuffers</class>
    <class kind="class">iDynTree::ArticulatedBodyInertia</class>
    <class kind="struct">iDynTree::AttitudeEstimatorState</class>
    <class kind="class">iDynTree::AttitudeMahonyFilter</class>
    <class kind="struct">iDynTree::AttitudeMahonyFilterParameters</class>
    <class kind="class">iDynTree::AttitudeQuaternionEKF</class>
    <class kind="struct">iDynTree::AttitudeQuaternionEKFParameters</class>
    <class kind="class">iDynTree::Axis</class>
    <class kind="struct">iDynTree::BerdyDynamicVariable</class>
    <class kind="class">iDynTree::BerdyHelper</class>
    <class kind="struct">iDynTree::BerdyOptions</class>
    <class kind="struct">iDynTree::BerdySensor</class>
    <class kind="class">iDynTree::BerdySparseMAPSolver</class>
    <class kind="class">iDynTree::BipedFootContactClassifier</class>
    <class kind="class">iDynTree::BoundingBoxProjectionConstraint</class>
    <class kind="class">iDynTree::Box</class>
    <class kind="class">iDynTree::Camera</class>
    <class kind="class">iDynTree::CFloorGridSceneNode</class>
    <class kind="class">iDynTree::ClassicalAcc</class>
    <class kind="class">iDynTree::ColorViz</class>
    <class kind="class">iDynTree::ContactStateMachine</class>
    <class kind="class">iDynTree::ContactWrench</class>
    <class kind="struct">iDynTree::ConvertSem2motionForceTraits</class>
    <class kind="struct">iDynTree::ConvertSem2motionForceTraits&lt; AngularForceVector3Semantics &gt;</class>
    <class kind="struct">iDynTree::ConvertSem2motionForceTraits&lt; AngularMotionVector3Semantics &gt;</class>
    <class kind="struct">iDynTree::ConvertSem2motionForceTraits&lt; LinearForceVector3Semantics &gt;</class>
    <class kind="struct">iDynTree::ConvertSem2motionForceTraits&lt; LinearMotionVector3Semantics &gt;</class>
    <class kind="class">iDynTree::ConvexHullProjectionConstraint</class>
    <class kind="class">iDynTree::CubicSpline</class>
    <class kind="class">iDynTree::Cylinder</class>
    <class kind="class">iDynTree::DHChain</class>
    <class kind="struct">iDynTree::DHLink</class>
    <class kind="class">iDynTree::Direction</class>
    <class kind="class">iDynTree::DiscreteExtendedKalmanFilterHelper</class>
    <class kind="class">iDynTree::DiscreteKalmanFilterHelper</class>
    <class kind="class">iDynTree::DOFSpatialForceArray</class>
    <class kind="class">iDynTree::DOFSpatialMotionArray</class>
    <class kind="struct">iDynTree::DualMotionForceSemanticsT</class>
    <class kind="struct">iDynTree::DualSpace</class>
    <class kind="struct">iDynTree::DualSpace&lt; SpatialForceVector &gt;</class>
    <class kind="struct">iDynTree::DualSpace&lt; SpatialMotionVector &gt;</class>
    <class kind="class">iDynTree::Dummy</class>
    <class kind="class">iDynTree::DummyCamera</class>
    <class kind="class">iDynTree::DummyEnvironment</class>
    <class kind="class">iDynTree::DummyJetsVisualization</class>
    <class kind="class">iDynTree::DummyLight</class>
    <class kind="class">iDynTree::DummyModelVisualization</class>
    <class kind="class">iDynTree::DummyVectorsVisualization</class>
    <class kind="class">iDynTree::Environment</class>
    <class kind="struct">iDynTree::estimateExternalWrenchesBuffers</class>
    <class kind="class">iDynTree::ExternalMesh</class>
    <class kind="class">iDynTree::ExtWrenchesAndJointTorquesEstimator</class>
    <class kind="class">iDynTree::FixedJoint</class>
    <class kind="class">iDynTree::ForceTorqueSensorElement</class>
    <class kind="class">iDynTree::ForceTorqueSensorHelper</class>
    <class kind="class">iDynTree::ForceVector3</class>
    <class kind="class">iDynTree::ForceVector3Semantics</class>
    <class kind="struct">iDynTree::ForwardDynamicsLinearizationInternalBuffers</class>
    <class kind="class">iDynTree::FrameFreeFloatingJacobian</class>
    <class kind="class">iDynTree::FreeFloatingAcc</class>
    <class kind="class">iDynTree::FreeFloatingGeneralizedTorques</class>
    <class kind="class">iDynTree::FreeFloatingMassMatrix</class>
    <class kind="class">iDynTree::FreeFloatingPos</class>
    <class kind="class">iDynTree::FreeFloatingStateLinearization</class>
    <class kind="class">iDynTree::FreeFloatingVel</class>
    <class kind="struct">iDynTree::FTSensorData</class>
    <class kind="class">iDynTree::GeometryElement</class>
    <class kind="class">iDynTree::GeomVector3</class>
    <class kind="class">iDynTree::GeomVector3Semantics</class>
    <class kind="class">iDynTree::GravityCompensationHelper</class>
    <class kind="class">iDynTree::GyroscopeSensor</class>
    <class kind="class">iDynTree::GyroscopeSensorHelper</class>
    <class kind="class">iDynTree::IAttitudeEstimator</class>
    <class kind="class">iDynTree::ICamera</class>
    <class kind="class">iDynTree::iDynTreeLinkAndFrame</class>
    <class kind="class">iDynTree::IEnvironment</class>
    <class kind="class">iDynTree::IJetsVisualization</class>
    <class kind="class">iDynTree::IJoint</class>
    <class kind="class">iDynTree::iKinLimbImported</class>
    <class kind="class">iDynTree::ILight</class>
    <class kind="class">iDynTree::IModelVisualization</class>
    <class kind="struct">iDynTree::IndexRange</class>
    <class kind="class">iDynTree::InertialElement</class>
    <class kind="class">iDynTree::InverseKinematics</class>
    <class kind="class">iDynTree::IVectorsVisualization</class>
    <class kind="class">iDynTree::JetsVisualization</class>
    <class kind="class">iDynTree::JointDOFsDoubleArray</class>
    <class kind="class">iDynTree::JointElement</class>
    <class kind="class">iDynTree::JointPosDoubleArray</class>
    <class kind="class">iDynTree::JointSensor</class>
    <class kind="class">iDynTree::KinDynComputations</class>
    <class kind="class">iDynTree::Light</class>
    <class kind="class">iDynTree::LinearForceVector3</class>
    <class kind="class">iDynTree::LinearForceVector3Semantics</class>
    <class kind="class">iDynTree::LinearMotionVector3</class>
    <class kind="class">iDynTree::LinearMotionVector3Semantics</class>
    <class kind="class">iDynTree::Link</class>
    <class kind="class">iDynTree::LinkAccArray</class>
    <class kind="class">iDynTree::LinkArticulatedBodyInertias</class>
    <class kind="class">iDynTree::LinkContactWrenches</class>
    <class kind="class">iDynTree::LinkElement</class>
    <class kind="class">iDynTree::LinkInertias</class>
    <class kind="class">iDynTree::LinkPositions</class>
    <class kind="class">iDynTree::LinkSensor</class>
    <class kind="class">iDynTree::LinkTraversalsCache</class>
    <class kind="class">iDynTree::LinkUnknownWrenchContacts</class>
    <class kind="class">iDynTree::LinkVelArray</class>
    <class kind="class">iDynTree::LinkWrenches</class>
    <class kind="class">iDynTree::MaterialElement</class>
    <class kind="class">iDynTree::MatrixDynSize</class>
    <class kind="class">iDynTree::MatrixFixSize</class>
    <class kind="class">iDynTree::Model</class>
    <class kind="class">iDynTree::ModelCalibrationHelper</class>
    <class kind="class">iDynTree::ModelExporter</class>
    <class kind="class">iDynTree::ModelExporterOptions</class>
    <class kind="class">iDynTree::ModelLoader</class>
    <class kind="struct">iDynTree::ModelParserOptions</class>
    <class kind="class">iDynTree::ModelSolidShapes</class>
    <class kind="class">iDynTree::ModelVisualization</class>
    <class kind="class">iDynTree::MomentumFreeFloatingJacobian</class>
    <class kind="struct">iDynTree::MotionDerivativeOf</class>
    <class kind="struct">iDynTree::MotionDerivativeOf&lt; AngularMotionVector3, MotionForce2deriveT &gt;</class>
    <class kind="struct">iDynTree::MotionDerivativeOf&lt; LinearMotionVector3, MotionForce2deriveT &gt;</class>
    <class kind="class">iDynTree::MotionForce_traits</class>
    <class kind="class">iDynTree::MotionForce_traits&lt; AngularForceVector3 &gt;</class>
    <class kind="class">iDynTree::MotionForce_traits&lt; AngularMotionVector3 &gt;</class>
    <class kind="class">iDynTree::MotionForce_traits&lt; LinearForceVector3 &gt;</class>
    <class kind="class">iDynTree::MotionForce_traits&lt; LinearMotionVector3 &gt;</class>
    <class kind="class">iDynTree::MotionVector3</class>
    <class kind="class">iDynTree::MovableJointImpl</class>
    <class kind="struct">iDynTree::Neighbor</class>
    <class kind="class">iDynTree::OriginElement</class>
    <class kind="class">iDynTree::Polygon</class>
    <class kind="class">iDynTree::Polygon2D</class>
    <class kind="class">iDynTree::Position</class>
    <class kind="class">iDynTree::PositionRaw</class>
    <class kind="class">iDynTree::PositionSemantics</class>
    <class kind="class">iDynTree::PrismaticJoint</class>
    <class kind="class">iDynTree::RevoluteJoint</class>
    <class kind="class">iDynTree::RigidBodyInertiaNonLinearParametrization</class>
    <class kind="class">iDynTree::RobotElement</class>
    <class kind="class">iDynTree::Rotation</class>
    <class kind="class">iDynTree::RotationalInertiaRaw</class>
    <class kind="class">iDynTree::RotationRaw</class>
    <class kind="class">iDynTree::RotationSemantics</class>
    <class kind="struct">iDynTree::SchmittParams</class>
    <class kind="class">iDynTree::SchmittTrigger</class>
    <class kind="class">iDynTree::Sensor</class>
    <class kind="class">iDynTree::SensorElement</class>
    <class kind="class">iDynTree::SensorHelper</class>
    <class kind="class">iDynTree::SensorsList</class>
    <class kind="class">iDynTree::SensorsMeasurements</class>
    <class kind="class">iDynTree::SimpleLeggedOdometry</class>
    <class kind="class">iDynTree::SixAxisForceTorqueSensor</class>
    <class kind="class">iDynTree::skinDynLibConversionsHelper</class>
    <class kind="class">iDynTree::skinDynLibLinkID</class>
    <class kind="class">iDynTree::SolidShape</class>
    <class kind="class">iDynTree::Span</class>
    <class kind="class">iDynTree::SparseMatrix</class>
    <class kind="class">iDynTree::SpatialAcc</class>
    <class kind="class">iDynTree::SpatialForceVector</class>
    <class kind="class">iDynTree::SpatialForceWrtMotionDerivative</class>
    <class kind="class">iDynTree::SpatialInertia</class>
    <class kind="class">iDynTree::SpatialInertiaRaw</class>
    <class kind="class">iDynTree::SpatialMomentum</class>
    <class kind="class">iDynTree::SpatialMotionForceVectorT_traits</class>
    <class kind="class">iDynTree::SpatialMotionForceVectorT_traits&lt; SpatialForceVector &gt;</class>
    <class kind="class">iDynTree::SpatialMotionForceVectorT_traits&lt; SpatialMotionVector &gt;</class>
    <class kind="class">iDynTree::SpatialMotionVector</class>
    <class kind="class">iDynTree::SpatialMotionWrtMotionDerivative</class>
    <class kind="class">iDynTree::SpatialVector</class>
    <class kind="class">iDynTree::SpatialVectorSemantics</class>
    <class kind="class">iDynTree::Sphere</class>
    <class kind="struct">iDynTree::stackEl</class>
    <class kind="class">iDynTree::SubModelDecomposition</class>
    <class kind="class">iDynTree::symoro_par_model</class>
    <class kind="struct">iDynTree::TestMatrixMismatch</class>
    <class kind="class">iDynTree::ThreeAxisAngularAccelerometerSensor</class>
    <class kind="class">iDynTree::ThreeAxisForceTorqueContactSensor</class>
    <class kind="class">iDynTree::Transform</class>
    <class kind="class">iDynTree::TransformDerivative</class>
    <class kind="class">iDynTree::TransformSemantics</class>
    <class kind="class">iDynTree::Traversal</class>
    <class kind="class">iDynTree::Triplet</class>
    <class kind="class">iDynTree::Triplets</class>
    <class kind="class">iDynTree::Twist</class>
    <class kind="struct">iDynTree::UnknownWrenchContact</class>
    <class kind="class">iDynTree::URDFDocument</class>
    <class kind="struct">iDynTree::URDFParserOptions</class>
    <class kind="class">iDynTree::VectorDynSize</class>
    <class kind="class">iDynTree::VectorFixSize</class>
    <class kind="class">iDynTree::VectorsVisualization</class>
    <class kind="class">iDynTree::VisualElement</class>
    <class kind="class">iDynTree::Visualizer</class>
    <class kind="struct">iDynTree::VisualizerOptions</class>
    <class kind="class">iDynTree::Wrench</class>
    <class kind="class">iDynTree::XMLAttribute</class>
    <class kind="class">iDynTree::XMLDocument</class>
    <class kind="class">iDynTree::XMLElement</class>
    <class kind="class">iDynTree::XMLParser</class>
    <member kind="typedef">
      <type>AngularForceVector3</type>
      <name>AngMomentum</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a55b4eeede0026f5a9ff630bf0e185f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularForceVector3</type>
      <name>Torque</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6201e5c8d3cc72533773d11302674f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularMotionVector3</type>
      <name>AngVelocity</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a303a7b672a9817d74c5a6279fbfe5e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngularMotionVector3</type>
      <name>AngAcceleration</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>adb7dac766ffa576a0213970d650eda15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; Eigen::VectorXd &gt;</type>
      <name>iDynTreeEigenVector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>acad81b92d9885b5eec826b3066af8960</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; const Eigen::VectorXd &gt;</type>
      <name>iDynTreeEigenConstVector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a60faf8b72189d4496f7b7920d5ea3b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>iDynTreeEigenMatrix</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8dd9b043a4e3ceaa1b9a173e826020aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>iDynTreeEigenConstMatrix</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2d3ea8f566b9d5684e3b008a1f8c8d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; iDynTreeEigenMatrix &gt;</type>
      <name>iDynTreeEigenMatrixMap</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a26eec6588ddf3f8a8546b9f7899590eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; iDynTreeEigenConstMatrix &gt;</type>
      <name>iDynTreeEigenConstMatrixMap</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2b2522205c120424f4e8740b30bad6aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearForceVector3</type>
      <name>LinMomentum</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac0ebd34fab318a785581c07d73cdffc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearForceVector3</type>
      <name>Force</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4c842c5e7d2f44d3352ffd8b59203d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearMotionVector3</type>
      <name>LinVelocity</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a408c1ac9b6f50b7425becd9b7b20f351</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearMotionVector3</type>
      <name>LinAcceleration</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae032ae81e0b23b33446033eefb13e629</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixFixSize&lt; 1, 6 &gt;</type>
      <name>Matrix1x6</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3f95b4a0200fda604f7717bcb0781b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixFixSize&lt; 2, 3 &gt;</type>
      <name>Matrix2x3</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2502487a002cb2aec7b06190dfd1e787</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixFixSize&lt; 3, 3 &gt;</type>
      <name>Matrix3x3</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1ab8ab0012e12e66db217bb4845881cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixFixSize&lt; 4, 4 &gt;</type>
      <name>Matrix4x4</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a739bd7039fa167036447689c29104cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixFixSize&lt; 6, 1 &gt;</type>
      <name>Matrix6x1</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa8530f3c198c90d18ec29e68f4d5e5fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixFixSize&lt; 6, 6 &gt;</type>
      <name>Matrix6x6</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad298b89bf01794a5de35a255dd269d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixFixSize&lt; 6, 10 &gt;</type>
      <name>Matrix6x10</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6d63b01d7d6de76185f849d32b9fbd29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixFixSize&lt; 10, 16 &gt;</type>
      <name>Matrix10x16</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad7bb9ef7fdaadb16f95a6e42cf32d622</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorFixSize&lt; 2 &gt;</type>
      <name>Vector2</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a60f2b9c49979e66bbc9fd83dba192e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorFixSize&lt; 3 &gt;</type>
      <name>Vector3</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6ba91315448cf1d275f460097e36d134</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorFixSize&lt; 4 &gt;</type>
      <name>Vector4</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9827b82ba400214bc1c3f0a2714aee0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorFixSize&lt; 6 &gt;</type>
      <name>Vector6</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aacbdf066949a170899a2e43ad52987d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorFixSize&lt; 10 &gt;</type>
      <name>Vector10</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a658ee3743c3ccf3d61c38e4fa1c81ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorFixSize&lt; 16 &gt;</type>
      <name>Vector16</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a68b87219f8e66c52f9d5de9d84aef7c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 1 &gt;</type>
      <name>Vector3d</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4cdc8b6ec19f8a7bbe8b98baafc97ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
      <name>Vector6d</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5f2f2cff65cf954aae839aef997c6ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 3, Eigen::RowMajor &gt;</type>
      <name>Matrix3dRowMajor</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5f99075824e5d08334f3e660a41eb94b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iDynTree::Vector3</type>
      <name>LinearAccelerometerMeasurements</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>adcfa60b3d3580f517fd47c8864534b36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iDynTree::Vector3</type>
      <name>GyroscopeMeasurements</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a94dcb1f9c90a22269981469e229ed6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iDynTree::Vector3</type>
      <name>MagnetometerMeasurements</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad170eb4fd0bd13bfb0bdbdb6460d28bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iDynTree::Vector4</type>
      <name>UnitQuaternion</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8953e202971beb38867767ab9f002c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iDynTree::Vector3</type>
      <name>RPY</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a48e2955e462d28103d57a10634d0654d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IJoint *</type>
      <name>IJointPtr</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ade0c4658492d5288102a323d704a2a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const IJoint *</type>
      <name>IJointConstPtr</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac8fef24361e5d31b7bb1c5e468ea9513</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>LinkIndex</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac5d5803a07b810d7c0e3f64e9b087fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>JointIndex</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ada930c82e902e12abc47cc94f86fd115</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>DOFIndex</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af9e21583c2dc963f83e1c76dd0bcabc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>FrameIndex</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af2403782f0637caaa6f6083a125d2b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>TraversalIndex</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>acf7f263843b424ec6a8f741dabb5707d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Link *</type>
      <name>LinkPtr</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a39bc17f697110e44c09c2e6e1aa7fa57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Link *</type>
      <name>LinkConstPtr</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a34779dc4741f85944c0e2f736dc7def2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinkWrenches</type>
      <name>LinkNetExternalWrenches</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac93f1a5870ffbdb40436a8ab17b4df5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinkWrenches</type>
      <name>LinkInternalWrenches</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab0304c1c94e9d9f0bbd646fceaad6e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinkWrenches</type>
      <name>LinkNetTotalWrenchesWithoutGravity</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8467b5079b622cd683df2fcdfd16b07c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinkInertias</type>
      <name>LinkCompositeRigidBodyInertias</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4eebfd4c3b5feb2154a1de101578fb4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinkAccArray</type>
      <name>LinkProperAccArray</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a104b2ec0864d4c37b58b808b43630171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MovableJointImpl&lt; 1, 1 &gt;</type>
      <name>MovableJointImpl1</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac4ab72af9658e6e1503c06a97786db7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MovableJointImpl&lt; 2, 2 &gt;</type>
      <name>MovableJointImpl2</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a24b411fa2a181857fd60881b7a1fa644</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MovableJointImpl&lt; 3, 3 &gt;</type>
      <name>MovableJointImpl3</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae4671e7929209092bc1d6a72f460872a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MovableJointImpl&lt; 4, 4 &gt;</type>
      <name>MovableJointImpl4</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a66158274373829ef7c8694995a9d6929</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MovableJointImpl&lt; 5, 5 &gt;</type>
      <name>MovableJointImpl5</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5b8dfe13ce097fa3e505f492b7906c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MovableJointImpl&lt; 6, 6 &gt;</type>
      <name>MovableJointImpl6</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af1c9c077a2177994db5ee45257af1d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MatrixStorageOrdering</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1d9848852f7effdff0a7206e361759dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowMajor</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1d9848852f7effdff0a7206e361759dca2b26025c525aa73dc7d5a8ab6b75c277</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColumnMajor</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1d9848852f7effdff0a7206e361759dcaa2d6963e41f11651763298147696f0dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BerdyVariants</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ga62aff3167b9df327b4b1db6affadd21f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ORIGINAL_BERDY_FIXED_BASE</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga62aff3167b9df327b4b1db6affadd21faf59c4a22cd72d6e001dbba40910e9c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BERDY_FLOATING_BASE</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga62aff3167b9df327b4b1db6affadd21fa1ca580068ec7f491800abeadf68185e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BerdyDynamicVariablesTypes</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ga83d8f828969dabc7dc82904d8de15312</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_BODY_PROPER_ACCELERATION</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312a48b4b26b9b1780cc55a5cbc89c6f0d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NET_INT_AND_EXT_WRENCHES_ON_LINK_WITHOUT_GRAV</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312a4d8110167e729b4fd3a17147bcd1252e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOINT_WRENCH</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312adaecc7fb3d43b48487ae03dfec685fb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOF_TORQUE</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312a80199996cf9e8b7d5171d762533f6c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NET_EXT_WRENCH</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312aa13efb04f5c05ca865f2aee0fd03fe68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOF_ACCELERATION</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312a9a69ec4d25d83b00175dc3adb8edce00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_BODY_PROPER_CLASSICAL_ACCELERATION</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312ac2cfd7190c466bb19a532054700478dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BerdySensorTypes</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gab629c8d25391838124595ba8961654e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIX_AXIS_FORCE_TORQUE_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4aeb713f0bede28acb44bffd71c4c8b7c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCELEROMETER_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4a7735d104e1d0a81cd5cf6b4d4c6e280c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GYROSCOPE_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4a0057121dd88c26066f6ea316f78f7e97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREE_AXIS_ANGULAR_ACCELEROMETER_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4a959f2e93bc56ff32d8dc98a75bdaa0a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREE_AXIS_FORCE_TORQUE_CONTACT_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4a5bcadad8e7702de8f0dbcdbd5108d893</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOF_ACCELERATION_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4a3b05b1fa0daf40ead3bb45631fc1b425</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOF_TORQUE_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4afe52ea6ba4b27e76e1fd986700941151</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NET_EXT_WRENCH_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4aa295b9c16be05c81c215270381d2b648</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOINT_WRENCH_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4a207d61f7e8d81f6729f6dd080ba8a06c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SwitchingPattern</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a87e9224ed19ef268687c0d2522048946</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALTERNATE_CONTACT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a87e9224ed19ef268687c0d2522048946a524b0c6a15e4d5b55f396a39e42ab305</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LATEST_ACTIVE_CONTACT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a87e9224ed19ef268687c0d2522048946ad1645067b3ead8a700e7551ff0af01d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEFAULT_CONTACT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a87e9224ed19ef268687c0d2522048946aa6e9a49639f39ee24e3fbafc4cee78f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UnknownWrenchContactType</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3af0bfcd7989e409b610847e3b397b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FULL_WRENCH</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3af0bfcd7989e409b610847e3b397b26a6abd6bcbc638153015ff2229a4cc6c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PURE_FORCE</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3af0bfcd7989e409b610847e3b397b26aeb51903155017085b84cc6aac2e2bba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PURE_FORCE_WITH_KNOWN_DIRECTION</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3af0bfcd7989e409b610847e3b397b26a7e0e568e396d7cd82bf2fa23ca525a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_UNKNOWNS</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3af0bfcd7989e409b610847e3b397b26a40b36711643e2573ff0f03773c0555e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>InverseKinematicsRotationParametrization</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a04da5add9479687cf4c7eb873e717c6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InverseKinematicsRotationParametrizationQuaternion</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a04da5add9479687cf4c7eb873e717c6ca6bbd58481084418979b449c46aff99a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InverseKinematicsRotationParametrizationRollPitchYaw</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a04da5add9479687cf4c7eb873e717c6caad8ec2efa81330efbf416e7550113ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>InverseKinematicsTreatTargetAsConstraint</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5cb905194c9ee61c0a23b32d603b2df2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InverseKinematicsTreatTargetAsConstraintNone</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5cb905194c9ee61c0a23b32d603b2df2aa3f7c6e0138052de9bc8a0d3dcd9d712</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InverseKinematicsTreatTargetAsConstraintPositionOnly</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5cb905194c9ee61c0a23b32d603b2df2a786b8aeaff64c77f025cec462c47206b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InverseKinematicsTreatTargetAsConstraintRotationOnly</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5cb905194c9ee61c0a23b32d603b2df2aad1cbbc20ef9d02ff21364a90f781681</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InverseKinematicsTreatTargetAsConstraintFull</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5cb905194c9ee61c0a23b32d603b2df2a90e54d63819ec0bff0f8eec68beff50b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FrameVelocityRepresentation</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0089c6dac34bc6a4f623d9e9e565375a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INERTIAL_FIXED_REPRESENTATION</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0089c6dac34bc6a4f623d9e9e565375aaf9e6abb240a3f5f6f3eb386c21277eeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BODY_FIXED_REPRESENTATION</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0089c6dac34bc6a4f623d9e9e565375aad3aa0f715d4709ae83c826d14ffb1dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIXED_REPRESENTATION</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0089c6dac34bc6a4f623d9e9e565375aacfd8cfdeac3248d26f145bd0998f93b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>exportSolidShapePropertyType</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a97acc3ec57195595c1e90baf6e5301e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VISUAL</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a97acc3ec57195595c1e90baf6e5301e0a216e90cfa71b9da7464b509ffb091da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLLISION</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a97acc3ec57195595c1e90baf6e5301e0a7838370813a6da0ad65787404838d153</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>exportAdditionalFrameDirectionOption</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac4b1a735b11402fa88e96321d976c5a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAKE_LINK_IS_CHILD</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac4b1a735b11402fa88e96321d976c5a7a5c9dd7caa99335cafd3f9e3994d4e6b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAKE_LINK_IS_PARENT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac4b1a735b11402fa88e96321d976c5a7a4a73c64755f54ce4d1ef9e43f3afa907</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SensorType</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad291b88efdf5262d744d33f642daf8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIX_AXIS_FORCE_TORQUE</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad291b88efdf5262d744d33f642daf8b9a7006069f3fbbdb2dfdd42a73646eb0c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCELEROMETER</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad291b88efdf5262d744d33f642daf8b9acaffc97afec9d7a74f00e940a440e27c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GYROSCOPE</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad291b88efdf5262d744d33f642daf8b9af18877b600b6d3bb9828709115fc0f7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREE_AXIS_ANGULAR_ACCELEROMETER</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad291b88efdf5262d744d33f642daf8b9a442e40fb46ceb1796cb5d6b7d7e7e167</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREE_AXIS_FORCE_TORQUE_CONTACT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad291b88efdf5262d744d33f642daf8b9a92de2e46732f84e720c99cd5a3588190</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LightType</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aad6844bb3e20ca63bfe9e3ee6e26515a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_LIGHT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aad6844bb3e20ca63bfe9e3ee6e26515aa7552ee08212d810760cfcca2c9e26976</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIRECTIONAL_LIGHT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aad6844bb3e20ca63bfe9e3ee6e26515aac19ca7f555771da916a01ed3fa781d21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::VectorXd &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5481a54f7c787fd4cf55a0f5fd21bbb0</anchor>
      <arglist>(VectorDynSize &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0d2e67fee79a1191ed16ab1d522b0078</anchor>
      <arglist>(MatrixDynSize &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::VectorXd &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3f48b18c53414248343c3adaf5db988c</anchor>
      <arglist>(const VectorDynSize &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::VectorXd &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3d1f28b899ee110b8af0c92c9945455c</anchor>
      <arglist>(Span&lt; const double &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af9123b8fa68b1799fd197ab4a1acc618</anchor>
      <arglist>(const MatrixDynSize &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; double, VecSize, 1 &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4dc3574842fc660108111d96dac71b23</anchor>
      <arglist>(VectorFixSize&lt; VecSize &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::Matrix&lt; double, VecSize, 1 &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a17939782b66cf87bba581ac4d6db6270</anchor>
      <arglist>(const VectorFixSize&lt; VecSize &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; double, nRows, nCols, Eigen::RowMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac34e051a03bd114394e71919b795171e</anchor>
      <arglist>(MatrixFixSize&lt; nRows, nCols &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; double, nRows, 1 &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab60f7d72717e939931bf139b222b2832</anchor>
      <arglist>(MatrixFixSize&lt; nRows, 1 &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; double, 1, nCols &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3153f5d1e97e538fae73b906b511c518</anchor>
      <arglist>(MatrixFixSize&lt; 1, nCols &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::Matrix&lt; double, nRows, nCols, Eigen::RowMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9639a283e2caa3460084f5e3ac48aa49</anchor>
      <arglist>(const MatrixFixSize&lt; nRows, nCols &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; double, 6, 1 &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af643aa15e4ab96c1e19f5364893d4b0b</anchor>
      <arglist>(const SpatialMotionVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; double, 6, 1 &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4bb2e73fb98abd04aed4da600567b24b</anchor>
      <arglist>(const SpatialForceVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>acf2d7088e9fd094e6aa9c79bd4364b69</anchor>
      <arglist>(SpatialMotionVector &amp;vec, const Eigen::Matrix&lt; double, 6, 1 &gt; &amp;eigVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1943bf2f7027929dd5a9203b35d60b82</anchor>
      <arglist>(SpatialForceVector &amp;vec, const Eigen::Matrix&lt; double, 6, 1 &gt; &amp;eigVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad32fda4b9fa803472c83dea084ec14d8</anchor>
      <arglist>(Transform &amp;trans, const Eigen::Matrix4d &amp;eigMat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; typename Derived::Scalar, 3, 3, Eigen::RowMajor &gt;</type>
      <name>skew</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae5b49ed3e6ce87e8262be598d41b01bb</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; typename Derived::Scalar, 3, 1 &gt;</type>
      <name>unskew</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8e4347585aaeb967bfb2916b135b9357</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab923f233e9624344a28e361ddc2c4c10</anchor>
      <arglist>(iDynTreeMatrixType &amp;mat, const IndexRange rowRange, const IndexRange colRange, const MatrixFixSize&lt; nRows, nCols &gt; &amp;subMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a46433c21ed1226e759f6d2471731ff20</anchor>
      <arglist>(iDynTreeMatrixType &amp;mat, const IndexRange rowRange, const IndexRange colRange, const EigMatType &amp;subMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a15eb97c903bd5a5a44d7b36997a383f4</anchor>
      <arglist>(iDynTreeMatrixType &amp;mat, const IndexRange rowRange, const IndexRange colRange, const double subMat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrixToIdentity</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>acab405374af27aa1405539284ac1c79a</anchor>
      <arglist>(iDynTreeMatrixType &amp;mat, const IndexRange rowRange, const IndexRange colRange)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrixToMinusIdentity</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a05bb9e8c80231289997f79ffc0b2e97c</anchor>
      <arglist>(iDynTreeMatrixType &amp;mat, const IndexRange rowRange, const IndexRange colRange)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubVector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6dd6e3fecb51492464bb6648090d9785</anchor>
      <arglist>(VectorDynSize &amp;vec, const IndexRange range, const VectorFixSize&lt; size &gt; &amp;subVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubVector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac065bee2dbb9521e07df4d769992ccd6</anchor>
      <arglist>(VectorDynSize &amp;vec, const IndexRange range, double subVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubVector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a60fc528e9cb5bb8f0a41ad51ae464ac5</anchor>
      <arglist>(VectorDynSize &amp;vec, const IndexRange range, const SpatialMotionVector &amp;twist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubVector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6c26a20e65041a0023677f35f84563f4</anchor>
      <arglist>(VectorDynSize &amp;vec, const IndexRange range, const SpatialForceVector &amp;wrench)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubVector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3707e4cd79954877014299710fee2607</anchor>
      <arglist>(VectorDynSize &amp;vec, const IndexRange range, const T &amp;subVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pseudoInverse_helper2</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a903238e532f385a1cd3db7b731fa884c</anchor>
      <arglist>(const MapType &amp;A, Eigen::JacobiSVD&lt; Eigen::MatrixXd &gt; &amp;svdDecomposition, MapType &amp;Apinv, double tolerance, unsigned int computationOptions=Eigen::ComputeThinU|Eigen::ComputeThinV)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pseudoInverse_helper1</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aacb98344c6221dbf5e5d7678e3e75136</anchor>
      <arglist>(const MapType &amp;A, Eigen::JacobiSVD&lt; Eigen::MatrixXd &gt; &amp;svdDecomposition, MapType &amp;Apinv, double tolerance, unsigned int computationOptions=Eigen::ComputeThinU|Eigen::ComputeThinV)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pseudoInverse</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0b20a0208cab1ac6cdbd661612ca4c1b</anchor>
      <arglist>(const MapType A, MapType Apinv, double tolerance, unsigned int computationOptions=Eigen::ComputeThinU|Eigen::ComputeThinV)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::SparseMatrix&lt; double, Eigen::RowMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ade809da6861adf8889108908fd931ee5</anchor>
      <arglist>(iDynTree::SparseMatrix&lt; iDynTree::RowMajor &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::SparseMatrix&lt; double, Eigen::RowMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3c0db1fc07367309957972bd66454c7e</anchor>
      <arglist>(const iDynTree::SparseMatrix&lt; iDynTree::RowMajor &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::SparseMatrix&lt; double, Eigen::ColMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a90ae57e2a42e7bad1cedda56db4ee3d4</anchor>
      <arglist>(iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::SparseMatrix&lt; double, Eigen::ColMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae48cfcc0f75e51f21ae1ac34de84efc1</anchor>
      <arglist>(const iDynTree::SparseMatrix&lt; iDynTree::ColumnMajor &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>squareCrossProductMatrix</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5cb90836a26ae5bb773be45bad7dad54</anchor>
      <arglist>(const Eigen::Vector3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>skew</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8dac2640419d7eaba00586c252ab99e5</anchor>
      <arglist>(const Eigen::Vector3d &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>efficient6dCopy</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab4c72168cc4cc9909da74c433345e8d0</anchor>
      <arglist>(vector6d *pthis, const vector6d &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>vector6d</type>
      <name>efficient6dSum</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9f173fe7a9b0aabdbfa0169513dd0afa</anchor>
      <arglist>(const vector6d &amp;op1, const vector6d &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>vector6d</type>
      <name>efficient6ddifference</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad44d09b939590fde0dca95ebd7f899c5</anchor>
      <arglist>(const vector6d &amp;op1, const vector6d &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>resultType</type>
      <name>efficientTwistCrossTwist</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ada26d16396f1cd9f82b2e7c921fe202e</anchor>
      <arglist>(const twistType &amp;op1, const motionVectorType &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>resultType</type>
      <name>efficientTwistCrossMomentum</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2941457a02de10e9de1dea4106588921</anchor>
      <arglist>(const twistType &amp;op1, const momentumVectorType &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>affda5f6a0111301c3e8c09f46ae84887</anchor>
      <arglist>(Span&lt; ElementType, FirstExtent &gt; l, Span&lt; ElementType, SecondExtent &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>abc78e202932a5b364ccc6952143736a5</anchor>
      <arglist>(Span&lt; ElementType, Extent &gt; l, Span&lt; ElementType, Extent &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a42627470960988b6f18ca9a7037dac03</anchor>
      <arglist>(Span&lt; ElementType, Extent &gt; l, Span&lt; ElementType, Extent &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae774056f8c53958ea2448c4921080471</anchor>
      <arglist>(Span&lt; ElementType, Extent &gt; l, Span&lt; ElementType, Extent &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac28edf035d889d4c6218848e5007d4ca</anchor>
      <arglist>(Span&lt; ElementType, Extent &gt; l, Span&lt; ElementType, Extent &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a249acd1b49049d01403046ea4fa61513</anchor>
      <arglist>(Span&lt; ElementType, Extent &gt; l, Span&lt; ElementType, Extent &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; ElementType &gt;</type>
      <name>make_span</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afea09daa42453877437d4a0bfb11ce3c</anchor>
      <arglist>(ElementType *ptr, typename Span&lt; ElementType &gt;::index_type count)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; ElementType &gt;</type>
      <name>make_span</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a32b250386639651e4c79f31d35094ca9</anchor>
      <arglist>(ElementType *firstElem, ElementType *lastElem)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; ElementType, N &gt;</type>
      <name>make_span</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aef2273818c22b800f0296005f678539f</anchor>
      <arglist>(ElementType(&amp;arr)[N]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; typename Container::value_type &gt;</type>
      <name>make_span</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae39036a1440abb3b9e4897272394317a</anchor>
      <arglist>(Container &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; const typename Container::value_type &gt;</type>
      <name>make_span</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afcf9113bb2001515d5b94f80f5ccf743</anchor>
      <arglist>(const Container &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; typename Ptr::element_type &gt;</type>
      <name>make_span</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a7f2bdb0504977bcc9abcd0790dbd3a10</anchor>
      <arglist>(Ptr &amp;cont, std::ptrdiff_t count)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR Span&lt; typename Ptr::element_type &gt;</type>
      <name>make_span</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5b481ea15046d8bbb7cad35accbd5b32</anchor>
      <arglist>(Ptr &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertStringAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a668ee99a790b7af845958d4673161135</anchor>
      <arglist>(const std::string &amp;val1, const std::string &amp;val2, double tol=DEFAULT_TOL, std::string file=&quot;&quot;, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertDoubleAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a274077496ffac0ee45107923c3fe9cee</anchor>
      <arglist>(const double &amp;val1, const double &amp;val2, double tol=DEFAULT_TOL, std::string file=&quot;&quot;, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertTransformsAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac18550f459dae84f3a502274b39193cf</anchor>
      <arglist>(const Transform &amp;trans1, const Transform &amp;trans2, double tol=DEFAULT_TOL, std::string file=&quot;&quot;, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertSpatialMotionAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae326a16295b6efe5e6023665cb2a012f</anchor>
      <arglist>(const SpatialMotionVector &amp;t1, const SpatialMotionVector &amp;t2, double tol=DEFAULT_TOL, std::string file=&quot;&quot;, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertSpatialForceAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0c0a527efda465b7b190e726c148b5dc</anchor>
      <arglist>(const SpatialForceVector &amp;f1, const SpatialForceVector &amp;f2, double tol=DEFAULT_TOL, std::string file=&quot;&quot;, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertTrue</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1289062400b0dd99e49653356d569e8e</anchor>
      <arglist>(bool prop, std::string file=&quot;&quot;, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRandomBool</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2296e58922e46f4fc2d91689f9e59da9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRandomDouble</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a051e689c0d7974b18929629680c95619</anchor>
      <arglist>(double min=0.0, double max=1.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomInteger</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab3920b4ee524d6bb9062435d7c9d7065</anchor>
      <arglist>(int min, int max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRandomVector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a30e37efb8be6e98f4bf9aabd7493748c</anchor>
      <arglist>(VectorType &amp;vec, double min=0.0, double max=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRandomMatrix</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8960c4bd871d87f67470f2ab8f8b5e8e</anchor>
      <arglist>(MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>getRandomPosition</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a553049a8d951cbad14dd59168935a7b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Rotation</type>
      <name>getRandomRotation</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9929fdbd53800f02bd76305f9d985942</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>getRandomTransform</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a977a15d73114a87fd6705dd9a8f7c736</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Axis</type>
      <name>getRandomAxis</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae4c3a6982c0bec99386eb3f4c05632d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia</type>
      <name>getRandomInertia</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a293fa271f52f72d795f4858b34273ed6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionVector</type>
      <name>getRandomTwist</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a088ed6a480496334ee1dd51f088c6bb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceVector</type>
      <name>getRandomWrench</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a04bcdc7077b46c1944825327875cb65b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printVector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a91197a36381e2fa990a0b54da40abee9</anchor>
      <arglist>(std::string, const VectorType &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printVectorDifference</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2e5af240e2fab62a2527d450c4bdcabd</anchor>
      <arglist>(std::string name, const VectorType1 &amp;vec1, const VectorType2 &amp;vec2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printVectorWrongElements</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa25d97acb2792de12937a70d01e75ae7</anchor>
      <arglist>(std::string name, std::vector&lt; bool &gt; &amp;correctElems)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printMatrixWrongElements</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a456896bb82abd7daca7ac57546380e94</anchor>
      <arglist>(std::string name, std::vector&lt; std::vector&lt; TestMatrixMismatch &gt; &gt; &amp;correctElems)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printMatrixPercentageError</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a004eafd55ec8125ba2842dc2458088be</anchor>
      <arglist>(const MatrixType1 &amp;mat1, const MatrixType2 &amp;mat2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertVectorAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa20d8a80e1de786a905ee0e897e45586</anchor>
      <arglist>(const VectorType1 &amp;vec1, const VectorType2 &amp;vec2, double tol, std::string file, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertVectorAreEqualWithRelativeTol</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6b4c4d79f076ed9013708a5ab40e9273</anchor>
      <arglist>(const VectorType1 &amp;vec1, const VectorType2 &amp;vec2, double relativeTol, double minAbsoluteTol, std::string file, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertMatrixAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac3a22c22491b65545bdfbab336950530</anchor>
      <arglist>(const MatrixType1 &amp;mat1, const MatrixType2 &amp;mat2, double tol, std::string file, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertWoAbort</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac967fe3c6f3c26e946fe2f70ee6f3af9</anchor>
      <arglist>(const char *semCheck, const char *file, const char *func, int line)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkEqualOrUnknown</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af82eb4858f1f94dbcf92a68210e17593</anchor>
      <arglist>(const int op1, const int op2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportError</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab710bc576b963cce44ee3a97a0d37df5</anchor>
      <arglist>(const char *className, const char *methodName, const char *errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reportErrorIf</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1b924287a0557e41bb16704961399f68</anchor>
      <arglist>(bool condition, const char *className_methodName, const char *errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportWarning</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad1ad9933bf06265120db1feecb34ac9a</anchor>
      <arglist>(const char *className, const char *methodName, const char *errorMessage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportInfo</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6260625e944d3b34a7db5730dbd11d21</anchor>
      <arglist>(const char *className, const char *methodName, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportDebug</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a34f0ca347ac5bfae3a50fe09ccd787d1</anchor>
      <arglist>(const char *className, const char *methodName, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deg2rad</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2099697a85abd10017e2ab2ca9f3336e</anchor>
      <arglist>(const double valueInDeg)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rad2deg</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3ffc4d06e77379cc44c32f2ea44df1d5</anchor>
      <arglist>(const double valueInRad)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkDoublesAreEqual</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3f330bf40f3d09799c2b4923f79173ff</anchor>
      <arglist>(const double &amp;val1, const double &amp;val2, double tol=DEFAULT_TOL)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, 9, 1 &gt;</type>
      <name>vecColMajor</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9be0e5a5790a4c71933f1e6fe98ebeee</anchor>
      <arglist>(const Eigen::Matrix&lt; double, 3, 3, Eigen::RowMajor &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, 3, 3, Eigen::RowMajor &gt;</type>
      <name>unvecColMajor</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a80e63a3a82598111816dac5a8e9ee6f1</anchor>
      <arglist>(const Eigen::Matrix&lt; double, 9, 1 &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
      <name>vech</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae12fdc30551dea2f01ea734523403f39</anchor>
      <arglist>(const Eigen::Matrix&lt; double, 3, 3, Eigen::RowMajor &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
      <name>diag</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a138e8931d2ca9e7bb521c916630cd47a</anchor>
      <arglist>(const Eigen::Matrix&lt; double, 3, 1 &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
      <name>Delta</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a723eb390c144e163605ec084b1d9248b</anchor>
      <arglist>(const unsigned int r, const unsigned int c)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, 3, 1 &gt;</type>
      <name>delta</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a51f76e76db44e1e0021334ff1372010f</anchor>
      <arglist>(const unsigned int r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpatialMotionForceVectorT</type>
      <name>changePointOfMotionT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a30b68a9a86dc461769d42c0576bed71d</anchor>
      <arglist>(const Position &amp;pos, const SpatialMotionForceVectorT &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpatialMotionForceVectorT</type>
      <name>changePointOfForceT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a008bdab3122130839ce8a5aefe1f1d08</anchor>
      <arglist>(const Position &amp;pos, const SpatialMotionForceVectorT &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpatialMotionForceVectorT</type>
      <name>changeCoordFrameOfT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1e097df140e6cd7959d57648bb70a1e2</anchor>
      <arglist>(const Rotation &amp;rot, const SpatialMotionForceVectorT &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; typename Derived::Scalar, 3, 3 &gt;</type>
      <name>mySkewIn</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5b9b5d8dad89f8515a62550a72999e44</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, 3, 6 &gt;</type>
      <name>rotationalMomentumRegressor</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a366337ebb0a8b7e0d1c753c2b4998e66</anchor>
      <arglist>(const Vector3 &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>transform</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0e83d0ebf209d66127c738d02f6cc458</anchor>
      <arglist>(const Transform &amp;op1, const T &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>transform</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad42a046567233e5170684657a1e91ad8</anchor>
      <arglist>(const Transform &amp;op1, const Position &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia</type>
      <name>transform</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5eb56d318dda81e97743b1117026f2be</anchor>
      <arglist>(const Transform &amp;op1, const SpatialInertia &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ArticulatedBodyInertia</type>
      <name>transform</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a45271a35003d0e66e751ffd5c054bf56</anchor>
      <arglist>(const Transform &amp;op1, const ArticulatedBodyInertia &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>spatialForceType</type>
      <name>transformWrenchEfficient</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae2ec7e9c95aa2dba8904bc9a9c22dcfc</anchor>
      <arglist>(const Transform &amp;op1, const spatialForceType &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>spatialVelType</type>
      <name>transformTwistEfficient</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afbef682ebb9b19d68839455a9a6859b7</anchor>
      <arglist>(const Transform &amp;op1, const spatialVelType &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transform</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab05b1b32ace1a8a4819080a941bf7499</anchor>
      <arglist>(const Transform &amp;op1, const T &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; typename Derived::Scalar, 3, 3 &gt;</type>
      <name>mySkew</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3ebbc45fb9c525050fad36de2469391f</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; typename Derived::Scalar, 3, 3 &gt;</type>
      <name>mySkeww</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6933c093317db64586e0197dcc5fa1e5</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkEqualAndNotUnknown</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a15618b328c0042725fdaafb387132a46</anchor>
      <arglist>(const int op1, const int op2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinkBerdyDynamicVariable</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a39f8730ab92b19678c82e418b8c0f2a3</anchor>
      <arglist>(const BerdyDynamicVariablesTypes dynamicVariableType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isJointBerdyDynamicVariable</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1d21c6d1ea587b6ed88d52bdf43fcf8b</anchor>
      <arglist>(const BerdyDynamicVariablesTypes dynamicVariableType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDOFBerdyDynamicVariable</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a517a9e2101a59831cf912d8559b4900c</anchor>
      <arglist>(const BerdyDynamicVariablesTypes dynamicVariableType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>estimateExternalWrenchesWithoutInternalFT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad96bdadc6f50434261b8fdab971904e6</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const LinkUnknownWrenchContacts &amp;unknownWrenches, const JointPosDoubleArray &amp;jointPos, const LinkVelArray &amp;linkVel, const LinkAccArray &amp;linkProperAcc, estimateExternalWrenchesBuffers &amp;bufs, LinkContactWrenches &amp;outputContactWrenches)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>estimateExternalWrenches</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4c628669d7801fee070c5ac32312b45d</anchor>
      <arglist>(const Model &amp;model, const SubModelDecomposition &amp;subModels, const SensorsList &amp;sensors, const LinkUnknownWrenchContacts &amp;unknownWrenches, const JointPosDoubleArray &amp;jointPos, const LinkVelArray &amp;linkVel, const LinkAccArray &amp;linkProperAcc, const SensorsMeasurements &amp;ftSensorsMeasurements, estimateExternalWrenchesBuffers &amp;bufs, LinkContactWrenches &amp;outputContactWrenches)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dynamicsEstimationForwardVelAccKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4552fdf67855209419f189466fbb8e69</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const Vector3 &amp;base_classicalProperAcc, const Vector3 &amp;base_angularVel, const Vector3 &amp;base_angularAcc, const JointPosDoubleArray &amp;jointPos, const JointDOFsDoubleArray &amp;jointVel, const JointDOFsDoubleArray &amp;jointAcc, LinkVelArray &amp;linkVel, LinkAccArray &amp;linkProperAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dynamicsEstimationForwardVelKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9c5c034c8fc89c4d0d19f17d2134a7a4</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const Vector3 &amp;base_angularVel, const JointPosDoubleArray &amp;jointPos, const JointDOFsDoubleArray &amp;jointVel, LinkVelArray &amp;linkVel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeLinkNetWrenchesWithoutGravity</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2cf3011d218d8a98440bdcafdd1d54e6</anchor>
      <arglist>(const Model &amp;model, const LinkVelArray &amp;linkVel, const LinkAccArray &amp;linkProperAcc, LinkNetTotalWrenchesWithoutGravity &amp;linkNetWrenchesWithoutGravity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>estimateLinkContactWrenchesFromLinkNetExternalWrenches</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab6c0784c22088705cc07732b5b29dd4b</anchor>
      <arglist>(const Model &amp;model, const LinkUnknownWrenchContacts &amp;unknownWrenches, const LinkNetExternalWrenches &amp;netExtWrenches, LinkContactWrenches &amp;outputContactWrenches)</arglist>
    </member>
    <member kind="function">
      <type>TraversalIndex</type>
      <name>getTraversalIndexFromJointIndex</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a351538e7a6c90a31c48b7a74b9452f39</anchor>
      <arglist>(const Model &amp;m_model, const Traversal &amp;m_traversal, const JointIndex idx)</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>getMeasuredWrench</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae6d4434f0935a6f85b135ac73e771752</anchor>
      <arglist>(const SensorsList &amp;sensor_list, const SensorsMeasurements &amp;sensor_measures, const LinkIndex link_id)</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>computeKnownTermsOfEstimationEquationWithoutInternalFT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a64f476e0c71ad2392bbc2207d342806b</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;modelTraversal, const JointPosDoubleArray &amp;jointPos, const LinkVelArray &amp;linkVel, const LinkAccArray &amp;linkProperAcc, estimateExternalWrenchesBuffers &amp;bufs)</arglist>
    </member>
    <member kind="function">
      <type>Wrench</type>
      <name>computeKnownTermsOfEstimationEquationWithInternalFT</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a64d36c9f59b5635f6e444e8210d8842a</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;subModelTraversal, const SensorsList &amp;sensors, const JointPosDoubleArray &amp;jointPos, const LinkVelArray &amp;linkVel, const LinkAccArray &amp;linkProperAcc, const SensorsMeasurements &amp;ftSensorsMeasurements, estimateExternalWrenchesBuffers &amp;bufs)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>countUnknowns</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a208b8a11d479b53928ea9f3c4be32c6f</anchor>
      <arglist>(const Traversal &amp;traversal, const LinkUnknownWrenchContacts &amp;unknownWrenches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeMatrixOfEstimationEquationAndExtWrenchKnownTerms</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4cfb65d4fc12a46b1ebf2b10f67610b9</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const LinkUnknownWrenchContacts &amp;unknownWrenches, const JointPosDoubleArray &amp;jointPos, const size_t subModelIndex, estimateExternalWrenchesBuffers &amp;bufs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeResultsOfEstimation</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a26b63a06d4d2a0ec184ceabb8ce0b0dc</anchor>
      <arglist>(const Traversal &amp;traversal, const LinkUnknownWrenchContacts &amp;unknownWrenches, const size_t subModelIndex, const estimateExternalWrenchesBuffers &amp;bufs, LinkContactWrenches &amp;outputContactWrenches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFTJointNames</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a10e8ce019bcc651b1f8f7d20ff89e006</anchor>
      <arglist>(const SensorsList &amp;_sensors, std::vector&lt; std::string &gt; &amp;ftJointNames)</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>convertBodyFixedAccelerationToMixedAcceleration</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aebe6fe1aedddb870f6d2bddc4014ac47</anchor>
      <arglist>(const SpatialAcc &amp;bodyFixedAcc, const Twist &amp;bodyFixedVel, const Rotation &amp;inertial_R_body)</arglist>
    </member>
    <member kind="function">
      <type>SpatialAcc</type>
      <name>convertMixedAccelerationToBodyFixedAcceleration</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>abd88511194aa3a095ef1317fe2801ae0</anchor>
      <arglist>(const Vector6 &amp;mixedAcc, const Twist &amp;bodyFixedVel, const Rotation &amp;inertial_R_body)</arglist>
    </member>
    <member kind="function">
      <type>SpatialAcc</type>
      <name>convertInertialAccelerationToBodyFixedAcceleration</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a870878b8976e76aa5b53aea679d4bfe3</anchor>
      <arglist>(const Vector6 &amp;inertialAcc, const Transform &amp;inertial_H_body)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DHChainFromiKinChain</name>
      <anchorfile>group__iDynTreeICUB.html</anchorfile>
      <anchor>ga93e84fbc1880a920199aae0cbabd76ea</anchor>
      <arglist>(iCub::iKin::iKinChain &amp;ikinChain, DHChain &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>modelFromiKinChain</name>
      <anchorfile>group__iDynTreeICUB.html</anchorfile>
      <anchor>gadb9ad80c8043481f2bb8f013542db690</anchor>
      <arglist>(iCub::iKin::iKinChain &amp;ikinChain, Model &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iKinLimbFromModel</name>
      <anchorfile>group__iDynTreeICUB.html</anchorfile>
      <anchor>ga681d23161951646fcb60dc7681e59482</anchor>
      <arglist>(const Model &amp;model, const std::string &amp;baseFrame, const std::string &amp;distalFrame, iCub::iKin::iKinLimb &amp;ikinLimb)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iKinLimbFromDHChain</name>
      <anchorfile>group__iDynTreeICUB.html</anchorfile>
      <anchor>gaaedc638580c296a9a355975268ea25bb</anchor>
      <arglist>(const DHChain &amp;dhChain, iCub::iKin::iKinLimb &amp;ikinLimb)</arglist>
    </member>
    <member kind="function">
      <type>DHLink</type>
      <name>iKinLink2DHLink</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a907871ccc9e6e56fb19fa0af4c0854c8</anchor>
      <arglist>(const iCub::iKin::iKinLink &amp;ikinlink)</arglist>
    </member>
    <member kind="function">
      <type>iCub::iKin::iKinLink</type>
      <name>DHLink2iKinLink</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae6d845189d4491128320b2c78c6082ec</anchor>
      <arglist>(const DHLink &amp;dhLink)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromSkinDynLibToiDynTreeHelper</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>abd0cb602d0a91817a13e042d47004d79</anchor>
      <arglist>(const Model &amp;model, const contactsList &amp;dynList, LinkUnknownWrenchContacts &amp;unknowns, const skinDynLibConversionsHelper &amp;conversionHelper)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sizeOfRotationParametrization</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a399f5a8eff425f1036038ee927fb81cb</anchor>
      <arglist>(enum InverseKinematicsRotationParametrization rotationParametrization)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>monotono_chain_cross</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af2aa4f20483e8150a8772d9bdc153030</anchor>
      <arglist>(Vector2 o, Vector2 a, Vector2 b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceBetweentTwoPoints</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a7ee743a546cf1ee6df1c63cebf0bd7f4</anchor>
      <arglist>(const Vector2 &amp;firstPoint, const Vector2 &amp;secondPoint)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceBetweenPointAndSegment</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a55ece32cfe2d578c4693392912af8f73</anchor>
      <arglist>(const Vector2 &amp;point, const Vector2 &amp;segmentFirstPoint, const Vector2 &amp;segmentLastPoint)</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>TransformFromDHCraig1989</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9f5fda0dc8377f9fad3f8b60d73f1c7c</anchor>
      <arglist>(double a, double alpha, double d, double theta)</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>TransformFromDH</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a259b4c68b0f4b9ae9ce389ed14f4c712</anchor>
      <arglist>(double a, double alpha, double d, double theta)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ExtractDHChainFromModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ada11245ee6d17f4d64ccf59eeead8f07</anchor>
      <arglist>(const iDynTree::Model &amp;model, const std::string baseFrame, const std::string eeFrame, DHChain &amp;outputChain, double tolerance=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CreateModelFromDHChain</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac94534b93496e2703a218b38774c64a1</anchor>
      <arglist>(const DHChain &amp;inputChain, Model &amp;outputModel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeLinearAndAngularMomentum</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga1f433a6725585332945762ed4e6b5fe5</anchor>
      <arglist>(const Model &amp;model, const LinkPositions &amp;linkPositions, const LinkVelArray &amp;linkVels, SpatialMomentum &amp;totalMomentum)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeLinearAndAngularMomentumDerivativeBias</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae214683bf9d037ee89a0c070ed9ed78d</anchor>
      <arglist>(const Model &amp;model, const LinkPositions &amp;linkPositions, const LinkVelArray &amp;linkVel, const LinkAccArray &amp;linkBiasAcc, Wrench &amp;totalMomentumBias)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RNEADynamicPhase</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga18613d41830aef7430e7a8a09fef98e1</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::Traversal &amp;traversal, const iDynTree::JointPosDoubleArray &amp;jointPos, const iDynTree::LinkVelArray &amp;linksVel, const iDynTree::LinkAccArray &amp;linksProperAcc, const iDynTree::LinkNetExternalWrenches &amp;linkExtForces, iDynTree::LinkInternalWrenches &amp;linkIntWrenches, iDynTree::FreeFloatingGeneralizedTorques &amp;baseForceAndJointTorques)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CompositeRigidBodyAlgorithm</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afa4f3546edbb4ab3e50a486e316a2470</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const JointPosDoubleArray &amp;jointPos, LinkCompositeRigidBodyInertias &amp;linkCRBs, FreeFloatingMassMatrix &amp;massMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ArticulatedBodyAlgorithm</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga5879141982887fc0d049cc3645f10dd5</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const LinkNetExternalWrenches &amp;linkExtWrenches, const JointDOFsDoubleArray &amp;jointTorques, ArticulatedBodyAlgorithmInternalBuffers &amp;buffers, FreeFloatingAcc &amp;robotAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InverseDynamicsInertialParametersRegressor</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga0c75db73b7682b9c524b0727b516b12b</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::Traversal &amp;traversal, const iDynTree::LinkPositions &amp;referenceFrame_H_link, const iDynTree::LinkVelArray &amp;linksVel, const iDynTree::LinkAccArray &amp;linksAcc, iDynTree::MatrixDynSize &amp;baseForceAndJointTorquesRegressor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardDynamicsLinearization</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0c9b6d083f99f1b6ffd1a6c3a7ae5e07</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const LinkNetExternalWrenches &amp;linkExtWrenches, const JointDOFsDoubleArray &amp;jointTorques, ForwardDynamicsLinearizationInternalBuffers &amp;bufs, FreeFloatingAcc &amp;robotAcc, FreeFloatingStateLinearization &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>SpatialMotionWrtMotionDerivative</type>
      <name>operator*</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8f92a6a26be06461e7364405c553bd66</anchor>
      <arglist>(const Transform &amp;a_X_b, const SpatialMotionWrtMotionDerivative &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>SpatialForceWrtMotionDerivative</type>
      <name>operator*</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aedfbcb0d62ea5bb9bf6fc476f3cc717a</anchor>
      <arglist>(const Transform &amp;a_X_b, const SpatialForceWrtMotionDerivative &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>biasWrenchVelocityDerivative</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aed28749437ab0ff261382d34506ffad4</anchor>
      <arglist>(SpatialInertia M, SpatialMotionVector V)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardPositionKinematics</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga41ad76666d447a42318ab5778b3ad18e</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const Transform &amp;worldHbase, const VectorDynSize &amp;jointPositions, LinkPositions &amp;linkPositions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardPositionKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a7d9ed3aeb57a5730beb59828bdf2301c</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;jointPos, LinkPositions &amp;linkPos)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardVelAccKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a11cc6474718df311245c95f5452f7608</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::Traversal &amp;traversal, const iDynTree::FreeFloatingPos &amp;robotPos, const iDynTree::FreeFloatingVel &amp;robotVel, const iDynTree::FreeFloatingAcc &amp;robotAcc, iDynTree::LinkVelArray &amp;linkVel, iDynTree::LinkAccArray &amp;linkAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardPosVelAccKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af853268cad240fb96e9190b6c07d7dfb</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::Traversal &amp;traversal, const iDynTree::FreeFloatingPos &amp;robotPos, const iDynTree::FreeFloatingVel &amp;robotVel, const iDynTree::FreeFloatingAcc &amp;robotAcc, iDynTree::LinkPositions &amp;linkPos, iDynTree::LinkVelArray &amp;linkVel, iDynTree::LinkAccArray &amp;linkAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardPosVelKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a82da15110d52ad717aa6c145f1c8a681</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::Traversal &amp;traversal, const iDynTree::FreeFloatingPos &amp;robotPos, const iDynTree::FreeFloatingVel &amp;robotVel, iDynTree::LinkPositions &amp;linkPos, iDynTree::LinkVelArray &amp;linkVel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardAccKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2848acd42a384966c3f2bbd760e29baa</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const FreeFloatingAcc &amp;robotAcc, const LinkVelArray &amp;linkVel, LinkAccArray &amp;linkAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardBiasAccKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a16f1071f088ed89178092de7b820558d</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const SpatialAcc &amp;baseBiasAcc, const LinkVelArray &amp;linkVel, LinkAccArray &amp;linkBiasAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardBiasAccKinematics</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2249785bd035cf4d2f35851d9eb50d26</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const LinkVelArray &amp;linkVel, LinkAccArray &amp;linkBiasAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FreeFloatingJacobianUsingLinkPos</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga7a189f499fb9bfe4126326a34ce6fc59</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const JointPosDoubleArray &amp;jointPositions, const LinkPositions &amp;linkPositions, const LinkIndex linkIndex, const Transform &amp;jacobFrame_X_world, const Transform &amp;baseFrame_X_jacobBaseFrame, MatrixDynSize &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type>Link</type>
      <name>getRandomLink</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae3c9d8004d8849d347af71dfbbc998f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRandomLinkToModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af2050e6090e689f7dba9bcd2905c7104</anchor>
      <arglist>(Model &amp;model, std::string parentLink, std::string newLinkName, bool noFixed=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRandomAdditionalFrameToModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>abbc9efd0eed3caf7826a0f67056972f8</anchor>
      <arglist>(Model &amp;model, std::string parentLink, std::string newFrameName)</arglist>
    </member>
    <member kind="function">
      <type>LinkIndex</type>
      <name>getRandomLinkIndexOfModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6480b737c82af8b72b95857960254bad</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getRandomLinkOfModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a75223c9a86126d90e70857cc48ff302e</anchor>
      <arglist>(const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>int2string</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2f8e6bff5b6a359c5bb88792dde90ac3</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>Model</type>
      <name>getRandomModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab524c8553e271868a40123e2e7d9ae7d</anchor>
      <arglist>(unsigned int nrOfJoints, size_t nrOfAdditionalFrames=10)</arglist>
    </member>
    <member kind="function">
      <type>Model</type>
      <name>getRandomChain</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a89ca09ae32e8673219c9beda06b11272</anchor>
      <arglist>(unsigned int nrOfJoints, size_t nrOfAdditionalFrames=10, bool noFixed=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRandomJointPositions</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aff4391c79fb7cd4b59feed20b012d1d5</anchor>
      <arglist>(VectorDynSize &amp;vec, const Model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRandomInverseDynamicsInputs</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a72bed46cd07c0617f3f59ffbbb0823a0</anchor>
      <arglist>(FreeFloatingPos &amp;pos, FreeFloatingVel &amp;vel, FreeFloatingAcc &amp;acc, LinkNetExternalWrenches &amp;extWrenches)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeFakeLinks</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aab77480c8f9d5add110768cf75226508</anchor>
      <arglist>(const Model &amp;modelWithFakeLinks, Model &amp;modelWithoutFakeLinks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createReducedModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0dfcb86d2d13eb1969493ee84da2f5c0</anchor>
      <arglist>(const Model &amp;fullModel, const std::vector&lt; std::string &gt; &amp;jointsInReducedModel, Model &amp;reducedModel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createModelWithNormalizedJointNumbering</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa6a9c44d5b80ede19b30f721f88d3679</anchor>
      <arglist>(const Model &amp;model, const std::string &amp;baseForNormalizedJointNumbering, Model &amp;reducedModel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeTransformToTraversalBase</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2f7475185a0d9ae6c7dcd2048d4a23fb</anchor>
      <arglist>(const Model &amp;fullModel, const Traversal &amp;traversal, const JointPosDoubleArray &amp;jointPos, LinkPositions &amp;traversalBase_H_link)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeTransformToSubModelBase</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3f3b031bdaab68634b5cc61f5e1e14b4</anchor>
      <arglist>(const Model &amp;fullModel, const SubModelDecomposition &amp;subModelDecomposition, const JointPosDoubleArray &amp;jointPos, LinkPositions &amp;subModelBase_H_link)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>closestPoints</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a394d5505cadab9f4539d6034de36b3fd</anchor>
      <arglist>(const iDynTree::Axis line_A, const iDynTree::Axis line_B, iDynTree::Position &amp;closest_point_line_A, iDynTree::Position &amp;closest_point_line_B, double tol=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkIfAxesAreIncident</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1537d5c0dda304324b7b9cbc75b86fbf</anchor>
      <arglist>(const iDynTree::Axis line_A, const iDynTree::Axis line_B, double tol=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkIfAxesAreCoincident</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a43a72452d31694ba5319c9cd0c2a8033</anchor>
      <arglist>(const iDynTree::Axis line_A, const iDynTree::Axis link_B, double tol=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>calculateDH</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a88c658896ee976ec73559a22abce20b0</anchor>
      <arglist>(const iDynTree::Axis zAxis_i_minus_1, const iDynTree::Axis xAxis_i_minus_1, const iDynTree::Position origin_i_minus_1, const iDynTree::Axis zAxis_i, const iDynTree::Direction xAxis_n_direction_hint, iDynTree::Position &amp;origin_i, iDynTree::Axis &amp;xAxis_i, iDynTree::Axis &amp;yAxis_i, DHLink &amp;dhParams, double tol=1e-6, int verbose=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>transformFromAxes</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1471079a174780b9d8d9bb77b0a552eb</anchor>
      <arglist>(const Axis xAxis, const Axis yAxis, const Axis zAxis, Transform &amp;refFrame_H_frame, double tol=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>intToString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>adffeb935ed6aad8d6f30705238117df8</anchor>
      <arglist>(const int inInt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ForwardDynamicsLinearizationWrtJointPos</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a7d26bb5b1d7535dcf56687ba32571725</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const LinkNetExternalWrenches &amp;linkExtWrenches, const JointDOFsDoubleArray &amp;jointTorques, const size_t dofDeriv, ForwardDynamicsLinearizationInternalBuffers &amp;bufs, FreeFloatingAcc &amp;robotAcc, FreeFloatingStateLinearization &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ForwardDynamicsLinearizationWrtBaseTwist</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab452f5437b511bcad7e17ba68746b504</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const LinkNetExternalWrenches &amp;linkExtWrenches, const JointDOFsDoubleArray &amp;jointTorques, ForwardDynamicsLinearizationInternalBuffers &amp;bufs, FreeFloatingAcc &amp;robotAcc, FreeFloatingStateLinearization &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ForwardDynamicsLinearizationWrtJointVel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa44413390b1d542078163fcf9f7c4085</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const LinkNetExternalWrenches &amp;linkExtWrenches, const JointDOFsDoubleArray &amp;jointTorques, const size_t dofDeriv, ForwardDynamicsLinearizationInternalBuffers &amp;bufs, FreeFloatingAcc &amp;robotAcc, FreeFloatingStateLinearization &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBaseLinkToTraversal</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a747794659e2d58ea16f98d870f895b50</anchor>
      <arglist>(const Model &amp;model, Traversal &amp;traversal, LinkIndex linkToAdd, std::deque&lt; stackEl &gt; &amp;linkToVisit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLinkToTraversal</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a7be79634e9015b3508e14a5d77863dab</anchor>
      <arglist>(const Model &amp;model, Traversal &amp;traversal, LinkIndex linkToAdd, JointIndex parentJointToAdd, LinkIndex parentLinkToAdd, std::deque&lt; stackEl &gt; &amp;linkToVisit)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFakeLink</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa64841c3795872a5f074c188b160eaaf</anchor>
      <arglist>(const Model &amp;modelWithFakeLinks, const LinkIndex linkToCheck)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCompositeRigidBodyInertiaSubModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae0dda9d596d583ad0062ac36615df535</anchor>
      <arglist>(const Model &amp;fullModel, const Traversal &amp;subModelTraversal, const FreeFloatingPos &amp;jointPos, LinkInertias &amp;linkSubModelCRBs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildLinkToAdditionalFramesList</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8a53b116eeea4ffaef94cf86f116c4fa</anchor>
      <arglist>(const Model &amp;fullModel, std::vector&lt; std::vector&lt; FrameIndex &gt; &gt; &amp;link2additionalFramesAdjacencyList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reducedModelAddAdditionalFrames</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac8cca06ef6121c5726b0aa15a929e9e1</anchor>
      <arglist>(const Model &amp;fullModel, Model &amp;reducedModel, const std::string linkInReducedModel, const Traversal &amp;linkSubModel, const FreeFloatingPos &amp;pos, LinkPositions &amp;subModelBase_X_link)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reducedModelAddSolidShapes</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a342821cc9b7ca323a7d448684f63e815</anchor>
      <arglist>(const Model &amp;fullModel, Model &amp;reducedModel, const std::string linkInReducedModel, const Traversal &amp;linkSubModel, const FreeFloatingPos &amp;pos, LinkPositions &amp;subModelBase_X_link)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iKinLimbFromKDLChain</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>gab8ca4dff754c4c5d72e235f5e7396b86</anchor>
      <arglist>(const KDL::Chain &amp;tree, iCub::iKin::iKinLimb &amp;iKin_limb, const KDL::JntArray &amp;min, const KDL::JntArray &amp;max, int verbose=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>YarptoKDL</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aff231fca4608ef35b1488c3e067d8672</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, KDL::Vector &amp;kdlVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>YarptoKDL</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab07b226214e4da32fd20322ee857be3f</anchor>
      <arglist>(const yarp::sig::Matrix &amp;idynMatrix, KDL::Rotation &amp;kdlRotation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>YarptoKDL</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8c3b039cd742c35b7d6a2bdda268bd56</anchor>
      <arglist>(const yarp::sig::Matrix &amp;idynMatrix, KDL::Frame &amp;kdlFrame)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>KDLtoYarp</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1381f7eb2e291d9d806c57cda37cf509</anchor>
      <arglist>(const KDL::Vector &amp;kdlVector, yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>yarp::sig::Vector</type>
      <name>KDLtoYarp</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8d5d542f3c3accf95d9ceaa4d6f36f96</anchor>
      <arglist>(const KDL::Vector &amp;kdlVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>KDLtoYarp</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a401dd57b75735a0807287eff7785bb05</anchor>
      <arglist>(const KDL::Rotation &amp;kdlRotation, yarp::sig::Matrix &amp;yarpMatrix3_3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>KDLtoYarp_position</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afac7fadb95c46837dba5f45818e6c046</anchor>
      <arglist>(const KDL::Frame &amp;kdlFrame, yarp::sig::Matrix &amp;yarpMatrix4_4)</arglist>
    </member>
    <member kind="function">
      <type>yarp::sig::Matrix</type>
      <name>KDLtoYarp_position</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4647e682da232004313ccdf8d026aba8</anchor>
      <arglist>(const KDL::Frame &amp;kdlFrame)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>closestPoints</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8f589431d782b952cad5bee527a906c1</anchor>
      <arglist>(const KDL::Vector direction_line_A, const KDL::Vector origin_line_A, const KDL::Vector direction_line_B, const KDL::Vector origin_line_B, KDL::Vector &amp;closest_point_line_A, KDL::Vector &amp;closest_point_line_B, double tol=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>calculateDH</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a354ef3252cf5ad3643326f068ec24bbd</anchor>
      <arglist>(const KDL::Vector direction_axis_z_n_minus_1, const KDL::Vector direction_axis_x_n_minus_1, const KDL::Vector origin_n_minus_1, const KDL::Vector direction_axis_z_n, const KDL::Vector origin_axis_z_n, const KDL::Vector direction_axis_x_n_hint, KDL::Vector &amp;dh_origin_n, KDL::Vector &amp;dh_direction_axis_x_n, KDL::Vector &amp;dh_direction_axis_y_n, double &amp;a_i, double &amp;d_i, double &amp;alpha_i, double &amp;theta_i, double tol=1e-6, int verbose=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromSymoroParFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab6e4378efceb4d3079c7f5daec0acc73</anchor>
      <arglist>(const std::string &amp;parfile_name, KDL::Tree &amp;tree, const bool consider_root_link_inertia=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromSymoroParString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac82eb3ab871fe91e2576b158f42a15f2</anchor>
      <arglist>(const std::string &amp;parfile_content, KDL::Tree &amp;tree, const bool consider_root_link_inertia=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromParModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab3607e43c7523caf4e53f4d938301a19</anchor>
      <arglist>(const symoro_par_model &amp;par_model, KDL::Tree &amp;tree, const bool consider_root_link_inertia=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parModelFromFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a285a017ef87c04227b316ce00b1a21e8</anchor>
      <arglist>(const std::string &amp;parfile_name, symoro_par_model &amp;tree)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parModelFromString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af8f01d1a26262f76d7d2407ecb8c9e03</anchor>
      <arglist>(const std::string &amp;parfile_content, symoro_par_model &amp;tree)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeSerializationFromSymoroParFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afa0ec11c7dfc259e7e4419c8e6009ebd</anchor>
      <arglist>(const std::string &amp;parfile_name, KDL::CoDyCo::TreeSerialization &amp;serialization, const bool consider_root_link_inertia=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeSerializationFromSymoroParString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac0743bb21665a50ffd985811076ae365</anchor>
      <arglist>(const std::string &amp;parfile_content, KDL::CoDyCo::TreeSerialization &amp;serialization, const bool consider_root_link_inertia=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeSerializationFromParModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8cf49555ebc69948cd1fc59d4cf28ec5</anchor>
      <arglist>(const symoro_par_model &amp;par_model, KDL::CoDyCo::TreeSerialization &amp;serialization, const bool consider_root_link_inertia=true)</arglist>
    </member>
    <member kind="function">
      <type>Frame</type>
      <name>DH_Khalil1986_Tree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab264a4aa3e052ec0e998180b69c85965</anchor>
      <arglist>(double d, double alpha, double r, double theta, double gamma, double b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromSymoroParString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>adc877992b48856f01ae41ef88f515c9d</anchor>
      <arglist>(const string &amp;parfile_name, Tree &amp;tree, const bool consider_first_link_inertia)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromSymoroParFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8f512cf338817bc72172f2820350df52</anchor>
      <arglist>(const string &amp;parfile_name, Tree &amp;tree, const bool consider_first_link_inertia)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parModelFromFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8700e7653e87bc7ae7d57196bc4c7c5d</anchor>
      <arglist>(const string &amp;parfile_name, symoro_par_model &amp;tree)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae952da664bfd3e3abf0ba072553010bb</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;substr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>begins_with</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4d25bc580533037f2df5541b573f2498</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;keyword)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>explode</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6fb3d5093d915891f72e78642210166b</anchor>
      <arglist>(const string &amp;str, const char &amp;ch)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>str2double</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad34419ca02c19781b7937ce389b86773</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extract_vector</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a18f6094e5cbb52bc93aa4ff10f7ee9e3</anchor>
      <arglist>(const std::string &amp;vector_string, std::string vector_name, std::vector&lt; T &gt; &amp;vec, const std::vector&lt; string &gt; variables=std::vector&lt; string &gt;(0), const std::vector&lt; T &gt; var_values=std::vector&lt; T &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parModelFromString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1f21c18a1e1e24a21a3945fd534af3d5</anchor>
      <arglist>(const string &amp;_parfile_content, symoro_par_model &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromParModelTree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad42fec66d231b744fdade0069beab0fe</anchor>
      <arglist>(const symoro_par_model &amp;par_model, Tree &amp;tree, const bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromParModelChain</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aff5d28f28e5ac9252748a24e0d726b92</anchor>
      <arglist>(const symoro_par_model &amp;par_model, Tree &amp;tree, const bool consider_first_link_inertia)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromParModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a52cb7e9bcae6df721decc1bfbfbe75fb</anchor>
      <arglist>(const symoro_par_model &amp;par_model, Tree &amp;tree, const bool consider_first_link_inertia)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeSerializationFromSymoroParFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5683c139a253d842ca5c2ed0d3f21cad</anchor>
      <arglist>(const string &amp;parfile_name, KDL::CoDyCo::TreeSerialization &amp;serialization, const bool consider_first_link_inertia)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeSerializationFromSymoroParString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8ea54da4b67ece512906a44826142665</anchor>
      <arglist>(const string &amp;parfile_name, KDL::CoDyCo::TreeSerialization &amp;serialization, const bool consider_first_link_inertia)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>int2string_serialization</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a536c93940661d8577c7f4f70f7781fac</anchor>
      <arglist>(const int in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeSerializationFromParModelTree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a05494646e74071eed0bb47226c02012f</anchor>
      <arglist>(const symoro_par_model &amp;par_model, KDL::CoDyCo::TreeSerialization &amp;serialization, const bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeSerializationFromParModelChain</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae67bba4fba4a5afdc58232b1015474e1</anchor>
      <arglist>(const symoro_par_model &amp;, KDL::CoDyCo::TreeSerialization &amp;, const bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sensorsFromURDF</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa85d9d4a30c51e79e6a17425adb2e7e7</anchor>
      <arglist>(const std::string &amp;urdf_filename, iDynTree::SensorsList &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sensorsFromURDF</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>acb2dbb7fef76aaf2f8fab0c4da47b770</anchor>
      <arglist>(const std::string &amp;urdf_filename, const Model &amp;model, iDynTree::SensorsList &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sensorsFromURDFString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ade804ea70676b56046e78520c586b3d8</anchor>
      <arglist>(const std::string &amp;urdf_string, iDynTree::SensorsList &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sensorsFromURDFString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a865cbf3dc23685a682743b2ff7b3783c</anchor>
      <arglist>(const std::string &amp;urdf_string, const Model &amp;model, iDynTree::SensorsList &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>modelFromURDF</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>ga7fc5d09c1c301c6d1d92ad4dc4a775df</anchor>
      <arglist>(const std::string &amp;urdf_filename, iDynTree::Model &amp;output, const URDFParserOptions options=URDFParserOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>modelFromURDFString</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>ga9d12c5fcc7f3787c38d00e5cbf867712</anchor>
      <arglist>(const std::string &amp;urdf_string, iDynTree::Model &amp;output, const URDFParserOptions options=URDFParserOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solidShapesFromURDF</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa17d1ee4cc812584367891a9f35b42f1</anchor>
      <arglist>(const std::string &amp;urdf_filename, const Model &amp;model, const std::string urdfGeometryType, ModelSolidShapes &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solidShapesFromURDFString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aded8915c704ed8e44a4dc35d2f1a3004</anchor>
      <arglist>(const std::string &amp;urdf_string, const std::string &amp;urdf_filename, const Model &amp;model, const std::string urdfGeometryType, iDynTree::ModelSolidShapes &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dofsListFromURDF</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>ga80941e03b0209a745a76fadc3264879a</anchor>
      <arglist>(const std::string &amp;urdf_filename, std::vector&lt; std::string &gt; &amp;dofs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dofsListFromURDFString</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>ga657c7f9a0eedd9b8f71a54e6a83acdc0</anchor>
      <arglist>(const std::string &amp;urdf_string, std::vector&lt; std::string &gt; &amp;dofs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>URDFFromModel</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>gaeaa7b0320760138dab8d2e7ba5525b2a</anchor>
      <arglist>(const iDynTree::Model &amp;model, const std::string &amp;urdf_filename, const ModelExporterOptions options=ModelExporterOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>URDFStringFromModel</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>gab9223d51ca118bea013bbbde14d6e054</anchor>
      <arglist>(const iDynTree::Model &amp;output, std::string &amp;urdf_string, const ModelExporterOptions options=ModelExporterOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stringToDoubleWithClassicLocale</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a91b6a382b3717636fb3a45a8ba4f8850</anchor>
      <arglist>(const std::string &amp;inStr, double &amp;outDouble)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stringToIntWithClassicLocale</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9c8ea4244ff5dc2276f8008b53a609e8</anchor>
      <arglist>(const std::string &amp;inStr, int &amp;outInt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stringToUnsignedIntWithClassicLocale</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab5e3c195abc73e35657df0f831daab96</anchor>
      <arglist>(const std::string &amp;inStr, unsigned int &amp;outInt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doubleToStringWithClassicLocale</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a072b6eff9a6c9173d96ebef185343d90</anchor>
      <arglist>(const double &amp;inDouble, std::string &amp;outStr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>splitString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab77f7c41e63dbfbfc327283490b7cb92</anchor>
      <arglist>(const std::string &amp;inStr, std::vector&lt; std::string &gt; &amp;pieces)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vector3FromString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8645d0238ce891d16d8d7be074bd33dc</anchor>
      <arglist>(const std::string &amp;vector_str, Vector3 &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vectorToString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5872c10e6e9f23dbeeb87ad4b503a5ba</anchor>
      <arglist>(const iDynTreeVectorType &amp;in, std::string &amp;out_str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vector4FromString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab55f4fdf60c8947b61adde47e0495b10</anchor>
      <arglist>(const std::string &amp;vector_str, Vector4 &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>ModelParserOptions</type>
      <name>convertOptions</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a928d97967994efe92aadc4e6aa9de081</anchor>
      <arglist>(const URDFParserOptions options)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unordered_set&lt; std::string &gt;</type>
      <name>processJoints</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2c09a9788e3ae139fe8b46be9b321d4f</anchor>
      <arglist>(iDynTree::Model &amp;model, std::unordered_map&lt; std::string, JointElement::JointInfo &gt; &amp;joints, std::unordered_map&lt; std::string, JointElement::JointInfo &gt; &amp;fixed_joints)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>p_removeFakeLinks</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a09294fd9e341ccdb394bdd16ede55529</anchor>
      <arglist>(const iDynTree::Model &amp;originalModel, iDynTree::Model &amp;cleanModel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>processSensors</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2a587be0faa386fc30d9ba0b769ec191</anchor>
      <arglist>(const Model &amp;model, const std::vector&lt; std::shared_ptr&lt; SensorHelper &gt;&gt; &amp;helpers, iDynTree::SensorsList &amp;sensors)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>addSensorFramesAsAdditionalFramesToModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a84d81c45a0bae6fd29e809d0ea9633a7</anchor>
      <arglist>(Model &amp;model, const SensorsList &amp;sensors)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>addVisualPropertiesToModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab5c5e11284a4fbf7b3407aca23dfda5f</anchor>
      <arglist>(const Model &amp;model, const std::unordered_map&lt; std::string, std::vector&lt; VisualElement::VisualInfo &gt;&gt; &amp;visuals, const std::unordered_map&lt; std::string, MaterialElement::MaterialInfo &gt; &amp;materialDatabase, ModelSolidShapes &amp;modelGeometries)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportTransform</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a619f553f72f43cbfe099a20c98773d0b</anchor>
      <arglist>(const Transform &amp;trans, xmlNodePtr parent_element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportInertial</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aada083d29e26cc8e6abc2497bba88caf</anchor>
      <arglist>(const SpatialInertia &amp;inertia, xmlNodePtr parent_element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportSolidShape</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4aaa1bf7c96f642d210e14e4b49a5323</anchor>
      <arglist>(const SolidShape *solidShape, exportSolidShapePropertyType type, xmlNodePtr parent_element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportLink</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae9f8c50a2c8f7d249e4105a1de0ef0c7</anchor>
      <arglist>(const Link &amp;link, const std::string linkName, const Model &amp;model, xmlNodePtr parent_element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportJoint</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af20c6cc917e371b07cc3f39e281aabd1</anchor>
      <arglist>(IJointConstPtr joint, LinkConstPtr parentLink, LinkConstPtr childLink, const Model &amp;model, xmlNodePtr parent_element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportAdditionalFrame</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1cabf2a944e4db9907e6ef84de5149c9</anchor>
      <arglist>(const std::string frame_name, Transform link_H_frame, const std::string link_name, exportAdditionalFrameDirectionOption direction_option, xmlNodePtr parent_element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeToUrdfFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae47e9a903f5c531ab4a411698ea8c55d</anchor>
      <arglist>(const std::string &amp;file, const KDL::Tree &amp;tree, const std::string &amp;robot_name=&quot;URDF_generated_by_kdl_format_io&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeToUrdfXml</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a65a0f3207d49e20e6030ca70c8ce4723</anchor>
      <arglist>(TiXmlDocument *&amp;xml_doc, const KDL::Tree &amp;tree, const std::string &amp;robot_name=&quot;URDF_generated_by_kdl_format_io&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeUpdateUrdfModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af521b4003ac71bec5d54afa90cbe2405</anchor>
      <arglist>(const KDL::Tree &amp;tree, urdf::ModelInterface &amp;robot_model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeToUrdfModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a30f27a0a427f07508859ff0d7cd288b0</anchor>
      <arglist>(const KDL::Tree &amp;tree, const std::string &amp;robot_name, urdf::ModelInterface &amp;robot_model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromUrdfFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad98edb9f3983e0c609abd9bc2252332e</anchor>
      <arglist>(const std::string &amp;file, KDL::Tree &amp;tree, const bool consider_root_link_inertia=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromUrdfString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae2bdc4832c23e1e85947a0950e851d0d</anchor>
      <arglist>(const std::string &amp;xml, KDL::Tree &amp;tree, const bool consider_root_link_inertia=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromUrdfModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac9f105aa07b694a765018673598acc63</anchor>
      <arglist>(const urdf::ModelInterface &amp;robot_model, KDL::Tree &amp;tree, const bool consider_root_link_inertia=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jointPosLimitsFromUrdfFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a240f2c85141d72c6ac7f26c1fb36a1fe</anchor>
      <arglist>(const std::string &amp;file, std::vector&lt; std::string &gt; &amp;joint_names, KDL::JntArray &amp;min, KDL::JntArray &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jointPosLimitsFromUrdfString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab4751f8996b5ca8a747f9ae7b3c93a26</anchor>
      <arglist>(const std::string &amp;urdf_xml, std::vector&lt; std::string &gt; &amp;joint_names, KDL::JntArray &amp;min, KDL::JntArray &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jointPosLimitsFromUrdfModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af3e655ecfbbeb6a75d90a2e23b7eba40</anchor>
      <arglist>(const urdf::ModelInterface &amp;robot_model, std::vector&lt; std::string &gt; &amp;joint_names, KDL::JntArray &amp;min, KDL::JntArray &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>framesFromKDLTree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a05479a17eabc0067dab3791eb2a62075</anchor>
      <arglist>(const KDL::Tree &amp;tree, std::vector&lt; std::string &gt; &amp;framesNames, std::vector&lt; std::string &gt; &amp;parentLinkNames)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt; &amp;</type>
      <name>split</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afed6fbc83782a3ea34ad8110fb1aabf2</anchor>
      <arglist>(const std::string &amp;s, std::vector&lt; std::string &gt; &amp;elems)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ftSensorsFromUrdfFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0e64d8a715e88916260db8d755f91d51</anchor>
      <arglist>(const std::string &amp;file, std::vector&lt; FTSensorData &gt; &amp;ft_sensors)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ftSensorsFromUrdfString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a88f9cea6b3b31cf45815289edaed9e7b</anchor>
      <arglist>(const std::string &amp;urdf_xml, std::vector&lt; FTSensorData &gt; &amp;ft_sensors)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SensorsList</type>
      <name>sensorsListFromURDF</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac9e229371a2934f43dd05cbdd629d9b9</anchor>
      <arglist>(KDL::CoDyCo::UndirectedTree &amp;undirected_tree, std::string urdf_filename)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SensorsList</type>
      <name>sensorsListFromURDFString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab17dedc14b12d782f74b8ae7cab214a8</anchor>
      <arglist>(KDL::CoDyCo::UndirectedTree &amp;undirected_tree, std::string urdf_string)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SensorsList</type>
      <name>sensorsListFromFtSensors</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>abc1cdc3263af9599b777dece127e5146</anchor>
      <arglist>(KDL::CoDyCo::UndirectedTree &amp;undirected_tree, std::vector&lt; FTSensorData &gt; &amp;ft_sensors)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sensorsListFromURDF</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2886164ec0bdd0526a5bbdd1c9b1dacc</anchor>
      <arglist>(const std::string &amp;urdf_filename, iDynTree::SensorsList &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sensorsListFromURDFString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2ea31b45d800a22df2da51ee8042abac</anchor>
      <arglist>(const std::string &amp;urdf_string, iDynTree::SensorsList &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>urdf::Vector3</type>
      <name>toUrdf</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a7ec379a7959e3755fb8f8a93dd706e01</anchor>
      <arglist>(const KDL::Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>urdf::Rotation</type>
      <name>toUrdf</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a994b38f734104e55cf9dde5aaadedcbc</anchor>
      <arglist>(const KDL::Rotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>urdf::Pose</type>
      <name>toUrdf</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad9d6b652d1d1a1343015f4f84b32c743</anchor>
      <arglist>(const KDL::Frame &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>KDL::Frame</type>
      <name>getH_new_old</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a074ecb17f0d31adfe03b9cf4f947b70b</anchor>
      <arglist>(KDL::Joint jnt, KDL::Frame frameToTip)</arglist>
    </member>
    <member kind="function">
      <type>KDL::Frame</type>
      <name>getH_new_old</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a00b2585fdcff87ccd9ea009e7c6b2701</anchor>
      <arglist>(KDL::Segment seg)</arglist>
    </member>
    <member kind="function">
      <type>urdf::Joint</type>
      <name>toUrdf</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a16d6f8052f577335ccff42b6caca5b9f</anchor>
      <arglist>(const KDL::Joint &amp;jnt, const KDL::Frame &amp;frameToTip, const KDL::Frame &amp;H_new_old_predecessor, KDL::Frame &amp;H_new_old_successor)</arglist>
    </member>
    <member kind="function">
      <type>urdf::Inertial</type>
      <name>toUrdf</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9250b6946c8b5a1fea6eed488bb4f1a7</anchor>
      <arglist>(KDL::RigidBodyInertia i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>affcd3c50112ee6c1e3d537dbf460db2a</anchor>
      <arglist>(urdf::ConstLinkPtr link, int level=0)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>toKdl</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3216d0f5eaed76f8420433c0795bd866</anchor>
      <arglist>(urdf::Vector3 v)</arglist>
    </member>
    <member kind="function">
      <type>Rotation</type>
      <name>toKdl</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a1f1b06dbdd48e88c855c84887ff7ddee</anchor>
      <arglist>(urdf::Rotation r)</arglist>
    </member>
    <member kind="function">
      <type>Frame</type>
      <name>toKdl</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a943c5a726b5f719094e52f0be2b61505</anchor>
      <arglist>(urdf::Pose p)</arglist>
    </member>
    <member kind="function">
      <type>Joint</type>
      <name>toKdl</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ab1031343eb07359d212e1fb8096a0462</anchor>
      <arglist>(urdf::JointPtr jnt)</arglist>
    </member>
    <member kind="function">
      <type>RigidBodyInertia</type>
      <name>toKdl</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af498d7a27f39843ef235774db7546f09</anchor>
      <arglist>(urdf::InertialPtr i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addChildrenToTree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ad1c9657dc92daf84f981d2633acead8a</anchor>
      <arglist>(urdf::LinkPtr root, Tree &amp;tree)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromUrdfFile</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a763558fb4319f611a9990f37e96cd55c</anchor>
      <arglist>(const std::string &amp;file, Tree &amp;tree, const bool consider_root_link_inertia)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>print_tree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a495fc89e4907a2e3852aeb6fa933ced1</anchor>
      <arglist>(urdf::ModelInterfacePtr &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromUrdfString</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>adbe0347e4c38811ddb6fd5cadf930aca</anchor>
      <arglist>(const std::string &amp;xml, Tree &amp;tree, const bool consider_root_link_inertia)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeFromUrdfModel</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afaa730de68ab1934321873284b10a285</anchor>
      <arglist>(const urdf::ModelInterface &amp;robot_model, Tree &amp;tree, const bool consider_root_link_inertia)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>localStringToDoubleWithClassicLocale</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8d15d0dd6abe2a6d89bbb5dd22993a20</anchor>
      <arglist>(const std::string &amp;inStr, double &amp;outDouble)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::SensorsList</type>
      <name>sensorsListFromFtSensors</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>acdeac2940dc6002aeb4d06a6f64ff249</anchor>
      <arglist>(KDL::CoDyCo::UndirectedTree &amp;undirected_tree, std::vector&lt; iDynTree::FTSensorData &gt; &amp;ft_sensors)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createReducedModelAndSensors</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>af8355a73b30d3b5797fddae1f80ac778</anchor>
      <arglist>(const Model &amp;fullModel, const SensorsList &amp;fullSensors, const std::vector&lt; std::string &gt; &amp;jointsInReducedModel, Model &amp;reducedModel, SensorsList &amp;reducedSensors)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predictSensorsMeasurements</name>
      <anchorfile>group__iDynTreeSensors.html</anchorfile>
      <anchor>gacf87de6a0acc7c79369e4ea587ef19bc</anchor>
      <arglist>(const Model &amp;model, const SensorsList &amp;sensorList, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const FreeFloatingAcc &amp;robotAcc, const LinAcceleration &amp;gravity, const LinkNetExternalWrenches &amp;externalWrenches, FreeFloatingAcc &amp;buf_properRobotAcc, LinkPositions &amp;buf_linkPos, LinkVelArray &amp;buf_linkVel, LinkAccArray &amp;buf_linkProperAcc, LinkInternalWrenches &amp;buf_internalWrenches, FreeFloatingGeneralizedTorques &amp;buf_outputTorques, SensorsMeasurements &amp;predictedMeasurement)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predictSensorsMeasurementsFromRawBuffers</name>
      <anchorfile>group__iDynTreeSensors.html</anchorfile>
      <anchor>gaa68c8cac6b85223f729cd8855627d35e</anchor>
      <arglist>(const Model &amp;model, const SensorsList &amp;sensorList, const Traversal &amp;traversal, const LinkVelArray &amp;buf_linkVel, const LinkAccArray &amp;buf_linkProperAcc, const LinkInternalWrenches &amp;buf_internalWrenches, SensorsMeasurements &amp;predictedMeasurement)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinkSensor</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a784ae0ef50c758f0cf07ab414f432963</anchor>
      <arglist>(const SensorType type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isJointSensor</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6edabe0d73bb9102d0ad456124c0f195</anchor>
      <arglist>(const SensorType type)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSensorTypeSize</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a932bf21b3d77f8c2260c5d562812840d</anchor>
      <arglist>(const SensorType type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>estimateInertialParametersFromLinkBoundingBoxesAndTotalMass</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4ed7d9dcd80664b1b86236a0f1086cda</anchor>
      <arglist>(const double totalMass, iDynTree::Model &amp;model, VectorDynSize &amp;estimatedInertialParams)</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia</type>
      <name>boxGet6DInertiaInLinkFrameFromDensity</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae1721e736c017a040878679afdd8558f</anchor>
      <arglist>(const Box &amp;box, double density)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>boxGetVolume</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4166c081425b5445cf4974edb52ad68c</anchor>
      <arglist>(const Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>irr::video::SColorf</type>
      <name>idyntree2irrlicht</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac8129c15673f95b55d4402d11525130e</anchor>
      <arglist>(iDynTree::ColorViz color)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::ColorViz</type>
      <name>irrlicht2idyntree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a59fd2dec92ea659b06c35cc0774e3e27</anchor>
      <arglist>(irr::video::SColorf color)</arglist>
    </member>
    <member kind="function">
      <type>irr::core::vector3df</type>
      <name>idyntree2irr_rpy</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a618c592e51197a8e43af8fb204e05be4</anchor>
      <arglist>(const iDynTree::Vector3 &amp;vecId)</arglist>
    </member>
    <member kind="function">
      <type>irr::core::vector3df</type>
      <name>idyntree2irr_pos</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a701793f35b102249138fd871ac97a1dd</anchor>
      <arglist>(const iDynTree::Vector3 &amp;vecId)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Position</type>
      <name>irr2idyntree_pos</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a248faa2d7da144ef0f5d12070f87a636</anchor>
      <arglist>(const irr::core::vector3df &amp;vecIrr)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Vector3</type>
      <name>irr2idyntree_rpy</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a38fec3a530fff72845acd46d89255ccc</anchor>
      <arglist>(const irr::core::vector3df &amp;vecIrr)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Rotation</type>
      <name>irr2idyntree_rot</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0107858ed0b53d9e3f6c4298f1590b52</anchor>
      <arglist>(const irr::core::vector3df &amp;rotIrr)</arglist>
    </member>
    <member kind="function">
      <type>const irr::core::vector3df</type>
      <name>idyntree2irr_rot</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a489f51d87e38580783c8db40b522c1a3</anchor>
      <arglist>(const iDynTree::Rotation &amp;rot)</arglist>
    </member>
    <member kind="function">
      <type>irr::video::SMaterial</type>
      <name>idyntree2irr</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a74e7d98bc8b8aab27a63a0dfc637f50d</anchor>
      <arglist>(const iDynTree::Vector4 &amp;rgbaMaterialId)</arglist>
    </member>
    <member kind="function">
      <type>irr::video::SMaterial</type>
      <name>idyntree2irr</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a646a555c094aa892b19861ee3b967685</anchor>
      <arglist>(const iDynTree::ColorViz &amp;rgbaMaterial)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Transform</type>
      <name>irr2idyntree_trans</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a88e1a9336a45448f8407a5b9193e3b12</anchor>
      <arglist>(const irr::core::matrix4 &amp;transIrr)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Rotation</type>
      <name>RotationWithPrescribedZColumn</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8f07b5aa9b946682973ce91c0dff9c4c</anchor>
      <arglist>(const iDynTree::Direction zAxis)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getFileExt</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a7676f271a9b7c442709bcbf204ede699</anchor>
      <arglist>(const std::string filename)</arglist>
    </member>
    <member kind="function">
      <type>irr::scene::ISceneNode *</type>
      <name>addGeometryToSceneManager</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a28b9c6390d04a7fa594c36e0a1e71a22</anchor>
      <arglist>(const iDynTree::SolidShape *geom, irr::scene::ISceneNode *linkNode, irr::scene::ISceneManager *smgr)</arglist>
    </member>
    <member kind="function">
      <type>irr::scene::ISceneNode *</type>
      <name>addFrameAxes</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa1df9eb0ffad26d2ca32e91429e53610</anchor>
      <arglist>(irr::scene::ISceneManager *smgr, irr::scene::ISceneNode *parentNode=0, irr::f32 arrowLenght=1.0)</arglist>
    </member>
    <member kind="function">
      <type>irr::scene::ISceneNode *</type>
      <name>addFloorGridNode</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a352bdecf919e2b54c75b262ccdc5773e</anchor>
      <arglist>(irr::scene::ISceneManager *smgr, irr::scene::ISceneNode *parentNode=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorldHNode</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0671daf3474b049ff0f3ba1c9aa21866</anchor>
      <arglist>(irr::scene::ISceneNode *node, const iDynTree::Transform &amp;trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVizEnviroment</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6c85009c61c4213711b0892502aedb68</anchor>
      <arglist>(irr::scene::ISceneManager *smgr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVizLights</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a2673c2cc83efc112c0e182ea8b2038f3</anchor>
      <arglist>(irr::scene::ISceneManager *smgr)</arglist>
    </member>
    <member kind="function">
      <type>irr::scene::ICameraSceneNode *</type>
      <name>addVizCamera</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5df1e1a5f2c8d865e0b8db230c440cf7</anchor>
      <arglist>(irr::scene::ISceneManager *smgr)</arglist>
    </member>
    <member kind="function">
      <type>irr::scene::IMesh *</type>
      <name>createFrustumMesh</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa404e05b5167037b56fdfa6e7b5b31de</anchor>
      <arglist>(irr::f32 topRadius, irr::f32 bottomRadius, irr::f32 height, irr::u32 tesselation=8)</arglist>
    </member>
    <member kind="function">
      <type>irr::video::E_LIGHT_TYPE</type>
      <name>idyntree2irrlicht</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>abc6c4beb8b57842b52f7f92c5e01cdc7</anchor>
      <arglist>(iDynTree::LightType type)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::LightType</type>
      <name>irrlicht2idyntree</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a3408a1d8758c66b1bf634ce0cf62d6f3</anchor>
      <arglist>(irr::video::E_LIGHT_TYPE type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseRotationMatrix</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a51e39202a162fa642eed01df66c75878</anchor>
      <arglist>(const yarp::os::Searchable &amp;rf, const std::string &amp;key, iDynTree::Rotation &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga5043dfa20b4ffc99d8dbdae5b15c0dae</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::Wrench &amp;iDynTreeWrench)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gaa28c5100610c33e81bafbdad8cd65f74</anchor>
      <arglist>(const iDynTree::Wrench &amp;iDynTreeWrench, yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gaf7ed1a24bb847b7742685eb9f59bb92b</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::Position &amp;iDynTreePosition)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gafcb81129ef0d16f5f1eb1cc6e1df4252</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::Vector3 &amp;iDynTreeVector3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga9020f2412b884fd0ef63e726c1342947</anchor>
      <arglist>(const iDynTree::Position &amp;iDynTreePosition, yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gaea2d5b8825259e8fa15c166cb843ee40</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::Direction &amp;iDynTreeDirection)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga6b716f09fcb568a6b3eea04b44160f19</anchor>
      <arglist>(const iDynTree::Vector3 &amp;iDynTreeDirection, yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gaa01de51e3acfd87599aa688e4c3d32c0</anchor>
      <arglist>(const yarp::sig::Matrix &amp;yarpHomogeneousMatrix, iDynTree::Transform &amp;iDynTreeTransform)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga0c1a2189345fb926b98f2d82219d5dd1</anchor>
      <arglist>(const iDynTree::Transform &amp;iDynTreeTransform, yarp::sig::Matrix &amp;yarpHomogeneousMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga8c4d32377000e6629f2855a6d5aebf72</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::VectorDynSize &amp;iDynTreeVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga3e0ac29c597c34c171d29fb18127ab3b</anchor>
      <arglist>(const VectorType &amp;iDynTreeVector, yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga63598edaacfc53e5728e944a0dab5ebb</anchor>
      <arglist>(const MatrixType &amp;iDynTreeMatrix, yarp::sig::Matrix &amp;yarpMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga056a45c2887a5f314c963c89bb16a270</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, VectorType &amp;iDynTreeVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gae1c1d7e3baf33d9b84f593330a3cf199</anchor>
      <arglist>(const yarp::sig::Matrix &amp;yarpMatrix, MatrixType &amp;iDynTreeMatrix)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::VectorXd &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae7c28c545c2775b437536fd84dabc97d</anchor>
      <arglist>(yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a19f060a1b963d4cdd58a142372675f6b</anchor>
      <arglist>(yarp::sig::Matrix &amp;yarpMatrix)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::VectorXd &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0fc1ec0d7de0f823d4a8c32524aaecd7</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor &gt; &gt;</type>
      <name>toEigen</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4f400cf54f7b7757adbaa768205b9df9</anchor>
      <arglist>(const yarp::sig::Matrix &amp;yarpMatrix)</arglist>
    </member>
    <member kind="variable">
      <type>IDYNTREE_CONSTEXPR const std::ptrdiff_t</type>
      <name>dynamic_extent</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a10c045523612bc8183a496020fecf982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>UNKNOWN</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a79d980eee07cb2f08368804f713ba6f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>DEFAULT_TOL</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aaed0bfb02e0a77c063b675cd958f68ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>IDYNTREE_PI</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8adc7f92fba141695b493600a4d818d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>IDYNTREE_RAD2DEG</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a9db3748f7ccfae71c77cb76ca4fd5e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>IDYNTREE_DEG2RAD</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a5ec1a49c7429787cc0abdeea1e70ffe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>output_dimensions_with_magnetometer</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a0dd93cfe8edb7763d1f57d6454c1c25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>output_dimensions_without_magnetometer</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a8772fb8ad891bd276db791f2e815de11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>input_dimensions</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ae4a3a4ece8b00835bf57f387795ba015</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>WORLD_INDEX</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa5e5cf2af24da4d09eea789c28946aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>DEFAULT_DYNAMICS_COMPUTATION_FRAME_INDEX</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aa7d5301e5200aa6f370be0ebb7ca9b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>DEFAULT_DYNAMICS_COMPUTATION_FRAME_NAME</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>afac0e1524e046cda0a6c9294cc5ad564</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinkIndex</type>
      <name>LINK_INVALID_INDEX</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a480d1fbdaa5caf7d649749a615d141ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>LINK_INVALID_NAME</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a351b1388cdb1dcd3c9228c01c094498a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>JOINT_INVALID_INDEX</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>aaddeca7778ad9917a17604f6e472c550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>JOINT_INVALID_NAME</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a4d17bbcf1aae11c931c246308f39d9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>DOF_INVALID_INDEX</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a6aaa8d1ee888776e9e3ca3e8144dbfb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>DOF_INVALID_NAME</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a084170431132bf37dfb70d449634695a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FRAME_INVALID_INDEX</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a82c0279ac04b031c66dda7bf1fa94114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>FRAME_INVALID_NAME</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>ac8bbe5d2dc785f47b7c03010cde0b462</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TraversalIndex</type>
      <name>TRAVERSAL_INVALID_INDEX</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a25b5d0039100c2a296a16972d6abcdcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>NR_OF_SENSOR_TYPES</name>
      <anchorfile>namespaceiDynTree.html</anchorfile>
      <anchor>a27f6da1749325b5fabe94ceb7278f0df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>iDynTree::details</name>
    <filename>namespaceiDynTree_1_1details.html</filename>
    <class kind="struct">iDynTree::details::calculate_byte_size</class>
    <class kind="struct">iDynTree::details::calculate_byte_size&lt; ElementType, dynamic_extent &gt;</class>
    <class kind="struct">iDynTree::details::calculate_subspan_type</class>
    <class kind="class">iDynTree::details::extent_type</class>
    <class kind="class">iDynTree::details::extent_type&lt; dynamic_extent &gt;</class>
    <class kind="struct">iDynTree::details::is_allowed_element_type_conversion</class>
    <class kind="struct">iDynTree::details::is_allowed_extent_conversion</class>
    <class kind="struct">iDynTree::details::is_span</class>
    <class kind="struct">iDynTree::details::is_span_oracle</class>
    <class kind="struct">iDynTree::details::is_span_oracle&lt; iDynTree::Span&lt; ElementType, Extent &gt; &gt;</class>
    <class kind="struct">iDynTree::details::is_std_array</class>
    <class kind="struct">iDynTree::details::is_std_array_oracle</class>
    <class kind="struct">iDynTree::details::is_std_array_oracle&lt; std::array&lt; ElementType, Extent &gt; &gt;</class>
    <class kind="class">iDynTree::details::span_iterator</class>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR span_iterator&lt; Span, IsConst &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceiDynTree_1_1details.html</anchorfile>
      <anchor>adf168de4de79fc034114dd1bb64d9cca</anchor>
      <arglist>(typename span_iterator&lt; Span, IsConst &gt;::difference_type n, span_iterator&lt; Span, IsConst &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>IDYNTREE_CONSTEXPR span_iterator&lt; Span, IsConst &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceiDynTree_1_1details.html</anchorfile>
      <anchor>a55d28afb3a3294ddb652f947185eba19</anchor>
      <arglist>(typename span_iterator&lt; Span, IsConst &gt;::difference_type n, span_iterator&lt; Span, IsConst &gt; rhs)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>iDynTree::optimalcontrol</name>
    <filename>namespaceiDynTree_1_1optimalcontrol.html</filename>
    <namespace>iDynTree::optimalcontrol::integrators</namespace>
    <class kind="struct">iDynTree::optimalcontrol::BufferedGroup</class>
    <class kind="class">iDynTree::optimalcontrol::Constraint</class>
    <class kind="class">iDynTree::optimalcontrol::ConstraintsGroup</class>
    <class kind="class">iDynTree::optimalcontrol::ControlledDynamicalSystem</class>
    <class kind="class">iDynTree::optimalcontrol::Controller</class>
    <class kind="class">iDynTree::optimalcontrol::Cost</class>
    <class kind="class">iDynTree::optimalcontrol::CostAttributes</class>
    <class kind="class">iDynTree::optimalcontrol::DerivedDynamicalSystem</class>
    <class kind="class">iDynTree::optimalcontrol::DynamicalSystem</class>
    <class kind="class">iDynTree::optimalcontrol::HessianBlocksMap</class>
    <class kind="class">iDynTree::optimalcontrol::IndexSelector</class>
    <class kind="class">iDynTree::optimalcontrol::L2NormCost</class>
    <class kind="class">iDynTree::optimalcontrol::LinearConstraint</class>
    <class kind="class">iDynTree::optimalcontrol::LinearCost</class>
    <class kind="class">iDynTree::optimalcontrol::LinearMPC</class>
    <class kind="class">iDynTree::optimalcontrol::LinearSystem</class>
    <class kind="class">iDynTree::optimalcontrol::MatrixSelector</class>
    <class kind="struct">iDynTree::optimalcontrol::MeshPoint</class>
    <class kind="class">iDynTree::optimalcontrol::MeshPointOrigin</class>
    <class kind="class">iDynTree::optimalcontrol::MPC</class>
    <class kind="class">iDynTree::optimalcontrol::MultiBodySystem</class>
    <class kind="class">iDynTree::optimalcontrol::MultipleShootingSolver</class>
    <class kind="struct">iDynTree::optimalcontrol::NonZero</class>
    <class kind="class">iDynTree::optimalcontrol::OptimalControlProblem</class>
    <class kind="class">iDynTree::optimalcontrol::OptimalControlSolver</class>
    <class kind="class">iDynTree::optimalcontrol::QuadraticCost</class>
    <class kind="class">iDynTree::optimalcontrol::QuadraticLikeCost</class>
    <class kind="class">iDynTree::optimalcontrol::Selector</class>
    <class kind="class">iDynTree::optimalcontrol::SparsityStructure</class>
    <class kind="class">iDynTree::optimalcontrol::SystemLineariser</class>
    <class kind="struct">iDynTree::optimalcontrol::TimedConstraint</class>
    <class kind="struct">iDynTree::optimalcontrol::TimedCost</class>
    <class kind="class">iDynTree::optimalcontrol::TimeInvariantObject</class>
    <class kind="class">iDynTree::optimalcontrol::TimeRange</class>
    <class kind="class">iDynTree::optimalcontrol::TimeVaryingObject</class>
    <member kind="typedef">
      <type>TimeVaryingObject&lt; VectorDynSize &gt;</type>
      <name>TimeVaryingVector</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a0a42487f78941fdc98f3a329dc620926</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeVaryingObject&lt; MatrixDynSize &gt;</type>
      <name>TimeVaryingMatrix</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a5aea3cc692810bc6e1be00cb4a545f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeVaryingObject&lt; double &gt;</type>
      <name>TimeVaryingDouble</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>aca822c5e004f5783e8701849c3ae6475</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeVaryingObject&lt; Transform &gt;</type>
      <name>TimeVaryingTransform</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a7fd874777a60870ea07d3353c7dba8ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeVaryingObject&lt; Rotation &gt;</type>
      <name>TimeVaryingRotation</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>ad88b6bd7b0b87dde8db826d5361a1612</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeVaryingObject&lt; Position &gt;</type>
      <name>TimeVaryingPosition</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a7a9dc96e57041de2c1ce2d7b11a2e8f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeInvariantObject&lt; double &gt;</type>
      <name>TimeInvariantDouble</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a12323181a553470ad11b2a7853cdd25a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeInvariantObject&lt; VectorDynSize &gt;</type>
      <name>TimeInvariantVector</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>af42385f609150bd66b3ad68a4bd29722</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeInvariantObject&lt; MatrixDynSize &gt;</type>
      <name>TimeInvariantMatrix</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a61df4a467909edce7f12456c47539f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeInvariantObject&lt; Transform &gt;</type>
      <name>TimeInvariantTransform</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>aa49b07229644a80b5a960072f076def9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeInvariantObject&lt; Rotation &gt;</type>
      <name>TimeInvariantRotation</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a434327935f65cbdfc7ed0c1b3999d0b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeInvariantObject&lt; Position &gt;</type>
      <name>TimeInvariantPosition</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>abc9508a4f067c4b7e8412e75ac0b388a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TimedConstraint &gt;</type>
      <name>TimedConstraint_ptr</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a8ad8b503a7552e8ac21a784d73faccf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; std::string, TimedConstraint_ptr &gt;</type>
      <name>GroupOfConstraintsMap</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>ad4d2fc41098be5d797eceddefcaf124e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BufferedGroup &gt;</type>
      <name>BufferedGroup_ptr</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a742359e4347fb6b7808b0855ace2ac52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, BufferedGroup_ptr &gt;</type>
      <name>ConstraintsGroupsMap</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a3f0f6cc65b51721f06f153ebd5b35b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, TimedCost &gt;</type>
      <name>CostsMap</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a927f68149950d8f86810fe2b6472d955</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MeshPointType</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol.html</anchorfile>
      <anchor>a65d86b0558993b768c8644089001aa6a</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceiDynTree_1_1optimalcontrol.html" anchor="a65d86b0558993b768c8644089001aa6aaa1595abbb4c3a326636dd178757cd6c1">Control</enumvalue>
      <enumvalue file="namespaceiDynTree_1_1optimalcontrol.html" anchor="a65d86b0558993b768c8644089001aa6aa46a2a41cc6e552044816a2d04634545d">State</enumvalue>
    </member>
  </compound>
  <compound kind="namespace">
    <name>iDynTree::optimalcontrol::integrators</name>
    <filename>namespaceiDynTree_1_1optimalcontrol_1_1integrators.html</filename>
    <class kind="class">iDynTree::optimalcontrol::integrators::CollocationHessianIndex</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::FixedStepIntegrator</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::ForwardEuler</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::ImplicitTrapezoidal</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::Integrator</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::IntegratorInfo</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::IntegratorInfoData</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::RK4</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::SolutionElement</class>
    <member kind="typedef">
      <type>std::map&lt; CollocationHessianIndex, MatrixDynSize &gt;</type>
      <name>CollocationHessianMap</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol_1_1integrators.html</anchorfile>
      <anchor>aa5c8ad68150707a78233d30d14b183b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; CollocationHessianIndex, SparsityStructure &gt;</type>
      <name>CollocationHessianSparsityMap</name>
      <anchorfile>namespaceiDynTree_1_1optimalcontrol_1_1integrators.html</anchorfile>
      <anchor>a7a03df16db0b979f0c465865aaf2c5c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>iDynTree::optimization</name>
    <filename>namespaceiDynTree_1_1optimization.html</filename>
    <class kind="class">iDynTree::optimization::AlglibInterface</class>
    <class kind="struct">iDynTree::optimization::ConstraintInfo</class>
    <class kind="class">iDynTree::optimization::DenseIterator</class>
    <class kind="class">iDynTree::optimization::IpoptInterface</class>
    <class kind="class">iDynTree::optimization::NLPImplementation</class>
    <class kind="class">iDynTree::optimization::OptimizationProblem</class>
    <class kind="class">iDynTree::optimization::OptimizationProblemInfo</class>
    <class kind="class">iDynTree::optimization::OptimizationProblemInfoData</class>
    <class kind="class">iDynTree::optimization::Optimizer</class>
    <class kind="class">iDynTree::optimization::OsqpInterface</class>
    <class kind="struct">iDynTree::optimization::OsqpSettings</class>
    <class kind="struct">iDynTree::optimization::SharedData</class>
    <class kind="class">iDynTree::optimization::Triplet</class>
    <class kind="class">iDynTree::optimization::TripletIterator</class>
    <class kind="class">iDynTree::optimization::WorhpInterface</class>
    <member kind="function">
      <type>void</type>
      <name>ALGLIB_NLP</name>
      <anchorfile>namespaceiDynTree_1_1optimization.html</anchorfile>
      <anchor>af75a0e413077094a9d78079760c3fa80</anchor>
      <arglist>(const alglib::real_1d_array &amp;x, alglib::real_1d_array &amp;fi, alglib::real_2d_array &amp;jac, void *ptr)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>iDynTree::Regressors</name>
    <filename>namespaceiDynTree_1_1Regressors.html</filename>
    <class kind="class">iDynTree::Regressors::DynamicsRegressorGenerator</class>
    <class kind="struct">iDynTree::Regressors::DynamicsRegressorParameter</class>
    <class kind="class">iDynTree::Regressors::DynamicsRegressorParametersList</class>
    <member kind="typedef">
      <type>std::vector&lt; DynamicsRegressorParameter &gt;</type>
      <name>ParamSet</name>
      <anchorfile>namespaceiDynTree_1_1Regressors.html</anchorfile>
      <anchor>a01b692967e1d0549bb00d3af35d5a9e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DynamicsRegressorParameterCategory</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gac32c11c76eeeddfd740defae8ada57fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_PARAM</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>ggac32c11c76eeeddfd740defae8ada57faa0ca940b1018b06855ee8b7ee1ed01110</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_PARAM</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>ggac32c11c76eeeddfd740defae8ada57faa70c7dbf0023919c95474096be8108b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DynamicsRegressorParameterType</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>ga4379a1e522cdc1710418f34a7d2039d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MASS</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ae6c122d58ec19a0b747715e2f08b0da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a124320cf8dad79bf17f84460bb373b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aca9006f7841c98a14b8992dccb483beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a6544ee2b0dddeefed6129e4bb7f7843c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XX</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a2865635c397d93612a3a02c6286a4acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XY</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aee70055d6803b05734b1058aaa5e0518</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ac1248c4e713d654a29c517ef13ab6688</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_YY</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a767ecd31c273e295808300e7d2b58ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_YZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aa36c2206ddeaaf120cb1504cbd96994d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_ZZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a1c014d1c2c57f867987e2ef39941eb71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aac053abb911956001a8fec85b6cd48d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ab85ae2452087f98ec0ce6e94e7be325e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6abb6606690b6ed35eb637df92b35c0fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aed5a3fad28fb01c4f8d5d4775ded9bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a6f6d9de1c3a8319bcb725c735977ebd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a2b65a0fcf4fc98f86522c6926921c903</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDynamicsRegressorGeneratorDeprecation</name>
      <anchorfile>namespaceiDynTree_1_1Regressors.html</anchorfile>
      <anchor>a2312e842c475b0406db644f4e1a3c1f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DynamicsRegressorParameterCategory</type>
      <name>getCategory</name>
      <anchorfile>namespaceiDynTree_1_1Regressors.html</anchorfile>
      <anchor>a61d5c54b0419ec31b28bffd6911284e8</anchor>
      <arglist>(const DynamicsRegressorParameterType paramType)</arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>dummyElemName</name>
      <anchorfile>namespaceiDynTree_1_1Regressors.html</anchorfile>
      <anchor>a8102c82323250edad5f52dd4329c4919</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MASS</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ae6c122d58ec19a0b747715e2f08b0da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a124320cf8dad79bf17f84460bb373b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aca9006f7841c98a14b8992dccb483beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a6544ee2b0dddeefed6129e4bb7f7843c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XX</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a2865635c397d93612a3a02c6286a4acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XY</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aee70055d6803b05734b1058aaa5e0518</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ac1248c4e713d654a29c517ef13ab6688</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_YY</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a767ecd31c273e295808300e7d2b58ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_YZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aa36c2206ddeaaf120cb1504cbd96994d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_ZZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a1c014d1c2c57f867987e2ef39941eb71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aac053abb911956001a8fec85b6cd48d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ab85ae2452087f98ec0ce6e94e7be325e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6abb6606690b6ed35eb637df92b35c0fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aed5a3fad28fb01c4f8d5d4775ded9bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a6f6d9de1c3a8319bcb725c735977ebd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a2b65a0fcf4fc98f86522c6926921c903</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>internal</name>
    <filename>namespaceinternal.html</filename>
    <namespace>internal::kinematics</namespace>
  </compound>
  <compound kind="namespace">
    <name>internal::kinematics</name>
    <filename>namespaceinternal_1_1kinematics.html</filename>
    <class kind="class">internal::kinematics::InverseKinematicsData</class>
    <class kind="class">internal::kinematics::InverseKinematicsNLP</class>
    <class kind="struct">internal::kinematics::is_matrixfixsize</class>
    <class kind="struct">internal::kinematics::is_matrixfixsize&lt; iDynTree::MatrixFixSize&lt; row, col &gt; &gt;</class>
    <class kind="class">internal::kinematics::SparsityHelper</class>
    <class kind="class">internal::kinematics::TransformConstraint</class>
    <member kind="typedef">
      <type>std::map&lt; int, internal::kinematics::TransformConstraint &gt;</type>
      <name>TransformMap</name>
      <anchorfile>namespaceinternal_1_1kinematics.html</anchorfile>
      <anchor>a644811f328012fcdfb6b45ab0492ef18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>KDL</name>
    <filename>namespaceKDL.html</filename>
    <namespace>KDL::CoDyCo</namespace>
  </compound>
  <compound kind="namespace">
    <name>KDL::CoDyCo</name>
    <filename>namespaceKDL_1_1CoDyCo.html</filename>
    <namespace>KDL::CoDyCo::Regressors</namespace>
  </compound>
  <compound kind="namespace">
    <name>KDL::CoDyCo::Regressors</name>
    <filename>namespaceKDL_1_1CoDyCo_1_1Regressors.html</filename>
    <class kind="class">KDL::CoDyCo::Regressors::baseDynamicsRegressor</class>
    <class kind="class">KDL::CoDyCo::Regressors::DynamicDatasetFile</class>
    <class kind="class">KDL::CoDyCo::Regressors::DynamicDatasetFileCollection</class>
    <class kind="class">KDL::CoDyCo::Regressors::DynamicRegressorGenerator</class>
    <class kind="class">KDL::CoDyCo::Regressors::DynamicRegressorInterface</class>
    <class kind="class">KDL::CoDyCo::Regressors::DynamicSample</class>
    <class kind="class">KDL::CoDyCo::Regressors::DynamicSensorSample</class>
    <class kind="class">KDL::CoDyCo::Regressors::DynamicStateSample</class>
    <class kind="class">KDL::CoDyCo::Regressors::IBatchDynamicDataset</class>
    <class kind="class">KDL::CoDyCo::Regressors::IOnlineDynamicDataset</class>
    <class kind="class">KDL::CoDyCo::Regressors::subtreeBaseDynamicsRegressor</class>
    <class kind="class">KDL::CoDyCo::Regressors::torqueRegressor</class>
    <member kind="function">
      <type>double</type>
      <name>sparsity_index</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>ac5559b301f89592f71ffc24bedfea12f</anchor>
      <arglist>(const Eigen::MatrixXd &amp;mat, const double tol)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>zeroToZero</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a56093bf6cb44e093ec289bb683482911</anchor>
      <arglist>(const Eigen::MatrixXd &amp;input_mat, double tol=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRowSpaceBasis</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>afc23610f489e81920f501c930c1c5737</anchor>
      <arglist>(const Eigen::MatrixXd &amp;input_matrix, Eigen::MatrixXd &amp;row_space_basis_matrix, double tol=-1.0, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRowSpaceBasis</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>aef31cdd8640ecaf581109a013c644d5f</anchor>
      <arglist>(const Eigen::MatrixXd &amp;input_matrix, Eigen::MatrixXd &amp;row_space_basis_matrix, double tol, bool verbose, Eigen::VectorXd &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSubSpaceIntersection</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a0c4608ec4c5377fe3fbd35c8363e5921</anchor>
      <arglist>(const Eigen::MatrixXd &amp;first_subspace, const Eigen::MatrixXd &amp;second_subspace, Eigen::MatrixXd &amp;result, double tol=-1.0, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getKernelSpaceBasis</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a8110e01d88825090bb58517829fdf7d1</anchor>
      <arglist>(const Eigen::MatrixXd &amp;input_matrix, Eigen::MatrixXd &amp;row_space_basis_matrix, double tol=-1.0, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstFTSensorOnLink</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a852e0edff40ee7a30e8f66c81cf449f5</anchor>
      <arglist>(const iDynTree::SensorsList &amp;sensors_tree, const int link_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNrOfFTSensorsOnLink</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a2ef391d530dc2c49cb6f8d1d5577ab41</anchor>
      <arglist>(const iDynTree::SensorsList &amp;sensors_tree, const int link_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFTIndexFromJunctionIndex</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a987e7d204a0e5d6875f447d703a91734</anchor>
      <arglist>(const iDynTree::SensorsList &amp;sensors_tree, const int junction_id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>simulateMeasurement_sixAxisFTSensor</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>af3cb661f0281207cb49f61dec5fc5d2a</anchor>
      <arglist>(KDL::CoDyCo::Traversal &amp;dynamic_traversal, std::vector&lt; KDL::Wrench &gt; f, iDynTree::SixAxisForceTorqueSensor *sixAxisForceTorqueSensor, iDynTree::Wrench &amp;simulated_measurement)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Regressors::DynamicsRegressorParameterType</type>
      <name>getLinkParameterType</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>aee389d634cc832beab5dde418a6baa48</anchor>
      <arglist>(unsigned int nr)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Regressors::DynamicsRegressorParameterType</type>
      <name>getFTParameterType</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a73f0073060b7c59aca80a2c8854e6052</anchor>
      <arglist>(unsigned int nr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInertialParameterLocalIndex</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a42fb53ee1768cb438b56eab2920f0f6a</anchor>
      <arglist>(const iDynTree::Regressors::DynamicsRegressorParameterType &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>iDynTree::Regressors::DynamicsRegressorParametersList</type>
      <name>getLegacyUsedParameters</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a656844bbbdd8e257d52aaac061fb3568</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;linkIndices2regrCols, const int nrOfFTSensors=-1, const bool withFToffsetParameters=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertLocalRegressorToGlobalRegressor</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a136ad137a963221e253cfada6a0c8808</anchor>
      <arglist>(const Eigen::MatrixXd &amp;localRegressor, Eigen::MatrixXd &amp;globalRegressor, std::vector&lt; int &gt; localColIndicesToGlobalColIndices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertLocalParametersToGlobalParameters</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a08d976a322ee30371110c6097fd7727c</anchor>
      <arglist>(const Eigen::VectorXd &amp;localRegressor, Eigen::VectorXd &amp;globalRegressor, std::vector&lt; int &gt; localColIndicesToGlobalColIndices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildParametersMapping</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>abf7a8e3c298324caa12665755a45c0c8</anchor>
      <arglist>(const iDynTree::Regressors::DynamicsRegressorParametersList &amp;localSerialiaziation, const iDynTree::Regressors::DynamicsRegressorParametersList &amp;globalSerialiaziation, std::vector&lt; int &gt; &amp;localParametersIndexToOutputParametersIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calculateEssentialParametersSubspace</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>ad6902d3c87f8d80073f5f9f3f8ea6416</anchor>
      <arglist>(DynamicRegressorGenerator &amp;regressor, const IBatchDynamicDataset &amp;dataset, Eigen::MatrixXd &amp;essential_parameter_basis, const double tol=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calculateEssentialParametersSubspace</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>ae845dc5937089f25832134b5d4baee1e</anchor>
      <arglist>(DynamicRegressorGenerator &amp;regressor, const IBatchDynamicDataset &amp;dataset, Eigen::MatrixXd &amp;essential_parameter_basis, Eigen::VectorXd &amp;sigma, const double tol=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_next_double</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>ab7998661057dbb40e26e0bf756a7c330</anchor>
      <arglist>(std::stringstream &amp;ss, std::string &amp;data_buffer)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>random_double</name>
      <anchorfile>namespaceKDL_1_1CoDyCo_1_1Regressors.html</anchorfile>
      <anchor>a60e080d65a6bd281fd2f93822f9a7a30</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>QtCharts</name>
    <filename>namespaceQtCharts.html</filename>
  </compound>
  <compound kind="namespace">
    <name>urdf</name>
    <filename>namespaceurdf.html</filename>
    <member kind="typedef">
      <type>JointSharedPtr</type>
      <name>JointPtr</name>
      <anchorfile>namespaceurdf.html</anchorfile>
      <anchor>a8fa6d566387cebcf96581bbb4b74afbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinkSharedPtr</type>
      <name>LinkPtr</name>
      <anchorfile>namespaceurdf.html</anchorfile>
      <anchor>a2ea166dbcbf75b5b0dba00687f1f1138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinkConstSharedPtr</type>
      <name>ConstLinkPtr</name>
      <anchorfile>namespaceurdf.html</anchorfile>
      <anchor>a91ccb605a457c373c650c95ca0c585d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InertialSharedPtr</type>
      <name>InertialPtr</name>
      <anchorfile>namespaceurdf.html</anchorfile>
      <anchor>a4a7b7a5fd2749edef3b1af6a926c9cd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; LinkPtr &gt;</type>
      <name>LinkVector</name>
      <anchorfile>namespaceurdf.html</anchorfile>
      <anchor>affdeee14a8bd9a7588fbe2d04dee05d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ModelInterfaceSharedPtr</type>
      <name>ModelInterfacePtr</name>
      <anchorfile>namespaceurdf.html</anchorfile>
      <anchor>aad8b2ef244a2a5e53d69418f7d4967c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, JointPtr &gt;</type>
      <name>JointPtrMap</name>
      <anchorfile>namespaceurdf.html</anchorfile>
      <anchor>ad0d37a73a209f779a084da3e9b19303e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetPtr</name>
      <anchorfile>namespaceurdf.html</anchorfile>
      <anchor>a4223fb8861247aabe3d1448901708e79</anchor>
      <arglist>(PtrType &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetPtr</name>
      <anchorfile>namespaceurdf.html</anchorfile>
      <anchor>ade13e96007f510636d2d86e50b64c401</anchor>
      <arglist>(PtrType &amp;ptr, PlainType *plain_ptr)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>iDynTreeCore</name>
    <title>%iDynTree core data structures</title>
    <filename>group__iDynTreeCore.html</filename>
    <class kind="class">iDynTree::AngularForceVector3</class>
    <class kind="class">iDynTree::AngularMotionVector3</class>
    <class kind="class">iDynTree::ArticulatedBodyInertia</class>
    <class kind="class">iDynTree::Axis</class>
    <class kind="class">iDynTree::ClassicalAcc</class>
    <class kind="class">iDynTree::Direction</class>
    <class kind="class">iDynTree::ForceVector3</class>
    <class kind="class">iDynTree::GeomVector3</class>
    <class kind="class">iDynTree::LinearForceVector3</class>
    <class kind="class">iDynTree::LinearMotionVector3</class>
    <class kind="class">iDynTree::MatrixDynSize</class>
    <class kind="class">iDynTree::MatrixFixSize</class>
    <class kind="class">iDynTree::MotionVector3</class>
    <class kind="class">iDynTree::Position</class>
    <class kind="class">iDynTree::PositionRaw</class>
    <class kind="class">iDynTree::PositionSemantics</class>
    <class kind="class">iDynTree::Rotation</class>
    <class kind="class">iDynTree::RotationalInertiaRaw</class>
    <class kind="class">iDynTree::RotationRaw</class>
    <class kind="class">iDynTree::RotationSemantics</class>
    <class kind="class">iDynTree::SpatialAcc</class>
    <class kind="class">iDynTree::SpatialForceVector</class>
    <class kind="class">iDynTree::SpatialInertia</class>
    <class kind="class">iDynTree::SpatialInertiaRaw</class>
    <class kind="class">iDynTree::SpatialMomentum</class>
    <class kind="class">iDynTree::SpatialMotionVector</class>
    <class kind="class">iDynTree::Transform</class>
    <class kind="class">iDynTree::TransformDerivative</class>
    <class kind="class">iDynTree::TransformSemantics</class>
    <class kind="class">iDynTree::Twist</class>
    <class kind="class">iDynTree::VectorDynSize</class>
    <class kind="class">iDynTree::VectorFixSize</class>
    <class kind="class">iDynTree::Wrench</class>
    <member kind="define">
      <type>#define</type>
      <name>SPATIALVECTOR_TEMPLATE_HDR</name>
      <anchorfile>group__iDynTreeCore.html</anchorfile>
      <anchor>ga92610f375c318c6d08be7c5fb29c7222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>iDynTreeModel</name>
    <title>%iDynTree model data structures</title>
    <filename>group__iDynTreeModel.html</filename>
    <class kind="class">iDynTree::FixedJoint</class>
    <class kind="class">iDynTree::IJoint</class>
    <class kind="class">iDynTree::Link</class>
    <class kind="class">iDynTree::Model</class>
    <class kind="class">iDynTree::MovableJointImpl</class>
    <class kind="class">iDynTree::PrismaticJoint</class>
    <class kind="class">iDynTree::RevoluteJoint</class>
    <class kind="class">iDynTree::Traversal</class>
    <member kind="function">
      <type>bool</type>
      <name>ComputeLinearAndAngularMomentum</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga1f433a6725585332945762ed4e6b5fe5</anchor>
      <arglist>(const Model &amp;model, const LinkPositions &amp;linkPositions, const LinkVelArray &amp;linkVels, SpatialMomentum &amp;totalMomentum)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RNEADynamicPhase</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga18613d41830aef7430e7a8a09fef98e1</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::Traversal &amp;traversal, const iDynTree::JointPosDoubleArray &amp;jointPos, const iDynTree::LinkVelArray &amp;linksVel, const iDynTree::LinkAccArray &amp;linksProperAcc, const iDynTree::LinkNetExternalWrenches &amp;linkExtForces, iDynTree::LinkInternalWrenches &amp;linkIntWrenches, iDynTree::FreeFloatingGeneralizedTorques &amp;baseForceAndJointTorques)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ArticulatedBodyAlgorithm</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga5879141982887fc0d049cc3645f10dd5</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const LinkNetExternalWrenches &amp;linkExtWrenches, const JointDOFsDoubleArray &amp;jointTorques, ArticulatedBodyAlgorithmInternalBuffers &amp;buffers, FreeFloatingAcc &amp;robotAcc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InverseDynamicsInertialParametersRegressor</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga0c75db73b7682b9c524b0727b516b12b</anchor>
      <arglist>(const iDynTree::Model &amp;model, const iDynTree::Traversal &amp;traversal, const iDynTree::LinkPositions &amp;referenceFrame_H_link, const iDynTree::LinkVelArray &amp;linksVel, const iDynTree::LinkAccArray &amp;linksAcc, iDynTree::MatrixDynSize &amp;baseForceAndJointTorquesRegressor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ForwardPositionKinematics</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga41ad76666d447a42318ab5778b3ad18e</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const Transform &amp;worldHbase, const VectorDynSize &amp;jointPositions, LinkPositions &amp;linkPositions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FreeFloatingJacobianUsingLinkPos</name>
      <anchorfile>group__iDynTreeModel.html</anchorfile>
      <anchor>ga7a189f499fb9bfe4126326a34ce6fc59</anchor>
      <arglist>(const Model &amp;model, const Traversal &amp;traversal, const JointPosDoubleArray &amp;jointPositions, const LinkPositions &amp;linkPositions, const LinkIndex linkIndex, const Transform &amp;jacobFrame_X_world, const Transform &amp;baseFrame_X_jacobBaseFrame, MatrixDynSize &amp;jacobian)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>iDynTreeSensors</name>
    <title>%iDynTree sensors data structures</title>
    <filename>group__iDynTreeSensors.html</filename>
    <class kind="class">iDynTree::AccelerometerSensor</class>
    <class kind="class">iDynTree::GyroscopeSensor</class>
    <class kind="class">iDynTree::Sensor</class>
    <class kind="class">iDynTree::JointSensor</class>
    <class kind="class">iDynTree::LinkSensor</class>
    <class kind="class">iDynTree::SensorsList</class>
    <class kind="class">iDynTree::SensorsMeasurements</class>
    <class kind="class">iDynTree::SixAxisForceTorqueSensor</class>
    <class kind="class">iDynTree::ThreeAxisAngularAccelerometerSensor</class>
    <class kind="class">iDynTree::ThreeAxisForceTorqueContactSensor</class>
    <member kind="function">
      <type>bool</type>
      <name>predictSensorsMeasurements</name>
      <anchorfile>group__iDynTreeSensors.html</anchorfile>
      <anchor>gacf87de6a0acc7c79369e4ea587ef19bc</anchor>
      <arglist>(const Model &amp;model, const SensorsList &amp;sensorList, const Traversal &amp;traversal, const FreeFloatingPos &amp;robotPos, const FreeFloatingVel &amp;robotVel, const FreeFloatingAcc &amp;robotAcc, const LinAcceleration &amp;gravity, const LinkNetExternalWrenches &amp;externalWrenches, FreeFloatingAcc &amp;buf_properRobotAcc, LinkPositions &amp;buf_linkPos, LinkVelArray &amp;buf_linkVel, LinkAccArray &amp;buf_linkProperAcc, LinkInternalWrenches &amp;buf_internalWrenches, FreeFloatingGeneralizedTorques &amp;buf_outputTorques, SensorsMeasurements &amp;predictedMeasurement)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predictSensorsMeasurementsFromRawBuffers</name>
      <anchorfile>group__iDynTreeSensors.html</anchorfile>
      <anchor>gaa68c8cac6b85223f729cd8855627d35e</anchor>
      <arglist>(const Model &amp;model, const SensorsList &amp;sensorList, const Traversal &amp;traversal, const LinkVelArray &amp;buf_linkVel, const LinkAccArray &amp;buf_linkProperAcc, const LinkInternalWrenches &amp;buf_internalWrenches, SensorsMeasurements &amp;predictedMeasurement)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>iDynTreeModelIO</name>
    <title>%iDynTree model data structures</title>
    <filename>group__iDynTreeModelIO.html</filename>
    <class kind="struct">iDynTree::URDFParserOptions</class>
    <class kind="class">iDynTree::ModelCalibrationHelper</class>
    <class kind="class">iDynTree::ModelExporterOptions</class>
    <class kind="class">iDynTree::ModelExporter</class>
    <class kind="struct">iDynTree::ModelParserOptions</class>
    <class kind="class">iDynTree::ModelLoader</class>
    <member kind="function">
      <type>bool</type>
      <name>iKinLimbFromKDLChain</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>gab8ca4dff754c4c5d72e235f5e7396b86</anchor>
      <arglist>(const KDL::Chain &amp;tree, iCub::iKin::iKinLimb &amp;iKin_limb, const KDL::JntArray &amp;min, const KDL::JntArray &amp;max, int verbose=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>modelFromURDF</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>ga7fc5d09c1c301c6d1d92ad4dc4a775df</anchor>
      <arglist>(const std::string &amp;urdf_filename, iDynTree::Model &amp;output, const URDFParserOptions options=URDFParserOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>modelFromURDFString</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>ga9d12c5fcc7f3787c38d00e5cbf867712</anchor>
      <arglist>(const std::string &amp;urdf_string, iDynTree::Model &amp;output, const URDFParserOptions options=URDFParserOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dofsListFromURDF</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>ga80941e03b0209a745a76fadc3264879a</anchor>
      <arglist>(const std::string &amp;urdf_filename, std::vector&lt; std::string &gt; &amp;dofs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dofsListFromURDFString</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>ga657c7f9a0eedd9b8f71a54e6a83acdc0</anchor>
      <arglist>(const std::string &amp;urdf_string, std::vector&lt; std::string &gt; &amp;dofs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>URDFFromModel</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>gaeaa7b0320760138dab8d2e7ba5525b2a</anchor>
      <arglist>(const iDynTree::Model &amp;model, const std::string &amp;urdf_filename, const ModelExporterOptions options=ModelExporterOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>URDFStringFromModel</name>
      <anchorfile>group__iDynTreeModelIO.html</anchorfile>
      <anchor>gab9223d51ca118bea013bbbde14d6e054</anchor>
      <arglist>(const iDynTree::Model &amp;output, std::string &amp;urdf_string, const ModelExporterOptions options=ModelExporterOptions())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>iDynTreeEstimation</name>
    <title>Algorithms related to whole-body estimation.</title>
    <filename>group__iDynTreeEstimation.html</filename>
    <class kind="class">iDynTree::SimpleLeggedOdometry</class>
  </compound>
  <compound kind="group">
    <name>iDynTreeRegressors</name>
    <title>Algorithms related to whole-body dynamics identification.</title>
    <filename>group__iDynTreeRegressors.html</filename>
    <class kind="class">iDynTree::Regressors::DynamicsRegressorGenerator</class>
    <class kind="struct">iDynTree::Regressors::DynamicsRegressorParameter</class>
    <class kind="class">iDynTree::Regressors::DynamicsRegressorParametersList</class>
    <member kind="enumeration">
      <type></type>
      <name>DynamicsRegressorParameterCategory</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gac32c11c76eeeddfd740defae8ada57fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_PARAM</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>ggac32c11c76eeeddfd740defae8ada57faa0ca940b1018b06855ee8b7ee1ed01110</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_PARAM</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>ggac32c11c76eeeddfd740defae8ada57faa70c7dbf0023919c95474096be8108b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DynamicsRegressorParameterType</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>ga4379a1e522cdc1710418f34a7d2039d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MASS</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ae6c122d58ec19a0b747715e2f08b0da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a124320cf8dad79bf17f84460bb373b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aca9006f7841c98a14b8992dccb483beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a6544ee2b0dddeefed6129e4bb7f7843c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XX</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a2865635c397d93612a3a02c6286a4acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XY</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aee70055d6803b05734b1058aaa5e0518</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ac1248c4e713d654a29c517ef13ab6688</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_YY</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a767ecd31c273e295808300e7d2b58ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_YZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aa36c2206ddeaaf120cb1504cbd96994d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_ZZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a1c014d1c2c57f867987e2ef39941eb71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aac053abb911956001a8fec85b6cd48d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ab85ae2452087f98ec0ce6e94e7be325e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6abb6606690b6ed35eb637df92b35c0fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aed5a3fad28fb01c4f8d5d4775ded9bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a6f6d9de1c3a8319bcb725c735977ebd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a2b65a0fcf4fc98f86522c6926921c903</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MASS</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ae6c122d58ec19a0b747715e2f08b0da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a124320cf8dad79bf17f84460bb373b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aca9006f7841c98a14b8992dccb483beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a6544ee2b0dddeefed6129e4bb7f7843c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XX</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a2865635c397d93612a3a02c6286a4acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XY</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aee70055d6803b05734b1058aaa5e0518</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ac1248c4e713d654a29c517ef13ab6688</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_YY</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a767ecd31c273e295808300e7d2b58ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_YZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aa36c2206ddeaaf120cb1504cbd96994d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_ZZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a1c014d1c2c57f867987e2ef39941eb71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a124320cf8dad79bf17f84460bb373b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aca9006f7841c98a14b8992dccb483beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_FIRST_MOMENT_OF_MASS_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a6544ee2b0dddeefed6129e4bb7f7843c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XX</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a2865635c397d93612a3a02c6286a4acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XY</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aee70055d6803b05734b1058aaa5e0518</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_XZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ac1248c4e713d654a29c517ef13ab6688</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_YY</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a767ecd31c273e295808300e7d2b58ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_YZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aa36c2206ddeaaf120cb1504cbd96994d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_MOMENT_OF_INERTIA_ZZ</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a1c014d1c2c57f867987e2ef39941eb71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aac053abb911956001a8fec85b6cd48d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ab85ae2452087f98ec0ce6e94e7be325e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6abb6606690b6ed35eb637df92b35c0fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aed5a3fad28fb01c4f8d5d4775ded9bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a6f6d9de1c3a8319bcb725c735977ebd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a2b65a0fcf4fc98f86522c6926921c903</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6ab85ae2452087f98ec0ce6e94e7be325e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_FORCE_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6abb6606690b6ed35eb637df92b35c0fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_X</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6aed5a3fad28fb01c4f8d5d4775ded9bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_Y</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a6f6d9de1c3a8319bcb725c735977ebd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SENSOR_FT_OFFSET_TORQUE_Z</name>
      <anchorfile>group__iDynTreeRegressors.html</anchorfile>
      <anchor>gga4379a1e522cdc1710418f34a7d2039d6a2b65a0fcf4fc98f86522c6926921c903</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>iDynTreeHighLevel</name>
    <title>High level interfaces to access algorithms contained in iDynTree.</title>
    <filename>group__iDynTreeHighLevel.html</filename>
    <class kind="class">iDynTree::KinDynComputations</class>
  </compound>
  <compound kind="group">
    <name>iDynTreeExperimental</name>
    <title>Experimental classes, for which the interface is currently under active development and is not stable.</title>
    <filename>group__iDynTreeExperimental.html</filename>
    <class kind="struct">iDynTree::BerdyOptions</class>
    <class kind="struct">iDynTree::BerdySensor</class>
    <class kind="class">iDynTree::BerdyHelper</class>
    <class kind="class">iDynTree::BerdySparseMAPSolver</class>
    <class kind="class">iDynTree::InverseKinematics</class>
    <class kind="class">iDynTree::optimalcontrol::Constraint</class>
    <class kind="class">iDynTree::optimalcontrol::ConstraintsGroup</class>
    <class kind="class">iDynTree::optimalcontrol::ControlledDynamicalSystem</class>
    <class kind="class">iDynTree::optimalcontrol::Controller</class>
    <class kind="class">iDynTree::optimalcontrol::Cost</class>
    <class kind="class">iDynTree::optimalcontrol::DynamicalSystem</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::SolutionElement</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::IntegratorInfo</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::Integrator</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::FixedStepIntegrator</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::ForwardEuler</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::ImplicitTrapezoidal</class>
    <class kind="class">iDynTree::optimalcontrol::integrators::RK4</class>
    <class kind="class">iDynTree::optimalcontrol::L2NormCost</class>
    <class kind="class">iDynTree::optimalcontrol::LinearConstraint</class>
    <class kind="class">iDynTree::optimalcontrol::LinearCost</class>
    <class kind="class">iDynTree::optimalcontrol::LinearMPC</class>
    <class kind="class">iDynTree::optimalcontrol::LinearSystem</class>
    <class kind="class">iDynTree::optimalcontrol::MPC</class>
    <class kind="class">iDynTree::optimalcontrol::MultiBodySystem</class>
    <class kind="class">iDynTree::optimalcontrol::MultipleShootingSolver</class>
    <class kind="class">iDynTree::optimalcontrol::OptimalControlProblem</class>
    <class kind="class">iDynTree::optimalcontrol::OptimalControlSolver</class>
    <class kind="class">iDynTree::optimization::OptimizationProblemInfoData</class>
    <class kind="class">iDynTree::optimization::Optimizer</class>
    <class kind="class">iDynTree::optimization::AlglibInterface</class>
    <class kind="class">iDynTree::optimization::IpoptInterface</class>
    <class kind="struct">iDynTree::optimization::OsqpSettings</class>
    <class kind="class">iDynTree::optimization::WorhpInterface</class>
    <class kind="class">iDynTree::optimalcontrol::QuadraticCost</class>
    <class kind="class">iDynTree::optimalcontrol::QuadraticLikeCost</class>
    <class kind="class">iDynTree::optimalcontrol::SystemLineariser</class>
    <class kind="class">iDynTree::optimalcontrol::TimeRange</class>
    <class kind="class">iDynTree::optimalcontrol::TimeVaryingObject</class>
    <class kind="class">iDynTree::optimalcontrol::TimeInvariantObject</class>
    <member kind="enumeration">
      <type></type>
      <name>BerdyVariants</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ga62aff3167b9df327b4b1db6affadd21f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ORIGINAL_BERDY_FIXED_BASE</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga62aff3167b9df327b4b1db6affadd21faf59c4a22cd72d6e001dbba40910e9c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BERDY_FLOATING_BASE</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga62aff3167b9df327b4b1db6affadd21fa1ca580068ec7f491800abeadf68185e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BerdyDynamicVariablesTypes</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ga83d8f828969dabc7dc82904d8de15312</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_BODY_PROPER_ACCELERATION</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312a48b4b26b9b1780cc55a5cbc89c6f0d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NET_INT_AND_EXT_WRENCHES_ON_LINK_WITHOUT_GRAV</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312a4d8110167e729b4fd3a17147bcd1252e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOINT_WRENCH</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312adaecc7fb3d43b48487ae03dfec685fb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOF_TORQUE</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312a80199996cf9e8b7d5171d762533f6c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NET_EXT_WRENCH</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312aa13efb04f5c05ca865f2aee0fd03fe68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOF_ACCELERATION</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312a9a69ec4d25d83b00175dc3adb8edce00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_BODY_PROPER_CLASSICAL_ACCELERATION</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gga83d8f828969dabc7dc82904d8de15312ac2cfd7190c466bb19a532054700478dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BerdySensorTypes</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>gab629c8d25391838124595ba8961654e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIX_AXIS_FORCE_TORQUE_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4aeb713f0bede28acb44bffd71c4c8b7c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCELEROMETER_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4a7735d104e1d0a81cd5cf6b4d4c6e280c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GYROSCOPE_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4a0057121dd88c26066f6ea316f78f7e97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREE_AXIS_ANGULAR_ACCELEROMETER_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4a959f2e93bc56ff32d8dc98a75bdaa0a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREE_AXIS_FORCE_TORQUE_CONTACT_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4a5bcadad8e7702de8f0dbcdbd5108d893</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOF_ACCELERATION_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4a3b05b1fa0daf40ead3bb45631fc1b425</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOF_TORQUE_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4afe52ea6ba4b27e76e1fd986700941151</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NET_EXT_WRENCH_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4aa295b9c16be05c81c215270381d2b648</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOINT_WRENCH_SENSOR</name>
      <anchorfile>group__iDynTreeExperimental.html</anchorfile>
      <anchor>ggab629c8d25391838124595ba8961654e4a207d61f7e8d81f6729f6dd080ba8a06c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>iDynTreeInverseKinematics</name>
    <title>Inverse kinematics algorithms.</title>
    <filename>group__iDynTreeInverseKinematics.html</filename>
  </compound>
  <compound kind="group">
    <name>iDynTreeYARP</name>
    <title>Functions and classes for simplifying integration of %iDynTree and YARP.</title>
    <filename>group__iDynTreeYARP.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga5043dfa20b4ffc99d8dbdae5b15c0dae</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::Wrench &amp;iDynTreeWrench)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gaa28c5100610c33e81bafbdad8cd65f74</anchor>
      <arglist>(const iDynTree::Wrench &amp;iDynTreeWrench, yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gaf7ed1a24bb847b7742685eb9f59bb92b</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::Position &amp;iDynTreePosition)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gafcb81129ef0d16f5f1eb1cc6e1df4252</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::Vector3 &amp;iDynTreeVector3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga9020f2412b884fd0ef63e726c1342947</anchor>
      <arglist>(const iDynTree::Position &amp;iDynTreePosition, yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gaea2d5b8825259e8fa15c166cb843ee40</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::Direction &amp;iDynTreeDirection)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga6b716f09fcb568a6b3eea04b44160f19</anchor>
      <arglist>(const iDynTree::Vector3 &amp;iDynTreeDirection, yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gaa01de51e3acfd87599aa688e4c3d32c0</anchor>
      <arglist>(const yarp::sig::Matrix &amp;yarpHomogeneousMatrix, iDynTree::Transform &amp;iDynTreeTransform)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga0c1a2189345fb926b98f2d82219d5dd1</anchor>
      <arglist>(const iDynTree::Transform &amp;iDynTreeTransform, yarp::sig::Matrix &amp;yarpHomogeneousMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga8c4d32377000e6629f2855a6d5aebf72</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, iDynTree::VectorDynSize &amp;iDynTreeVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga3e0ac29c597c34c171d29fb18127ab3b</anchor>
      <arglist>(const VectorType &amp;iDynTreeVector, yarp::sig::Vector &amp;yarpVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toYarp</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga63598edaacfc53e5728e944a0dab5ebb</anchor>
      <arglist>(const MatrixType &amp;iDynTreeMatrix, yarp::sig::Matrix &amp;yarpMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>ga056a45c2887a5f314c963c89bb16a270</anchor>
      <arglist>(const yarp::sig::Vector &amp;yarpVector, VectorType &amp;iDynTreeVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toiDynTree</name>
      <anchorfile>group__iDynTreeYARP.html</anchorfile>
      <anchor>gae1c1d7e3baf33d9b84f593330a3cf199</anchor>
      <arglist>(const yarp::sig::Matrix &amp;yarpMatrix, MatrixType &amp;iDynTreeMatrix)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>iDynTreeICUB</name>
    <title>Functions and classes for simplifying integration of %iDynTree and ICUB.</title>
    <filename>group__iDynTreeICUB.html</filename>
    <class kind="class">iDynTree::iKinLimbImported</class>
    <class kind="class">iDynTree::skinDynLibLinkID</class>
    <class kind="class">iDynTree::iDynTreeLinkAndFrame</class>
    <class kind="class">iDynTree::skinDynLibConversionsHelper</class>
    <member kind="function">
      <type>bool</type>
      <name>DHChainFromiKinChain</name>
      <anchorfile>group__iDynTreeICUB.html</anchorfile>
      <anchor>ga93e84fbc1880a920199aae0cbabd76ea</anchor>
      <arglist>(iCub::iKin::iKinChain &amp;ikinChain, DHChain &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>modelFromiKinChain</name>
      <anchorfile>group__iDynTreeICUB.html</anchorfile>
      <anchor>gadb9ad80c8043481f2bb8f013542db690</anchor>
      <arglist>(iCub::iKin::iKinChain &amp;ikinChain, Model &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iKinLimbFromModel</name>
      <anchorfile>group__iDynTreeICUB.html</anchorfile>
      <anchor>ga681d23161951646fcb60dc7681e59482</anchor>
      <arglist>(const Model &amp;model, const std::string &amp;baseFrame, const std::string &amp;distalFrame, iCub::iKin::iKinLimb &amp;ikinLimb)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iKinLimbFromDHChain</name>
      <anchorfile>group__iDynTreeICUB.html</anchorfile>
      <anchor>gaaedc638580c296a9a355975268ea25bb</anchor>
      <arglist>(const DHChain &amp;dhChain, iCub::iKin::iKinLimb &amp;ikinLimb)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>iDynTreeDeprecated</name>
    <title>Deprecated functions and classes</title>
    <filename>group__iDynTreeDeprecated.html</filename>
  </compound>
  <compound kind="page">
    <name>changelog</name>
    <title>iDynTree ChangeLog</title>
    <filename>changelog</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Welcome to %iDynTree</title>
    <filename>index</filename>
  </compound>
</tagfile>
