<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::RobotInterface::YarpSensorBridge</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge" prot="public" virt="non-virtual">BipedalLocomotion::RobotInterface::ISensorBridge</basecompoundref>
    <basecompoundref refid="classBipedalLocomotion_1_1System_1_1Advanceable" prot="public" virt="non-virtual">BipedalLocomotion::System::Advanceable&lt; SensorBridgeMetaData &gt;</basecompoundref>
    <includes local="no">BipedalLocomotion/RobotInterface/YarpSensorBridge.h</includes>
    <innerclass refid="structBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1_1Impl" prot="public">BipedalLocomotion::RobotInterface::YarpSensorBridge::Impl</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1aacdd7b5dabf1273290cf286dab96f26a" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1_1Impl" kindref="compound">Impl</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; BipedalLocomotion::RobotInterface::YarpSensorBridge::m_pimpl</definition>
        <argsstring></argsstring>
        <name>m_pimpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="365" column="21" bodyfile="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a0f0d17374245fa901c0d74b8f7f404f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::RobotInterface::YarpSensorBridge::YarpSensorBridge</definition>
        <argsstring>()</argsstring>
        <name>YarpSensorBridge</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="86" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ad140d8706d86b037715d283cae1eca0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::RobotInterface::YarpSensorBridge::~YarpSensorBridge</definition>
        <argsstring>()</argsstring>
        <name>~YarpSensorBridge</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="91" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ae6e281311cece893870a6f9fe74bd4a0" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::initialize</definition>
        <argsstring>(std::weak_ptr&lt; BipedalLocomotion::ParametersHandler::IParametersHandler &gt; handler) final</argsstring>
        <name>initialize</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a750adc5db6aafaee6d663d9007d8befc">initialize</reimplements>
        <param>
          <type>std::weak_ptr&lt; <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">BipedalLocomotion::ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize estimator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters handler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="97" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a7e67bd6969608baa82270d73aa218ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::setDriversList</definition>
        <argsstring>(const yarp::dev::PolyDriverList &amp;deviceDriversList)</argsstring>
        <name>setDriversList</name>
        <param>
          <type>const yarp::dev::PolyDriverList &amp;</type>
          <declname>deviceDriversList</declname>
        </param>
        <briefdescription>
<para>Set the list of device drivers from which the sensor measurements need to be streamed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deviceDriversList</parametername>
</parameternamelist>
<parameterdescription>
<para>device drivers holding the pointer to sensor interfaces </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True/False in case of success/failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="104" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1aad1e2cb1e5594bd5a7cddeec3f1b3054" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::advance</definition>
        <argsstring>() final</argsstring>
        <name>advance</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a766b2a1d75a733ec09016adf1cb75e10">advance</reimplements>
        <briefdescription>
<para>Advance the internal state. </para>
        </briefdescription>
        <detaileddescription>
<para>This may change the value retrievable from <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a256e49e7bd413b0cd6bcc9abe18d6fd9" kindref="member">get()</ref>. <simplesect kind="return"><para>True if the advance is successful. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="110" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a31ae8f3c258b66624929cf5ddaa50fcd" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::isValid</definition>
        <argsstring>() const final</argsstring>
        <name>isValid</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ae05561bcb6de140d2269b7ca490d711d">isValid</reimplements>
        <briefdescription>
<para>Determines the validity of the object retrieved with <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a256e49e7bd413b0cd6bcc9abe18d6fd9" kindref="member">get()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the object is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="116" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a224b8dd4accc99745d365c0c46cef771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; BipedalLocomotion::RobotInterface::YarpSensorBridge::getFailedSensorReads</definition>
        <argsstring>()</argsstring>
        <name>getFailedSensorReads</name>
        <briefdescription>
<para>list of sensors that was failed to be read in the current <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1aad1e2cb1e5594bd5a7cddeec3f1b3054" kindref="member">advance()</ref> step </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>list of sensors as a vector of strings </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="122" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a256e49e7bd413b0cd6bcc9abe18d6fd9" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>const <ref refid="structBipedalLocomotion_1_1RobotInterface_1_1SensorBridgeMetaData" kindref="compound">SensorBridgeMetaData</ref> &amp;</type>
        <definition>const SensorBridgeMetaData&amp; BipedalLocomotion::RobotInterface::YarpSensorBridge::get</definition>
        <argsstring>() const final</argsstring>
        <name>get</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ab0ecf6787eae22b06d9f9bfd8ed68184">get</reimplements>
        <briefdescription>
<para>Get the object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a const reference of the requested object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="128" column="32"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a5ed3adf70e3be0f4020e7c2ecdaf8b9b" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getJointsList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;jointsList) final</argsstring>
        <name>getJointsList</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ac702a40c1c06091450376ac6e45a7206">getJointsList</reimplements>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>jointsList</declname>
        </param>
        <briefdescription>
<para>Get joints list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">jointsList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of joints attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="135" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a1562faa1a69c475f95b88ad943966a90" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getIMUsList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;IMUsList) final</argsstring>
        <name>getIMUsList</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ab1338623e0712857aff3d21c4506a638">getIMUsList</reimplements>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>IMUsList</declname>
        </param>
        <briefdescription>
<para>Get imu sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">IMUsList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of IMUs attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="142" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a06b6b193c3407b0d489a5bba5c1b4f1d" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getLinearAccelerometersList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;linearAccelerometersList) final</argsstring>
        <name>getLinearAccelerometersList</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1acb729f74e9e13d5f1528442e9e9a212d">getLinearAccelerometersList</reimplements>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>linearAccelerometersList</declname>
        </param>
        <briefdescription>
<para>Get linear accelerometers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">linearAccelerometersList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of linear accelerometers attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="149" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a1e476a8729c50254046bb6b9f34130a3" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getGyroscopesList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;gyroscopesList) final</argsstring>
        <name>getGyroscopesList</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a5bc92c7da3b7100b3c0ae1ef94e9197f">getGyroscopesList</reimplements>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>gyroscopesList</declname>
        </param>
        <briefdescription>
<para>Get gyroscopes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">gyroscopesList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of gyroscopes attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="156" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a0306dedea0c8239fb132df564f350e25" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getOrientationSensorsList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;orientationSensorsList) final</argsstring>
        <name>getOrientationSensorsList</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a7918e657f4caec38785a1ce614529a6c">getOrientationSensorsList</reimplements>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>orientationSensorsList</declname>
        </param>
        <briefdescription>
<para>Get orientation sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">orientationSensorsList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of orientation sensors attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="163" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ae1d4e48477fbf613d261ad3d473b6e71" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getMagnetometersList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;magnetometersList) final</argsstring>
        <name>getMagnetometersList</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1abd12ba8d7810a7a50f7d79b00a3d83d3">getMagnetometersList</reimplements>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>magnetometersList</declname>
        </param>
        <briefdescription>
<para>Get magnetometers sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">magnetometersList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of magnetometers attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="170" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a942974549cb60ba7deea1242073c33bd" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getSixAxisForceTorqueSensorsList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;sixAxisForceTorqueSensorsList) final</argsstring>
        <name>getSixAxisForceTorqueSensorsList</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a4d95d80173b7dce89c6bf2ff7904e2ce">getSixAxisForceTorqueSensorsList</reimplements>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>sixAxisForceTorqueSensorsList</declname>
        </param>
        <briefdescription>
<para>Get 6 axis FT sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">sixAxisForceTorqueSensorsList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of 6 axis force torque sensors attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="177" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ab9502b971b0c4e73ccee06b037f80fb2" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getThreeAxisForceTorqueSensorsList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;threeAxisForceTorqueSensorsList) final</argsstring>
        <name>getThreeAxisForceTorqueSensorsList</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a48dd5094ae2efd7c119e59f2649ed972">getThreeAxisForceTorqueSensorsList</reimplements>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>threeAxisForceTorqueSensorsList</declname>
        </param>
        <briefdescription>
<para>Get 6 axis FT sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">threeAxisForceTorqueSensorsList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of 3 axis force torque sensors attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="184" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ab2b8a502338624b417a7efcd5aa2e477" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getCartesianWrenchesList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;cartesianWrenchesList) final</argsstring>
        <name>getCartesianWrenchesList</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a404aab5ea59c6395cfa00c7be3deef5a">getCartesianWrenchesList</reimplements>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>cartesianWrenchesList</declname>
        </param>
        <briefdescription>
<para>Get cartesian wrenches. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">cartesianWrenchesList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of cartesian wrenches attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="191" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a1d53a02c9c8afec70096bf46e1053ba1" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getJointPosition</definition>
        <argsstring>(const std::string &amp;jointName, double &amp;jointPosition, double *receiveTimeInSeconds=nullptr) final</argsstring>
        <name>getJointPosition</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a77ba190b348a0c8fc2a26cfb462d07b1">getJointPosition</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>jointName</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>jointPosition</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Get joint position in radians. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">jointName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">jointPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>joint position in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="200" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a140451252e1a0cfa91be5d92f3ba92d5" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getJointPositions</definition>
        <argsstring>(Eigen::Ref&lt; Eigen::VectorXd &gt; jointPositions, double *receiveTimeInSeconds=nullptr) final</argsstring>
        <name>getJointPositions</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a32dde6b1562b494e6cd18baa4b5d3def">getJointPositions</reimplements>
        <param>
          <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
          <declname>jointPositions</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Get all joints&apos; positions in radians. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>all joints&apos; position in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;jointPositions&quot; to this method</para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="215" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a709d0f08124a84c9c70591635ef2d2b8" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getJointVelocity</definition>
        <argsstring>(const std::string &amp;jointName, double &amp;jointVelocity, double *receiveTimeInSeconds=nullptr) final</argsstring>
        <name>getJointVelocity</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a22b6ea285836cc3b39d17d44b58539b8">getJointVelocity</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>jointName</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>jointVelocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Get joint velocity in rad/s. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">jointName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">jointVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>joint velocity in radians per second </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="225" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1aab7116eb242a800f69263e2114b43b96" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getJointVelocities</definition>
        <argsstring>(Eigen::Ref&lt; Eigen::VectorXd &gt; jointVelocties, double *receiveTimeInSeconds=nullptr) final</argsstring>
        <name>getJointVelocities</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ad8bff6b0079f5dad0134e6b45d4f87b5">getJointVelocities</reimplements>
        <param>
          <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
          <declname>jointVelocties</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Get all joints&apos; velocities in rad/s. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>all joints&apos; velocities in radians per second </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;jointVelocties&quot; to this method</para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="240" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a413dc527f4fb080f1fd44444223eff5a" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getIMUMeasurement</definition>
        <argsstring>(const std::string &amp;imuName, Eigen::Ref&lt; Vector12d &gt; imuMeasurement, double *receiveTimeInSeconds=nullptr) final</argsstring>
        <name>getIMUMeasurement</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a690843875b0cf87cc7be008dd52671fa">getIMUMeasurement</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>imuName</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; Vector12d &gt;</type>
          <declname>imuMeasurement</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Get IMU measurement The serialization of measurments is as follows, (rpy acc omega mag) </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>rpy in radians Roll-Pitch-Yaw Euler angles</para>
</listitem><listitem><para>acc in m/s^2 linear accelerometer measurements</para>
</listitem><listitem><para>omega in rad/s gyroscope measurements</para>
</listitem><listitem><para>mag in tesla magnetometer measurements <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">imuName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the IMU </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">imuMeasurement</parametername>
</parameternamelist>
<parameterdescription>
<para>imu measurement of size 12 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="256" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a833ff76a32cf861a57f03a0fc2d0d652" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getLinearAccelerometerMeasurement</definition>
        <argsstring>(const std::string &amp;accName, Eigen::Ref&lt; Eigen::Vector3d &gt; accMeasurement, double *receiveTimeInSeconds=nullptr) final</argsstring>
        <name>getLinearAccelerometerMeasurement</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1aa71f7aaf492063bb3bf4cfd76ee2bd4b">getLinearAccelerometerMeasurement</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>accName</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; Eigen::Vector3d &gt;</type>
          <declname>accMeasurement</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Get linear accelerometer measurement in m/s^2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">accName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the linear accelerometer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">accMeasurement</parametername>
</parameternamelist>
<parameterdescription>
<para>linear accelerometer measurements of size 3 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="267" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1aec16a946ed89a488751225a47a15b705" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getGyroscopeMeasure</definition>
        <argsstring>(const std::string &amp;gyroName, Eigen::Ref&lt; Eigen::Vector3d &gt; gyroMeasurement, double *receiveTimeInSeconds=nullptr) final</argsstring>
        <name>getGyroscopeMeasure</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1afdd9810e5acdd3ed07418cf10b7f2ac2">getGyroscopeMeasure</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>gyroName</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; Eigen::Vector3d &gt;</type>
          <declname>gyroMeasurement</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Get gyroscope measurement in rad/s. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">gyroName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the gyroscope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">gyroMeasurement</parametername>
</parameternamelist>
<parameterdescription>
<para>gyroscope measurements of size 3 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="278" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a49060b0107d8f56ddc7021f425ec782e" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getOrientationSensorMeasurement</definition>
        <argsstring>(const std::string &amp;rpyName, Eigen::Ref&lt; Eigen::Vector3d &gt; rpyMeasurement, double *receiveTimeInSeconds=nullptr) final</argsstring>
        <name>getOrientationSensorMeasurement</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a72535ac0dd4c6d17420f1c82afdd9d51">getOrientationSensorMeasurement</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>rpyName</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; Eigen::Vector3d &gt;</type>
          <declname>rpyMeasurement</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Get orientation sensor measurement in radians as roll pitch yaw Euler angles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">rpyName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the orientation sensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rpyMeasurement</parametername>
</parameternamelist>
<parameterdescription>
<para>rpy measurements of size 3 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="289" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ae0a6b5e9fd18c20c7873306168f57fb1" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getMagnetometerMeasurement</definition>
        <argsstring>(const std::string &amp;magName, Eigen::Ref&lt; Eigen::Vector3d &gt; magMeasurement, double *receiveTimeInSeconds=nullptr) final</argsstring>
        <name>getMagnetometerMeasurement</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1abf8ea785d1e73c28e46574e425863480">getMagnetometerMeasurement</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>magName</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; Eigen::Vector3d &gt;</type>
          <declname>magMeasurement</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Get magentometer measurement in tesla. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">magName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the magnetometer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">magMeasurement</parametername>
</parameternamelist>
<parameterdescription>
<para>magnetometer measurements of size 3 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="300" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1aef2c6c08a995009014018760806cf724" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getSixAxisForceTorqueMeasurement</definition>
        <argsstring>(const std::string &amp;ftName, Eigen::Ref&lt; Vector6d &gt; ftMeasurement, double *receiveTimeInSeconds=nullptr) final</argsstring>
        <name>getSixAxisForceTorqueMeasurement</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1add9e1ecce9c2d0b700e0a99326c2062a">getSixAxisForceTorqueMeasurement</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>ftName</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; Vector6d &gt;</type>
          <declname>ftMeasurement</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Get six axis force torque measurement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ftName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the FT sensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ftMeasurement</parametername>
</parameternamelist>
<parameterdescription>
<para>FT measurements of size 6 containing 3d forces and 3d torques </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="311" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1adde61a113b0ca324c922d179322327e6" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getThreeAxisForceTorqueMeasurement</definition>
        <argsstring>(const std::string &amp;ftName, Eigen::Ref&lt; Eigen::Vector3d &gt; ftMeasurement, double *receiveTimeInSeconds=nullptr) final</argsstring>
        <name>getThreeAxisForceTorqueMeasurement</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a417c300f7a1408be135c2f0d5c7619f8">getThreeAxisForceTorqueMeasurement</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>ftName</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; Eigen::Vector3d &gt;</type>
          <declname>ftMeasurement</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Get three axis force-torque measurement containing normal force (N) and tangential moments (Nm) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ftName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the FT sensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ftMeasurement</parametername>
</parameternamelist>
<parameterdescription>
<para>FT measurements of size 3 containing tau_x tau_y and fz </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="322" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a3498db54ed2ef0e11d02089eeecfee11" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getCartesianWrench</definition>
        <argsstring>(const std::string &amp;cartesianWrenchName, Eigen::Ref&lt; Vector6d &gt; cartesianWrenchMeasurement, double *receiveTimeInSeconds=nullptr) final</argsstring>
        <name>getCartesianWrench</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1acc368336f8bb62b701e5b4e72ee09dc3">getCartesianWrench</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>cartesianWrenchName</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; Vector6d &gt;</type>
          <declname>cartesianWrenchMeasurement</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Get 6D end effector wrenches in N and Nm for forces and torques respectively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cartesianWrenchName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the end effector wrench </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cartesianWrenchMeasurement</parametername>
</parameternamelist>
<parameterdescription>
<para>end effector wrench measurement of size 6 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rreceiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="333" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a988cf7f5150aea1b32d34ed2d0104f96" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getMotorCurrent</definition>
        <argsstring>(const std::string &amp;jointName, double &amp;motorCurrent, double *receiveTimeInSeconds=nullptr) final</argsstring>
        <name>getMotorCurrent</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a57ecc773337627947f47c727ca8e5a78">getMotorCurrent</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>jointName</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>motorCurrent</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Get motor current in ampere. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">jointName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">motorCurrent</parametername>
</parameternamelist>
<parameterdescription>
<para>motor current in ampere </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="344" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a89aaa0ab9906b25fcae8da738caedf14" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpSensorBridge::getMotorCurrents</definition>
        <argsstring>(Eigen::Ref&lt; Eigen::VectorXd &gt; motorCurrents, double *receiveTimeInSeconds=nullptr) final</argsstring>
        <name>getMotorCurrents</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a3104b846b17c7f6e14e7608014723638">getMotorCurrents</reimplements>
        <param>
          <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
          <declname>motorCurrents</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Get all motors&apos; currents in ampere. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">motorCurrents</parametername>
</parameternamelist>
<parameterdescription>
<para>all motors&apos; current in ampere </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;motorCurrents&quot; to this method</para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="359" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge" kindref="compound">YarpSensorBridge</ref> Yarp implementation of the <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge" kindref="compound">ISensorBridge</ref> interface Currently available interfaces. </para>
    </briefdescription>
    <detaileddescription>
<para><itemizedlist>
<listitem><para>Remapped Remote Control Board for joint states</para>
</listitem><listitem><para>Inertial Measurement Units through generic sensor interface and remapped multiple analog sensor interface</para>
</listitem><listitem><para>Whole Body Dynamics Estimated end effector wrenches through a generic sensor interface</para>
</listitem><listitem><para>Force Torque Sensors through analog sensor interface and remapped multiple analog sensor interface</para>
</listitem><listitem><para>Depth Cameras through RGBD sensor interface</para>
</listitem><listitem><para>Camera images through OpenCV Grabber interface</para>
</listitem></itemizedlist>
</para>
<para>The <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge" kindref="compound">YarpSensorBridge</ref> expects a list of device drivers through the yarp::dev::PolyDriverList object. Each PolyDriver object in the list is compared with the configured sensor names and the assumptions listed below to infer the sensor types and relevant interfaces in order to to read the relevant data.</para>
<para>MAJOR ASSUMPTIONS<itemizedlist>
<listitem><para>Every sensor unit(device driver) attached to this Bridge is identified by a unique name</para>
</listitem><listitem><para>A single instance of a remote control board remapper and a multiple analog sensor remapper is expected if the suer wants to use the control board interfaces and multiple analog sensor interfaces</para>
</listitem><listitem><para>Any generic sensor interface with channel dimensions of 6 is considered to be a cartesian wrench interface</para>
</listitem><listitem><para>Any generic sensor interface with channel dimensions of 12 is considered as a IMU interface (server inertial)</para>
</listitem><listitem><para>Any analog sensor interface with channel dimensions of 6 is considered as a force torque sensor interface</para>
</listitem><listitem><para>The images are available through a FrameGrabber interface (RGB only) and a RGBD interface (RGB and Depth).</para>
</listitem><listitem><para>The current internal design (read all sensors in a serial fashion) may not be suitable for a heavy measurement set</para>
</listitem></itemizedlist>
</para>
<para>The parameters for writing the configuration file for this class is given as, <table rows="26" cols="4"><row>
<entry thead="yes" align='center'><para>Group   </para>
</entry><entry thead="yes" align='center'><para>Parameter   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>check_for_nan   </para>
</entry><entry thead="no" align='center'><para>boolean   </para>
</entry><entry thead="no" align='center'><para>flag to activate checking for NANs in the incoming measurement buffers, not applicable for images    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>stream_joint_states   </para>
</entry><entry thead="no" align='center'><para>boolean   </para>
</entry><entry thead="no" align='center'><para>Flag to activate the attachment to IMU sensor devices    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>stream_inertials   </para>
</entry><entry thead="no" align='center'><para>boolean   </para>
</entry><entry thead="no" align='center'><para>Flag to activate the attachment to IMU sensor devices    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>stream_cartesian_wrenches   </para>
</entry><entry thead="no" align='center'><para>boolean   </para>
</entry><entry thead="no" align='center'><para>Flag to activate the attachment to Cartesian wrench related devices    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>stream_forcetorque_sensors   </para>
</entry><entry thead="no" align='center'><para>boolean   </para>
</entry><entry thead="no" align='center'><para>Flag to activate the attachment to six axis FT sensor devices    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>stream_cameras   </para>
</entry><entry thead="no" align='center'><para>boolean   </para>
</entry><entry thead="no" align='center'><para>Flag to activate the attachment to Cameras devices    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para>RemoteControlBoardRemapper   </para>
</entry><entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>Expects only one remapped remotecontrolboard device attached to it, if there multiple remote control boards, then use a remapper to create a single remotecontrolboard    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>joints_list   </para>
</entry><entry thead="no" align='center'><para>vector of strings   </para>
</entry><entry thead="no" align='center'><para>This parameter is <bold>optional</bold>. The joints list used to open the remote control board remapper. If the list is not passed, the order of the joint stored in the PolyDriver is used    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para>InertialSensors   </para>
</entry><entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>Expects IMU to be opened as genericSensorClient devices communicating through the inertial server and other inertials as a part multiple analog sensors remapper (&quot;multipleanalogsensorsremapper&quot;)    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>imu_list   </para>
</entry><entry thead="no" align='center'><para>vector of strings   </para>
</entry><entry thead="no" align='center'><para>list of the names of devices opened as genericSensorClient device and having a channel dimension of 12    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>gyroscopes_list   </para>
</entry><entry thead="no" align='center'><para>vector of strings   </para>
</entry><entry thead="no" align='center'><para>list of the names of devices opened with ThreeAxisGyroscope interface remapped through the &quot;multipleanalogsensorsremapper&quot; interfaces and having a channel dimension of 3    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>accelerometers_list   </para>
</entry><entry thead="no" align='center'><para>vector of strings   </para>
</entry><entry thead="no" align='center'><para>list of the names of devices opened with ThreeAxisLinearAccelerometers interface remapped through the &quot;multipleanalogsensorsremapper&quot; interfaces and having a channel dimension of 3    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>orientation_sensors_list   </para>
</entry><entry thead="no" align='center'><para>vector of strings   </para>
</entry><entry thead="no" align='center'><para>list of the names of devices opened with OrientationSensors interface remapped through the &quot;multipleanalogsensorsremapper&quot; interfaces and having a channel dimension of 3    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>magnetometers_list   </para>
</entry><entry thead="no" align='center'><para>vector of strings   </para>
</entry><entry thead="no" align='center'><para>list of the names of devices opened with ThreeAxisMagnetometer interface remapped through the &quot;multipleanalogsensorsremapper&quot; interfaces and having a channel dimension of 3    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para>CartesianWrenches   </para>
</entry><entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>Expects the devices wrapping the cartesian wrenches ports to be opened as &quot;genericSensorClient&quot; device and have a channel dimension of 6    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>cartesian_wrenches_list   </para>
</entry><entry thead="no" align='center'><para>vector of strings   </para>
</entry><entry thead="no" align='center'><para>list of the names of devices opened as genericSensorClient device and having a channel dimension of 6    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para>SixAxisForceTorqueSensors   </para>
</entry><entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>Expects the Six axis FT sensors to be opened with SixAxisForceTorqueSensors interface remapped through multiple analog sensors remapper (&quot;multipleanalogsensorsremapper&quot;) or to be opened as analog sensor (&quot;analogsensorclient&quot;) device having channel dimensions as 6    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>sixaxis_forcetorque_sensors_list   </para>
</entry><entry thead="no" align='center'><para>vector of strings   </para>
</entry><entry thead="no" align='center'><para>list of six axis FT sensors (the difference between a MAS FT and an analog FT is done internally assuming that the names are distinct form each other)    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para>Cameras   </para>
</entry><entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>Expects cameras to be opened either as remote frame grabber (&quot;RemoteFrameGrabber&quot;) with IFrameGrabber interface or rgbd sensor (&quot;RGBDSensorClient&quot;) with IRGBDSensor interface    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>rgbd_list   </para>
</entry><entry thead="no" align='center'><para>vector of strings   </para>
</entry><entry thead="no" align='center'><para>list containing the devices opened as RGBDSensorClients containing the IRGBD sensor interface    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>rgbd_image_width   </para>
</entry><entry thead="no" align='center'><para>vector of strings   </para>
</entry><entry thead="no" align='center'><para>list containing the image width dimensions of RGBD cameras. Required parameter if cameras are enabled. The list must be the same size and order as rgbd_list    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>rgbd_image_height   </para>
</entry><entry thead="no" align='center'><para>vector of strings   </para>
</entry><entry thead="no" align='center'><para>list containing the image height dimensions of RGBD cameras. Required parameter if cameras are enabled. The list must be the same size and order as rgbd_list    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>rgb_cameras_list   </para>
</entry><entry thead="no" align='center'><para>vector of strings   </para>
</entry><entry thead="no" align='center'><para>list containing the devices opened as RemoteFrameGrabber devices containing the IFrameGrabber interface    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>rgb_image_width   </para>
</entry><entry thead="no" align='center'><para>vector of strings   </para>
</entry><entry thead="no" align='center'><para>list containing the image width dimensions of RGB cameras. Required parameter if cameras are enabled. The list must be the same size and order as rgb_list    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>rgb_image_height   </para>
</entry><entry thead="no" align='center'><para>vector of strings   </para>
</entry><entry thead="no" align='center'><para>list containing the image height dimensions of RGB cameras. Required parameter if cameras are enabled. The list must be the same size and order as rgb_list   </para>
</entry></row>
</table>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BipedalLocomotion::RobotInterface::YarpSensorBridge</label>
        <link refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BipedalLocomotion::RobotInterface::ISensorBridge</label>
        <link refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge"/>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::Advanceable&lt; T &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Advanceable&lt; SensorBridgeMetaData &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; SensorBridgeMetaData &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>BipedalLocomotion::RobotInterface::YarpSensorBridge</label>
        <link refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BipedalLocomotion::RobotInterface::ISensorBridge</label>
        <link refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge"/>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::Advanceable&lt; T &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Advanceable&lt; SensorBridgeMetaData &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; SensorBridgeMetaData &gt;</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" line="79" column="1" bodyfile="BipedalLocomotion/RobotInterface/YarpSensorBridge.h" bodystart="81" bodyend="366"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1aad1e2cb1e5594bd5a7cddeec3f1b3054" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a256e49e7bd413b0cd6bcc9abe18d6fd9" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>get</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a3498db54ed2ef0e11d02089eeecfee11" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getCartesianWrench</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ab2b8a502338624b417a7efcd5aa2e477" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getCartesianWrenchesList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a224b8dd4accc99745d365c0c46cef771" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getFailedSensorReads</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1aec16a946ed89a488751225a47a15b705" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getGyroscopeMeasure</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a1e476a8729c50254046bb6b9f34130a3" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getGyroscopesList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a413dc527f4fb080f1fd44444223eff5a" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getIMUMeasurement</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a1562faa1a69c475f95b88ad943966a90" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getIMUsList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a1d53a02c9c8afec70096bf46e1053ba1" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getJointPosition</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a140451252e1a0cfa91be5d92f3ba92d5" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getJointPositions</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a5ed3adf70e3be0f4020e7c2ecdaf8b9b" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getJointsList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1aab7116eb242a800f69263e2114b43b96" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getJointVelocities</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a709d0f08124a84c9c70591635ef2d2b8" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getJointVelocity</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a833ff76a32cf861a57f03a0fc2d0d652" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getLinearAccelerometerMeasurement</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a06b6b193c3407b0d489a5bba5c1b4f1d" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getLinearAccelerometersList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ae0a6b5e9fd18c20c7873306168f57fb1" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getMagnetometerMeasurement</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ae1d4e48477fbf613d261ad3d473b6e71" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getMagnetometersList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a988cf7f5150aea1b32d34ed2d0104f96" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getMotorCurrent</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a89aaa0ab9906b25fcae8da738caedf14" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getMotorCurrents</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a49060b0107d8f56ddc7021f425ec782e" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getOrientationSensorMeasurement</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a0306dedea0c8239fb132df564f350e25" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getOrientationSensorsList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1aef2c6c08a995009014018760806cf724" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getSixAxisForceTorqueMeasurement</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a942974549cb60ba7deea1242073c33bd" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getSixAxisForceTorqueSensorsList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1adde61a113b0ca324c922d179322327e6" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getThreeAxisForceTorqueMeasurement</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ab9502b971b0c4e73ccee06b037f80fb2" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>getThreeAxisForceTorqueSensorsList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ae6e281311cece893870a6f9fe74bd4a0" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a31ae8f3c258b66624929cf5ddaa50fcd" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>isValid</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1aacdd7b5dabf1273290cf286dab96f26a" prot="private" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>m_pimpl</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a7599fcdfdfcdc73241baae7377e91e5d" prot="protected" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>populateSensorBridgeMetaDataFromConfig</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1abdd1f46b5e861a8447224664eb1dce40" prot="protected" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>populateSensorBridgeOptionsFromConfig</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a8536d55a2f75a99202834d47f3fd0d42" prot="protected" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>populateSensorListsFromConfig</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a7e67bd6969608baa82270d73aa218ea3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>setDriversList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a07594468078e3f666d7a44a6fb33e1c4" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>shared_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a3b4b4107634a981037efa760f91937aa" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>unique_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a57a14eeec8ad23a41886c52b11de434b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>weak_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a0f0d17374245fa901c0d74b8f7f404f8" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>YarpSensorBridge</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1aecfb22aae3634befc8dc3b3592325484" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>~ISensorBridge</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ad140d8706d86b037715d283cae1eca0f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::YarpSensorBridge</scope><name>~YarpSensorBridge</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
