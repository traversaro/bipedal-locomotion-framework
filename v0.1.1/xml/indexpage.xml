<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>bipedal locomotion framework</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="index_1md__home_runner_work_bipedal_locomotion_framework_bipedal_locomotion_framework_docs_bipedal_locomotion_framework_README"/> <image type="html" name="https://user-images.githubusercontent.com/16744101/108218725-3cab5980-7135-11eb-8b5a-8bcc9226fd5a.png" inline="yes"></image>
</para>
<para><heading level="1">bipedal-locomotion-framework</heading>
</para>
<para></para>
<para><ulink url="https://isocpp.org"><image type="html" name="https://img.shields.io/badge/standard-C++17-blue.svg?style=flat&amp;logo=c%2B%2B" alt="C++ Standard" inline="yes"></image>
</ulink> <ulink url="https://github.com/dic-iit/bipedal-locomotion-framework/blob/master/LICENSE"><image type="html" name="https://img.shields.io/badge/license-LGPL-19c2d8.svg" alt="Size" inline="yes"></image>
</ulink> <ulink url="https://dic-iit.github.io/bipedal-locomotion-framework/doxygen/doc/html/index.html"><image type="html" name="https://github.com/dic-iit/bipedal-locomotion-framework/workflows/GitHub%20Pages/badge.svg" alt="doxygen" inline="yes"></image>
</ulink> <ulink url="https://github.com/dic-iit/bipedal-locomotion-framework/actions?query=workflow%3A%22C%2B%2B+CI+Workflow%22"><image type="html" name="https://github.com/dic-iit/bipedal-locomotion-framework/workflows/C++%20CI%20Workflow/badge.svg" alt="CI" inline="yes"></image>
</ulink> </para>
<para><hruler/>
</para>
<para></para>
<para><bold>:warning: REPOSITORY UNDER DEVELOPMENT :warning:</bold> <linebreak/>
The libraries implemented in this repository are still experimental and we cannot guarantee stable API </para>
<para><hruler/>
</para>
<para>The <bold>bipedal-locomotion-framework</bold> project is a <emphasis>suite</emphasis> of libraries for achieving bipedal locomotion on humanoid robots. </para>
<sect1 id="index_1autotoc_md2">
<title>Table of content</title>
<para><itemizedlist>
<listitem><para><ulink url="#page_facing_up-mandatory-dependencies">:page_facing_up: Mandatory dependencies</ulink></para>
</listitem><listitem><para><ulink url="#hammer-build-the-suite">:hammer: Build the suite</ulink></para>
</listitem><listitem><para><ulink url="#orange_book-exported-components">:orange_book: Exported components</ulink></para>
</listitem><listitem><para><ulink url="#computer-some-utilities">:computer: Some utitilites</ulink></para>
</listitem><listitem><para><ulink url="#snake-python">:snake: Python</ulink></para>
</listitem><listitem><para><ulink url="#running-how-to-use-the-libraries">:running: How to use the libraries</ulink></para>
</listitem><listitem><para><ulink url="#gear-contributing">:gear: Contributingâ€‹</ulink></para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="index_1autotoc_md3">
<title>:page_facing_up: Mandatory dependencies</title>
<para>The <bold>bipedal-locomotion-framework</bold> project is versatile and can be used to compile only some components.</para>
<para>The minimum required dependencies are <computeroutput>Eigen3</computeroutput> and <computeroutput>iDynTree</computeroutput>. If you want to build the tests please remember to install <computeroutput>Catch2</computeroutput>. If you are interested in the python bindings generation please install <computeroutput>python3</computeroutput> and <computeroutput>pybind11</computeroutput> in your system.</para>
</sect1>
<sect1 id="index_1autotoc_md4">
<title>:orange_book: Exported components</title>
<para>The <bold>bipedal-locomotion-framework</bold> project consists of several components. The components are stored in the <ulink url="./src"><computeroutput>src</computeroutput></ulink> folder and their compilation depends on the installed dependencies.</para>
<para><table rows="16" cols="3"><row>
<entry thead="yes" align='center'><para>Component   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Additional Dependencies    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><ulink url="./src/Autodiff">AutoDiff</ulink>   </para>
</entry><entry thead="no" align='center'><para>Bridge between CppAD and Eigen   </para>
</entry><entry thead="no" align='center'><para><ulink url="https://coin-or.github.io/CppAD/doc/cppad.htm"><computeroutput>CppAD</computeroutput></ulink>    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><ulink url="./src/ContactModels">ContactModels</ulink>   </para>
</entry><entry thead="no" align='center'><para>Models to describe the contact between robot and enviroment   </para>
</entry><entry thead="no" align='center'><para>-    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><ulink url="./src/Contacts">Contacts</ulink>   </para>
</entry><entry thead="no" align='center'><para>Syntactic description of a contact   </para>
</entry><entry thead="no" align='center'><para><ulink url="https://github.com/artivis/manif"><computeroutput>manif</computeroutput></ulink>    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><ulink url="./src/Conversions">CommonConversions</ulink>   </para>
</entry><entry thead="no" align='center'><para>Common conversion utilities used in the framework   </para>
</entry><entry thead="no" align='center'><para>-    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><ulink url="./src/Conversions">ManifConversions</ulink>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>manif</computeroutput> library related conversion utilities used in the framework   </para>
</entry><entry thead="no" align='center'><para><ulink url="https://github.com/artivis/manif"><computeroutput>manif</computeroutput></ulink>    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><ulink url="./src/Estimators">Estimators</ulink>   </para>
</entry><entry thead="no" align='center'><para>Library containing observers   </para>
</entry><entry thead="no" align='center'><para>-    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><ulink url="./src/Estimators">FloatingBaseEstimator</ulink>   </para>
</entry><entry thead="no" align='center'><para>Library containing floating base estimators   </para>
</entry><entry thead="no" align='center'><para><ulink url="https://github.com/artivis/manif"><computeroutput>manif</computeroutput></ulink>    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><ulink url="./src/GenericContainer">GenericContainer</ulink>   </para>
</entry><entry thead="no" align='center'><para>Data structure similar to <computeroutput>span</computeroutput> but resizable.   </para>
</entry><entry thead="no" align='center'><para>-    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><ulink url="./src/Math">Math</ulink>   </para>
</entry><entry thead="no" align='center'><para>Library containing mathematical algorithms   </para>
</entry><entry thead="no" align='center'><para>-    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><ulink url="./src/ParametersHandler">ParametersHandler</ulink>   </para>
</entry><entry thead="no" align='center'><para>Library for retrieving parameters from configuration files   </para>
</entry><entry thead="no" align='center'><para><ulink url="https://www.yarp.it/git-master/"><computeroutput>YARP</computeroutput></ulink> (only if you want the <computeroutput>YARP</computeroutput> implementation)    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><ulink url="./src/Planners">Planners</ulink>   </para>
</entry><entry thead="no" align='center'><para>Library containing planner useful for locomotion   </para>
</entry><entry thead="no" align='center'><para><ulink url="https://github.com/artivis/manif"><computeroutput>manif</computeroutput></ulink> <ulink url="https://web.casadi.org/"><computeroutput>CasADi</computeroutput></ulink> <ulink url="http://www.qhull.org/"><computeroutput>qhull</computeroutput></ulink>    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><ulink url="./src/RobotInterface">RobotInterface</ulink>   </para>
</entry><entry thead="no" align='center'><para>Generic interface classes to adapt to various IO data formats   </para>
</entry><entry thead="no" align='center'><para><ulink url="https://www.yarp.it/git-master/"><computeroutput>YARP</computeroutput></ulink> (only if you want the <computeroutput>YARP</computeroutput> implementation)    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><ulink url="./src/System">System</ulink>   </para>
</entry><entry thead="no" align='center'><para>Description of discrete and continuous dynamical systems   </para>
</entry><entry thead="no" align='center'><para>-    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><ulink url="./src/TSID">TSID</ulink>   </para>
</entry><entry thead="no" align='center'><para>Task space inverse dynamics   </para>
</entry><entry thead="no" align='center'><para><ulink url="https://github.com/artivis/manif"><computeroutput>manif</computeroutput></ulink> <ulink url="https://github.com/dic-iit/lie-group-controllers"><computeroutput>lie-group-controllers</computeroutput></ulink>    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><ulink url="./src/YarpUtilities">YarpUtilities</ulink>   </para>
</entry><entry thead="no" align='center'><para>Utilities library for retrieving data and from YARP structures   </para>
</entry><entry thead="no" align='center'><para><ulink url="https://www.yarp.it/git-master/"><computeroutput>YARP</computeroutput></ulink>   </para>
</entry></row>
</table>
</para>
</sect1>
<sect1 id="index_1autotoc_md5">
<title>:hammer: Build the suite</title>
<para>The <bold>bipedal-locomotion-framework</bold> can be built on Windows, macOS, and Linux. The easiest way to compile the library is to use the <ulink url="https://github.com/robotology/robotology-superbuild"><computeroutput>robotology-superbuild</computeroutput></ulink>. If you enable the profiles <computeroutput>ROBOTOLOGY_ENABLE_DYNAMICS</computeroutput> and <computeroutput>ROBOTOLOGY_ENABLE_DYNAMICS_FULL_DEPS</computeroutput> in the <computeroutput>robotology-superbuild</computeroutput> you will automatically clone and build <bold>bipedal-locomotion-framework</bold> and all the dependencies.</para>
<para>If you do not want to use the <computeroutput>robotology-superbuild</computeroutput> you can manually compile the code in the repository running the following command in the terminal</para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">git<sp/>clone<sp/>https://github.com/dic-iit/bipedal-locomotion-framework.git</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>bipedal-locomotion-framework</highlight></codeline>
<codeline><highlight class="normal">mkdir<sp/>build<sp/>&amp;&amp;<sp/>cd<sp/>build</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DCMAKE_INSTALL_PREFIX=&lt;path/where/you/want/to/install&gt;<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-DCMAKE_BUILD_TYPE=Release<sp/>\</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>--build<sp/>.<sp/>--config<sp/>Release<sp/>--target<sp/>install</highlight></codeline>
</programlisting></para>
<para><bold>Remark:</bold> If you manually compile the framework remember to install the dependencies required by the component you are interested in.</para>
</sect1>
<sect1 id="index_1autotoc_md6">
<title>:computer: Some utilities</title>
<para>The <bold>bipedal-locomotion-framework</bold> ships also some utilities that can help you in the everyday tests on a real robot. You can find them in the <ulink url="./utilities"><computeroutput>utilities</computeroutput> folder</ulink>. Each utility contains a well-documented<computeroutput>README</computeroutput> where you can find further details.</para>
</sect1>
<sect1 id="index_1autotoc_md7">
<title>:snake: Python</title>
<para><bold>bipedal-locomotion-framework</bold> provides also python bindings. Only a small set of the components implemented in the library have the corresponding python bindings.</para>
<para>If you want to compile the bindings please install <computeroutput>python3</computeroutput> and <computeroutput>pybind11</computeroutput> in your system then you can run the following <computeroutput>CMake</computeroutput> command in your <computeroutput>build</computeroutput> folder</para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">cmake<sp/>-DCMAKE_INSTALL_PREFIX=&lt;path/where/you/want/to/install&gt;<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-DCMAKE_BUILD_TYPE=Release<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-DFRAMEWORK_COMPILE_PYTHON_BINDINGS:BOOL=ON<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-DPython3_ROOT_DIR=$(python3<sp/>-c<sp/>&quot;import<sp/>sys;<sp/>print(sys.prefix)&quot;)<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-DFRAMEWORK_USE_Python3:BOOL=ON<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-DFRAMEWORK_USE_pybind11:BOOL=ON<sp/>.</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>--build<sp/>.<sp/>--config<sp/>Release<sp/>--target<sp/>install</highlight></codeline>
</programlisting></para>
<para><bold>Disclaimer:</bold> The python bindings are currently supported on Linux.</para>
</sect1>
<sect1 id="index_1autotoc_md8">
<title>:running: How to use the libraries</title>
<para>The <bold>bipedal-locomotion-framework</bold> provides native <computeroutput>CMake</computeroutput> support which allows the library to be easily used in <computeroutput>CMake</computeroutput> projects.</para>
<para><bold>bipedal-locomotion-framework</bold> exports the <computeroutput>CMake</computeroutput> targets presented in <ulink url="#orange_book-exported-components">Exported components</ulink> section. The targets can be imported using the <computeroutput>find_package</computeroutput> command and used by calling <computeroutput>target_link_libraries</computeroutput>.</para>
<para>For instance, <computeroutput>Math</computeroutput> component can be used as follows:</para>
<para><programlisting filename=".cmake"><codeline><highlight class="normal">cmake_minimum_required(VERSION<sp/>3.0)</highlight></codeline>
<codeline><highlight class="normal">project(myproject)</highlight></codeline>
<codeline><highlight class="normal">find_package(BipedalLocomotionFramework<sp/>COMPONENTS<sp/>Math<sp/>REQUIRED)</highlight></codeline>
<codeline><highlight class="normal">add_executable(example<sp/>example.cpp)</highlight></codeline>
<codeline><highlight class="normal">target_link_libraries(example<sp/>PRIVATE<sp/>BipedalLocomotion::Math)</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="index_1autotoc_md9">
<title>:gear: Contributing</title>
<para><bold>bipedal-locomotion-framework</bold> is an open-source project, and is thus built with your contributions. We strongly encourage you to open an issue with your feature request. Once the issue has been opened, you can also proceed with a pull-request :rocket: </para>
</sect1>
    </detaileddescription>
    <location file="/home/runner/work/bipedal-locomotion-framework/bipedal-locomotion-framework/docs/bipedal-locomotion-framework/README.md"/>
  </compounddef>
</doxygen>
