<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>BipedalLocomotion::IK::IntegrationBasedIK</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1System_1_1Source" prot="public" virt="non-virtual">BipedalLocomotion::System::Source&lt; IntegrationBasedIKState &gt;</basecompoundref>
    <derivedcompoundref refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics" prot="public" virt="non-virtual">BipedalLocomotion::IK::QPInverseKinematics</derivedcompoundref>
    <includes local="no">BipedalLocomotion/IK/IntegrationBasedIK.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1a8fd7172789b10c3e70028e714b6f9d5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::IK::IntegrationBasedIK::addTask</definition>
        <argsstring>(std::shared_ptr&lt; System::LinearTask &gt; task, const std::string &amp;taskName, std::size_t priority, std::optional&lt; Eigen::Ref&lt; const Eigen::VectorXd &gt;&gt; weight={})=0</argsstring>
        <name>addTask</name>
        <reimplementedby refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a81e6ec3a9708cc5326d5ba50c5454024">addTask</reimplementedby>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classBipedalLocomotion_1_1System_1_1LinearTask" kindref="compound">System::LinearTask</ref> &gt;</type>
          <declname>task</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>taskName</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>std::optional&lt; Eigen::Ref&lt; const Eigen::VectorXd &gt;&gt;</type>
          <declname>weight</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Add a linear task in the inverse kinematics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a given linear task </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority associated to the task. The lower the number the higher the priority. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Weight associated to the task. This parameter is optional. The default value is an object that does not contain any value. So is an invalid weight. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the task has been added to the inverse kinematics. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/IntegrationBasedIK.h" line="76" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1aa61b7fef25e790c8abb2f87947f74ced" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>virtual std::vector&lt;std::string&gt; BipedalLocomotion::IK::IntegrationBasedIK::getTaskNames</definition>
        <argsstring>() const =0</argsstring>
        <name>getTaskNames</name>
        <reimplementedby refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1aea4524325aeaa138f0953b5bbf56e5b6">getTaskNames</reimplementedby>
        <briefdescription>
<para>Get a vector containing the name of the tasks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an std::vector containing all the names associated to the tasks </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/IntegrationBasedIK.h" line="85" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1ad1058f0747db5421a81c25dabe56010a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::IK::IntegrationBasedIK::finalize</definition>
        <argsstring>(const System::VariablesHandler &amp;handler)=0</argsstring>
        <name>finalize</name>
        <reimplementedby refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a345b7b00600b13be14c74bdb007c5362">finalize</reimplementedby>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref> &amp;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Finalize the IK. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>You should call this method after you add ALL the tasks. </para>
</simplesect>
<simplesect kind="return"><para>true in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/IntegrationBasedIK.h" line="93" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1ae4704a2fafd2b803cb8d7e9ef59e9c78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::weak_ptr&lt; <ref refid="classBipedalLocomotion_1_1System_1_1LinearTask" kindref="compound">System::LinearTask</ref> &gt;</type>
        <definition>virtual std::weak_ptr&lt;System::LinearTask&gt; BipedalLocomotion::IK::IntegrationBasedIK::getTask</definition>
        <argsstring>(const std::string &amp;name) const =0</argsstring>
        <name>getTask</name>
        <reimplementedby refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a74e55e1fb89dd53173b283d23c9ec5da">getTask</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get a specific task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name associated to the task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a weak ptr associated to an existing task in the IK. If the task does not exist a nullptr is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/IntegrationBasedIK.h" line="101" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1af7a521cfc81b2f7d2e0c881858133478" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BipedalLocomotion::IK::IntegrationBasedIK::~IntegrationBasedIK</definition>
        <argsstring>()=default</argsstring>
        <name>~IntegrationBasedIK</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/IntegrationBasedIK.h" line="106" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>IntegrationBasedInverseKinematics implements the interface for the integration base inverse kinematics. </para>
    </briefdescription>
    <detaileddescription>
<para>Please inherits this class if you want to implement your custom Integration base Inverse Kinematics. The IntegrationBasedInverseKinematics can actually be used as Velocity controller or real IK. Indeed it is important to notice that <ref refid="structBipedalLocomotion_1_1IK_1_1IntegrationBasedIKState" kindref="compound">IntegrationBasedIKState</ref> is a struct containing the joint velocities. When a robot velocity controller is available, one can set these joint velocities to the low-level robot controller. In this case, the <formula id="44">$t ^ d$</formula> quantities in the following figures can be evaluated by using robot sensor feedback, and the robot is said to be velocity controlled. On the other hand, if the robot velocity control is not available, one may integrate the outcome of <ref refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK" kindref="compound">IntegrationBasedIK</ref> to obtain the desired joint position to be set to a low-level robot position controller. In this case, the <formula id="45">$t ^d$</formula> quantities can be evaluated by using the desired integrated quantities instead of sensor feedback, and the block behaves as an inverse kinematics module, and the robot is said to be position controlled. </para>
<sect2 id="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1vc">
<title>Velocity Control</title>
<para>Here you can find an example of the IntegrationBasedInverseKinematics interface used as a velocity controller. <linebreak/>
 <image type="html" name="https://user-images.githubusercontent.com/16744101/110701009-ec359200-81f0-11eb-9552-d47632f5b268.png" alt="VelocityControl" inline="yes"></image>
 </para>
</sect2>
<sect2 id="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1ik">
<title>Inverse Kinematics</title>
<para>If you want to use IntegrationBasedInverseKinematics as IK you need to integrate the output velocity. System::FloatingBaseSystemKinematics and System::Integrator classes can be used to integrate the output of the IK taking into account the geometrical structure of the configuration space ( <formula id="46">$ R^3 \times SO(3) \times R^n$</formula>) <linebreak/>
 <image type="html" name="https://user-images.githubusercontent.com/16744101/110700993-e50e8400-81f0-11eb-88a1-30d5a024da9a.png" alt="InverseKinematics" inline="yes"></image>
 </para>
</sect2>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BipedalLocomotion::IK::IntegrationBasedIK</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BipedalLocomotion::System::Source&lt; IntegrationBasedIKState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; IntegrationBasedIKState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::IK::QPInverseKinematics</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>BipedalLocomotion::IK::IntegrationBasedIK</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BipedalLocomotion::System::Source&lt; IntegrationBasedIKState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; IntegrationBasedIKState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/IK/IntegrationBasedIK.h" line="63" column="1" bodyfile="BipedalLocomotion/IK/IntegrationBasedIK.h" bodystart="64" bodyend="107"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1a8fd7172789b10c3e70028e714b6f9d5e" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::IK::IntegrationBasedIK</scope><name>addTask</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a67107e46e831d93f572558b541aab6d2" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::IK::IntegrationBasedIK</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ad4907077d2d2c080166f621c1277560f" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::IntegrationBasedIK</scope><name>close</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1ad1058f0747db5421a81c25dabe56010a" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::IK::IntegrationBasedIK</scope><name>finalize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1acb7101ba6041f23f41c8e57bac66bcf3" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::IK::IntegrationBasedIK</scope><name>getOutput</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1ae4704a2fafd2b803cb8d7e9ef59e9c78" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::IK::IntegrationBasedIK</scope><name>getTask</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1aa61b7fef25e790c8abb2f87947f74ced" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::IK::IntegrationBasedIK</scope><name>getTaskNames</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a6db247d3db83217a16e963d01f6bcb77" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::IntegrationBasedIK</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a83437d70b7000c155686ca51f7472888" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::IntegrationBasedIK</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a8c610311fc29bbf2ef6cde6a979630c9" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::IK::IntegrationBasedIK</scope><name>isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1af236fbc2dadf10f381326a70934e513f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::IntegrationBasedIK</scope><name>Output</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a472624c76d5e02e8ae16991cd77016ce" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::IntegrationBasedIK</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ac6f4790829906750f4ed6d87c5776d73" prot="public" virt="pure-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::IK::IntegrationBasedIK</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1af7a521cfc81b2f7d2e0c881858133478" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::IntegrationBasedIK</scope><name>~IntegrationBasedIK</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
