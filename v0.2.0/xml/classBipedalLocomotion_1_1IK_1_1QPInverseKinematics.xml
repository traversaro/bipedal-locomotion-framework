<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::IK::QPInverseKinematics</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK" prot="public" virt="non-virtual">BipedalLocomotion::IK::IntegrationBasedIK</basecompoundref>
    <includes local="no">BipedalLocomotion/IK/QPInverseKinematics.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1ae07de2d2f2e45f7cab298d77c7a32037" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; BipedalLocomotion::IK::QPInverseKinematics::m_pimpl</definition>
        <argsstring></argsstring>
        <name>m_pimpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="47" column="21" bodyfile="BipedalLocomotion/IK/QPInverseKinematics.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a5e8f8d2855c94ef0539815664b65a0fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::IK::QPInverseKinematics::QPInverseKinematics</definition>
        <argsstring>()</argsstring>
        <name>QPInverseKinematics</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="54" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a9ec71b3033a8ab760da3f7db3ac019e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::IK::QPInverseKinematics::~QPInverseKinematics</definition>
        <argsstring>()</argsstring>
        <name>~QPInverseKinematics</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="59" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a81e6ec3a9708cc5326d5ba50c5454024" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::QPInverseKinematics::addTask</definition>
        <argsstring>(std::shared_ptr&lt; System::LinearTask &gt; task, const std::string &amp;taskName, std::size_t priority, std::optional&lt; Eigen::Ref&lt; const Eigen::VectorXd &gt;&gt; weight={}) override</argsstring>
        <name>addTask</name>
        <reimplements refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1a8fd7172789b10c3e70028e714b6f9d5e">addTask</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classBipedalLocomotion_1_1System_1_1LinearTask" kindref="compound">System::LinearTask</ref> &gt;</type>
          <declname>task</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>taskName</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>std::optional&lt; Eigen::Ref&lt; const Eigen::VectorXd &gt;&gt;</type>
          <declname>weight</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Add a linear task in the inverse kinematics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a given linear task </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority associated to the task. The lower the number the higher the priority. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>weight associated to the task. This parameter is optional. The default value is an object that does not contain any value. So is an invalid weight. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>currently we support only task with priority 0 or 1. If the priority is set to 0 the task will be considered as a constraint. In this case the weight is not required. </para>
</simplesect>
<simplesect kind="warning"><para>The <ref refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics" kindref="compound">QPInverseKinematics</ref> cannot handle inequality tasks (please check Task::Type) with priority equal to 1. </para>
</simplesect>
<simplesect kind="return"><para>true if the task has been added to the inverse kinematics. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="74" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a345b7b00600b13be14c74bdb007c5362" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::QPInverseKinematics::finalize</definition>
        <argsstring>(const System::VariablesHandler &amp;handler) override</argsstring>
        <name>finalize</name>
        <reimplements refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1ad1058f0747db5421a81c25dabe56010a">finalize</reimplements>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref> &amp;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Finalize the IK. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>You should call this method after you add ALL the tasks. </para>
</simplesect>
<simplesect kind="return"><para>true in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="85" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a6e3605df43a7cb6f01807e9cffec0b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::QPInverseKinematics::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler) override</argsstring>
        <name>initialize</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a6db247d3db83217a16e963d01f6bcb77">initialize</reimplements>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize the inverse kinematics algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the IParametersHandler interface.g </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>the following parameters are required by the class <table rows="3" cols="4"><row>
<entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>robot_velocity_variable_name</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Name of the variable contained in <computeroutput>VariablesHandler</computeroutput> describing the generalized robot velocity   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>verbosity</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>bool</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Verbosity of the solver. Default value <computeroutput>false</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry></row>
</table>
Where the generalized robot velocity is a vector containing the base spatialvelocity (expressed in mixed representation) and the joint velocities. </para>
</simplesect>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="100" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1aea4524325aeaa138f0953b5bbf56e5b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; BipedalLocomotion::IK::QPInverseKinematics::getTaskNames</definition>
        <argsstring>() const override</argsstring>
        <name>getTaskNames</name>
        <reimplements refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1aa61b7fef25e790c8abb2f87947f74ced">getTaskNames</reimplements>
        <briefdescription>
<para>Get a vector containing the name of the tasks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an std::vector containing all the names associated to the tasks </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="106" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a82818a7d4b208780d7ae1fb03b7bb38a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::QPInverseKinematics::isOutputValid</definition>
        <argsstring>() const override</argsstring>
        <name>isOutputValid</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a8c610311fc29bbf2ef6cde6a979630c9">isOutputValid</reimplements>
        <briefdescription>
<para>Return true if the content of get is valid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="111" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a7e89856750429fa6bc97d34845a1f153" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::QPInverseKinematics::advance</definition>
        <argsstring>() override</argsstring>
        <name>advance</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a67107e46e831d93f572558b541aab6d2">advance</reimplements>
        <briefdescription>
<para>Solve the inverse kinematics. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true in case of success and false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="117" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a564a3771559edd04b367ac4a3b43f418" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="structBipedalLocomotion_1_1IK_1_1IntegrationBasedIKState" kindref="compound">IntegrationBasedIKState</ref> &amp;</type>
        <definition>const IntegrationBasedIKState&amp; BipedalLocomotion::IK::QPInverseKinematics::getOutput</definition>
        <argsstring>() const override</argsstring>
        <name>getOutput</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1acb7101ba6041f23f41c8e57bac66bcf3">getOutput</reimplements>
        <briefdescription>
<para>Get the outcome of the optimization problem. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the state of the inverse kinematics. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="123" column="35"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a74e55e1fb89dd53173b283d23c9ec5da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::weak_ptr&lt; <ref refid="classBipedalLocomotion_1_1System_1_1LinearTask" kindref="compound">System::LinearTask</ref> &gt;</type>
        <definition>std::weak_ptr&lt;System::LinearTask&gt; BipedalLocomotion::IK::QPInverseKinematics::getTask</definition>
        <argsstring>(const std::string &amp;name) const override</argsstring>
        <name>getTask</name>
        <reimplements refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1ae4704a2fafd2b803cb8d7e9ef59e9c78">getTask</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get a specific task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name associated to the task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a weak ptr associated to an existing task in the IK. If the task does not exist a nullptr is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="131" column="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics" kindref="compound">QPInverseKinematics</ref> is a concrete class and implements an integration base inverse kinematics. </para>
    </briefdescription>
    <detaileddescription>
<para>The inverse kinematics is here implemented as Quadratic Programming (QP) problem. The user should set the desired task with the method <ref refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a81e6ec3a9708cc5326d5ba50c5454024" kindref="member">QPInverseKinematics::addTask</ref>. Each task has a given priority. Currently we support only priority equal to 0 or 1. If the task priority is set to 0 the task will be considered as hard task, thus treated as an equality constraint. If the priority is equal to 1 the task will be embedded in the cost function. The class is also able to treat inequality constraints. A possible usage of the IK can be found in &quot;Romualdi et al. A Benchmarking of DCM Based
Architectures for Position and Velocity Controlled Walking of Humanoid Robots&quot; <ulink url="https://doi.org/10.1109/HUMANOIDS.2018.8625025">https://doi.org/10.1109/HUMANOIDS.2018.8625025</ulink> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BipedalLocomotion::IK::IntegrationBasedIK</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Source&lt; IntegrationBasedIKState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; IntegrationBasedIKState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::IK::QPInverseKinematics</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BipedalLocomotion::IK::IntegrationBasedIK</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Source&lt; IntegrationBasedIKState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; IntegrationBasedIKState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::IK::QPInverseKinematics</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="41" column="1" bodyfile="BipedalLocomotion/IK/QPInverseKinematics.h" bodystart="42" bodyend="132"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a81e6ec3a9708cc5326d5ba50c5454024" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>addTask</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a7e89856750429fa6bc97d34845a1f153" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ad4907077d2d2c080166f621c1277560f" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>close</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a345b7b00600b13be14c74bdb007c5362" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>finalize</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a564a3771559edd04b367ac4a3b43f418" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>getOutput</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a74e55e1fb89dd53173b283d23c9ec5da" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>getTask</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1aea4524325aeaa138f0953b5bbf56e5b6" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>getTaskNames</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a6e3605df43a7cb6f01807e9cffec0b6c" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a83437d70b7000c155686ca51f7472888" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a82818a7d4b208780d7ae1fb03b7bb38a" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1ae07de2d2f2e45f7cab298d77c7a32037" prot="private" virt="non-virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>m_pimpl</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1af236fbc2dadf10f381326a70934e513f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>Output</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a5e8f8d2855c94ef0539815664b65a0fb" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>QPInverseKinematics</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a472624c76d5e02e8ae16991cd77016ce" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ac6f4790829906750f4ed6d87c5776d73" prot="public" virt="pure-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1af7a521cfc81b2f7d2e0c881858133478" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>~IntegrationBasedIK</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a9ec71b3033a8ab760da3f7db3ac019e3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>~QPInverseKinematics</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
