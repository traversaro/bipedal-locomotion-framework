<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::TSID::QPFixedBaseTSID</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics" prot="public" virt="non-virtual">BipedalLocomotion::TSID::TaskSpaceInverseDynamics</basecompoundref>
    <includes local="no">BipedalLocomotion/TSID/QPFixedBaseTSID.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1afe34535ba7f72e8f8a8951eb7f57a48a" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; BipedalLocomotion::TSID::QPFixedBaseTSID::m_pimpl</definition>
        <argsstring></argsstring>
        <name>m_pimpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPFixedBaseTSID.h" line="41" column="21" bodyfile="BipedalLocomotion/TSID/QPFixedBaseTSID.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1a45b6c66204b18531b9a120079fa2dcf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::TSID::QPFixedBaseTSID::QPFixedBaseTSID</definition>
        <argsstring>()</argsstring>
        <name>QPFixedBaseTSID</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPFixedBaseTSID.h" line="48" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1aad6d8bb491894542587d0aed95927ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::TSID::QPFixedBaseTSID::~QPFixedBaseTSID</definition>
        <argsstring>()</argsstring>
        <name>~QPFixedBaseTSID</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPFixedBaseTSID.h" line="53" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1a78bae44707c00085378c6e1f81be0ed8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::QPFixedBaseTSID::addTask</definition>
        <argsstring>(std::shared_ptr&lt; System::LinearTask &gt; task, const std::string &amp;taskName, std::size_t priority, std::optional&lt; Eigen::Ref&lt; const Eigen::VectorXd &gt;&gt; weight={}) override</argsstring>
        <name>addTask</name>
        <reimplements refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1a7e8fb52df133f300617042d44eaeb0be">addTask</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classBipedalLocomotion_1_1System_1_1LinearTask" kindref="compound">System::LinearTask</ref> &gt;</type>
          <declname>task</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>taskName</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>std::optional&lt; Eigen::Ref&lt; const Eigen::VectorXd &gt;&gt;</type>
          <declname>weight</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Add a linear task in the fixed base TSID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a given linear task </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority associated to the task. The lower the number the higher the priority. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>weight associated to the task. This parameter is optional. The default value is an object that does not contain any value. So is an invalid weight. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>currently we support only task with priority 0 or 1. If the priority is set to 0 the task will be considered as a constraint. In this case the weight is not required. </para>
</simplesect>
<simplesect kind="warning"><para>The <ref refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID" kindref="compound">QPFixedBaseTSID</ref> cannot handle inequality tasks (please check Task::Type) with priority equal to 1. </para>
</simplesect>
<simplesect kind="return"><para>true if the task has been added to the TSID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPFixedBaseTSID.h" line="68" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1a7952098f2454d90169e71e65f7241a5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; BipedalLocomotion::TSID::QPFixedBaseTSID::getTaskNames</definition>
        <argsstring>() const override</argsstring>
        <name>getTaskNames</name>
        <reimplements refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1ad6ad697a02d42805623c75442a57330f">getTaskNames</reimplements>
        <briefdescription>
<para>Get a vector containing the name of the tasks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an std::vector containing all the names associated to the tasks </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPFixedBaseTSID.h" line="77" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1ac6e35d76787370cd38b66db3eca88966" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::weak_ptr&lt; <ref refid="classBipedalLocomotion_1_1System_1_1LinearTask" kindref="compound">System::LinearTask</ref> &gt;</type>
        <definition>std::weak_ptr&lt;System::LinearTask&gt; BipedalLocomotion::TSID::QPFixedBaseTSID::getTask</definition>
        <argsstring>(const std::string &amp;name) const override</argsstring>
        <name>getTask</name>
        <reimplements refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1a83ce2f73d9cae6bc9fa5ef27759fd509">getTask</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get a specific task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name associated to the task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a weak ptr associated to an existing task in the TSID. If the task does not exist a nullptr is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPFixedBaseTSID.h" line="85" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1afd8a4a3f3823189efaee3def7fdfd86f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::QPFixedBaseTSID::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler) override</argsstring>
        <name>initialize</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a6db247d3db83217a16e963d01f6bcb77">initialize</reimplements>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize the TSID algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the IParametersHandler interface.h </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>the following parameters are required by the class <table rows="4" cols="4"><row>
<entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>robot_acceleration_variable_name</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Name of the variable contained in <computeroutput>VariablesHandler</computeroutput> describing the generalized robot acceleration   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>robot_torque_variable_name</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Name of the variable contained in <computeroutput>VariablesHandler</computeroutput> describing the robot torque   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>verbosity</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>bool</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Verbosity of the solver. Default value <computeroutput>false</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry></row>
</table>
Where the generalized robot acceleration is a vector containing the base acceleration (expressed in mixed representation) and the joint accelerations, the generalized robot torques is a vector containing the joint torques and the </para>
</simplesect>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPFixedBaseTSID.h" line="101" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1ab30128e846c93bcf6cd4ebdf86e0db85" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::QPFixedBaseTSID::finalize</definition>
        <argsstring>(const System::VariablesHandler &amp;handler) override</argsstring>
        <name>finalize</name>
        <reimplements refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1a18fd7435603d4dc3159db6dfcfa1f664">finalize</reimplements>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref> &amp;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Finalize the TSID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>You should call this method after you add ALL the tasks. </para>
</simplesect>
<simplesect kind="return"><para>true in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPFixedBaseTSID.h" line="109" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1ab67015f1d23dd44241d9118a43125d95" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::QPFixedBaseTSID::advance</definition>
        <argsstring>() override</argsstring>
        <name>advance</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a67107e46e831d93f572558b541aab6d2">advance</reimplements>
        <briefdescription>
<para>Solve the fixed base TSID. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true in case of success and false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPFixedBaseTSID.h" line="115" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1af9c485d4b3be985b2c2a79f4d8eeb043" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="structBipedalLocomotion_1_1TSID_1_1TSIDState" kindref="compound">TSIDState</ref> &amp;</type>
        <definition>const TSIDState&amp; BipedalLocomotion::TSID::QPFixedBaseTSID::getOutput</definition>
        <argsstring>() const override</argsstring>
        <name>getOutput</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1acb7101ba6041f23f41c8e57bac66bcf3">getOutput</reimplements>
        <briefdescription>
<para>Get the outcome of the optimization problem. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the state of the TSID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPFixedBaseTSID.h" line="121" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1a819d5bdc96e87fd5fb7cd475d42f16b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::QPFixedBaseTSID::isOutputValid</definition>
        <argsstring>() const override</argsstring>
        <name>isOutputValid</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a8c610311fc29bbf2ef6cde6a979630c9">isOutputValid</reimplements>
        <briefdescription>
<para>Return true if the content of get is valid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPFixedBaseTSID.h" line="126" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1a1c6714e1c88ef08aa67a62f32691323e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::QPFixedBaseTSID::setKinDyn</definition>
        <argsstring>(std::shared_ptr&lt; iDynTree::KinDynComputations &gt; kinDyn) override</argsstring>
        <name>setKinDyn</name>
        <reimplements refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1acf21bf3ba478ec6dd28c5da1c76e4362">setKinDyn</reimplements>
        <param>
          <type>std::shared_ptr&lt; iDynTree::KinDynComputations &gt;</type>
          <declname>kinDyn</declname>
        </param>
        <briefdescription>
<para>Set the kinDynComputations object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kinDyn</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a kinDynComputations object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPFixedBaseTSID.h" line="133" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID" kindref="compound">QPFixedBaseTSID</ref> is a concrete class and implements a task space inverse dynamics. </para>
    </briefdescription>
    <detaileddescription>
<para>The TSID is here implemented as Quadratic Programming (QP) problem. The user should set the desired task with the method <ref refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1a78bae44707c00085378c6e1f81be0ed8" kindref="member">QPFixedBaseTSID::addTask</ref>. Each task has a given priority. Currently we support only priority equal to 0 or 1. If the task priority is set to 0 the task will be considered as a hard task, thus treated as a constraint. If the priority is equal to 1 the task will be embedded in the cost function. The class is also able to treat inequality constraints. Note that this class considers just one contact wrench as we assume the external wrench acting on only the base link. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>BipedalLocomotion::System::Source&lt; TSIDState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; TSIDState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::TSID::QPFixedBaseTSID</label>
        <link refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</label>
        <link refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>BipedalLocomotion::System::Source&lt; TSIDState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; TSIDState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::TSID::QPFixedBaseTSID</label>
        <link refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</label>
        <link refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/TSID/QPFixedBaseTSID.h" line="35" column="1" bodyfile="BipedalLocomotion/TSID/QPFixedBaseTSID.h" bodystart="36" bodyend="134"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1a78bae44707c00085378c6e1f81be0ed8" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPFixedBaseTSID</scope><name>addTask</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1ab67015f1d23dd44241d9118a43125d95" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPFixedBaseTSID</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ad4907077d2d2c080166f621c1277560f" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPFixedBaseTSID</scope><name>close</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1ab30128e846c93bcf6cd4ebdf86e0db85" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPFixedBaseTSID</scope><name>finalize</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1af9c485d4b3be985b2c2a79f4d8eeb043" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPFixedBaseTSID</scope><name>getOutput</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1ac6e35d76787370cd38b66db3eca88966" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPFixedBaseTSID</scope><name>getTask</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1a7952098f2454d90169e71e65f7241a5b" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPFixedBaseTSID</scope><name>getTaskNames</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1afd8a4a3f3823189efaee3def7fdfd86f" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPFixedBaseTSID</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a83437d70b7000c155686ca51f7472888" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPFixedBaseTSID</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1a819d5bdc96e87fd5fb7cd475d42f16b5" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPFixedBaseTSID</scope><name>isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1afe34535ba7f72e8f8a8951eb7f57a48a" prot="private" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPFixedBaseTSID</scope><name>m_pimpl</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1af236fbc2dadf10f381326a70934e513f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPFixedBaseTSID</scope><name>Output</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1a45b6c66204b18531b9a120079fa2dcf5" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPFixedBaseTSID</scope><name>QPFixedBaseTSID</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a472624c76d5e02e8ae16991cd77016ce" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPFixedBaseTSID</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ac6f4790829906750f4ed6d87c5776d73" prot="public" virt="pure-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::TSID::QPFixedBaseTSID</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1a1c6714e1c88ef08aa67a62f32691323e" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPFixedBaseTSID</scope><name>setKinDyn</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1aad6d8bb491894542587d0aed95927ea5" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPFixedBaseTSID</scope><name>~QPFixedBaseTSID</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1af67a42286571cd0263af0b22e7b32167" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPFixedBaseTSID</scope><name>~TaskSpaceInverseDynamics</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
