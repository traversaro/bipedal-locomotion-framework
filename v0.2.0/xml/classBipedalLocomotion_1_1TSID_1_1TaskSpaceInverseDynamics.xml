<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1System_1_1Source" prot="public" virt="non-virtual">BipedalLocomotion::System::Source&lt; TSIDState &gt;</basecompoundref>
    <derivedcompoundref refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID" prot="public" virt="non-virtual">BipedalLocomotion::TSID::QPFixedBaseTSID</derivedcompoundref>
    <includes local="no">BipedalLocomotion/TSID/TaskSpaceInverseDynamics.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1a7e8fb52df133f300617042d44eaeb0be" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::TSID::TaskSpaceInverseDynamics::addTask</definition>
        <argsstring>(std::shared_ptr&lt; System::LinearTask &gt; task, const std::string &amp;taskName, std::size_t priority, std::optional&lt; Eigen::Ref&lt; const Eigen::VectorXd &gt;&gt; weight={})=0</argsstring>
        <name>addTask</name>
        <reimplementedby refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1a78bae44707c00085378c6e1f81be0ed8">addTask</reimplementedby>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classBipedalLocomotion_1_1System_1_1LinearTask" kindref="compound">System::LinearTask</ref> &gt;</type>
          <declname>task</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>taskName</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>std::optional&lt; Eigen::Ref&lt; const Eigen::VectorXd &gt;&gt;</type>
          <declname>weight</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Add a linear task in the task space inverse dynamics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a given linear task </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority associated to the task. The lower the number the higher the priority. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Weight associated to the task. This parameter is optional. The default value is an object that does not contain any value. So is an invalid weight. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the task has been added to the fixed base TSID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/TaskSpaceInverseDynamics.h" line="63" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1ad6ad697a02d42805623c75442a57330f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>virtual std::vector&lt;std::string&gt; BipedalLocomotion::TSID::TaskSpaceInverseDynamics::getTaskNames</definition>
        <argsstring>() const =0</argsstring>
        <name>getTaskNames</name>
        <reimplementedby refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1a7952098f2454d90169e71e65f7241a5b">getTaskNames</reimplementedby>
        <briefdescription>
<para>Get a vector containing the name of the tasks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an std::vector containing all the names associated to the tasks </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/TaskSpaceInverseDynamics.h" line="73" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1a18fd7435603d4dc3159db6dfcfa1f664" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::TSID::TaskSpaceInverseDynamics::finalize</definition>
        <argsstring>(const System::VariablesHandler &amp;handler)=0</argsstring>
        <name>finalize</name>
        <reimplementedby refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1ab30128e846c93bcf6cd4ebdf86e0db85">finalize</reimplementedby>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref> &amp;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Finalize the TSID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>You should call this method after you add ALL the tasks. </para>
</simplesect>
<simplesect kind="return"><para>true in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/TaskSpaceInverseDynamics.h" line="81" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1a83ce2f73d9cae6bc9fa5ef27759fd509" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::weak_ptr&lt; <ref refid="classBipedalLocomotion_1_1System_1_1LinearTask" kindref="compound">System::LinearTask</ref> &gt;</type>
        <definition>virtual std::weak_ptr&lt;System::LinearTask&gt; BipedalLocomotion::TSID::TaskSpaceInverseDynamics::getTask</definition>
        <argsstring>(const std::string &amp;name) const =0</argsstring>
        <name>getTask</name>
        <reimplementedby refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1ac6e35d76787370cd38b66db3eca88966">getTask</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get a specific task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name associated to the task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a weak ptr associated to an existing task in the TSID. If the task does not exist a nullptr is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/TaskSpaceInverseDynamics.h" line="89" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1acf21bf3ba478ec6dd28c5da1c76e4362" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::TSID::TaskSpaceInverseDynamics::setKinDyn</definition>
        <argsstring>(std::shared_ptr&lt; iDynTree::KinDynComputations &gt; kinDyn)</argsstring>
        <name>setKinDyn</name>
        <reimplementedby refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID_1a1c6714e1c88ef08aa67a62f32691323e">setKinDyn</reimplementedby>
        <param>
          <type>std::shared_ptr&lt; iDynTree::KinDynComputations &gt;</type>
          <declname>kinDyn</declname>
        </param>
        <briefdescription>
<para>Set the kinDynComputations object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kinDyn</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a kinDynComputations object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This implementation does nothing. </para>
</simplesect>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/TaskSpaceInverseDynamics.h" line="97" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1af67a42286571cd0263af0b22e7b32167" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BipedalLocomotion::TSID::TaskSpaceInverseDynamics::~TaskSpaceInverseDynamics</definition>
        <argsstring>()=default</argsstring>
        <name>~TaskSpaceInverseDynamics</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/TaskSpaceInverseDynamics.h" line="102" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics" kindref="compound">TaskSpaceInverseDynamics</ref> implements the interface for the task space inverse dynamics. </para>
    </briefdescription>
    <detaileddescription>
<para>Please inherit this class if you want to implement your custom Task TSID. The <ref refid="structBipedalLocomotion_1_1TSID_1_1TSIDState" kindref="compound">TSIDState</ref> is a struct containing the joint acceleration, joint torques and contact wrenches. The <ref refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics" kindref="compound">TaskSpaceInverseDynamics</ref> can be used to generate the desired joint torques to be sent to the low-level torque controllers. Here you can find an example of the <ref refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics" kindref="compound">TaskSpaceInverseDynamics</ref> interface. <linebreak/>
 <image type="html" name="https://user-images.githubusercontent.com/43743081/112606007-308f7780-8e18-11eb-875f-d8a7c4b960eb.png" inline="yes"></image>
 </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BipedalLocomotion::System::Source&lt; TSIDState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; TSIDState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::TSID::QPFixedBaseTSID</label>
        <link refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</label>
        <link refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BipedalLocomotion::System::Source&lt; TSIDState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; TSIDState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</label>
        <link refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/TSID/TaskSpaceInverseDynamics.h" line="50" column="1" bodyfile="BipedalLocomotion/TSID/TaskSpaceInverseDynamics.h" bodystart="51" bodyend="103"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1a7e8fb52df133f300617042d44eaeb0be" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</scope><name>addTask</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a67107e46e831d93f572558b541aab6d2" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ad4907077d2d2c080166f621c1277560f" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</scope><name>close</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1a18fd7435603d4dc3159db6dfcfa1f664" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</scope><name>finalize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1acb7101ba6041f23f41c8e57bac66bcf3" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</scope><name>getOutput</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1a83ce2f73d9cae6bc9fa5ef27759fd509" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</scope><name>getTask</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1ad6ad697a02d42805623c75442a57330f" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</scope><name>getTaskNames</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a6db247d3db83217a16e963d01f6bcb77" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a83437d70b7000c155686ca51f7472888" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a8c610311fc29bbf2ef6cde6a979630c9" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</scope><name>isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1af236fbc2dadf10f381326a70934e513f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</scope><name>Output</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a472624c76d5e02e8ae16991cd77016ce" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ac6f4790829906750f4ed6d87c5776d73" prot="public" virt="pure-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1acf21bf3ba478ec6dd28c5da1c76e4362" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</scope><name>setKinDyn</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1af67a42286571cd0263af0b22e7b32167" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</scope><name>~TaskSpaceInverseDynamics</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
